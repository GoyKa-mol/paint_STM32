
paint_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  0800e110  0800e110  0001e110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcdc  0800fcdc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcdc  0800fcdc  0001fcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fce4  0800fce4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fce4  0800fce4  0001fce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fce8  0800fce8  0001fce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800fcec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cf8  200000a8  0800fd94  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008da0  0800fd94  00028da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7f6  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005535  00000000  00000000  0004c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025d8  00000000  00000000  00051e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002340  00000000  00000000  000543e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e27c  00000000  00000000  00056720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f3df  00000000  00000000  0008499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001149d1  00000000  00000000  000a3d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b874c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a324  00000000  00000000  001b87c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e0f8 	.word	0x0800e0f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800e0f8 	.word	0x0800e0f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000c4 	.word	0x200000c4
 8000614:	2000011c 	.word	0x2000011c

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f001 ff18 	bl	8002458 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fed3 	bl	800241c <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fe9d 	bl	800241c <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000031c 	.word	0x2000031c

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fdea 	bl	800241c <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fddc 	bl	800241c <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fdc1 	bl	800241c <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fdb3 	bl	800241c <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000031c 	.word	0x2000031c
 80008f8:	20000320 	.word	0x20000320

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fd66 	bl	80023e8 <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fd52 	bl	80023e8 <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fd43 	bl	800241c <TS_IO_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
      break;
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
      break;
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
      break;
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
      break;
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fcb8 	bl	800241c <TS_IO_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fca8 	bl	800241c <TS_IO_Read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fc9a 	bl	800241c <TS_IO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000031c 	.word	0x2000031c

08000b08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000031c 	.word	0x2000031c

08000b20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b2e:	f001 fc51 	bl	80023d4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000031c 	.word	0x2000031c

08000b40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0ac      	sub	sp, #176	; 0xb0
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
 	char text[50]={};
 8000b62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c febf 	bl	800d8ee <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f003 fdda 	bl	800473e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f96f 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f001 f809 	bl	8001ba4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b92:	f000 fa6d 	bl	8001070 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b96:	f000 fb19 	bl	80011cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b9a:	f000 fb57 	bl	800124c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b9e:	f000 fb95 	bl	80012cc <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba2:	f000 fc15 	bl	80013d0 <MX_RTC_Init>
  MX_SPI2_Init();
 8000ba6:	f000 fcb9 	bl	800151c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000baa:	f000 fcf5 	bl	8001598 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bae:	f000 fd47 	bl	8001640 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb2:	f000 fd93 	bl	80016dc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bb6:	f000 fe1f 	bl	80017f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bba:	f000 fe6b 	bl	8001894 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 ff43 	bl	8001a48 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc2:	f000 ff71 	bl	8001aa8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bc6:	f000 fa01 	bl	8000fcc <MX_ADC1_Init>
  MX_DAC_Init();
 8000bca:	f000 faa3 	bl	8001114 <MX_DAC_Init>
  MX_UART7_Init();
 8000bce:	f000 ff0b 	bl	80019e8 <MX_UART7_Init>
  MX_FMC_Init();
 8000bd2:	f000 ff99 	bl	8001b08 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000bd6:	f000 fac7 	bl	8001168 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000bda:	f001 fc49 	bl	8002470 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bde:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be2:	2000      	movs	r0, #0
 8000be4:	f001 fcdc 	bl	80025a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000be8:	f001 fcb2 	bl	8002550 <BSP_LCD_GetXSize>
 8000bec:	4604      	mov	r4, r0
 8000bee:	f001 fcc3 	bl	8002578 <BSP_LCD_GetYSize>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	fb03 f304 	mul.w	r3, r3, r4
 8000bf8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	f001 fccd 	bl	80025a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c06:	f002 f92d 	bl	8002e64 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f001 fd28 	bl	8002660 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f001 fda8 	bl	8002768 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font24);
 8000c18:	4881      	ldr	r0, [pc, #516]	; (8000e20 <main+0x2c4>)
 8000c1a:	f001 fd75 	bl	8002708 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000c1e:	4881      	ldr	r0, [pc, #516]	; (8000e24 <main+0x2c8>)
 8000c20:	f001 fd40 	bl	80026a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f001 fd54 	bl	80026d4 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c2c:	f001 fc90 	bl	8002550 <BSP_LCD_GetXSize>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29c      	uxth	r4, r3
 8000c34:	f001 fca0 	bl	8002578 <BSP_LCD_GetYSize>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f002 fcde 	bl	8003600 <BSP_TS_Init>
  HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4978      	ldr	r1, [pc, #480]	; (8000e28 <main+0x2cc>)
 8000c48:	4878      	ldr	r0, [pc, #480]	; (8000e2c <main+0x2d0>)
 8000c4a:	f009 fbd7 	bl	800a3fc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c52:	2300      	movs	r3, #0
 8000c54:	653b      	str	r3, [r7, #80]	; 0x50
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
 8000c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00a fc47 	bl	800b4ee <osMutexCreate>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b73      	ldr	r3, [pc, #460]	; (8000e30 <main+0x2d4>)
 8000c64:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueUART */
  osMessageQDef(myQueueUART, 16, uint8_t);
 8000c66:	4b73      	ldr	r3, [pc, #460]	; (8000e34 <main+0x2d8>)
 8000c68:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueUARTHandle = osMessageCreate(osMessageQ(myQueueUART), NULL);
 8000c72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00a fc50 	bl	800b51e <osMessageCreate>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	4b6d      	ldr	r3, [pc, #436]	; (8000e38 <main+0x2dc>)
 8000c82:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c84:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <main+0x2e0>)
 8000c86:	f107 0420 	add.w	r4, r7, #32
 8000c8a:	461d      	mov	r5, r3
 8000c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a fbc5 	bl	800b42e <osThreadCreate>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <main+0x2e4>)
 8000ca8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mode */
  osThreadDef(Mode, StartMode, osPriorityIdle, 0, 512);
 8000caa:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <main+0x2e8>)
 8000cac:	1d3c      	adds	r4, r7, #4
 8000cae:	461d      	mov	r5, r3
 8000cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModeHandle = osThreadCreate(osThread(Mode), NULL);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f00a fbb4 	bl	800b42e <osThreadCreate>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b5f      	ldr	r3, [pc, #380]	; (8000e48 <main+0x2ec>)
 8000cca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ccc:	f00a fba8 	bl	800b420 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	485d      	ldr	r0, [pc, #372]	; (8000e4c <main+0x2f0>)
 8000cd6:	f005 fa29 	bl	800612c <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	485b      	ldr	r0, [pc, #364]	; (8000e50 <main+0x2f4>)
 8000ce4:	f005 fa3a 	bl	800615c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	4857      	ldr	r0, [pc, #348]	; (8000e4c <main+0x2f0>)
 8000cee:	f005 fa1d 	bl	800612c <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4856      	ldr	r0, [pc, #344]	; (8000e54 <main+0x2f8>)
 8000cfa:	f005 fa2f 	bl	800615c <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	4852      	ldr	r0, [pc, #328]	; (8000e4c <main+0x2f0>)
 8000d04:	f005 fa12 	bl	800612c <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d10:	4951      	ldr	r1, [pc, #324]	; (8000e58 <main+0x2fc>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00c fdf4 	bl	800d900 <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f001 fe52 	bl	80029c8 <BSP_LCD_DisplayStringAtLine>

	  sConfig.Channel = ADC_CHANNEL_6;
 8000d24:	2306      	movs	r3, #6
 8000d26:	657b      	str	r3, [r7, #84]	; 0x54
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	484b      	ldr	r0, [pc, #300]	; (8000e5c <main+0x300>)
 8000d30:	f003 feea 	bl	8004b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d34:	4849      	ldr	r0, [pc, #292]	; (8000e5c <main+0x300>)
 8000d36:	f003 fd95 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d3a:	bf00      	nop
 8000d3c:	2164      	movs	r1, #100	; 0x64
 8000d3e:	4847      	ldr	r0, [pc, #284]	; (8000e5c <main+0x300>)
 8000d40:	f003 fe50 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f8      	bne.n	8000d3c <main+0x1e0>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000d4a:	4844      	ldr	r0, [pc, #272]	; (8000e5c <main+0x300>)
 8000d4c:	f003 fece 	bl	8004aec <HAL_ADC_GetValue>
 8000d50:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	  sConfig.Channel = ADC_CHANNEL_7;
 8000d54:	2307      	movs	r3, #7
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	483f      	ldr	r0, [pc, #252]	; (8000e5c <main+0x300>)
 8000d60:	f003 fed2 	bl	8004b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d64:	483d      	ldr	r0, [pc, #244]	; (8000e5c <main+0x300>)
 8000d66:	f003 fd7d 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d6a:	bf00      	nop
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	483b      	ldr	r0, [pc, #236]	; (8000e5c <main+0x300>)
 8000d70:	f003 fe38 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f8      	bne.n	8000d6c <main+0x210>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000d7a:	4838      	ldr	r0, [pc, #224]	; (8000e5c <main+0x300>)
 8000d7c:	f003 feb6 	bl	8004aec <HAL_ADC_GetValue>
 8000d80:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	  sConfig.Channel = ADC_CHANNEL_8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	657b      	str	r3, [r7, #84]	; 0x54
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4833      	ldr	r0, [pc, #204]	; (8000e5c <main+0x300>)
 8000d90:	f003 feba 	bl	8004b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d94:	4831      	ldr	r0, [pc, #196]	; (8000e5c <main+0x300>)
 8000d96:	f003 fd65 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d9a:	bf00      	nop
 8000d9c:	2164      	movs	r1, #100	; 0x64
 8000d9e:	482f      	ldr	r0, [pc, #188]	; (8000e5c <main+0x300>)
 8000da0:	f003 fe20 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f8      	bne.n	8000d9c <main+0x240>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000daa:	482c      	ldr	r0, [pc, #176]	; (8000e5c <main+0x300>)
 8000dac:	f003 fe9e 	bl	8004aec <HAL_ADC_GetValue>
 8000db0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

	  HAL_ADC_Start(&hadc1);
 8000db4:	482a      	ldr	r0, [pc, #168]	; (8000e60 <main+0x304>)
 8000db6:	f003 fd55 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000dba:	bf00      	nop
 8000dbc:	2164      	movs	r1, #100	; 0x64
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <main+0x304>)
 8000dc0:	f003 fe10 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f8      	bne.n	8000dbc <main+0x260>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000dca:	4825      	ldr	r0, [pc, #148]	; (8000e60 <main+0x304>)
 8000dcc:	f003 fe8e 	bl	8004aec <HAL_ADC_GetValue>
 8000dd0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000dd4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000de8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000dec:	491d      	ldr	r1, [pc, #116]	; (8000e64 <main+0x308>)
 8000dee:	f00c fd87 	bl	800d900 <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000df2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df6:	4619      	mov	r1, r3
 8000df8:	2009      	movs	r0, #9
 8000dfa:	f001 fde5 	bl	80029c8 <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <main+0x30c>)
 8000e00:	f002 fc3e 	bl	8003680 <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <main+0x30c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f43f af61 	beq.w	8000cd0 <main+0x174>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <main+0x30c>)
 8000e10:	8858      	ldrh	r0, [r3, #2]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <main+0x30c>)
 8000e14:	899b      	ldrh	r3, [r3, #12]
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f001 ff83 	bl	8002d24 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e1e:	e757      	b.n	8000cd0 <main+0x174>
 8000e20:	20000028 	.word	0x20000028
 8000e24:	ff0000ff 	.word	0xff0000ff
 8000e28:	20008c70 	.word	0x20008c70
 8000e2c:	20008a44 	.word	0x20008a44
 8000e30:	20008884 	.word	0x20008884
 8000e34:	0800e14c 	.word	0x0800e14c
 8000e38:	20008908 	.word	0x20008908
 8000e3c:	0800e168 	.word	0x0800e168
 8000e40:	200086c4 	.word	0x200086c4
 8000e44:	0800e18c 	.word	0x0800e18c
 8000e48:	20008c6c 	.word	0x20008c6c
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40021c00 	.word	0x40021c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	0800e110 	.word	0x0800e110
 8000e5c:	200089fc 	.word	0x200089fc
 8000e60:	200089b4 	.word	0x200089b4
 8000e64:	0800e11c 	.word	0x0800e11c
 8000e68:	20000324 	.word	0x20000324

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b4      	sub	sp, #208	; 0xd0
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e76:	2230      	movs	r2, #48	; 0x30
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00c fd37 	bl	800d8ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2284      	movs	r2, #132	; 0x84
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00c fd28 	bl	800d8ee <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e9e:	f006 fad5 	bl	800744c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <SystemClock_Config+0x154>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <SystemClock_Config+0x154>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <SystemClock_Config+0x154>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <SystemClock_Config+0x158>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <SystemClock_Config+0x158>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <SystemClock_Config+0x158>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ef4:	2319      	movs	r3, #25
 8000ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000efa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f08:	2309      	movs	r3, #9
 8000f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 fafa 	bl	800750c <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f1e:	f001 f8ff 	bl	8002120 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f22:	f006 faa3 	bl	800746c <HAL_PWREx_EnableOverDrive>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f2c:	f001 f8f8 	bl	8002120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000f52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f56:	2106      	movs	r1, #6
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fd7b 	bl	8007a54 <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000f64:	f001 f8dc 	bl	8002120 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <SystemClock_Config+0x15c>)
 8000f6a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000f6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000f92:	2300      	movs	r3, #0
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 ff58 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000fb2:	f001 f8b5 	bl	8002120 <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	37d0      	adds	r7, #208	; 0xd0
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	00015868 	.word	0x00015868

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f003 fbd5 	bl	80047dc <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f001 f872 	bl	8002120 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 fd5b 	bl	8004b08 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f001 f862 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200089b4 	.word	0x200089b4
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC3_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_ADC3_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC3_Init+0x98>)
 800108a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ADC3_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC3_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_ADC3_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC3_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC3_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_ADC3_Init+0x98>)
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC3_Init+0xa0>)
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC3_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_ADC3_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_ADC3_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC3_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_ADC3_Init+0x98>)
 80010d2:	f003 fb83 	bl	80047dc <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80010dc:	f001 f820 	bl	8002120 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010e0:	2306      	movs	r3, #6
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_ADC3_Init+0x98>)
 80010f2:	f003 fd09 	bl	8004b08 <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010fc:	f001 f810 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200089fc 	.word	0x200089fc
 800110c:	40012200 	.word	0x40012200
 8001110:	0f000001 	.word	0x0f000001

08001114 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_DAC_Init+0x4c>)
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <MX_DAC_Init+0x50>)
 8001126:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_DAC_Init+0x4c>)
 800112a:	f004 f813 	bl	8005154 <HAL_DAC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001134:	f000 fff4 	bl	8002120 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_DAC_Init+0x4c>)
 8001148:	f004 f87a 	bl	8005240 <HAL_DAC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001152:	f000 ffe5 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20008ac4 	.word	0x20008ac4
 8001164:	40007400 	.word	0x40007400

08001168 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <MX_DMA2D_Init+0x60>)
 8001170:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800119e:	f004 fa85 	bl	80056ac <HAL_DMA2D_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011a8:	f000 ffba 	bl	8002120 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011ac:	2101      	movs	r1, #1
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 80011b0:	f004 fbda 	bl	8005968 <HAL_DMA2D_ConfigLayer>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80011ba:	f000 ffb1 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20008bb8 	.word	0x20008bb8
 80011c8:	4002b000 	.word	0x4002b000

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f004 ffc2 	bl	8006190 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f000 ff85 	bl	8002120 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f005 fcd1 	bl	8006bc0 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f000 ff7c 	bl	8002120 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f005 fd13 	bl	8006c56 <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 ff73 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20008838 	.word	0x20008838
 8001244:	40005400 	.word	0x40005400
 8001248:	00c0eaff 	.word	0x00c0eaff

0800124c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_I2C3_Init+0x7c>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_I2C3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001288:	f004 ff82 	bl	8006190 <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001292:	f000 ff45 	bl	8002120 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <MX_I2C3_Init+0x74>)
 800129a:	f005 fc91 	bl	8006bc0 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 ff3c 	bl	8002120 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012a8:	2100      	movs	r1, #0
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_I2C3_Init+0x74>)
 80012ac:	f005 fcd3 	bl	8006c56 <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 ff33 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200086c8 	.word	0x200086c8
 80012c4:	40005c00 	.word	0x40005c00
 80012c8:	00c0eaff 	.word	0x00c0eaff

080012cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2234      	movs	r2, #52	; 0x34
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00c fb08 	bl	800d8ee <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012e0:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <MX_LTDC_Init+0x100>)
 80012e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012e4:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012fe:	2228      	movs	r2, #40	; 0x28
 8001300:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001304:	2209      	movs	r2, #9
 8001306:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800130a:	2235      	movs	r2, #53	; 0x35
 800130c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001310:	220b      	movs	r2, #11
 8001312:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001316:	f240 2215 	movw	r2, #533	; 0x215
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800131e:	f240 121b 	movw	r2, #283	; 0x11b
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001326:	f240 2235 	movw	r2, #565	; 0x235
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800132e:	f240 121d 	movw	r2, #285	; 0x11d
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800134e:	f005 fccf 	bl	8006cf0 <HAL_LTDC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001358:	f000 fee2 	bl	8002120 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001360:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001364:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800136a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800136e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001370:	2302      	movs	r3, #2
 8001372:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001374:	23ff      	movs	r3, #255	; 0xff
 8001376:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800137c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001380:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001386:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800138c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001392:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80013b2:	f005 fe2f 	bl	8007014 <HAL_LTDC_ConfigLayer>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80013bc:	f000 feb0 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000890c 	.word	0x2000890c
 80013cc:	40016800 	.word	0x40016800

080013d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b092      	sub	sp, #72	; 0x48
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	222c      	movs	r2, #44	; 0x2c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00c fa7b 	bl	800d8ee <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <MX_RTC_Init+0x144>)
 80013fa:	4a47      	ldr	r2, [pc, #284]	; (8001518 <MX_RTC_Init+0x148>)
 80013fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013fe:	4b45      	ldr	r3, [pc, #276]	; (8001514 <MX_RTC_Init+0x144>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <MX_RTC_Init+0x144>)
 8001406:	227f      	movs	r2, #127	; 0x7f
 8001408:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800140a:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MX_RTC_Init+0x144>)
 800140c:	22ff      	movs	r2, #255	; 0xff
 800140e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <MX_RTC_Init+0x144>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <MX_RTC_Init+0x144>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <MX_RTC_Init+0x144>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001422:	483c      	ldr	r0, [pc, #240]	; (8001514 <MX_RTC_Init+0x144>)
 8001424:	f007 f908 	bl	8008638 <HAL_RTC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800142e:	f000 fe77 	bl	8002120 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800144c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	482f      	ldr	r0, [pc, #188]	; (8001514 <MX_RTC_Init+0x144>)
 8001456:	f007 f96b 	bl	8008730 <HAL_RTC_SetTime>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001460:	f000 fe5e 	bl	8002120 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001464:	2301      	movs	r3, #1
 8001466:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800147c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	4823      	ldr	r0, [pc, #140]	; (8001514 <MX_RTC_Init+0x144>)
 8001486:	f007 fa11 	bl	80088ac <HAL_RTC_SetDate>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001490:	f000 fe46 	bl	8002120 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001494:	2300      	movs	r3, #0
 8001496:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001498:	2300      	movs	r3, #0
 800149a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800149c:	2300      	movs	r3, #0
 800149e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80014be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <MX_RTC_Init+0x144>)
 80014cc:	f007 fa96 	bl	80089fc <HAL_RTC_SetAlarm>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80014d6:	f000 fe23 	bl	8002120 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80014da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	2201      	movs	r2, #1
 80014e4:	4619      	mov	r1, r3
 80014e6:	480b      	ldr	r0, [pc, #44]	; (8001514 <MX_RTC_Init+0x144>)
 80014e8:	f007 fa88 	bl	80089fc <HAL_RTC_SetAlarm>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80014f2:	f000 fe15 	bl	8002120 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80014f6:	2202      	movs	r2, #2
 80014f8:	2100      	movs	r1, #0
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_RTC_Init+0x144>)
 80014fc:	f007 fc08 	bl	8008d10 <HAL_RTCEx_SetTimeStamp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001506:	f000 fe0b 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3748      	adds	r7, #72	; 0x48
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20008ad8 	.word	0x20008ad8
 8001518:	40002800 	.word	0x40002800

0800151c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_SPI2_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_SPI2_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_SPI2_Init+0x74>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_SPI2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_SPI2_Init+0x74>)
 8001536:	f44f 7240 	mov.w	r2, #768	; 0x300
 800153a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_SPI2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_SPI2_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_SPI2_Init+0x74>)
 800154a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800154e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_SPI2_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_SPI2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_SPI2_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_SPI2_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_SPI2_Init+0x74>)
 800156a:	2207      	movs	r2, #7
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_SPI2_Init+0x74>)
 8001576:	2208      	movs	r2, #8
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_SPI2_Init+0x74>)
 800157c:	f007 fc9d 	bl	8008eba <HAL_SPI_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001586:	f000 fdcb 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20008714 	.word	0x20008714
 8001594:	40003800 	.word	0x40003800

08001598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015b8:	4a20      	ldr	r2, [pc, #128]	; (800163c <MX_TIM1_Init+0xa4>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015e4:	f007 fcfb 	bl	8008fde <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015ee:	f000 fd97 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_TIM1_Init+0xa0>)
 8001600:	f007 ffae 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800160a:	f000 fd89 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_TIM1_Init+0xa0>)
 8001620:	f008 fce2 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800162a:	f000 fd79 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20008af8 	.word	0x20008af8
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM2_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_TIM2_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001688:	f007 fca9 	bl	8008fde <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001692:	f000 fd45 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM2_Init+0x98>)
 80016a4:	f007 ff5c 	bl	8009560 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ae:	f000 fd37 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM2_Init+0x98>)
 80016c0:	f008 fc92 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ca:	f000 fd29 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20008bf8 	.word	0x20008bf8

080016dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	; 0x50
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001720:	4a34      	ldr	r2, [pc, #208]	; (80017f4 <MX_TIM3_Init+0x118>)
 8001722:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <MX_TIM3_Init+0x114>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_TIM3_Init+0x114>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001744:	482a      	ldr	r0, [pc, #168]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001746:	f007 fc4a 	bl	8008fde <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001750:	f000 fce6 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800175a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175e:	4619      	mov	r1, r3
 8001760:	4823      	ldr	r0, [pc, #140]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001762:	f007 fefd 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800176c:	f000 fcd8 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001772:	f007 fc89 	bl	8009088 <HAL_TIM_PWM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 800177c:	f000 fcd0 	bl	8002120 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178c:	4619      	mov	r1, r3
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001790:	f007 ffa0 	bl	80096d4 <HAL_TIM_SlaveConfigSynchro>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800179a:	f000 fcc1 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <MX_TIM3_Init+0x114>)
 80017ae:	f008 fc1b 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80017b8:	f000 fcb2 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_TIM3_Init+0x114>)
 80017d4:	f007 fdac 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80017de:	f000 fc9f 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <MX_TIM3_Init+0x114>)
 80017e4:	f002 fce0 	bl	80041a8 <HAL_TIM_MspPostInit>

}
 80017e8:	bf00      	nop
 80017ea:	3750      	adds	r7, #80	; 0x50
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200088c8 	.word	0x200088c8
 80017f4:	40000400 	.word	0x40000400

080017f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM5_Init+0x94>)
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <MX_TIM5_Init+0x98>)
 800181a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM5_Init+0x94>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM5_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM5_Init+0x94>)
 800182a:	f04f 32ff 	mov.w	r2, #4294967295
 800182e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM5_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM5_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_TIM5_Init+0x94>)
 800183e:	f007 fbce 	bl	8008fde <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001848:	f000 fc6a 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_TIM5_Init+0x94>)
 800185a:	f007 fe81 	bl	8009560 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001864:	f000 fc5c 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM5_Init+0x94>)
 8001876:	f008 fbb7 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 fc4e 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20008888 	.word	0x20008888
 8001890:	40000c00 	.word	0x40000c00

08001894 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09a      	sub	sp, #104	; 0x68
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	222c      	movs	r2, #44	; 0x2c
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c f80d 	bl	800d8ee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018d6:	4a43      	ldr	r2, [pc, #268]	; (80019e4 <MX_TIM8_Init+0x150>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001900:	4837      	ldr	r0, [pc, #220]	; (80019e0 <MX_TIM8_Init+0x14c>)
 8001902:	f007 fb6c 	bl	8008fde <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800190c:	f000 fc08 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800191a:	4619      	mov	r1, r3
 800191c:	4830      	ldr	r0, [pc, #192]	; (80019e0 <MX_TIM8_Init+0x14c>)
 800191e:	f007 fe1f 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001928:	f000 fbfa 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800192c:	482c      	ldr	r0, [pc, #176]	; (80019e0 <MX_TIM8_Init+0x14c>)
 800192e:	f007 fbab 	bl	8009088 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001938:	f000 fbf2 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800194c:	4619      	mov	r1, r3
 800194e:	4824      	ldr	r0, [pc, #144]	; (80019e0 <MX_TIM8_Init+0x14c>)
 8001950:	f008 fb4a 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800195a:	f000 fbe1 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	2360      	movs	r3, #96	; 0x60
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001966:	2300      	movs	r3, #0
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	220c      	movs	r2, #12
 800197c:	4619      	mov	r1, r3
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM8_Init+0x14c>)
 8001980:	f007 fcd6 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800198a:	f000 fbc9 	bl	8002120 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80019c4:	f008 fb9e 	bl	800a104 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80019ce:	f000 fba7 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80019d4:	f002 fbe8 	bl	80041a8 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3768      	adds	r7, #104	; 0x68
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200087f8 	.word	0x200087f8
 80019e4:	40010400 	.word	0x40010400

080019e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_UART7_Init+0x58>)
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <MX_UART7_Init+0x5c>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_UART7_Init+0x58>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_UART7_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a2c:	f008 fc06 	bl	800a23c <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001a36:	f000 fb73 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20008778 	.word	0x20008778
 8001a44:	40007800 	.word	0x40007800

08001a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <MX_USART1_UART_Init+0x5c>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a8c:	f008 fbd6 	bl	800a23c <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a96:	f000 fb43 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20008a44 	.word	0x20008a44
 8001aa4:	40011000 	.word	0x40011000

08001aa8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <MX_USART6_UART_Init+0x5c>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001aec:	f008 fba6 	bl	800a23c <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001af6:	f000 fb13 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20008b38 	.word	0x20008b38
 8001b04:	40011400 	.word	0x40011400

08001b08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <MX_FMC_Init+0x98>)
 8001b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001b62:	2310      	movs	r3, #16
 8001b64:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001b66:	2310      	movs	r3, #16
 8001b68:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001b6e:	2310      	movs	r3, #16
 8001b70:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001b72:	2310      	movs	r3, #16
 8001b74:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001b76:	2310      	movs	r3, #16
 8001b78:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b84:	f007 f91a 	bl	8008dbc <HAL_SDRAM_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001b8e:	f000 fac7 	bl	8002120 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20008c38 	.word	0x20008c38
 8001ba0:	a0000140 	.word	0xa0000140

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b090      	sub	sp, #64	; 0x40
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bba:	4bb0      	ldr	r3, [pc, #704]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4aaf      	ldr	r2, [pc, #700]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bc0:	f043 0310 	orr.w	r3, r3, #16
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4bad      	ldr	r3, [pc, #692]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4baa      	ldr	r3, [pc, #680]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4aa9      	ldr	r2, [pc, #676]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4ba7      	ldr	r3, [pc, #668]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4ba4      	ldr	r3, [pc, #656]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4aa3      	ldr	r2, [pc, #652]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c02:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a9d      	ldr	r2, [pc, #628]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b9b      	ldr	r3, [pc, #620]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c1a:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a97      	ldr	r2, [pc, #604]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a91      	ldr	r2, [pc, #580]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a8b      	ldr	r2, [pc, #556]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c62:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a85      	ldr	r2, [pc, #532]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2160      	movs	r1, #96	; 0x60
 8001cc6:	486e      	ldr	r0, [pc, #440]	; (8001e80 <MX_GPIO_Init+0x2dc>)
 8001cc8:	f004 fa48 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2120      	movs	r1, #32
 8001cd0:	486c      	ldr	r0, [pc, #432]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001cd2:	f004 fa43 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2108      	movs	r1, #8
 8001cda:	486a      	ldr	r0, [pc, #424]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001cdc:	f004 fa3e 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	4868      	ldr	r0, [pc, #416]	; (8001e88 <MX_GPIO_Init+0x2e4>)
 8001ce6:	f004 fa39 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2108      	movs	r1, #8
 8001cee:	4867      	ldr	r0, [pc, #412]	; (8001e8c <MX_GPIO_Init+0x2e8>)
 8001cf0:	f004 fa34 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4863      	ldr	r0, [pc, #396]	; (8001e88 <MX_GPIO_Init+0x2e4>)
 8001cfc:	f004 fa2e 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d00:	2200      	movs	r2, #0
 8001d02:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001d06:	4862      	ldr	r0, [pc, #392]	; (8001e90 <MX_GPIO_Init+0x2ec>)
 8001d08:	f004 fa28 	bl	800615c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2108      	movs	r1, #8
 8001d10:	4860      	ldr	r0, [pc, #384]	; (8001e94 <MX_GPIO_Init+0x2f0>)
 8001d12:	f004 fa23 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d16:	2308      	movs	r3, #8
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4855      	ldr	r0, [pc, #340]	; (8001e80 <MX_GPIO_Init+0x2dc>)
 8001d2a:	f003 ff4b 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001d2e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d40:	230a      	movs	r3, #10
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4853      	ldr	r0, [pc, #332]	; (8001e98 <MX_GPIO_Init+0x2f4>)
 8001d4c:	f003 ff3a 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001d50:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	484d      	ldr	r0, [pc, #308]	; (8001e9c <MX_GPIO_Init+0x2f8>)
 8001d66:	f003 ff2d 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001d6a:	2360      	movs	r3, #96	; 0x60
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	483f      	ldr	r0, [pc, #252]	; (8001e80 <MX_GPIO_Init+0x2dc>)
 8001d82:	f003 ff1f 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4841      	ldr	r0, [pc, #260]	; (8001ea0 <MX_GPIO_Init+0x2fc>)
 8001d9c:	f003 ff12 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001da0:	2340      	movs	r3, #64	; 0x40
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <MX_GPIO_Init+0x300>)
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001db4:	f003 ff06 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001db8:	2328      	movs	r3, #40	; 0x28
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482d      	ldr	r0, [pc, #180]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001dd0:	f003 fef8 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001dd4:	f241 0308 	movw	r3, #4104	; 0x1008
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4826      	ldr	r0, [pc, #152]	; (8001e88 <MX_GPIO_Init+0x2e4>)
 8001dee:	f003 fee9 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4828      	ldr	r0, [pc, #160]	; (8001ea8 <MX_GPIO_Init+0x304>)
 8001e08:	f003 fedc 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	4619      	mov	r1, r3
 8001e22:	481a      	ldr	r0, [pc, #104]	; (8001e8c <MX_GPIO_Init+0x2e8>)
 8001e24:	f003 fece 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e28:	2310      	movs	r3, #16
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001e3c:	f003 fec2 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e40:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <MX_GPIO_Init+0x2ec>)
 8001e56:	f003 feb5 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001e5a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_GPIO_Init+0x2ec>)
 8001e74:	f003 fea6 	bl	8005bc4 <HAL_GPIO_Init>
 8001e78:	e018      	b.n	8001eac <MX_GPIO_Init+0x308>
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40022800 	.word	0x40022800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40021800 	.word	0x40021800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40022400 	.word	0x40022400
 8001ea4:	10120000 	.word	0x10120000
 8001ea8:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <MX_GPIO_Init+0x3c0>)
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4829      	ldr	r0, [pc, #164]	; (8001f68 <MX_GPIO_Init+0x3c4>)
 8001ec2:	f003 fe7f 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4822      	ldr	r0, [pc, #136]	; (8001f6c <MX_GPIO_Init+0x3c8>)
 8001ee2:	f003 fe6f 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001ee6:	2384      	movs	r3, #132	; 0x84
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481d      	ldr	r0, [pc, #116]	; (8001f70 <MX_GPIO_Init+0x3cc>)
 8001efa:	f003 fe63 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001efe:	2305      	movs	r3, #5
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f0e:	230a      	movs	r3, #10
 8001f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4816      	ldr	r0, [pc, #88]	; (8001f74 <MX_GPIO_Init+0x3d0>)
 8001f1a:	f003 fe53 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f32:	4619      	mov	r1, r3
 8001f34:	480e      	ldr	r0, [pc, #56]	; (8001f70 <MX_GPIO_Init+0x3cc>)
 8001f36:	f003 fe45 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f3a:	2328      	movs	r3, #40	; 0x28
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	4808      	ldr	r0, [pc, #32]	; (8001f78 <MX_GPIO_Init+0x3d4>)
 8001f56:	f003 fe35 	bl	8005bc4 <HAL_GPIO_Init>

}
 8001f5a:	bf00      	nop
 8001f5c:	3740      	adds	r7, #64	; 0x40
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	10120000 	.word	0x10120000
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021c00 	.word	0x40021c00
 8001f70:	40021800 	.word	0x40021800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
uint8_t Message;
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 8001f84:	2201      	movs	r2, #1
 8001f86:	2120      	movs	r1, #32
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <HAL_UART_RxCpltCallback+0x44>)
 8001f8a:	f004 f8e7 	bl	800615c <HAL_GPIO_WritePin>
HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <HAL_UART_RxCpltCallback+0x48>)
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <HAL_UART_RxCpltCallback+0x4c>)
 8001f94:	f008 fa32 	bl	800a3fc <HAL_UART_Receive_IT>
Message = rxbuffer[0];
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_UART_RxCpltCallback+0x48>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	73fb      	strb	r3, [r7, #15]
xQueueSendFromISR(myQueueUARTHandle, &Message, 0);
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_UART_RxCpltCallback+0x50>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f107 010f 	add.w	r1, r7, #15
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f009 fe2b 	bl	800bc04 <xQueueGenericSendFromISR>
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <HAL_UART_RxCpltCallback+0x44>)
 8001fb4:	f004 f8d2 	bl	800615c <HAL_GPIO_WritePin>
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	20008c70 	.word	0x20008c70
 8001fc8:	20008a44 	.word	0x20008a44
 8001fcc:	20008908 	.word	0x20008908

08001fd0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f009 fa74 	bl	800b4c6 <osDelay>
 8001fde:	e7fb      	b.n	8001fd8 <StartDefaultTask+0x8>

08001fe0 <StartMode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMode */
void StartMode(void const * argument)
{
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMode */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 8001fe8:	f00a fc00 	bl	800c7ec <xTaskGetTickCount>
 8001fec:	4603      	mov	r3, r0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  static TS_StateTypeDef  TS_State;
  char etat = 'p';
 8001ff0:	2370      	movs	r3, #112	; 0x70
 8001ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  char layer = '0';
 8001ff6:	2330      	movs	r3, #48	; 0x30
 8001ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  char message_layer[] = "selectionner le layer (1 ou 2)";
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <StartMode+0x108>)
 8001ffe:	f107 0408 	add.w	r4, r7, #8
 8002002:	461d      	mov	r5, r3
 8002004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002008:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800200c:	c407      	stmia	r4!, {r0, r1, r2}
 800200e:	8023      	strh	r3, [r4, #0]
 8002010:	3402      	adds	r4, #2
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	7023      	strb	r3, [r4, #0]
  BSP_LCD_SetTransparency(1, 0x00);
 8002016:	2100      	movs	r1, #0
 8002018:	2001      	movs	r0, #1
 800201a:	f000 fb31 	bl	8002680 <BSP_LCD_SetTransparency>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800201e:	f04f 30ff 	mov.w	r0, #4294967295
 8002022:	f000 fba1 	bl	8002768 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002026:	4831      	ldr	r0, [pc, #196]	; (80020ec <StartMode+0x10c>)
 8002028:	f000 fb3c 	bl	80026a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetTransparency(1, 0x00);
 800202c:	2100      	movs	r1, #0
 800202e:	2001      	movs	r0, #1
 8002030:	f000 fb26 	bl	8002680 <BSP_LCD_SetTransparency>
  for(;;)
  {
	  xQueueReceive(myQueueUARTHandle, &etat, 25);
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <StartMode+0x110>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800203c:	2219      	movs	r2, #25
 800203e:	4618      	mov	r0, r3
 8002040:	f009 fe7c 	bl	800bd3c <xQueueReceive>
	  switch(etat)
 8002044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002048:	2b6c      	cmp	r3, #108	; 0x6c
 800204a:	d011      	beq.n	8002070 <StartMode+0x90>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d143      	bne.n	80020d8 <StartMode+0xf8>
	  {
	  case 'p' :
		  BSP_TS_GetState(&TS_State);
 8002050:	4828      	ldr	r0, [pc, #160]	; (80020f4 <StartMode+0x114>)
 8002052:	f001 fb15 	bl	8003680 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <StartMode+0x114>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03b      	beq.n	80020d6 <StartMode+0xf6>
		  {
			  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],20);
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <StartMode+0x114>)
 8002060:	8858      	ldrh	r0, [r3, #2]
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <StartMode+0x114>)
 8002064:	899b      	ldrh	r3, [r3, #12]
 8002066:	2214      	movs	r2, #20
 8002068:	4619      	mov	r1, r3
 800206a:	f000 fe5b 	bl	8002d24 <BSP_LCD_FillCircle>
		  }
		  break;
 800206e:	e032      	b.n	80020d6 <StartMode+0xf6>
	  case 'l' :
		  HAL_UART_Transmit(&huart1, message_layer, 31, 10);
 8002070:	f107 0108 	add.w	r1, r7, #8
 8002074:	230a      	movs	r3, #10
 8002076:	221f      	movs	r2, #31
 8002078:	481f      	ldr	r0, [pc, #124]	; (80020f8 <StartMode+0x118>)
 800207a:	f008 f92d 	bl	800a2d8 <HAL_UART_Transmit>
		  xQueueReceive(myQueueUARTHandle, &layer, 2000);
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <StartMode+0x110>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8002086:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800208a:	4618      	mov	r0, r3
 800208c:	f009 fe56 	bl	800bd3c <xQueueReceive>
		  layer = layer - 48;
 8002090:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002094:	3b30      	subs	r3, #48	; 0x30
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		  if(layer==0)
 800209c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <StartMode+0xd4>
		  {
			  BSP_LCD_SelectLayer(layer);
 80020a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fad9 	bl	8002660 <BSP_LCD_SelectLayer>
			  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020ae:	480f      	ldr	r0, [pc, #60]	; (80020ec <StartMode+0x10c>)
 80020b0:	f000 faf8 	bl	80026a4 <BSP_LCD_SetTextColor>
		  }
		  if(layer==1)
 80020b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <StartMode+0xee>
		  {
			  BSP_LCD_SelectLayer(layer);
 80020bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 facd 	bl	8002660 <BSP_LCD_SelectLayer>
			  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80020c6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80020ca:	f000 faeb 	bl	80026a4 <BSP_LCD_SetTextColor>
		  }
		  etat = 'p';
 80020ce:	2370      	movs	r3, #112	; 0x70
 80020d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020d4:	e000      	b.n	80020d8 <StartMode+0xf8>
		  break;
 80020d6:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 80020d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020dc:	2164      	movs	r1, #100	; 0x64
 80020de:	4618      	mov	r0, r3
 80020e0:	f00a f9c0 	bl	800c464 <vTaskDelayUntil>
	  xQueueReceive(myQueueUARTHandle, &etat, 25);
 80020e4:	e7a6      	b.n	8002034 <StartMode+0x54>
 80020e6:	bf00      	nop
 80020e8:	0800e1a8 	.word	0x0800e1a8
 80020ec:	ffff0000 	.word	0xffff0000
 80020f0:	20008908 	.word	0x20008908
 80020f4:	20000350 	.word	0x20000350
 80020f8:	20008a44 	.word	0x20008a44

080020fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800210e:	f002 fb23 	bl	8004758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40001000 	.word	0x40001000

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002126:	e7fe      	b.n	8002126 <Error_Handler+0x6>

08002128 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a51      	ldr	r2, [pc, #324]	; (8002278 <I2Cx_MspInit+0x150>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d14d      	bne.n	80021d4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <I2Cx_MspInit+0x154>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a4f      	ldr	r2, [pc, #316]	; (800227c <I2Cx_MspInit+0x154>)
 800213e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b4d      	ldr	r3, [pc, #308]	; (800227c <I2Cx_MspInit+0x154>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002154:	2312      	movs	r3, #18
 8002156:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002160:	2304      	movs	r3, #4
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4845      	ldr	r0, [pc, #276]	; (8002280 <I2Cx_MspInit+0x158>)
 800216c:	f003 fd2a 	bl	8005bc4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4840      	ldr	r0, [pc, #256]	; (8002280 <I2Cx_MspInit+0x158>)
 800217e:	f003 fd21 	bl	8005bc4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <I2Cx_MspInit+0x154>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a3d      	ldr	r2, [pc, #244]	; (800227c <I2Cx_MspInit+0x154>)
 8002188:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <I2Cx_MspInit+0x154>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800219a:	4b38      	ldr	r3, [pc, #224]	; (800227c <I2Cx_MspInit+0x154>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a37      	ldr	r2, [pc, #220]	; (800227c <I2Cx_MspInit+0x154>)
 80021a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021a4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <I2Cx_MspInit+0x154>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a34      	ldr	r2, [pc, #208]	; (800227c <I2Cx_MspInit+0x154>)
 80021ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021b0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	210f      	movs	r1, #15
 80021b6:	2048      	movs	r0, #72	; 0x48
 80021b8:	f002 ffa2 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80021bc:	2048      	movs	r0, #72	; 0x48
 80021be:	f002 ffbb 	bl	8005138 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	210f      	movs	r1, #15
 80021c6:	2049      	movs	r0, #73	; 0x49
 80021c8:	f002 ff9a 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80021cc:	2049      	movs	r0, #73	; 0x49
 80021ce:	f002 ffb3 	bl	8005138 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80021d2:	e04d      	b.n	8002270 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <I2Cx_MspInit+0x154>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <I2Cx_MspInit+0x154>)
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	6313      	str	r3, [r2, #48]	; 0x30
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <I2Cx_MspInit+0x154>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021fa:	2302      	movs	r3, #2
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80021fe:	2304      	movs	r3, #4
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	481e      	ldr	r0, [pc, #120]	; (8002284 <I2Cx_MspInit+0x15c>)
 800220a:	f003 fcdb 	bl	8005bc4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800220e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	481a      	ldr	r0, [pc, #104]	; (8002284 <I2Cx_MspInit+0x15c>)
 800221c:	f003 fcd2 	bl	8005bc4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <I2Cx_MspInit+0x154>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <I2Cx_MspInit+0x154>)
 8002226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <I2Cx_MspInit+0x154>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <I2Cx_MspInit+0x154>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <I2Cx_MspInit+0x154>)
 800223e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002242:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <I2Cx_MspInit+0x154>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a0c      	ldr	r2, [pc, #48]	; (800227c <I2Cx_MspInit+0x154>)
 800224a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800224e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	210f      	movs	r1, #15
 8002254:	201f      	movs	r0, #31
 8002256:	f002 ff53 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800225a:	201f      	movs	r0, #31
 800225c:	f002 ff6c 	bl	8005138 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	210f      	movs	r1, #15
 8002264:	2020      	movs	r0, #32
 8002266:	f002 ff4b 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800226a:	2020      	movs	r0, #32
 800226c:	f002 ff64 	bl	8005138 <HAL_NVIC_EnableIRQ>
}
 8002270:	bf00      	nop
 8002272:	3730      	adds	r7, #48	; 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000037c 	.word	0x2000037c
 800227c:	40023800 	.word	0x40023800
 8002280:	40021c00 	.word	0x40021c00
 8002284:	40020400 	.word	0x40020400

08002288 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f004 fa6b 	bl	800676c <HAL_I2C_GetState>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d125      	bne.n	80022e8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <I2Cx_Init+0x68>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <I2Cx_Init+0x6c>)
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e002      	b.n	80022b2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <I2Cx_Init+0x70>)
 80022b0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <I2Cx_Init+0x74>)
 80022b6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff23 	bl	8002128 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f003 ff54 	bl	8006190 <HAL_I2C_Init>
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000037c 	.word	0x2000037c
 80022f4:	40005c00 	.word	0x40005c00
 80022f8:	40005400 	.word	0x40005400
 80022fc:	40912732 	.word	0x40912732

08002300 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af04      	add	r7, sp, #16
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	72fb      	strb	r3, [r7, #11]
 8002312:	460b      	mov	r3, r1
 8002314:	813b      	strh	r3, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	b299      	uxth	r1, r3
 8002322:	88f8      	ldrh	r0, [r7, #6]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4603      	mov	r3, r0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f004 f8fe 	bl	8006538 <HAL_I2C_Mem_Read>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	4619      	mov	r1, r3
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f832 	bl	80023b4 <I2Cx_Error>
  }
  return status;    
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b08a      	sub	sp, #40	; 0x28
 800235e:	af04      	add	r7, sp, #16
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	460b      	mov	r3, r1
 800236e:	813b      	strh	r3, [r7, #8]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	b299      	uxth	r1, r3
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4603      	mov	r3, r0
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f003 ffbd 	bl	8006310 <HAL_I2C_Mem_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	4619      	mov	r1, r3
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f805 	bl	80023b4 <I2Cx_Error>
  }
  return status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f003 ff75 	bl	80062b0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff5e 	bl	8002288 <I2Cx_Init>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TS_IO_Init+0x10>)
 80023da:	f7ff ff55 	bl	8002288 <I2Cx_Init>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000037c 	.word	0x2000037c

080023e8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	460b      	mov	r3, r1
 80023f4:	71bb      	strb	r3, [r7, #6]
 80023f6:	4613      	mov	r3, r2
 80023f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	79f9      	ldrb	r1, [r7, #7]
 8002400:	2301      	movs	r3, #1
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	1d7b      	adds	r3, r7, #5
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <TS_IO_Write+0x30>)
 800240c:	f7ff ffa5 	bl	800235a <I2Cx_WriteMultiple>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000037c 	.word	0x2000037c

0800241c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	71fb      	strb	r3, [r7, #7]
 8002428:	4613      	mov	r3, r2
 800242a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	b29a      	uxth	r2, r3
 8002434:	79f9      	ldrb	r1, [r7, #7]
 8002436:	2301      	movs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f107 030f 	add.w	r3, r7, #15
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <TS_IO_Read+0x38>)
 8002444:	f7ff ff5c 	bl	8002300 <I2Cx_ReadMultiple>

  return read_value;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000037c 	.word	0x2000037c

08002458 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f002 f999 	bl	8004798 <HAL_Delay>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002474:	4b31      	ldr	r3, [pc, #196]	; (800253c <BSP_LCD_Init+0xcc>)
 8002476:	2228      	movs	r2, #40	; 0x28
 8002478:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <BSP_LCD_Init+0xcc>)
 800247c:	2209      	movs	r2, #9
 800247e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <BSP_LCD_Init+0xcc>)
 8002482:	2235      	movs	r2, #53	; 0x35
 8002484:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <BSP_LCD_Init+0xcc>)
 8002488:	220b      	movs	r2, #11
 800248a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <BSP_LCD_Init+0xcc>)
 800248e:	f240 121b 	movw	r2, #283	; 0x11b
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <BSP_LCD_Init+0xcc>)
 8002496:	f240 2215 	movw	r2, #533	; 0x215
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <BSP_LCD_Init+0xcc>)
 800249e:	f240 121d 	movw	r2, #285	; 0x11d
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <BSP_LCD_Init+0xcc>)
 80024a6:	f240 2235 	movw	r2, #565	; 0x235
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80024ac:	2100      	movs	r1, #0
 80024ae:	4823      	ldr	r0, [pc, #140]	; (800253c <BSP_LCD_Init+0xcc>)
 80024b0:	f000 fdd0 	bl	8003054 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <BSP_LCD_Init+0xcc>)
 80024b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024ba:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <BSP_LCD_Init+0xcc>)
 80024be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80024c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <BSP_LCD_Init+0xcc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <BSP_LCD_Init+0xcc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <BSP_LCD_Init+0xcc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <BSP_LCD_Init+0xcc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <BSP_LCD_Init+0xcc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <BSP_LCD_Init+0xcc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <BSP_LCD_Init+0xcc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <BSP_LCD_Init+0xcc>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <BSP_LCD_Init+0xd0>)
 80024f8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80024fa:	4810      	ldr	r0, [pc, #64]	; (800253c <BSP_LCD_Init+0xcc>)
 80024fc:	f004 fdfe 	bl	80070fc <HAL_LTDC_GetState>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002506:	2100      	movs	r1, #0
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <BSP_LCD_Init+0xcc>)
 800250a:	f000 fcc9 	bl	8002ea0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800250e:	480b      	ldr	r0, [pc, #44]	; (800253c <BSP_LCD_Init+0xcc>)
 8002510:	f004 fbee 	bl	8006cf0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002514:	2201      	movs	r2, #1
 8002516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251a:	480a      	ldr	r0, [pc, #40]	; (8002544 <BSP_LCD_Init+0xd4>)
 800251c:	f003 fe1e 	bl	800615c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	2108      	movs	r1, #8
 8002524:	4808      	ldr	r0, [pc, #32]	; (8002548 <BSP_LCD_Init+0xd8>)
 8002526:	f003 fe19 	bl	800615c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800252a:	f000 feb3 	bl	8003294 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800252e:	4807      	ldr	r0, [pc, #28]	; (800254c <BSP_LCD_Init+0xdc>)
 8002530:	f000 f8ea 	bl	8002708 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20008c7c 	.word	0x20008c7c
 8002540:	40016800 	.word	0x40016800
 8002544:	40022000 	.word	0x40022000
 8002548:	40022800 	.word	0x40022800
 800254c:	20000028 	.word	0x20000028

08002550 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <BSP_LCD_GetXSize+0x20>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <BSP_LCD_GetXSize+0x24>)
 800255a:	2134      	movs	r1, #52	; 0x34
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3360      	adds	r3, #96	; 0x60
 8002564:	681b      	ldr	r3, [r3, #0]
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000408 	.word	0x20000408
 8002574:	20008c7c 	.word	0x20008c7c

08002578 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <BSP_LCD_GetYSize+0x20>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <BSP_LCD_GetYSize+0x24>)
 8002582:	2134      	movs	r1, #52	; 0x34
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3364      	adds	r3, #100	; 0x64
 800258c:	681b      	ldr	r3, [r3, #0]
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20000408 	.word	0x20000408
 800259c:	20008c7c 	.word	0x20008c7c

080025a0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80025b0:	f7ff ffce 	bl	8002550 <BSP_LCD_GetXSize>
 80025b4:	4603      	mov	r3, r0
 80025b6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80025bc:	f7ff ffdc 	bl	8002578 <BSP_LCD_GetYSize>
 80025c0:	4603      	mov	r3, r0
 80025c2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80025cc:	23ff      	movs	r3, #255	; 0xff
 80025ce:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80025e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80025ec:	2307      	movs	r3, #7
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80025f0:	f7ff ffae 	bl	8002550 <BSP_LCD_GetXSize>
 80025f4:	4603      	mov	r3, r0
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80025f8:	f7ff ffbe 	bl	8002578 <BSP_LCD_GetYSize>
 80025fc:	4603      	mov	r3, r0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4619      	mov	r1, r3
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <BSP_LCD_LayerDefaultInit+0xb4>)
 800260a:	f004 fd03 	bl	8007014 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	4911      	ldr	r1, [pc, #68]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3304      	adds	r3, #4
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	490c      	ldr	r1, [pc, #48]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3308      	adds	r3, #8
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002636:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	4907      	ldr	r1, [pc, #28]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb8>)
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800264a:	601a      	str	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	3740      	adds	r7, #64	; 0x40
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20008c7c 	.word	0x20008c7c
 8002658:	2000040c 	.word	0x2000040c
 800265c:	20000028 	.word	0x20000028

08002660 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <BSP_LCD_SelectLayer+0x1c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
} 
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000408 	.word	0x20000408

08002680 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4619      	mov	r1, r3
 8002692:	4803      	ldr	r0, [pc, #12]	; (80026a0 <BSP_LCD_SetTransparency+0x20>)
 8002694:	f004 fcfc 	bl	8007090 <HAL_LTDC_SetAlpha>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20008c7c 	.word	0x20008c7c

080026a4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <BSP_LCD_SetTextColor+0x28>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <BSP_LCD_SetTextColor+0x2c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000408 	.word	0x20000408
 80026d0:	2000040c 	.word	0x2000040c

080026d4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <BSP_LCD_SetBackColor+0x2c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4908      	ldr	r1, [pc, #32]	; (8002704 <BSP_LCD_SetBackColor+0x30>)
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3304      	adds	r3, #4
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000408 	.word	0x20000408
 8002704:	2000040c 	.word	0x2000040c

08002708 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <BSP_LCD_SetFont+0x2c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4908      	ldr	r1, [pc, #32]	; (8002738 <BSP_LCD_SetFont+0x30>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3308      	adds	r3, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000408 	.word	0x20000408
 8002738:	2000040c 	.word	0x2000040c

0800273c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <BSP_LCD_GetFont+0x24>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <BSP_LCD_GetFont+0x28>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3308      	adds	r3, #8
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000408 	.word	0x20000408
 8002764:	2000040c 	.word	0x2000040c

08002768 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af02      	add	r7, sp, #8
 800276e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <BSP_LCD_Clear+0x48>)
 8002772:	681c      	ldr	r4, [r3, #0]
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <BSP_LCD_Clear+0x48>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <BSP_LCD_Clear+0x4c>)
 800277a:	2134      	movs	r1, #52	; 0x34
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461d      	mov	r5, r3
 8002788:	f7ff fee2 	bl	8002550 <BSP_LCD_GetXSize>
 800278c:	4606      	mov	r6, r0
 800278e:	f7ff fef3 	bl	8002578 <BSP_LCD_GetYSize>
 8002792:	4602      	mov	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	4632      	mov	r2, r6
 80027a0:	4629      	mov	r1, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f000 fd2a 	bl	80031fc <LL_FillBuffer>
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b0:	20000408 	.word	0x20000408
 80027b4:	20008c7c 	.word	0x20008c7c

080027b8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
 80027c2:	460b      	mov	r3, r1
 80027c4:	80bb      	strh	r3, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <BSP_LCD_DisplayChar+0x80>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	491b      	ldr	r1, [pc, #108]	; (800283c <BSP_LCD_DisplayChar+0x84>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3308      	adds	r3, #8
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <BSP_LCD_DisplayChar+0x80>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4c14      	ldr	r4, [pc, #80]	; (800283c <BSP_LCD_DisplayChar+0x84>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4423      	add	r3, r4
 80027f6:	3308      	adds	r3, #8
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027fc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <BSP_LCD_DisplayChar+0x80>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4c0d      	ldr	r4, [pc, #52]	; (800283c <BSP_LCD_DisplayChar+0x84>)
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4423      	add	r3, r4
 8002810:	3308      	adds	r3, #8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	889b      	ldrh	r3, [r3, #4]
 8002816:	3307      	adds	r3, #7
 8002818:	2b00      	cmp	r3, #0
 800281a:	da00      	bge.n	800281e <BSP_LCD_DisplayChar+0x66>
 800281c:	3307      	adds	r3, #7
 800281e:	10db      	asrs	r3, r3, #3
 8002820:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002824:	18ca      	adds	r2, r1, r3
 8002826:	88b9      	ldrh	r1, [r7, #4]
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fc2e 	bl	800308c <DrawChar>
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	20000408 	.word	0x20000408
 800283c:	2000040c 	.word	0x2000040c

08002840 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	461a      	mov	r2, r3
 800284a:	4603      	mov	r3, r0
 800284c:	81fb      	strh	r3, [r7, #14]
 800284e:	460b      	mov	r3, r1
 8002850:	81bb      	strh	r3, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002856:	2301      	movs	r3, #1
 8002858:	83fb      	strh	r3, [r7, #30]
 800285a:	2300      	movs	r3, #0
 800285c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800286a:	e002      	b.n	8002872 <BSP_LCD_DisplayStringAt+0x32>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3301      	adds	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f6      	bne.n	800286c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800287e:	f7ff fe67 	bl	8002550 <BSP_LCD_GetXSize>
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	494f      	ldr	r1, [pc, #316]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3308      	adds	r3, #8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	889b      	ldrh	r3, [r3, #4]
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d01c      	beq.n	80028de <BSP_LCD_DisplayStringAt+0x9e>
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d017      	beq.n	80028d8 <BSP_LCD_DisplayStringAt+0x98>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d12e      	bne.n	800290a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad1      	subs	r1, r2, r3
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4843      	ldr	r0, [pc, #268]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	3308      	adds	r3, #8
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	889b      	ldrh	r3, [r3, #4]
 80028c8:	fb03 f301 	mul.w	r3, r3, r1
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	89fb      	ldrh	r3, [r7, #14]
 80028d2:	4413      	add	r3, r2
 80028d4:	83fb      	strh	r3, [r7, #30]
      break;
 80028d6:	e01b      	b.n	8002910 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	83fb      	strh	r3, [r7, #30]
      break;
 80028dc:	e018      	b.n	8002910 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	b299      	uxth	r1, r3
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4836      	ldr	r0, [pc, #216]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4403      	add	r3, r0
 80028f6:	3308      	adds	r3, #8
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	889b      	ldrh	r3, [r3, #4]
 80028fc:	fb11 f303 	smulbb	r3, r1, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	83fb      	strh	r3, [r7, #30]
      break;
 8002908:	e002      	b.n	8002910 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800290a:	89fb      	ldrh	r3, [r7, #14]
 800290c:	83fb      	strh	r3, [r7, #30]
      break;
 800290e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002910:	8bfb      	ldrh	r3, [r7, #30]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <BSP_LCD_DisplayStringAt+0xde>
 8002916:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da1d      	bge.n	800295a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002922:	e01a      	b.n	800295a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	89b9      	ldrh	r1, [r7, #12]
 800292a:	8bfb      	ldrh	r3, [r7, #30]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff43 	bl	80027b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4923      	ldr	r1, [pc, #140]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3308      	adds	r3, #8
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	889a      	ldrh	r2, [r3, #4]
 8002948:	8bfb      	ldrh	r3, [r7, #30]
 800294a:	4413      	add	r3, r2
 800294c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
    i++;
 8002954:	8bbb      	ldrh	r3, [r7, #28]
 8002956:	3301      	adds	r3, #1
 8002958:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2dc      	uxtb	r4, r3
 8002968:	f7ff fdf2 	bl	8002550 <BSP_LCD_GetXSize>
 800296c:	4605      	mov	r5, r0
 800296e:	8bb9      	ldrh	r1, [r7, #28]
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4813      	ldr	r0, [pc, #76]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4403      	add	r3, r0
 8002980:	3308      	adds	r3, #8
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	889b      	ldrh	r3, [r3, #4]
 8002986:	fb03 f301 	mul.w	r3, r3, r1
 800298a:	1aeb      	subs	r3, r5, r3
 800298c:	b299      	uxth	r1, r3
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	480c      	ldr	r0, [pc, #48]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4403      	add	r3, r0
 800299e:	3308      	adds	r3, #8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	4299      	cmp	r1, r3
 80029a6:	bf2c      	ite	cs
 80029a8:	2301      	movcs	r3, #1
 80029aa:	2300      	movcc	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4023      	ands	r3, r4
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1b6      	bne.n	8002924 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80029b6:	bf00      	nop
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000408 	.word	0x20000408
 80029c4:	2000040c 	.word	0x2000040c

080029c8 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80029d4:	f7ff feb2 	bl	800273c <BSP_LCD_GetFont>
 80029d8:	4603      	mov	r3, r0
 80029da:	88db      	ldrh	r3, [r3, #6]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	fb12 f303 	smulbb	r3, r2, r3
 80029e2:	b299      	uxth	r1, r3
 80029e4:	2303      	movs	r3, #3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff ff29 	bl	8002840 <BSP_LCD_DisplayStringAt>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	460b      	mov	r3, r1
 8002a04:	80bb      	strh	r3, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <BSP_LCD_DrawHLine+0xb4>)
 8002a14:	2134      	movs	r1, #52	; 0x34
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3348      	adds	r3, #72	; 0x48
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d114      	bne.n	8002a4e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <BSP_LCD_DrawHLine+0xb4>)
 8002a2a:	2134      	movs	r1, #52	; 0x34
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	681c      	ldr	r4, [r3, #0]
 8002a36:	f7ff fd8b 	bl	8002550 <BSP_LCD_GetXSize>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	88bb      	ldrh	r3, [r7, #4]
 8002a3e:	fb03 f202 	mul.w	r2, r3, r2
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4423      	add	r3, r4
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e013      	b.n	8002a76 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a16      	ldr	r2, [pc, #88]	; (8002aac <BSP_LCD_DrawHLine+0xb4>)
 8002a54:	2134      	movs	r1, #52	; 0x34
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	335c      	adds	r3, #92	; 0x5c
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f7ff fd76 	bl	8002550 <BSP_LCD_GetXSize>
 8002a64:	4602      	mov	r2, r0
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	fb03 f202 	mul.w	r2, r3, r2
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4423      	add	r3, r4
 8002a74:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	68fc      	ldr	r4, [r7, #12]
 8002a7c:	887d      	ldrh	r5, [r7, #2]
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	490b      	ldr	r1, [pc, #44]	; (8002ab0 <BSP_LCD_DrawHLine+0xb8>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2301      	movs	r3, #1
 8002a98:	462a      	mov	r2, r5
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f000 fbae 	bl	80031fc <LL_FillBuffer>
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa8:	20000408 	.word	0x20000408
 8002aac:	20008c7c 	.word	0x20008c7c
 8002ab0:	2000040c 	.word	0x2000040c

08002ab4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	80bb      	strh	r3, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	f1c3 0303 	rsb	r3, r3, #3
 8002ace:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002ad8:	e0cf      	b.n	8002c7a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b298      	uxth	r0, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	88ba      	ldrh	r2, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	b29c      	uxth	r4, r3
 8002aee:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4967      	ldr	r1, [pc, #412]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4621      	mov	r1, r4
 8002b04:	f000 f8c6 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b298      	uxth	r0, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	88ba      	ldrh	r2, [r7, #4]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	b29c      	uxth	r4, r3
 8002b1c:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	495b      	ldr	r1, [pc, #364]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4621      	mov	r1, r4
 8002b32:	f000 f8af 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b298      	uxth	r0, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	88ba      	ldrh	r2, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	b29c      	uxth	r4, r3
 8002b4a:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4950      	ldr	r1, [pc, #320]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4621      	mov	r1, r4
 8002b60:	f000 f898 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	b298      	uxth	r0, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	88ba      	ldrh	r2, [r7, #4]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29c      	uxth	r4, r3
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4944      	ldr	r1, [pc, #272]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	f000 f881 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4413      	add	r3, r2
 8002b9a:	b298      	uxth	r0, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b29c      	uxth	r4, r3
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4939      	ldr	r1, [pc, #228]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4621      	mov	r1, r4
 8002bbc:	f000 f86a 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	88bb      	ldrh	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	492d      	ldr	r1, [pc, #180]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4621      	mov	r1, r4
 8002bea:	f000 f853 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b298      	uxth	r0, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b29c      	uxth	r4, r3
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4922      	ldr	r1, [pc, #136]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4621      	mov	r1, r4
 8002c18:	f000 f83c 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b298      	uxth	r0, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	88bb      	ldrh	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29c      	uxth	r4, r3
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4916      	ldr	r1, [pc, #88]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4621      	mov	r1, r4
 8002c46:	f000 f825 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da06      	bge.n	8002c5e <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	009a      	lsls	r2, r3, #2
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4413      	add	r3, r2
 8002c58:	3306      	adds	r3, #6
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4413      	add	r3, r2
 8002c6a:	330a      	adds	r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]
      current_y--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	3301      	adds	r3, #1
 8002c78:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	f67f af2b 	bls.w	8002ada <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	20000408 	.word	0x20000408
 8002c90:	2000040c 	.word	0x2000040c

08002c94 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	603a      	str	r2, [r7, #0]
 8002c9e:	80fb      	strh	r3, [r7, #6]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <BSP_LCD_DrawPixel+0x88>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <BSP_LCD_DrawPixel+0x8c>)
 8002caa:	2134      	movs	r1, #52	; 0x34
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3348      	adds	r3, #72	; 0x48
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d116      	bne.n	8002ce8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <BSP_LCD_DrawPixel+0x88>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <BSP_LCD_DrawPixel+0x8c>)
 8002cc0:	2134      	movs	r1, #52	; 0x34
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	88bd      	ldrh	r5, [r7, #4]
 8002cce:	f7ff fc3f 	bl	8002550 <BSP_LCD_GetXSize>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	fb03 f205 	mul.w	r2, r3, r5
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	4413      	add	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4423      	add	r3, r4
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002ce6:	e015      	b.n	8002d14 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <BSP_LCD_DrawPixel+0x88>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <BSP_LCD_DrawPixel+0x8c>)
 8002cee:	2134      	movs	r1, #52	; 0x34
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	681c      	ldr	r4, [r3, #0]
 8002cfa:	88bd      	ldrh	r5, [r7, #4]
 8002cfc:	f7ff fc28 	bl	8002550 <BSP_LCD_GetXSize>
 8002d00:	4603      	mov	r3, r0
 8002d02:	fb03 f205 	mul.w	r2, r3, r5
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4423      	add	r3, r4
 8002d0e:	461a      	mov	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	20000408 	.word	0x20000408
 8002d20:	20008c7c 	.word	0x20008c7c

08002d24 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	80bb      	strh	r3, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	f1c3 0303 	rsb	r3, r3, #3
 8002d3e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <BSP_LCD_FillCircle+0x138>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4944      	ldr	r1, [pc, #272]	; (8002e60 <BSP_LCD_FillCircle+0x13c>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fca2 	bl	80026a4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002d60:	e061      	b.n	8002e26 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d021      	beq.n	8002dac <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b298      	uxth	r0, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff fe37 	bl	80029f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b298      	uxth	r0, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	88ba      	ldrh	r2, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b299      	uxth	r1, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7ff fe26 	bl	80029f8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d021      	beq.n	8002df6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	b298      	uxth	r0, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	88ba      	ldrh	r2, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b299      	uxth	r1, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7ff fe12 	bl	80029f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	b298      	uxth	r0, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	88bb      	ldrh	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	b299      	uxth	r1, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	f7ff fe01 	bl	80029f8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da06      	bge.n	8002e0a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	009a      	lsls	r2, r3, #2
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4413      	add	r3, r2
 8002e04:	3306      	adds	r3, #6
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	330a      	adds	r3, #10
 8002e18:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3301      	adds	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d999      	bls.n	8002d62 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <BSP_LCD_FillCircle+0x138>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	490b      	ldr	r1, [pc, #44]	; (8002e60 <BSP_LCD_FillCircle+0x13c>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fc2f 	bl	80026a4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	88b9      	ldrh	r1, [r7, #4]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe31 	bl	8002ab4 <BSP_LCD_DrawCircle>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000408 	.word	0x20000408
 8002e60:	2000040c 	.word	0x2000040c

08002e64 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <BSP_LCD_DisplayOn+0x30>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <BSP_LCD_DisplayOn+0x30>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <BSP_LCD_DisplayOn+0x34>)
 8002e80:	f003 f96c 	bl	800615c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002e84:	2201      	movs	r2, #1
 8002e86:	2108      	movs	r1, #8
 8002e88:	4804      	ldr	r0, [pc, #16]	; (8002e9c <BSP_LCD_DisplayOn+0x38>)
 8002e8a:	f003 f967 	bl	800615c <HAL_GPIO_WritePin>
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20008c7c 	.word	0x20008c7c
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022800 	.word	0x40022800

08002ea0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b090      	sub	sp, #64	; 0x40
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002eaa:	4b64      	ldr	r3, [pc, #400]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a63      	ldr	r2, [pc, #396]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b61      	ldr	r3, [pc, #388]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ec2:	4b5e      	ldr	r3, [pc, #376]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a5d      	ldr	r2, [pc, #372]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	623b      	str	r3, [r7, #32]
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef2:	4b52      	ldr	r3, [pc, #328]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a51      	ldr	r2, [pc, #324]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b4f      	ldr	r3, [pc, #316]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a4b      	ldr	r2, [pc, #300]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a45      	ldr	r2, [pc, #276]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a39      	ldr	r2, [pc, #228]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002f82:	2310      	movs	r3, #16
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f92:	230e      	movs	r3, #14
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4828      	ldr	r0, [pc, #160]	; (8003040 <BSP_LCD_MspInit+0x1a0>)
 8002f9e:	f002 fe11 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002fac:	2309      	movs	r3, #9
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <BSP_LCD_MspInit+0x1a4>)
 8002fb8:	f002 fe04 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002fbc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fc6:	230e      	movs	r3, #14
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481d      	ldr	r0, [pc, #116]	; (8003048 <BSP_LCD_MspInit+0x1a8>)
 8002fd2:	f002 fdf7 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002fd6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fe0:	230e      	movs	r3, #14
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4818      	ldr	r0, [pc, #96]	; (800304c <BSP_LCD_MspInit+0x1ac>)
 8002fec:	f002 fdea 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002ff0:	23f7      	movs	r3, #247	; 0xf7
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ff8:	230e      	movs	r3, #14
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003000:	4619      	mov	r1, r3
 8003002:	4813      	ldr	r0, [pc, #76]	; (8003050 <BSP_LCD_MspInit+0x1b0>)
 8003004:	f002 fdde 	bl	8005bc4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800300e:	2301      	movs	r3, #1
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003016:	4619      	mov	r1, r3
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <BSP_LCD_MspInit+0x1a8>)
 800301a:	f002 fdd3 	bl	8005bc4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800301e:	2308      	movs	r3, #8
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003022:	2301      	movs	r3, #1
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302a:	4619      	mov	r1, r3
 800302c:	4808      	ldr	r0, [pc, #32]	; (8003050 <BSP_LCD_MspInit+0x1b0>)
 800302e:	f002 fdc9 	bl	8005bc4 <HAL_GPIO_Init>
}
 8003032:	bf00      	nop
 8003034:	3740      	adds	r7, #64	; 0x40
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40021000 	.word	0x40021000
 8003044:	40021800 	.word	0x40021800
 8003048:	40022000 	.word	0x40022000
 800304c:	40022400 	.word	0x40022400
 8003050:	40022800 	.word	0x40022800

08003054 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 8003060:	2208      	movs	r2, #8
 8003062:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 8003066:	22c0      	movs	r2, #192	; 0xc0
 8003068:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 800306c:	2205      	movs	r2, #5
 800306e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 8003072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003078:	4803      	ldr	r0, [pc, #12]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 800307a:	f004 feef 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000424 	.word	0x20000424

0800308c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	603a      	str	r2, [r7, #0]
 8003096:	80fb      	strh	r3, [r7, #6]
 8003098:	460b      	mov	r3, r1
 800309a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <DrawChar+0x168>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4953      	ldr	r1, [pc, #332]	; (80031f8 <DrawChar+0x16c>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3308      	adds	r3, #8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	88db      	ldrh	r3, [r3, #6]
 80030ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80030bc:	4b4d      	ldr	r3, [pc, #308]	; (80031f4 <DrawChar+0x168>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <DrawChar+0x16c>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3308      	adds	r3, #8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	889b      	ldrh	r3, [r3, #4]
 80030d2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80030d4:	8a3b      	ldrh	r3, [r7, #16]
 80030d6:	3307      	adds	r3, #7
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da00      	bge.n	80030de <DrawChar+0x52>
 80030dc:	3307      	adds	r3, #7
 80030de:	10db      	asrs	r3, r3, #3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8a3b      	ldrh	r3, [r7, #16]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e076      	b.n	80031e2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80030f4:	8a3b      	ldrh	r3, [r7, #16]
 80030f6:	3307      	adds	r3, #7
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da00      	bge.n	80030fe <DrawChar+0x72>
 80030fc:	3307      	adds	r3, #7
 80030fe:	10db      	asrs	r3, r3, #3
 8003100:	461a      	mov	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fb03 f302 	mul.w	r3, r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	4413      	add	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800310e:	8a3b      	ldrh	r3, [r7, #16]
 8003110:	3307      	adds	r3, #7
 8003112:	2b00      	cmp	r3, #0
 8003114:	da00      	bge.n	8003118 <DrawChar+0x8c>
 8003116:	3307      	adds	r3, #7
 8003118:	10db      	asrs	r3, r3, #3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d002      	beq.n	8003124 <DrawChar+0x98>
 800311e:	2b02      	cmp	r3, #2
 8003120:	d004      	beq.n	800312c <DrawChar+0xa0>
 8003122:	e00c      	b.n	800313e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]
      break;
 800312a:	e016      	b.n	800315a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	3201      	adds	r2, #1
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
      break;
 800313c:	e00d      	b.n	800315a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	041a      	lsls	r2, r3, #16
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4313      	orrs	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	3202      	adds	r2, #2
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
      break;
 8003158:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e036      	b.n	80031ce <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003160:	8a3a      	ldrh	r2, [r7, #16]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	1ad2      	subs	r2, r2, r3
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	4413      	add	r3, r2
 800316a:	3b01      	subs	r3, #1
 800316c:	2201      	movs	r2, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	461a      	mov	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	b29a      	uxth	r2, r3
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4413      	add	r3, r2
 8003184:	b298      	uxth	r0, r3
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <DrawChar+0x168>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	491b      	ldr	r1, [pc, #108]	; (80031f8 <DrawChar+0x16c>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	4619      	mov	r1, r3
 800319c:	f7ff fd7a 	bl	8002c94 <BSP_LCD_DrawPixel>
 80031a0:	e012      	b.n	80031c8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	4413      	add	r3, r2
 80031aa:	b298      	uxth	r0, r3
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <DrawChar+0x168>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4911      	ldr	r1, [pc, #68]	; (80031f8 <DrawChar+0x16c>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3304      	adds	r3, #4
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	88bb      	ldrh	r3, [r7, #4]
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7ff fd66 	bl	8002c94 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	3301      	adds	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	8a3b      	ldrh	r3, [r7, #16]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3c4      	bcc.n	8003160 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80031d6:	88bb      	ldrh	r3, [r7, #4]
 80031d8:	3301      	adds	r3, #1
 80031da:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	8a7b      	ldrh	r3, [r7, #18]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d384      	bcc.n	80030f4 <DrawChar+0x68>
  }
}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000408 	.word	0x20000408
 80031f8:	2000040c 	.word	0x2000040c

080031fc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <LL_FillBuffer+0x88>)
 800320c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003210:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <LL_FillBuffer+0x8c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1d      	ldr	r2, [pc, #116]	; (800328c <LL_FillBuffer+0x90>)
 8003218:	2134      	movs	r1, #52	; 0x34
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3348      	adds	r3, #72	; 0x48
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d103      	bne.n	8003230 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <LL_FillBuffer+0x88>)
 800322a:	2202      	movs	r2, #2
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	e002      	b.n	8003236 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <LL_FillBuffer+0x88>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003236:	4a13      	ldr	r2, [pc, #76]	; (8003284 <LL_FillBuffer+0x88>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <LL_FillBuffer+0x88>)
 800323e:	4a14      	ldr	r2, [pc, #80]	; (8003290 <LL_FillBuffer+0x94>)
 8003240:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <LL_FillBuffer+0x88>)
 8003244:	f002 fa32 	bl	80056ac <HAL_DMA2D_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <LL_FillBuffer+0x88>)
 8003252:	f002 fb89 	bl	8005968 <HAL_DMA2D_ConfigLayer>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <LL_FillBuffer+0x88>)
 8003268:	f002 fa6a 	bl	8005740 <HAL_DMA2D_Start>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003272:	210a      	movs	r1, #10
 8003274:	4803      	ldr	r0, [pc, #12]	; (8003284 <LL_FillBuffer+0x88>)
 8003276:	f002 fa8e 	bl	8005796 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200003c8 	.word	0x200003c8
 8003288:	20000408 	.word	0x20000408
 800328c:	20008c7c 	.word	0x20008c7c
 8003290:	4002b000 	.word	0x4002b000

08003294 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <BSP_SDRAM_Init+0xac>)
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <BSP_SDRAM_Init+0xb0>)
 800329c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800329e:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032a6:	2207      	movs	r2, #7
 80032a8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032ac:	2204      	movs	r2, #4
 80032ae:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032b2:	2207      	movs	r2, #7
 80032b4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032b8:	2202      	movs	r2, #2
 80032ba:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032be:	2202      	movs	r2, #2
 80032c0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032c4:	2202      	movs	r2, #2
 80032c6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032d6:	2204      	movs	r2, #4
 80032d8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032dc:	2210      	movs	r2, #16
 80032de:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ec:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032fa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <BSP_SDRAM_Init+0xac>)
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800330a:	2100      	movs	r1, #0
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <BSP_SDRAM_Init+0xac>)
 800330e:	f000 f87f 	bl	8003410 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003312:	490d      	ldr	r1, [pc, #52]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 8003314:	480a      	ldr	r0, [pc, #40]	; (8003340 <BSP_SDRAM_Init+0xac>)
 8003316:	f005 fd51 	bl	8008dbc <HAL_SDRAM_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <BSP_SDRAM_Init+0xb8>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e002      	b.n	800332e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <BSP_SDRAM_Init+0xb8>)
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800332e:	f240 6003 	movw	r0, #1539	; 0x603
 8003332:	f000 f80d 	bl	8003350 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <BSP_SDRAM_Init+0xb8>)
 8003338:	781b      	ldrb	r3, [r3, #0]
}
 800333a:	4618      	mov	r0, r3
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20008d24 	.word	0x20008d24
 8003344:	a0000140 	.word	0xa0000140
 8003348:	200004a8 	.word	0x200004a8
 800334c:	20000030 	.word	0x20000030

08003350 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003364:	2210      	movs	r2, #16
 8003366:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800336a:	2201      	movs	r2, #1
 800336c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003378:	4923      	ldr	r1, [pc, #140]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337a:	4824      	ldr	r0, [pc, #144]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800337c:	f005 fd52 	bl	8008e24 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003380:	2001      	movs	r0, #1
 8003382:	f001 fa09 	bl	8004798 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003388:	2202      	movs	r2, #2
 800338a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338e:	2210      	movs	r2, #16
 8003390:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003394:	2201      	movs	r2, #1
 8003396:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800339e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a2:	4919      	ldr	r1, [pc, #100]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a4:	4819      	ldr	r0, [pc, #100]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033a6:	f005 fd3d 	bl	8008e24 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ac:	2203      	movs	r2, #3
 80033ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b2:	2210      	movs	r2, #16
 80033b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b8:	2208      	movs	r2, #8
 80033ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c8:	4810      	ldr	r0, [pc, #64]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033ca:	f005 fd2b 	bl	8008e24 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80033ce:	f44f 7308 	mov.w	r3, #544	; 0x220
 80033d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033d6:	2204      	movs	r2, #4
 80033d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033dc:	2210      	movs	r2, #16
 80033de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	4905      	ldr	r1, [pc, #20]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f2:	4806      	ldr	r0, [pc, #24]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033f4:	f005 fd16 	bl	8008e24 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033fc:	f005 fd3d 	bl	8008e7a <HAL_SDRAM_ProgramRefreshRate>
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200004c4 	.word	0x200004c4
 800340c:	20008d24 	.word	0x20008d24

08003410 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003410:	b580      	push	{r7, lr}
 8003412:	b090      	sub	sp, #64	; 0x40
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800341a:	4b70      	ldr	r3, [pc, #448]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	4a6f      	ldr	r2, [pc, #444]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6393      	str	r3, [r2, #56]	; 0x38
 8003426:	4b6d      	ldr	r3, [pc, #436]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a69      	ldr	r2, [pc, #420]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800344a:	4b64      	ldr	r3, [pc, #400]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a63      	ldr	r2, [pc, #396]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b61      	ldr	r3, [pc, #388]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003462:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a5d      	ldr	r2, [pc, #372]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800347a:	4b58      	ldr	r3, [pc, #352]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a57      	ldr	r2, [pc, #348]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b55      	ldr	r3, [pc, #340]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003492:	4b52      	ldr	r3, [pc, #328]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a51      	ldr	r2, [pc, #324]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003498:	f043 0320 	orr.w	r3, r3, #32
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034aa:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a4b      	ldr	r2, [pc, #300]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b49      	ldr	r3, [pc, #292]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a45      	ldr	r2, [pc, #276]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034de:	2301      	movs	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80034e2:	2302      	movs	r3, #2
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80034e6:	230c      	movs	r3, #12
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80034ea:	2308      	movs	r3, #8
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80034ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	483a      	ldr	r0, [pc, #232]	; (80035e0 <BSP_SDRAM_MspInit+0x1d0>)
 80034f6:	f002 fb65 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80034fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003504:	4619      	mov	r1, r3
 8003506:	4837      	ldr	r0, [pc, #220]	; (80035e4 <BSP_SDRAM_MspInit+0x1d4>)
 8003508:	f002 fb5c 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800350c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003516:	4619      	mov	r1, r3
 8003518:	4833      	ldr	r0, [pc, #204]	; (80035e8 <BSP_SDRAM_MspInit+0x1d8>)
 800351a:	f002 fb53 	bl	8005bc4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800351e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003528:	4619      	mov	r1, r3
 800352a:	4830      	ldr	r0, [pc, #192]	; (80035ec <BSP_SDRAM_MspInit+0x1dc>)
 800352c:	f002 fb4a 	bl	8005bc4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003530:	f248 1333 	movw	r3, #33075	; 0x8133
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800353a:	4619      	mov	r1, r3
 800353c:	482c      	ldr	r0, [pc, #176]	; (80035f0 <BSP_SDRAM_MspInit+0x1e0>)
 800353e:	f002 fb41 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003542:	2328      	movs	r3, #40	; 0x28
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800354a:	4619      	mov	r1, r3
 800354c:	4829      	ldr	r0, [pc, #164]	; (80035f4 <BSP_SDRAM_MspInit+0x1e4>)
 800354e:	f002 fb39 	bl	8005bc4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003574:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003578:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800357c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003580:	2200      	movs	r2, #0
 8003582:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800358a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 800358e:	2200      	movs	r2, #0
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003594:	2203      	movs	r2, #3
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 800359a:	2200      	movs	r2, #0
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <BSP_SDRAM_MspInit+0x1ec>)
 80035a8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80035b6:	4810      	ldr	r0, [pc, #64]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035b8:	f001 ff48 	bl	800544c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80035bc:	480e      	ldr	r0, [pc, #56]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035be:	f001 fe97 	bl	80052f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	210f      	movs	r1, #15
 80035c6:	2038      	movs	r0, #56	; 0x38
 80035c8:	f001 fd9a 	bl	8005100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80035cc:	2038      	movs	r0, #56	; 0x38
 80035ce:	f001 fdb3 	bl	8005138 <HAL_NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3740      	adds	r7, #64	; 0x40
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	200004d4 	.word	0x200004d4
 80035fc:	40026410 	.word	0x40026410

08003600 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	460a      	mov	r2, r1
 800360a:	80fb      	strh	r3, [r7, #6]
 800360c:	4613      	mov	r3, r2
 800360e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <BSP_TS_Init+0x68>)
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800361a:	4a14      	ldr	r2, [pc, #80]	; (800366c <BSP_TS_Init+0x6c>)
 800361c:	88bb      	ldrh	r3, [r7, #4]
 800361e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <BSP_TS_Init+0x70>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2070      	movs	r0, #112	; 0x70
 8003626:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <BSP_TS_Init+0x70>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2070      	movs	r0, #112	; 0x70
 800362e:	4798      	blx	r3
 8003630:	4603      	mov	r3, r0
 8003632:	2b51      	cmp	r3, #81	; 0x51
 8003634:	d111      	bne.n	800365a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <BSP_TS_Init+0x74>)
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <BSP_TS_Init+0x70>)
 800363a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <BSP_TS_Init+0x78>)
 800363e:	2270      	movs	r2, #112	; 0x70
 8003640:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <BSP_TS_Init+0x7c>)
 8003644:	2208      	movs	r2, #8
 8003646:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <BSP_TS_Init+0x74>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <BSP_TS_Init+0x78>)
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	b292      	uxth	r2, r2
 8003654:	4610      	mov	r0, r2
 8003656:	4798      	blx	r3
 8003658:	e001      	b.n	800365e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800365a:	2303      	movs	r3, #3
 800365c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000538 	.word	0x20000538
 800366c:	2000053a 	.word	0x2000053a
 8003670:	20000000 	.word	0x20000000
 8003674:	20000534 	.word	0x20000534
 8003678:	2000053d 	.word	0x2000053d
 800367c:	2000053c 	.word	0x2000053c

08003680 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b097      	sub	sp, #92	; 0x5c
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800369a:	4b97      	ldr	r3, [pc, #604]	; (80038f8 <BSP_TS_GetState+0x278>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	4a96      	ldr	r2, [pc, #600]	; (80038fc <BSP_TS_GetState+0x27c>)
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	b292      	uxth	r2, r2
 80036a6:	4610      	mov	r0, r2
 80036a8:	4798      	blx	r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 81a8 	beq.w	8003a0c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80036bc:	2300      	movs	r3, #0
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c0:	e197      	b.n	80039f2 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <BSP_TS_GetState+0x278>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	4a8c      	ldr	r2, [pc, #560]	; (80038fc <BSP_TS_GetState+0x27c>)
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	b290      	uxth	r0, r2
 80036ce:	f107 0120 	add.w	r1, r7, #32
 80036d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d4:	0052      	lsls	r2, r2, #1
 80036d6:	188c      	adds	r4, r1, r2
 80036d8:	f107 0114 	add.w	r1, r7, #20
 80036dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036de:	0052      	lsls	r2, r2, #1
 80036e0:	440a      	add	r2, r1
 80036e2:	4621      	mov	r1, r4
 80036e4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80036e6:	4b86      	ldr	r3, [pc, #536]	; (8003900 <BSP_TS_GetState+0x280>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11b      	bne.n	8003726 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80036ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036f6:	4413      	add	r3, r2
 80036f8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80036fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003704:	440b      	add	r3, r1
 8003706:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800370a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003712:	4413      	add	r3, r2
 8003714:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003720:	440b      	add	r3, r1
 8003722:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <BSP_TS_GetState+0x280>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800373a:	4413      	add	r3, r2
 800373c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003740:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003744:	b29a      	uxth	r2, r3
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800374e:	440b      	add	r3, r1
 8003750:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <BSP_TS_GetState+0x280>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003768:	4413      	add	r3, r2
 800376a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800376e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003772:	b29a      	uxth	r2, r3
 8003774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800377c:	440b      	add	r3, r1
 800377e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <BSP_TS_GetState+0x280>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01b      	beq.n	80037c6 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003796:	4413      	add	r3, r2
 8003798:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037a4:	440b      	add	r3, r1
 80037a6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80037aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037b2:	4413      	add	r3, r2
 80037b4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80037b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037c0:	440b      	add	r3, r1
 80037c2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037ce:	4413      	add	r3, r2
 80037d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80037d4:	4619      	mov	r1, r3
 80037d6:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <BSP_TS_GetState+0x284>)
 80037d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	4299      	cmp	r1, r3
 80037e0:	d90e      	bls.n	8003800 <BSP_TS_GetState+0x180>
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037ea:	4413      	add	r3, r2
 80037ec:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80037f0:	4944      	ldr	r1, [pc, #272]	; (8003904 <BSP_TS_GetState+0x284>)
 80037f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	e00d      	b.n	800381c <BSP_TS_GetState+0x19c>
 8003800:	4a40      	ldr	r2, [pc, #256]	; (8003904 <BSP_TS_GetState+0x284>)
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	b29a      	uxth	r2, r3
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003812:	440b      	add	r3, r1
 8003814:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003828:	4413      	add	r3, r2
 800382a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800382e:	4619      	mov	r1, r3
 8003830:	4a35      	ldr	r2, [pc, #212]	; (8003908 <BSP_TS_GetState+0x288>)
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	4299      	cmp	r1, r3
 800383a:	d90e      	bls.n	800385a <BSP_TS_GetState+0x1da>
 800383c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003844:	4413      	add	r3, r2
 8003846:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800384a:	492f      	ldr	r1, [pc, #188]	; (8003908 <BSP_TS_GetState+0x288>)
 800384c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003852:	b29b      	uxth	r3, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	e00d      	b.n	8003876 <BSP_TS_GetState+0x1f6>
 800385a:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <BSP_TS_GetState+0x288>)
 800385c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	b29a      	uxth	r2, r3
 8003864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800386c:	440b      	add	r3, r1
 800386e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b29b      	uxth	r3, r3
 8003876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800387a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800387e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003882:	4413      	add	r3, r2
 8003884:	2b05      	cmp	r3, #5
 8003886:	dd17      	ble.n	80038b8 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003890:	4413      	add	r3, r2
 8003892:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003896:	4619      	mov	r1, r3
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <BSP_TS_GetState+0x284>)
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038a8:	4413      	add	r3, r2
 80038aa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4a15      	ldr	r2, [pc, #84]	; (8003908 <BSP_TS_GetState+0x288>)
 80038b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <BSP_TS_GetState+0x27c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b70      	cmp	r3, #112	; 0x70
 80038be:	d125      	bne.n	800390c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80038c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038c8:	4413      	add	r3, r2
 80038ca:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	460a      	mov	r2, r1
 80038d8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80038da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038e2:	4413      	add	r3, r2
 80038e4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ec:	3304      	adds	r3, #4
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	460a      	mov	r2, r1
 80038f4:	809a      	strh	r2, [r3, #4]
 80038f6:	e02c      	b.n	8003952 <BSP_TS_GetState+0x2d2>
 80038f8:	20000534 	.word	0x20000534
 80038fc:	2000053d 	.word	0x2000053d
 8003900:	2000053c 	.word	0x2000053c
 8003904:	20000540 	.word	0x20000540
 8003908:	20000554 	.word	0x20000554
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <BSP_TS_GetState+0x398>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	4a42      	ldr	r2, [pc, #264]	; (8003a1c <BSP_TS_GetState+0x39c>)
 8003914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391a:	fb03 f301 	mul.w	r3, r3, r1
 800391e:	0b1b      	lsrs	r3, r3, #12
 8003920:	b299      	uxth	r1, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	460a      	mov	r2, r1
 800392c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800392e:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <BSP_TS_GetState+0x3a0>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <BSP_TS_GetState+0x3a4>)
 8003936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	fb03 f301 	mul.w	r3, r3, r1
 8003940:	0b1b      	lsrs	r3, r3, #12
 8003942:	b299      	uxth	r1, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003948:	3304      	adds	r3, #4
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	460a      	mov	r2, r1
 8003950:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003952:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <BSP_TS_GetState+0x3a8>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b298      	uxth	r0, r3
 8003958:	f107 010c 	add.w	r1, r7, #12
 800395c:	f107 0210 	add.w	r2, r7, #16
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	460b      	mov	r3, r1
 8003968:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800396a:	f7fd f81f 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003976:	4413      	add	r3, r2
 8003978:	3316      	adds	r3, #22
 800397a:	460a      	mov	r2, r1
 800397c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	b2d9      	uxtb	r1, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003986:	4413      	add	r3, r2
 8003988:	3320      	adds	r3, #32
 800398a:	460a      	mov	r2, r1
 800398c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d827      	bhi.n	80039e4 <BSP_TS_GetState+0x364>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <BSP_TS_GetState+0x31c>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039bb 	.word	0x080039bb
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d7 	.word	0x080039d7
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b0:	4413      	add	r3, r2
 80039b2:	331b      	adds	r3, #27
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
          break;
 80039b8:	e018      	b.n	80039ec <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039be:	4413      	add	r3, r2
 80039c0:	331b      	adds	r3, #27
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]
          break;
 80039c6:	e011      	b.n	80039ec <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039cc:	4413      	add	r3, r2
 80039ce:	331b      	adds	r3, #27
 80039d0:	2203      	movs	r2, #3
 80039d2:	701a      	strb	r2, [r3, #0]
          break;
 80039d4:	e00a      	b.n	80039ec <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039da:	4413      	add	r3, r2
 80039dc:	331b      	adds	r3, #27
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
          break;
 80039e2:	e003      	b.n	80039ec <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80039ea:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	3301      	adds	r3, #1
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f4ff ae61 	bcc.w	80036c2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f813 	bl	8003a2c <BSP_TS_Get_GestureId>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3754      	adds	r7, #84	; 0x54
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}
 8003a18:	20000538 	.word	0x20000538
 8003a1c:	20000540 	.word	0x20000540
 8003a20:	2000053a 	.word	0x2000053a
 8003a24:	20000554 	.word	0x20000554
 8003a28:	2000053d 	.word	0x2000053d

08003a2c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <BSP_TS_Get_GestureId+0x90>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f107 0208 	add.w	r2, r7, #8
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc ff96 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b18      	cmp	r3, #24
 8003a52:	d01b      	beq.n	8003a8c <BSP_TS_Get_GestureId+0x60>
 8003a54:	2b18      	cmp	r3, #24
 8003a56:	d806      	bhi.n	8003a66 <BSP_TS_Get_GestureId+0x3a>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d00f      	beq.n	8003a7c <BSP_TS_Get_GestureId+0x50>
 8003a5c:	2b14      	cmp	r3, #20
 8003a5e:	d011      	beq.n	8003a84 <BSP_TS_Get_GestureId+0x58>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <BSP_TS_Get_GestureId+0x48>
 8003a64:	e022      	b.n	8003aac <BSP_TS_Get_GestureId+0x80>
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d018      	beq.n	8003a9c <BSP_TS_Get_GestureId+0x70>
 8003a6a:	2b49      	cmp	r3, #73	; 0x49
 8003a6c:	d01a      	beq.n	8003aa4 <BSP_TS_Get_GestureId+0x78>
 8003a6e:	2b1c      	cmp	r3, #28
 8003a70:	d010      	beq.n	8003a94 <BSP_TS_Get_GestureId+0x68>
 8003a72:	e01b      	b.n	8003aac <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a7a:	e01a      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a82:	e016      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a8a:	e012      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a92:	e00e      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a9a:	e00a      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003aa2:	e006      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2206      	movs	r2, #6
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003aaa:	e002      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2000053d 	.word	0x2000053d

08003ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_MspInit+0x4c>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_MspInit+0x4c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	210f      	movs	r1, #15
 8003afa:	f06f 0001 	mvn.w	r0, #1
 8003afe:	f001 faff 	bl	8005100 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_ADC_MspInit+0xc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d124      	bne.n	8003b7c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b66:	2303      	movs	r3, #3
 8003b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	f107 031c 	add.w	r3, r7, #28
 8003b72:	4619      	mov	r1, r3
 8003b74:	481a      	ldr	r0, [pc, #104]	; (8003be0 <HAL_ADC_MspInit+0xd0>)
 8003b76:	f002 f825 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003b7a:	e029      	b.n	8003bd0 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_ADC_MspInit+0xd4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d124      	bne.n	8003bd0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b90:	6453      	str	r3, [r2, #68]	; 0x44
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003ba4:	f043 0320 	orr.w	r3, r3, #32
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003bb6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4807      	ldr	r0, [pc, #28]	; (8003be8 <HAL_ADC_MspInit+0xd8>)
 8003bcc:	f001 fffa 	bl	8005bc4 <HAL_GPIO_Init>
}
 8003bd0:	bf00      	nop
 8003bd2:	3730      	adds	r7, #48	; 0x30
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40012000 	.word	0x40012000
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40012200 	.word	0x40012200
 8003be8:	40021400 	.word	0x40021400

08003bec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_DAC_MspInit+0x84>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12b      	bne.n	8003c66 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c3e:	2310      	movs	r3, #16
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c42:	2303      	movs	r3, #3
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0314 	add.w	r3, r7, #20
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4809      	ldr	r0, [pc, #36]	; (8003c78 <HAL_DAC_MspInit+0x8c>)
 8003c52:	f001 ffb7 	bl	8005bc4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2036      	movs	r0, #54	; 0x36
 8003c5c:	f001 fa50 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c60:	2036      	movs	r0, #54	; 0x36
 8003c62:	f001 fa69 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40007400 	.word	0x40007400
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40020000 	.word	0x40020000

08003c7c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_DMA2D_MspInit+0x38>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_DMA2D_MspInit+0x3c>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_DMA2D_MspInit+0x3c>)
 8003c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_DMA2D_MspInit+0x3c>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	4002b000 	.word	0x4002b000
 8003cb8:	40023800 	.word	0x40023800

08003cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	; 0x30
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <HAL_I2C_MspInit+0xdc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d129      	bne.n	8003d32 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cde:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cfc:	2312      	movs	r3, #18
 8003cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d00:	2301      	movs	r3, #1
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0c:	f107 031c 	add.w	r3, r7, #28
 8003d10:	4619      	mov	r1, r3
 8003d12:	4823      	ldr	r0, [pc, #140]	; (8003da0 <HAL_I2C_MspInit+0xe4>)
 8003d14:	f001 ff56 	bl	8005bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d18:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d22:	6413      	str	r3, [r2, #64]	; 0x40
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003d30:	e02d      	b.n	8003d8e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_I2C_MspInit+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d128      	bne.n	8003d8e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	6313      	str	r3, [r2, #48]	; 0x30
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003d54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d5a:	2312      	movs	r3, #18
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d62:	2303      	movs	r3, #3
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d66:	2304      	movs	r3, #4
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d6a:	f107 031c 	add.w	r3, r7, #28
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480d      	ldr	r0, [pc, #52]	; (8003da8 <HAL_I2C_MspInit+0xec>)
 8003d72:	f001 ff27 	bl	8005bc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	3730      	adds	r7, #48	; 0x30
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40005400 	.word	0x40005400
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40005c00 	.word	0x40005c00
 8003da8:	40021c00 	.word	0x40021c00

08003dac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_I2C_MspDeInit+0x64>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d110      	bne.n	8003de0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dce:	4812      	ldr	r0, [pc, #72]	; (8003e18 <HAL_I2C_MspDeInit+0x6c>)
 8003dd0:	f002 f8a2 	bl	8005f18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dd8:	480f      	ldr	r0, [pc, #60]	; (8003e18 <HAL_I2C_MspDeInit+0x6c>)
 8003dda:	f002 f89d 	bl	8005f18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003dde:	e013      	b.n	8003e08 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_I2C_MspDeInit+0x70>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003df0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	4809      	ldr	r0, [pc, #36]	; (8003e20 <HAL_I2C_MspDeInit+0x74>)
 8003dfa:	f002 f88d 	bl	8005f18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e02:	4807      	ldr	r0, [pc, #28]	; (8003e20 <HAL_I2C_MspDeInit+0x74>)
 8003e04:	f002 f888 	bl	8005f18 <HAL_GPIO_DeInit>
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40005400 	.word	0x40005400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40005c00 	.word	0x40005c00
 8003e20:	40021c00 	.word	0x40021c00

08003e24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	; 0x38
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a55      	ldr	r2, [pc, #340]	; (8003f98 <HAL_LTDC_MspInit+0x174>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f040 80a3 	bne.w	8003f8e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003e48:	4b54      	ldr	r3, [pc, #336]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	4a53      	ldr	r2, [pc, #332]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6453      	str	r3, [r2, #68]	; 0x44
 8003e54:	4b51      	ldr	r3, [pc, #324]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e60:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a4d      	ldr	r2, [pc, #308]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e66:	f043 0310 	orr.w	r3, r3, #16
 8003e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003e78:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4a47      	ldr	r2, [pc, #284]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9c:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ea8:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4a35      	ldr	r2, [pc, #212]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003ed8:	2310      	movs	r3, #16
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ee8:	230e      	movs	r3, #14
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	482b      	ldr	r0, [pc, #172]	; (8003fa0 <HAL_LTDC_MspInit+0x17c>)
 8003ef4:	f001 fe66 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003ef8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efe:	2302      	movs	r3, #2
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f06:	2300      	movs	r3, #0
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f0a:	230e      	movs	r3, #14
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f12:	4619      	mov	r1, r3
 8003f14:	4823      	ldr	r0, [pc, #140]	; (8003fa4 <HAL_LTDC_MspInit+0x180>)
 8003f16:	f001 fe55 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003f1a:	23f7      	movs	r3, #247	; 0xf7
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f26:	2300      	movs	r3, #0
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f2a:	230e      	movs	r3, #14
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f32:	4619      	mov	r1, r3
 8003f34:	481c      	ldr	r0, [pc, #112]	; (8003fa8 <HAL_LTDC_MspInit+0x184>)
 8003f36:	f001 fe45 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f40:	2302      	movs	r3, #2
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003f4c:	2309      	movs	r3, #9
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f54:	4619      	mov	r1, r3
 8003f56:	4815      	ldr	r0, [pc, #84]	; (8003fac <HAL_LTDC_MspInit+0x188>)
 8003f58:	f001 fe34 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003f5c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	2302      	movs	r3, #2
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f6e:	230e      	movs	r3, #14
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f76:	4619      	mov	r1, r3
 8003f78:	480d      	ldr	r0, [pc, #52]	; (8003fb0 <HAL_LTDC_MspInit+0x18c>)
 8003f7a:	f001 fe23 	bl	8005bc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2105      	movs	r1, #5
 8003f82:	2058      	movs	r0, #88	; 0x58
 8003f84:	f001 f8bc 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003f88:	2058      	movs	r0, #88	; 0x58
 8003f8a:	f001 f8d5 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003f8e:	bf00      	nop
 8003f90:	3738      	adds	r7, #56	; 0x38
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40016800 	.word	0x40016800
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40022400 	.word	0x40022400
 8003fa8:	40022800 	.word	0x40022800
 8003fac:	40021800 	.word	0x40021800
 8003fb0:	40022000 	.word	0x40022000

08003fb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <HAL_RTC_MspInit+0x2c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_RTC_MspInit+0x30>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <HAL_RTC_MspInit+0x30>)
 8003fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40002800 	.word	0x40002800
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <HAL_SPI_MspInit+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d154      	bne.n	80040b4 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004052:	2302      	movs	r3, #2
 8004054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004056:	2302      	movs	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004062:	2305      	movs	r3, #5
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4619      	mov	r1, r3
 800406c:	4815      	ldr	r0, [pc, #84]	; (80040c4 <HAL_SPI_MspInit+0xdc>)
 800406e:	f001 fda9 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004082:	2305      	movs	r3, #5
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	480d      	ldr	r0, [pc, #52]	; (80040c4 <HAL_SPI_MspInit+0xdc>)
 800408e:	f001 fd99 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a0:	2303      	movs	r3, #3
 80040a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040a4:	2305      	movs	r3, #5
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	4619      	mov	r1, r3
 80040ae:	4806      	ldr	r0, [pc, #24]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 80040b0:	f001 fd88 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040b4:	bf00      	nop
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40003800 	.word	0x40003800
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40022000 	.word	0x40022000
 80040c8:	40020400 	.word	0x40020400

080040cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	; (8004194 <HAL_TIM_Base_MspInit+0xc8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a2d      	ldr	r2, [pc, #180]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040f6:	e046      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d10c      	bne.n	800411c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a24      	ldr	r2, [pc, #144]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	69bb      	ldr	r3, [r7, #24]
}
 800411a:	e034      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1e      	ldr	r2, [pc, #120]	; (800419c <HAL_TIM_Base_MspInit+0xd0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
}
 800413e:	e022      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_TIM_Base_MspInit+0xd4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]
}
 8004162:	e010      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <HAL_TIM_Base_MspInit+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10b      	bne.n	8004186 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6453      	str	r3, [r2, #68]	; 0x44
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40023800 	.word	0x40023800
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40010400 	.word	0x40010400

080041a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_TIM_MspPostInit+0xa8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d11c      	bne.n	8004204 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a21      	ldr	r2, [pc, #132]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041e2:	2310      	movs	r3, #16
 80041e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e6:	2302      	movs	r3, #2
 80041e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041f2:	2302      	movs	r3, #2
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4619      	mov	r1, r3
 80041fc:	4816      	ldr	r0, [pc, #88]	; (8004258 <HAL_TIM_MspPostInit+0xb0>)
 80041fe:	f001 fce1 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004202:	e020      	b.n	8004246 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <HAL_TIM_MspPostInit+0xb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d11b      	bne.n	8004246 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004226:	2304      	movs	r3, #4
 8004228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004236:	2303      	movs	r3, #3
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800423a:	f107 0314 	add.w	r3, r7, #20
 800423e:	4619      	mov	r1, r3
 8004240:	4807      	ldr	r0, [pc, #28]	; (8004260 <HAL_TIM_MspPostInit+0xb8>)
 8004242:	f001 fcbf 	bl	8005bc4 <HAL_GPIO_Init>
}
 8004246:	bf00      	nop
 8004248:	3728      	adds	r7, #40	; 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40000400 	.word	0x40000400
 8004254:	40023800 	.word	0x40023800
 8004258:	40020400 	.word	0x40020400
 800425c:	40010400 	.word	0x40010400
 8004260:	40022000 	.word	0x40022000

08004264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	; 0x38
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	60da      	str	r2, [r3, #12]
 800427a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <HAL_UART_MspInit+0x17c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d128      	bne.n	80042d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_UART_MspInit+0x180>)
 800428c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800429e:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4a50      	ldr	r2, [pc, #320]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042a4:	f043 0320 	orr.w	r3, r3, #32
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80042c6:	2308      	movs	r3, #8
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ce:	4619      	mov	r1, r3
 80042d0:	4845      	ldr	r0, [pc, #276]	; (80043e8 <HAL_UART_MspInit+0x184>)
 80042d2:	f001 fc77 	bl	8005bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80042d6:	e07f      	b.n	80043d8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a43      	ldr	r2, [pc, #268]	; (80043ec <HAL_UART_MspInit+0x188>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d14d      	bne.n	800437e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042e8:	f043 0310 	orr.w	r3, r3, #16
 80042ec:	6453      	str	r3, [r2, #68]	; 0x44
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6313      	str	r3, [r2, #48]	; 0x30
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432e:	2302      	movs	r3, #2
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004336:	2300      	movs	r3, #0
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800433a:	2307      	movs	r3, #7
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800433e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004342:	4619      	mov	r1, r3
 8004344:	482a      	ldr	r0, [pc, #168]	; (80043f0 <HAL_UART_MspInit+0x18c>)
 8004346:	f001 fc3d 	bl	8005bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800434a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800435c:	2307      	movs	r3, #7
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004364:	4619      	mov	r1, r3
 8004366:	4823      	ldr	r0, [pc, #140]	; (80043f4 <HAL_UART_MspInit+0x190>)
 8004368:	f001 fc2c 	bl	8005bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2105      	movs	r1, #5
 8004370:	2025      	movs	r0, #37	; 0x25
 8004372:	f000 fec5 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004376:	2025      	movs	r0, #37	; 0x25
 8004378:	f000 fede 	bl	8005138 <HAL_NVIC_EnableIRQ>
}
 800437c:	e02c      	b.n	80043d8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_UART_MspInit+0x194>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d127      	bne.n	80043d8 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004388:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_UART_MspInit+0x180>)
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_UART_MspInit+0x180>)
 800438e:	f043 0320 	orr.w	r3, r3, #32
 8004392:	6453      	str	r3, [r2, #68]	; 0x44
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6313      	str	r3, [r2, #48]	; 0x30
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80043b8:	23c0      	movs	r3, #192	; 0xc0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043bc:	2302      	movs	r3, #2
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c4:	2303      	movs	r3, #3
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043c8:	2308      	movs	r3, #8
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d0:	4619      	mov	r1, r3
 80043d2:	480a      	ldr	r0, [pc, #40]	; (80043fc <HAL_UART_MspInit+0x198>)
 80043d4:	f001 fbf6 	bl	8005bc4 <HAL_GPIO_Init>
}
 80043d8:	bf00      	nop
 80043da:	3738      	adds	r7, #56	; 0x38
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40007800 	.word	0x40007800
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40021400 	.word	0x40021400
 80043ec:	40011000 	.word	0x40011000
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020000 	.word	0x40020000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	40020800 	.word	0x40020800

08004400 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_FMC_MspInit+0x100>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d16d      	bne.n	80044f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800441c:	4b38      	ldr	r3, [pc, #224]	; (8004500 <HAL_FMC_MspInit+0x100>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <HAL_FMC_MspInit+0x104>)
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	4a37      	ldr	r2, [pc, #220]	; (8004504 <HAL_FMC_MspInit+0x104>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6393      	str	r3, [r2, #56]	; 0x38
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_FMC_MspInit+0x104>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800443a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800443e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004440:	2302      	movs	r3, #2
 8004442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004448:	2303      	movs	r3, #3
 800444a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800444c:	230c      	movs	r3, #12
 800444e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	4619      	mov	r1, r3
 8004454:	482c      	ldr	r0, [pc, #176]	; (8004508 <HAL_FMC_MspInit+0x108>)
 8004456:	f001 fbb5 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800445a:	f248 1333 	movw	r3, #33075	; 0x8133
 800445e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004460:	2302      	movs	r3, #2
 8004462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004468:	2303      	movs	r3, #3
 800446a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800446c:	230c      	movs	r3, #12
 800446e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4825      	ldr	r0, [pc, #148]	; (800450c <HAL_FMC_MspInit+0x10c>)
 8004476:	f001 fba5 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800447a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800447e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004480:	2302      	movs	r3, #2
 8004482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004488:	2303      	movs	r3, #3
 800448a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800448c:	230c      	movs	r3, #12
 800448e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	4619      	mov	r1, r3
 8004494:	481e      	ldr	r0, [pc, #120]	; (8004510 <HAL_FMC_MspInit+0x110>)
 8004496:	f001 fb95 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800449a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800449e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044ac:	230c      	movs	r3, #12
 80044ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4817      	ldr	r0, [pc, #92]	; (8004514 <HAL_FMC_MspInit+0x114>)
 80044b6:	f001 fb85 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80044ba:	2328      	movs	r3, #40	; 0x28
 80044bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c6:	2303      	movs	r3, #3
 80044c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044ca:	230c      	movs	r3, #12
 80044cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4811      	ldr	r0, [pc, #68]	; (8004518 <HAL_FMC_MspInit+0x118>)
 80044d4:	f001 fb76 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044d8:	2308      	movs	r3, #8
 80044da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e4:	2303      	movs	r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044e8:	230c      	movs	r3, #12
 80044ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	480a      	ldr	r0, [pc, #40]	; (800451c <HAL_FMC_MspInit+0x11c>)
 80044f2:	f001 fb67 	bl	8005bc4 <HAL_GPIO_Init>
 80044f6:	e000      	b.n	80044fa <HAL_FMC_MspInit+0xfa>
    return;
 80044f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000568 	.word	0x20000568
 8004504:	40023800 	.word	0x40023800
 8004508:	40021000 	.word	0x40021000
 800450c:	40021800 	.word	0x40021800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021400 	.word	0x40021400
 8004518:	40021c00 	.word	0x40021c00
 800451c:	40020800 	.word	0x40020800

08004520 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004528:	f7ff ff6a 	bl	8004400 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004544:	2200      	movs	r2, #0
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	2036      	movs	r0, #54	; 0x36
 800454a:	f000 fdd9 	bl	8005100 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800454e:	2036      	movs	r0, #54	; 0x36
 8004550:	f000 fdf2 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004554:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <HAL_InitTick+0xa0>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <HAL_InitTick+0xa0>)
 800455a:	f043 0310 	orr.w	r3, r3, #16
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
 8004560:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <HAL_InitTick+0xa0>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800456c:	f107 0210 	add.w	r2, r7, #16
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f003 fc3e 	bl	8007df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800457c:	f003 fc14 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 8004580:	4603      	mov	r3, r0
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <HAL_InitTick+0xa4>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0c9b      	lsrs	r3, r3, #18
 8004590:	3b01      	subs	r3, #1
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_InitTick+0xa8>)
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <HAL_InitTick+0xac>)
 8004598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <HAL_InitTick+0xa8>)
 800459c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80045a2:	4a0e      	ldr	r2, [pc, #56]	; (80045dc <HAL_InitTick+0xa8>)
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_InitTick+0xa8>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_InitTick+0xa8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80045b4:	4809      	ldr	r0, [pc, #36]	; (80045dc <HAL_InitTick+0xa8>)
 80045b6:	f004 fd12 	bl	8008fde <HAL_TIM_Base_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80045c0:	4806      	ldr	r0, [pc, #24]	; (80045dc <HAL_InitTick+0xa8>)
 80045c2:	f004 fd37 	bl	8009034 <HAL_TIM_Base_Start_IT>
 80045c6:	4603      	mov	r3, r0
 80045c8:	e000      	b.n	80045cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3730      	adds	r7, #48	; 0x30
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	431bde83 	.word	0x431bde83
 80045dc:	20008d58 	.word	0x20008d58
 80045e0:	40001000 	.word	0x40001000

080045e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045e8:	e7fe      	b.n	80045e8 <NMI_Handler+0x4>

080045ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ee:	e7fe      	b.n	80045ee <HardFault_Handler+0x4>

080045f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045f4:	e7fe      	b.n	80045f4 <MemManage_Handler+0x4>

080045f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045fa:	e7fe      	b.n	80045fa <BusFault_Handler+0x4>

080045fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <UsageFault_Handler+0x4>

08004602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <USART1_IRQHandler+0x10>)
 8004616:	f005 ff93 	bl	800a540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20008a44 	.word	0x20008a44

08004624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004628:	4803      	ldr	r0, [pc, #12]	; (8004638 <TIM6_DAC_IRQHandler+0x14>)
 800462a:	f000 fdb5 	bl	8005198 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800462e:	4803      	ldr	r0, [pc, #12]	; (800463c <TIM6_DAC_IRQHandler+0x18>)
 8004630:	f004 fd5f 	bl	80090f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20008ac4 	.word	0x20008ac4
 800463c:	20008d58 	.word	0x20008d58

08004640 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <LTDC_IRQHandler+0x10>)
 8004646:	f002 fc23 	bl	8006e90 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000890c 	.word	0x2000890c

08004654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <_sbrk+0x5c>)
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <_sbrk+0x60>)
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <_sbrk+0x64>)
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <_sbrk+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <_sbrk+0x64>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d207      	bcs.n	8004694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004684:	f009 f8fe 	bl	800d884 <__errno>
 8004688:	4602      	mov	r2, r0
 800468a:	230c      	movs	r3, #12
 800468c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e009      	b.n	80046a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <_sbrk+0x64>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <_sbrk+0x64>)
 80046a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20050000 	.word	0x20050000
 80046b4:	00000400 	.word	0x00000400
 80046b8:	2000056c 	.word	0x2000056c
 80046bc:	20008da0 	.word	0x20008da0

080046c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <SystemInit+0x28>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <SystemInit+0x28>)
 80046cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <SystemInit+0x28>)
 80046d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046da:	609a      	str	r2, [r3, #8]
#endif
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80046ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004724 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046f2:	e003      	b.n	80046fc <LoopCopyDataInit>

080046f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046fa:	3104      	adds	r1, #4

080046fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004700:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004702:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004704:	d3f6      	bcc.n	80046f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004706:	4a0b      	ldr	r2, [pc, #44]	; (8004734 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004708:	e002      	b.n	8004710 <LoopFillZerobss>

0800470a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800470a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800470c:	f842 3b04 	str.w	r3, [r2], #4

08004710 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004712:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004714:	d3f9      	bcc.n	800470a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004716:	f7ff ffd3 	bl	80046c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800471a:	f009 f8b9 	bl	800d890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800471e:	f7fc fa1d 	bl	8000b5c <main>
  bx  lr    
 8004722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004724:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004728:	0800fcec 	.word	0x0800fcec
  ldr  r0, =_sdata
 800472c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004730:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8004734:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8004738:	20008da0 	.word	0x20008da0

0800473c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800473c:	e7fe      	b.n	800473c <ADC_IRQHandler>

0800473e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004742:	2003      	movs	r0, #3
 8004744:	f000 fcd1 	bl	80050ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004748:	2000      	movs	r0, #0
 800474a:	f7ff fef3 	bl	8004534 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800474e:	f7ff f9b7 	bl	8003ac0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_IncTick+0x20>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_IncTick+0x24>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4413      	add	r3, r2
 8004768:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_IncTick+0x24>)
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	2000003c 	.word	0x2000003c
 800477c:	20008d98 	.word	0x20008d98

08004780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return uwTick;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_GetTick+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20008d98 	.word	0x20008d98

08004798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a0:	f7ff ffee 	bl	8004780 <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d005      	beq.n	80047be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_Delay+0x40>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047be:	bf00      	nop
 80047c0:	f7ff ffde 	bl	8004780 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d8f7      	bhi.n	80047c0 <HAL_Delay+0x28>
  {
  }
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	2000003c 	.word	0x2000003c

080047dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e031      	b.n	8004856 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff f988 	bl	8003b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d116      	bne.n	8004848 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <HAL_ADC_Init+0x84>)
 8004820:	4013      	ands	r3, r2
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fab6 	bl	8004d9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
 8004846:	e001      	b.n	800484c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	ffffeefd 	.word	0xffffeefd

08004864 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_ADC_Start+0x1a>
 800487a:	2302      	movs	r3, #2
 800487c:	e0a0      	b.n	80049c0 <HAL_ADC_Start+0x15c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d018      	beq.n	80048c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80048a4:	4b49      	ldr	r3, [pc, #292]	; (80049cc <HAL_ADC_Start+0x168>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a49      	ldr	r2, [pc, #292]	; (80049d0 <HAL_ADC_Start+0x16c>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0c9a      	lsrs	r2, r3, #18
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80048b8:	e002      	b.n	80048c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f9      	bne.n	80048ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d174      	bne.n	80049be <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d8:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_ADC_Start+0x170>)
 80048da:	4013      	ands	r3, r2
 80048dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d106      	bne.n	800491e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	f023 0206 	bic.w	r2, r3, #6
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	645a      	str	r2, [r3, #68]	; 0x44
 800491c:	e002      	b.n	8004924 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004934:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004936:	4b28      	ldr	r3, [pc, #160]	; (80049d8 <HAL_ADC_Start+0x174>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d136      	bne.n	80049be <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e02d      	b.n	80049be <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_ADC_Start+0x178>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10e      	bne.n	800498a <HAL_ADC_Start+0x126>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004988:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_ADC_Start+0x174>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d113      	bne.n	80049be <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <HAL_ADC_Start+0x17c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10e      	bne.n	80049be <HAL_ADC_Start+0x15a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d107      	bne.n	80049be <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000034 	.word	0x20000034
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	fffff8fe 	.word	0xfffff8fe
 80049d8:	40012300 	.word	0x40012300
 80049dc:	40012000 	.word	0x40012000
 80049e0:	40012200 	.word	0x40012200

080049e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d113      	bne.n	8004a2a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d10b      	bne.n	8004a2a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e05c      	b.n	8004ae4 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004a2a:	f7ff fea9 	bl	8004780 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a30:	e01a      	b.n	8004a68 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d016      	beq.n	8004a68 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_ADC_PollForConversion+0x6c>
 8004a40:	f7ff fe9e 	bl	8004780 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d20b      	bcs.n	8004a68 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0204 	orr.w	r2, r3, #4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e03d      	b.n	8004ae4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d1dd      	bne.n	8004a32 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0212 	mvn.w	r2, #18
 8004a7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d123      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11f      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d111      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e12a      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x272>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d93a      	bls.n	8004baa <HAL_ADC_ConfigChannel+0xa2>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3c:	d035      	beq.n	8004baa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68d9      	ldr	r1, [r3, #12]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	3b1e      	subs	r3, #30
 8004b54:	2207      	movs	r2, #7
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	400a      	ands	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <HAL_ADC_ConfigChannel+0x280>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10a      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68d9      	ldr	r1, [r3, #12]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	061a      	lsls	r2, r3, #24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b82:	e035      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	4618      	mov	r0, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4403      	add	r3, r0
 8004b9c:	3b1e      	subs	r3, #30
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ba8:	e022      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6919      	ldr	r1, [r3, #16]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4613      	mov	r3, r2
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	4413      	add	r3, r2
 8004bbe:	2207      	movs	r2, #7
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	400a      	ands	r2, r1
 8004bcc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6919      	ldr	r1, [r3, #16]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	4618      	mov	r0, r3
 8004be0:	4603      	mov	r3, r0
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4403      	add	r3, r0
 8004be6:	409a      	lsls	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b06      	cmp	r3, #6
 8004bf6:	d824      	bhi.n	8004c42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	3b05      	subs	r3, #5
 8004c0a:	221f      	movs	r2, #31
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43da      	mvns	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	400a      	ands	r2, r1
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	4618      	mov	r0, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	3b05      	subs	r3, #5
 8004c34:	fa00 f203 	lsl.w	r2, r0, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c40:	e04c      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d824      	bhi.n	8004c94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	3b23      	subs	r3, #35	; 0x23
 8004c5c:	221f      	movs	r2, #31
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	400a      	ands	r2, r1
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4618      	mov	r0, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	3b23      	subs	r3, #35	; 0x23
 8004c86:	fa00 f203 	lsl.w	r2, r0, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
 8004c92:	e023      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b41      	subs	r3, #65	; 0x41
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43da      	mvns	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	3b41      	subs	r3, #65	; 0x41
 8004cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <HAL_ADC_ConfigChannel+0x284>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10a      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x1f4>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cee:	d105      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004cf6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004cfa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <HAL_ADC_ConfigChannel+0x284>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d109      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x212>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b12      	cmp	r3, #18
 8004d0c:	d105      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d18:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_ADC_ConfigChannel+0x284>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d125      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x268>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <HAL_ADC_ConfigChannel+0x280>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <HAL_ADC_ConfigChannel+0x22e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b11      	cmp	r3, #17
 8004d34:	d11c      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <HAL_ADC_ConfigChannel+0x280>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d111      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_ADC_ConfigChannel+0x28c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <HAL_ADC_ConfigChannel+0x290>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0c9a      	lsrs	r2, r3, #18
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d62:	e002      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f9      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	10000012 	.word	0x10000012
 8004d8c:	40012000 	.word	0x40012000
 8004d90:	40012300 	.word	0x40012300
 8004d94:	20000034 	.word	0x20000034
 8004d98:	431bde83 	.word	0x431bde83

08004d9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004da4:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <ADC_Init+0x1ec>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a77      	ldr	r2, [pc, #476]	; (8004f88 <ADC_Init+0x1ec>)
 8004daa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004dae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004db0:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <ADC_Init+0x1ec>)
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4973      	ldr	r1, [pc, #460]	; (8004f88 <ADC_Init+0x1ec>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	021a      	lsls	r2, r3, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	4a58      	ldr	r2, [pc, #352]	; (8004f8c <ADC_Init+0x1f0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	e00f      	b.n	8004e96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0202 	bic.w	r2, r2, #2
 8004ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	005a      	lsls	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	035a      	lsls	r2, r3, #13
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e007      	b.n	8004f0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	051a      	lsls	r2, r3, #20
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f4e:	025a      	lsls	r2, r3, #9
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	029a      	lsls	r2, r3, #10
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40012300 	.word	0x40012300
 8004f8c:	0f000001 	.word	0x0f000001

08004f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fac:	4013      	ands	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fbe:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	60d3      	str	r3, [r2, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000ed00 	.word	0xe000ed00
 8004fd4:	05fa0000 	.word	0x05fa0000

08004fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	f003 0307 	and.w	r3, r3, #7
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	2b00      	cmp	r3, #0
 8005004:	db0b      	blt.n	800501e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	f003 021f 	and.w	r2, r3, #31
 800500c:	4907      	ldr	r1, [pc, #28]	; (800502c <__NVIC_EnableIRQ+0x38>)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2001      	movs	r0, #1
 8005016:	fa00 f202 	lsl.w	r2, r0, r2
 800501a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	e000e100 	.word	0xe000e100

08005030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db0a      	blt.n	800505a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	490c      	ldr	r1, [pc, #48]	; (800507c <__NVIC_SetPriority+0x4c>)
 800504a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504e:	0112      	lsls	r2, r2, #4
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	440b      	add	r3, r1
 8005054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005058:	e00a      	b.n	8005070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4908      	ldr	r1, [pc, #32]	; (8005080 <__NVIC_SetPriority+0x50>)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	3b04      	subs	r3, #4
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	440b      	add	r3, r1
 800506e:	761a      	strb	r2, [r3, #24]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	e000e100 	.word	0xe000e100
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005084:	b480      	push	{r7}
 8005086:	b089      	sub	sp, #36	; 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f1c3 0307 	rsb	r3, r3, #7
 800509e:	2b04      	cmp	r3, #4
 80050a0:	bf28      	it	cs
 80050a2:	2304      	movcs	r3, #4
 80050a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3304      	adds	r3, #4
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d902      	bls.n	80050b4 <NVIC_EncodePriority+0x30>
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3b03      	subs	r3, #3
 80050b2:	e000      	b.n	80050b6 <NVIC_EncodePriority+0x32>
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43da      	mvns	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	401a      	ands	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050cc:	f04f 31ff 	mov.w	r1, #4294967295
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	43d9      	mvns	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050dc:	4313      	orrs	r3, r2
         );
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3724      	adds	r7, #36	; 0x24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff4c 	bl	8004f90 <__NVIC_SetPriorityGrouping>
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005112:	f7ff ff61 	bl	8004fd8 <__NVIC_GetPriorityGrouping>
 8005116:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f7ff ffb1 	bl	8005084 <NVIC_EncodePriority>
 8005122:	4602      	mov	r2, r0
 8005124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ff80 	bl	8005030 <__NVIC_SetPriority>
}
 8005130:	bf00      	nop
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff54 	bl	8004ff4 <__NVIC_EnableIRQ>
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e014      	b.n	8005190 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fe fd38 	bl	8003bec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ae:	d118      	bne.n	80051e2 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2204      	movs	r2, #4
 80051b4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f825 	bl	800522c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f0:	d118      	bne.n	8005224 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f043 0202 	orr.w	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800520c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f85b 	bl	80052da <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_DAC_ConfigChannel+0x20>
 800525c:	2302      	movs	r3, #2
 800525e:	e036      	b.n	80052ce <HAL_DAC_ConfigChannel+0x8e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2202      	movs	r2, #2
 800526a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005274:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4013      	ands	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	22c0      	movs	r2, #192	; 0xc0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	400a      	ands	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff fa40 	bl	8004780 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e099      	b.n	8005440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532c:	e00f      	b.n	800534e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532e:	f7ff fa27 	bl	8004780 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b05      	cmp	r3, #5
 800533a:	d908      	bls.n	800534e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e078      	b.n	8005440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e8      	bne.n	800532e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <HAL_DMA_Init+0x158>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800537a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	4313      	orrs	r3, r2
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d117      	bne.n	8005412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8df 	bl	80055b8 <DMA_CheckFifoParam>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800540e:	2301      	movs	r3, #1
 8005410:	e016      	b.n	8005440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f896 	bl	800554c <DMA_CalcBaseAndBitshift>
 8005420:	4603      	mov	r3, r0
 8005422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005428:	223f      	movs	r2, #63	; 0x3f
 800542a:	409a      	lsls	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	f010803f 	.word	0xf010803f

0800544c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e050      	b.n	8005500 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d101      	bne.n	800546e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
 800546c:	e048      	b.n	8005500 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2221      	movs	r2, #33	; 0x21
 80054ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f84c 	bl	800554c <DMA_CalcBaseAndBitshift>
 80054b4:	4603      	mov	r3, r0
 80054b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	223f      	movs	r2, #63	; 0x3f
 80054be:	409a      	lsls	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d004      	beq.n	8005526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e00c      	b.n	8005540 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2205      	movs	r2, #5
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	3b10      	subs	r3, #16
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <DMA_CalcBaseAndBitshift+0x60>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005566:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <DMA_CalcBaseAndBitshift+0x64>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d908      	bls.n	800558c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005582:	4013      	ands	r3, r2
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	659a      	str	r2, [r3, #88]	; 0x58
 800558a:	e006      	b.n	800559a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	aaaaaaab 	.word	0xaaaaaaab
 80055b0:	0800fca0 	.word	0x0800fca0
 80055b4:	fffffc00 	.word	0xfffffc00

080055b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d11f      	bne.n	8005612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d855      	bhi.n	8005684 <DMA_CheckFifoParam+0xcc>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <DMA_CheckFifoParam+0x28>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005603 	.word	0x08005603
 80055e8:	080055f1 	.word	0x080055f1
 80055ec:	08005685 	.word	0x08005685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d045      	beq.n	8005688 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005600:	e042      	b.n	8005688 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800560a:	d13f      	bne.n	800568c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005610:	e03c      	b.n	800568c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561a:	d121      	bne.n	8005660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d836      	bhi.n	8005690 <DMA_CheckFifoParam+0xd8>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <DMA_CheckFifoParam+0x70>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005639 	.word	0x08005639
 800562c:	0800563f 	.word	0x0800563f
 8005630:	08005639 	.word	0x08005639
 8005634:	08005651 	.word	0x08005651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
      break;
 800563c:	e02f      	b.n	800569e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d024      	beq.n	8005694 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564e:	e021      	b.n	8005694 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005658:	d11e      	bne.n	8005698 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800565e:	e01b      	b.n	8005698 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <DMA_CheckFifoParam+0xb4>
 8005666:	2b03      	cmp	r3, #3
 8005668:	d003      	beq.n	8005672 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800566a:	e018      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	e015      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      break;
 8005682:	e00b      	b.n	800569c <DMA_CheckFifoParam+0xe4>
      break;
 8005684:	bf00      	nop
 8005686:	e00a      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005688:	bf00      	nop
 800568a:	e008      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 800568c:	bf00      	nop
 800568e:	e006      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005690:	bf00      	nop
 8005692:	e004      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005694:	bf00      	nop
 8005696:	e002      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;   
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 800569c:	bf00      	nop
    }
  } 
  
  return status; 
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e039      	b.n	8005732 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fe fad2 	bl	8003c7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fc:	f023 0107 	bic.w	r1, r3, #7
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_DMA2D_Init+0x90>)
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68d1      	ldr	r1, [r2, #12]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	430b      	orrs	r3, r1
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	ffffc000 	.word	0xffffc000

08005740 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_DMA2D_Start+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e018      	b.n	800578e <HAL_DMA2D_Start+0x4e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f988 	bl	8005a8c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d056      	beq.n	8005860 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80057b2:	f7fe ffe5 	bl	8004780 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80057b8:	e04b      	b.n	8005852 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d023      	beq.n	8005814 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2221      	movs	r2, #33	; 0x21
 80057fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0a5      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d01a      	beq.n	8005852 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800581c:	f7fe ffb0 	bl	8004780 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <HAL_DMA2D_PollForTransfer+0x9c>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e086      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ac      	beq.n	80057ba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d061      	beq.n	8005946 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005882:	f7fe ff7d 	bl	8004780 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005888:	e056      	b.n	8005938 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02e      	beq.n	80058fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2229      	movs	r2, #41	; 0x29
 80058e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2204      	movs	r2, #4
 80058ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e032      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d01a      	beq.n	8005938 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005902:	f7fe ff3d 	bl	8004780 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <HAL_DMA2D_PollForTransfer+0x182>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e013      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0a1      	beq.n	800588a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2212      	movs	r2, #18
 800594c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_DMA2D_ConfigLayer+0x20>
 8005984:	2302      	movs	r3, #2
 8005986:	e079      	b.n	8005a7c <HAL_DMA2D_ConfigLayer+0x114>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3318      	adds	r3, #24
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80059b2:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <HAL_DMA2D_ConfigLayer+0x120>)
 80059b4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b0a      	cmp	r3, #10
 80059bc:	d003      	beq.n	80059c6 <HAL_DMA2D_ConfigLayer+0x5e>
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d107      	bne.n	80059d6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e005      	b.n	80059e2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d120      	bne.n	8005a2a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	43db      	mvns	r3, r3
 80059f2:	ea02 0103 	and.w	r1, r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b0a      	cmp	r3, #10
 8005a10:	d003      	beq.n	8005a1a <HAL_DMA2D_ConfigLayer+0xb2>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d127      	bne.n	8005a6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
 8005a28:	e01f      	b.n	8005a6a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	ea02 0103 	and.w	r1, r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b0a      	cmp	r3, #10
 8005a52:	d003      	beq.n	8005a5c <HAL_DMA2D_ConfigLayer+0xf4>
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d106      	bne.n	8005a6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a68:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	ff03000f 	.word	0xff03000f

08005a8c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b08b      	sub	sp, #44	; 0x2c
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	041a      	lsls	r2, r3, #16
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ac4:	d174      	bne.n	8005bb0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005adc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	e053      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d106      	bne.n	8005b14 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e048      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d111      	bne.n	8005b40 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	0cdb      	lsrs	r3, r3, #19
 8005b20:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	0a9b      	lsrs	r3, r3, #10
 8005b26:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	02db      	lsls	r3, r3, #11
 8005b36:	4313      	orrs	r3, r2
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3e:	e032      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d117      	bne.n	8005b78 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	0fdb      	lsrs	r3, r3, #31
 8005b4c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	0cdb      	lsrs	r3, r3, #19
 8005b52:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	0adb      	lsrs	r3, r3, #11
 8005b58:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	029b      	lsls	r3, r3, #10
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	03db      	lsls	r3, r3, #15
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	e016      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	0f1b      	lsrs	r3, r3, #28
 8005b7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	0d1b      	lsrs	r3, r3, #20
 8005b82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	0b1b      	lsrs	r3, r3, #12
 8005b88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005bae:	e003      	b.n	8005bb8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	372c      	adds	r7, #44	; 0x2c
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	e175      	b.n	8005ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005be4:	2201      	movs	r2, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	f040 8164 	bne.w	8005eca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d00b      	beq.n	8005c22 <HAL_GPIO_Init+0x5e>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d007      	beq.n	8005c22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c16:	2b11      	cmp	r3, #17
 8005c18:	d003      	beq.n	8005c22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b12      	cmp	r3, #18
 8005c20:	d130      	bne.n	8005c84 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c58:	2201      	movs	r2, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 0201 	and.w	r2, r3, #1
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	2203      	movs	r2, #3
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d003      	beq.n	8005cc4 <HAL_GPIO_Init+0x100>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b12      	cmp	r3, #18
 8005cc2:	d123      	bne.n	8005d0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	08da      	lsrs	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3208      	adds	r2, #8
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	220f      	movs	r2, #15
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	08da      	lsrs	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3208      	adds	r2, #8
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	2203      	movs	r2, #3
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 0203 	and.w	r2, r3, #3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80be 	beq.w	8005eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4e:	4b65      	ldr	r3, [pc, #404]	; (8005ee4 <HAL_GPIO_Init+0x320>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	4a64      	ldr	r2, [pc, #400]	; (8005ee4 <HAL_GPIO_Init+0x320>)
 8005d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d58:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5a:	4b62      	ldr	r3, [pc, #392]	; (8005ee4 <HAL_GPIO_Init+0x320>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005d66:	4a60      	ldr	r2, [pc, #384]	; (8005ee8 <HAL_GPIO_Init+0x324>)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	220f      	movs	r2, #15
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a57      	ldr	r2, [pc, #348]	; (8005eec <HAL_GPIO_Init+0x328>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d037      	beq.n	8005e02 <HAL_GPIO_Init+0x23e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a56      	ldr	r2, [pc, #344]	; (8005ef0 <HAL_GPIO_Init+0x32c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_GPIO_Init+0x23a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a55      	ldr	r2, [pc, #340]	; (8005ef4 <HAL_GPIO_Init+0x330>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02b      	beq.n	8005dfa <HAL_GPIO_Init+0x236>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a54      	ldr	r2, [pc, #336]	; (8005ef8 <HAL_GPIO_Init+0x334>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d025      	beq.n	8005df6 <HAL_GPIO_Init+0x232>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a53      	ldr	r2, [pc, #332]	; (8005efc <HAL_GPIO_Init+0x338>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01f      	beq.n	8005df2 <HAL_GPIO_Init+0x22e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a52      	ldr	r2, [pc, #328]	; (8005f00 <HAL_GPIO_Init+0x33c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d019      	beq.n	8005dee <HAL_GPIO_Init+0x22a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a51      	ldr	r2, [pc, #324]	; (8005f04 <HAL_GPIO_Init+0x340>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_GPIO_Init+0x226>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a50      	ldr	r2, [pc, #320]	; (8005f08 <HAL_GPIO_Init+0x344>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00d      	beq.n	8005de6 <HAL_GPIO_Init+0x222>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a4f      	ldr	r2, [pc, #316]	; (8005f0c <HAL_GPIO_Init+0x348>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <HAL_GPIO_Init+0x21e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a4e      	ldr	r2, [pc, #312]	; (8005f10 <HAL_GPIO_Init+0x34c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_GPIO_Init+0x21a>
 8005dda:	2309      	movs	r3, #9
 8005ddc:	e012      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dde:	230a      	movs	r3, #10
 8005de0:	e010      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005de2:	2308      	movs	r3, #8
 8005de4:	e00e      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005de6:	2307      	movs	r3, #7
 8005de8:	e00c      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dea:	2306      	movs	r3, #6
 8005dec:	e00a      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dee:	2305      	movs	r3, #5
 8005df0:	e008      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005df2:	2304      	movs	r3, #4
 8005df4:	e006      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005df6:	2303      	movs	r3, #3
 8005df8:	e004      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e002      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005e02:	2300      	movs	r3, #0
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	f002 0203 	and.w	r2, r2, #3
 8005e0a:	0092      	lsls	r2, r2, #2
 8005e0c:	4093      	lsls	r3, r2
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005e14:	4934      	ldr	r1, [pc, #208]	; (8005ee8 <HAL_GPIO_Init+0x324>)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e22:	4b3c      	ldr	r3, [pc, #240]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e46:	4a33      	ldr	r2, [pc, #204]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e70:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b0f      	cmp	r3, #15
 8005ed4:	f67f ae86 	bls.w	8005be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ed8:	bf00      	nop
 8005eda:	3724      	adds	r7, #36	; 0x24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40013800 	.word	0x40013800
 8005eec:	40020000 	.word	0x40020000
 8005ef0:	40020400 	.word	0x40020400
 8005ef4:	40020800 	.word	0x40020800
 8005ef8:	40020c00 	.word	0x40020c00
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40021400 	.word	0x40021400
 8005f04:	40021800 	.word	0x40021800
 8005f08:	40021c00 	.word	0x40021c00
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40022400 	.word	0x40022400
 8005f14:	40013c00 	.word	0x40013c00

08005f18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e0d9      	b.n	80060e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f34:	2201      	movs	r2, #1
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f040 80c9 	bne.w	80060e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005f50:	4a6a      	ldr	r2, [pc, #424]	; (80060fc <HAL_GPIO_DeInit+0x1e4>)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	3302      	adds	r3, #2
 8005f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a62      	ldr	r2, [pc, #392]	; (8006100 <HAL_GPIO_DeInit+0x1e8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d037      	beq.n	8005fea <HAL_GPIO_DeInit+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a61      	ldr	r2, [pc, #388]	; (8006104 <HAL_GPIO_DeInit+0x1ec>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <HAL_GPIO_DeInit+0xce>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a60      	ldr	r2, [pc, #384]	; (8006108 <HAL_GPIO_DeInit+0x1f0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02b      	beq.n	8005fe2 <HAL_GPIO_DeInit+0xca>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a5f      	ldr	r2, [pc, #380]	; (800610c <HAL_GPIO_DeInit+0x1f4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d025      	beq.n	8005fde <HAL_GPIO_DeInit+0xc6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a5e      	ldr	r2, [pc, #376]	; (8006110 <HAL_GPIO_DeInit+0x1f8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01f      	beq.n	8005fda <HAL_GPIO_DeInit+0xc2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a5d      	ldr	r2, [pc, #372]	; (8006114 <HAL_GPIO_DeInit+0x1fc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d019      	beq.n	8005fd6 <HAL_GPIO_DeInit+0xbe>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a5c      	ldr	r2, [pc, #368]	; (8006118 <HAL_GPIO_DeInit+0x200>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_GPIO_DeInit+0xba>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a5b      	ldr	r2, [pc, #364]	; (800611c <HAL_GPIO_DeInit+0x204>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00d      	beq.n	8005fce <HAL_GPIO_DeInit+0xb6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a5a      	ldr	r2, [pc, #360]	; (8006120 <HAL_GPIO_DeInit+0x208>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <HAL_GPIO_DeInit+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a59      	ldr	r2, [pc, #356]	; (8006124 <HAL_GPIO_DeInit+0x20c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d101      	bne.n	8005fc6 <HAL_GPIO_DeInit+0xae>
 8005fc2:	2309      	movs	r3, #9
 8005fc4:	e012      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e010      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	e00e      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fce:	2307      	movs	r3, #7
 8005fd0:	e00c      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fd2:	2306      	movs	r3, #6
 8005fd4:	e00a      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fd6:	2305      	movs	r3, #5
 8005fd8:	e008      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	e006      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e004      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e002      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	f002 0203 	and.w	r2, r2, #3
 8005ff2:	0092      	lsls	r2, r2, #2
 8005ff4:	4093      	lsls	r3, r2
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d132      	bne.n	8006062 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ffc:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	43db      	mvns	r3, r3
 8006004:	4948      	ldr	r1, [pc, #288]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006006:	4013      	ands	r3, r2
 8006008:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800600a:	4b47      	ldr	r3, [pc, #284]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	43db      	mvns	r3, r3
 8006012:	4945      	ldr	r1, [pc, #276]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006014:	4013      	ands	r3, r2
 8006016:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006018:	4b43      	ldr	r3, [pc, #268]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	43db      	mvns	r3, r3
 8006020:	4941      	ldr	r1, [pc, #260]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006022:	4013      	ands	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006026:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	43db      	mvns	r3, r3
 800602e:	493e      	ldr	r1, [pc, #248]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006030:	4013      	ands	r3, r2
 8006032:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	220f      	movs	r2, #15
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006044:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <HAL_GPIO_DeInit+0x1e4>)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	3302      	adds	r3, #2
 800604c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	43da      	mvns	r2, r3
 8006054:	4829      	ldr	r0, [pc, #164]	; (80060fc <HAL_GPIO_DeInit+0x1e4>)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	089b      	lsrs	r3, r3, #2
 800605a:	400a      	ands	r2, r1
 800605c:	3302      	adds	r3, #2
 800605e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	2103      	movs	r1, #3
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	08da      	lsrs	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3208      	adds	r2, #8
 8006080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	220f      	movs	r2, #15
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	43db      	mvns	r3, r3
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	08d2      	lsrs	r2, r2, #3
 8006098:	4019      	ands	r1, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3208      	adds	r2, #8
 800609e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2103      	movs	r1, #3
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	2101      	movs	r1, #1
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	401a      	ands	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	2103      	movs	r1, #3
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	401a      	ands	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	3301      	adds	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	f67f af22 	bls.w	8005f34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40013800 	.word	0x40013800
 8006100:	40020000 	.word	0x40020000
 8006104:	40020400 	.word	0x40020400
 8006108:	40020800 	.word	0x40020800
 800610c:	40020c00 	.word	0x40020c00
 8006110:	40021000 	.word	0x40021000
 8006114:	40021400 	.word	0x40021400
 8006118:	40021800 	.word	0x40021800
 800611c:	40021c00 	.word	0x40021c00
 8006120:	40022000 	.word	0x40022000
 8006124:	40022400 	.word	0x40022400
 8006128:	40013c00 	.word	0x40013c00

0800612c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
 8006148:	e001      	b.n	800614e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
 8006168:	4613      	mov	r3, r2
 800616a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800616c:	787b      	ldrb	r3, [r7, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006178:	e003      	b.n	8006182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800617a:	887b      	ldrh	r3, [r7, #2]
 800617c:	041a      	lsls	r2, r3, #16
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	619a      	str	r2, [r3, #24]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e07f      	b.n	80062a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fd fd80 	bl	8003cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	e006      	b.n	8006218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d104      	bne.n	800622a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <HAL_I2C_Init+0x11c>)
 8006236:	430b      	orrs	r3, r1
 8006238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	ea42 0103 	orr.w	r1, r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	021a      	lsls	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	02008000 	.word	0x02008000

080062b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e021      	b.n	8006306 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	; 0x24
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fd fd66 	bl	8003dac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4603      	mov	r3, r0
 8006320:	817b      	strh	r3, [r7, #10]
 8006322:	460b      	mov	r3, r1
 8006324:	813b      	strh	r3, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b20      	cmp	r3, #32
 8006334:	f040 80f9 	bne.w	800652a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_I2C_Mem_Write+0x34>
 800633e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800634a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0ed      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_I2C_Mem_Write+0x4e>
 800635a:	2302      	movs	r3, #2
 800635c:	e0e6      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006366:	f7fe fa0b 	bl	8004780 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2319      	movs	r3, #25
 8006372:	2201      	movs	r2, #1
 8006374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fad1 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0d1      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2221      	movs	r2, #33	; 0x21
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2240      	movs	r2, #64	; 0x40
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063b0:	88f8      	ldrh	r0, [r7, #6]
 80063b2:	893a      	ldrh	r2, [r7, #8]
 80063b4:	8979      	ldrh	r1, [r7, #10]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4603      	mov	r3, r0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f9e1 	bl	8006788 <I2C_RequestMemoryWrite>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0a9      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	d90e      	bls.n	8006400 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	8979      	ldrh	r1, [r7, #10]
 80063f0:	2300      	movs	r3, #0
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fbb3 	bl	8006b64 <I2C_TransferConfig>
 80063fe:	e00f      	b.n	8006420 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	b2da      	uxtb	r2, r3
 8006410:	8979      	ldrh	r1, [r7, #10]
 8006412:	2300      	movs	r3, #0
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fba2 	bl	8006b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fabb 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e07b      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d034      	beq.n	80064d8 <HAL_I2C_Mem_Write+0x1c8>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d130      	bne.n	80064d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	2200      	movs	r2, #0
 800647e:	2180      	movs	r1, #128	; 0x80
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fa4d 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e04d      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006494:	b29b      	uxth	r3, r3
 8006496:	2bff      	cmp	r3, #255	; 0xff
 8006498:	d90e      	bls.n	80064b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	8979      	ldrh	r1, [r7, #10]
 80064a8:	2300      	movs	r3, #0
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fb57 	bl	8006b64 <I2C_TransferConfig>
 80064b6:	e00f      	b.n	80064d8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	8979      	ldrh	r1, [r7, #10]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fb46 	bl	8006b64 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d19e      	bne.n	8006420 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa9a 	bl	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e01a      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2220      	movs	r2, #32
 80064fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6859      	ldr	r1, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <HAL_I2C_Mem_Write+0x224>)
 800650a:	400b      	ands	r3, r1
 800650c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	e000      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800652a:	2302      	movs	r3, #2
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	fe00e800 	.word	0xfe00e800

08006538 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4603      	mov	r3, r0
 8006548:	817b      	strh	r3, [r7, #10]
 800654a:	460b      	mov	r3, r1
 800654c:	813b      	strh	r3, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b20      	cmp	r3, #32
 800655c:	f040 80fd 	bne.w	800675a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_I2C_Mem_Read+0x34>
 8006566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0f1      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_I2C_Mem_Read+0x4e>
 8006582:	2302      	movs	r3, #2
 8006584:	e0ea      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800658e:	f7fe f8f7 	bl	8004780 <HAL_GetTick>
 8006592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2319      	movs	r3, #25
 800659a:	2201      	movs	r2, #1
 800659c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f9bd 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0d5      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2222      	movs	r2, #34	; 0x22
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a3a      	ldr	r2, [r7, #32]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065d8:	88f8      	ldrh	r0, [r7, #6]
 80065da:	893a      	ldrh	r2, [r7, #8]
 80065dc:	8979      	ldrh	r1, [r7, #10]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	4603      	mov	r3, r0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f921 	bl	8006830 <I2C_RequestMemoryRead>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0ad      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2bff      	cmp	r3, #255	; 0xff
 8006608:	d90e      	bls.n	8006628 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	22ff      	movs	r2, #255	; 0xff
 800660e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006614:	b2da      	uxtb	r2, r3
 8006616:	8979      	ldrh	r1, [r7, #10]
 8006618:	4b52      	ldr	r3, [pc, #328]	; (8006764 <HAL_I2C_Mem_Read+0x22c>)
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fa9f 	bl	8006b64 <I2C_TransferConfig>
 8006626:	e00f      	b.n	8006648 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006636:	b2da      	uxtb	r2, r3
 8006638:	8979      	ldrh	r1, [r7, #10]
 800663a:	4b4a      	ldr	r3, [pc, #296]	; (8006764 <HAL_I2C_Mem_Read+0x22c>)
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fa8e 	bl	8006b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	2200      	movs	r2, #0
 8006650:	2104      	movs	r1, #4
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f964 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e07c      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d034      	beq.n	8006708 <HAL_I2C_Mem_Read+0x1d0>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d130      	bne.n	8006708 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	2200      	movs	r2, #0
 80066ae:	2180      	movs	r1, #128	; 0x80
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f935 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e04d      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2bff      	cmp	r3, #255	; 0xff
 80066c8:	d90e      	bls.n	80066e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	8979      	ldrh	r1, [r7, #10]
 80066d8:	2300      	movs	r3, #0
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fa3f 	bl	8006b64 <I2C_TransferConfig>
 80066e6:	e00f      	b.n	8006708 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	8979      	ldrh	r1, [r7, #10]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fa2e 	bl	8006b64 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d19a      	bne.n	8006648 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f982 	bl	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e01a      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2220      	movs	r2, #32
 800672c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_I2C_Mem_Read+0x230>)
 800673a:	400b      	ands	r3, r1
 800673c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	80002400 	.word	0x80002400
 8006768:	fe00e800 	.word	0xfe00e800

0800676c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677a:	b2db      	uxtb	r3, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4603      	mov	r3, r0
 8006798:	817b      	strh	r3, [r7, #10]
 800679a:	460b      	mov	r3, r1
 800679c:	813b      	strh	r3, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	8979      	ldrh	r1, [r7, #10]
 80067a8:	4b20      	ldr	r3, [pc, #128]	; (800682c <I2C_RequestMemoryWrite+0xa4>)
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f9d7 	bl	8006b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 f8f0 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e02c      	b.n	8006824 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d105      	bne.n	80067dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067d0:	893b      	ldrh	r3, [r7, #8]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	629a      	str	r2, [r3, #40]	; 0x28
 80067da:	e015      	b.n	8006808 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	0a1b      	lsrs	r3, r3, #8
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	69b9      	ldr	r1, [r7, #24]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f8d6 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e012      	b.n	8006824 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2200      	movs	r2, #0
 8006810:	2180      	movs	r1, #128	; 0x80
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f884 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	80002000 	.word	0x80002000

08006830 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	8979      	ldrh	r1, [r7, #10]
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <I2C_RequestMemoryRead+0xa4>)
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f984 	bl	8006b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f89d 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e02c      	b.n	80068ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d105      	bne.n	8006882 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
 8006880:	e015      	b.n	80068ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006882:	893b      	ldrh	r3, [r7, #8]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	b29b      	uxth	r3, r3
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	69b9      	ldr	r1, [r7, #24]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f883 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e012      	b.n	80068ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068a4:	893b      	ldrh	r3, [r7, #8]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2200      	movs	r2, #0
 80068b6:	2140      	movs	r1, #64	; 0x40
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f831 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	80002000 	.word	0x80002000

080068d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d103      	bne.n	80068f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d007      	beq.n	8006914 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	619a      	str	r2, [r3, #24]
  }
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006930:	e022      	b.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d01e      	beq.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fd ff21 	bl	8004780 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e00f      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	d0cd      	beq.n	8006932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069ac:	e02c      	b.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f870 	bl	8006a98 <I2C_IsAcknowledgeFailed>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e02a      	b.n	8006a18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d01e      	beq.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fd fed9 	bl	8004780 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d113      	bne.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e007      	b.n	8006a18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d1cb      	bne.n	80069ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2c:	e028      	b.n	8006a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f830 	bl	8006a98 <I2C_IsAcknowledgeFailed>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e026      	b.n	8006a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a42:	f7fd fe9d 	bl	8004780 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d302      	bcc.n	8006a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d113      	bne.n	8006a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	f043 0220 	orr.w	r2, r3, #32
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e007      	b.n	8006a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d1cf      	bne.n	8006a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d151      	bne.n	8006b56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ab2:	e022      	b.n	8006afa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d01e      	beq.n	8006afa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abc:	f7fd fe60 	bl	8004780 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d302      	bcc.n	8006ad2 <I2C_IsAcknowledgeFailed+0x3a>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d113      	bne.n	8006afa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e02e      	b.n	8006b58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d1d5      	bne.n	8006ab4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2220      	movs	r2, #32
 8006b16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fedd 	bl	80068d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <I2C_IsAcknowledgeFailed+0xc8>)
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f043 0204 	orr.w	r2, r3, #4
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	fe00e800 	.word	0xfe00e800

08006b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	817b      	strh	r3, [r7, #10]
 8006b72:	4613      	mov	r3, r2
 8006b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	0d5b      	lsrs	r3, r3, #21
 8006b80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b84:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <I2C_TransferConfig+0x58>)
 8006b86:	430b      	orrs	r3, r1
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	ea02 0103 	and.w	r1, r2, r3
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b94:	7a7b      	ldrb	r3, [r7, #9]
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	03ff63ff 	.word	0x03ff63ff

08006bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d138      	bne.n	8006c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e032      	b.n	8006c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	; 0x24
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d139      	bne.n	8006ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e033      	b.n	8006ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e000      	b.n	8006ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ce0:	2302      	movs	r3, #2
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e0bf      	b.n	8006e82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fd f884 	bl	8003e24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006d32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6899      	ldr	r1, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b4a      	ldr	r3, [pc, #296]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006d64:	400b      	ands	r3, r1
 8006d66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68d9      	ldr	r1, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006d92:	400b      	ands	r3, r1
 8006d94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6919      	ldr	r1, [r3, #16]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b33      	ldr	r3, [pc, #204]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006dc0:	400b      	ands	r3, r1
 8006dc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6919      	ldr	r1, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6959      	ldr	r1, [r3, #20]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006dee:	400b      	ands	r3, r1
 8006df0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0206 	orr.w	r2, r2, #6
 8006e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	f000f800 	.word	0xf000f800

08006e90 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d023      	beq.n	8006efa <HAL_LTDC_IRQHandler+0x6a>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01e      	beq.n	8006efa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0204 	bic.w	r2, r2, #4
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eda:	f043 0201 	orr.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f86f 	bl	8006fd8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d023      	beq.n	8006f4c <HAL_LTDC_IRQHandler+0xbc>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01e      	beq.n	8006f4c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0202 	bic.w	r2, r2, #2
 8006f1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2202      	movs	r2, #2
 8006f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f2c:	f043 0202 	orr.w	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f846 	bl	8006fd8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01b      	beq.n	8006f8e <HAL_LTDC_IRQHandler+0xfe>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d016      	beq.n	8006f8e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f82f 	bl	8006fec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01b      	beq.n	8006fd0 <HAL_LTDC_IRQHandler+0x140>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d016      	beq.n	8006fd0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0208 	bic.w	r2, r2, #8
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f818 	bl	8007000 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_LTDC_ConfigLayer+0x1a>
 800702a:	2302      	movs	r3, #2
 800702c:	e02c      	b.n	8007088 <HAL_LTDC_ConfigLayer+0x74>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2134      	movs	r1, #52	; 0x34
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4614      	mov	r4, r2
 8007052:	461d      	mov	r5, r3
 8007054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800705a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800705e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f855 	bl	8007118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bdb0      	pop	{r4, r5, r7, pc}

08007090 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_LTDC_SetAlpha+0x1a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e024      	b.n	80070f4 <HAL_LTDC_SetAlpha+0x64>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2202      	movs	r2, #2
 80070b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2234      	movs	r2, #52	; 0x34
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	3338      	adds	r3, #56	; 0x38
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6979      	ldr	r1, [r7, #20]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f81f 	bl	8007118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800710a:	b2db      	uxtb	r3, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007134:	4413      	add	r3, r2
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	01db      	lsls	r3, r3, #7
 8007144:	4413      	add	r3, r2
 8007146:	3384      	adds	r3, #132	; 0x84
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	4611      	mov	r1, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	01d2      	lsls	r2, r2, #7
 8007154:	440a      	add	r2, r1
 8007156:	3284      	adds	r2, #132	; 0x84
 8007158:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800715c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800716e:	4413      	add	r3, r2
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	01db      	lsls	r3, r3, #7
 800717c:	440b      	add	r3, r1
 800717e:	3384      	adds	r3, #132	; 0x84
 8007180:	4619      	mov	r1, r3
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4313      	orrs	r3, r2
 8007186:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007196:	4413      	add	r3, r2
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	01db      	lsls	r3, r3, #7
 80071a6:	4413      	add	r3, r2
 80071a8:	3384      	adds	r3, #132	; 0x84
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	4611      	mov	r1, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	01d2      	lsls	r2, r2, #7
 80071b6:	440a      	add	r2, r1
 80071b8:	3284      	adds	r2, #132	; 0x84
 80071ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80071be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ce:	4413      	add	r3, r2
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	01db      	lsls	r3, r3, #7
 80071dc:	440b      	add	r3, r1
 80071de:	3384      	adds	r3, #132	; 0x84
 80071e0:	4619      	mov	r1, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	01db      	lsls	r3, r3, #7
 80071f2:	4413      	add	r3, r2
 80071f4:	3384      	adds	r3, #132	; 0x84
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	4611      	mov	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	01d2      	lsls	r2, r2, #7
 8007202:	440a      	add	r2, r1
 8007204:	3284      	adds	r2, #132	; 0x84
 8007206:	f023 0307 	bic.w	r3, r3, #7
 800720a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	01db      	lsls	r3, r3, #7
 8007216:	4413      	add	r3, r2
 8007218:	3384      	adds	r3, #132	; 0x84
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	061b      	lsls	r3, r3, #24
 800723c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	4413      	add	r3, r2
 800724a:	3384      	adds	r3, #132	; 0x84
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	01db      	lsls	r3, r3, #7
 8007258:	4413      	add	r3, r2
 800725a:	3384      	adds	r3, #132	; 0x84
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007268:	461a      	mov	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	431a      	orrs	r2, r3
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	431a      	orrs	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4619      	mov	r1, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	01db      	lsls	r3, r3, #7
 800727c:	440b      	add	r3, r1
 800727e:	3384      	adds	r3, #132	; 0x84
 8007280:	4619      	mov	r1, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	01db      	lsls	r3, r3, #7
 8007292:	4413      	add	r3, r2
 8007294:	3384      	adds	r3, #132	; 0x84
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	4611      	mov	r1, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	01d2      	lsls	r2, r2, #7
 80072a2:	440a      	add	r2, r1
 80072a4:	3284      	adds	r2, #132	; 0x84
 80072a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	461a      	mov	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	01db      	lsls	r3, r3, #7
 80072b6:	4413      	add	r3, r2
 80072b8:	3384      	adds	r3, #132	; 0x84
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	01db      	lsls	r3, r3, #7
 80072cc:	4413      	add	r3, r2
 80072ce:	3384      	adds	r3, #132	; 0x84
 80072d0:	69da      	ldr	r2, [r3, #28]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4619      	mov	r1, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	01db      	lsls	r3, r3, #7
 80072dc:	440b      	add	r3, r1
 80072de:	3384      	adds	r3, #132	; 0x84
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b58      	ldr	r3, [pc, #352]	; (8007444 <LTDC_SetConfig+0x32c>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	6809      	ldr	r1, [r1, #0]
 80072f4:	4608      	mov	r0, r1
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	01c9      	lsls	r1, r1, #7
 80072fa:	4401      	add	r1, r0
 80072fc:	3184      	adds	r1, #132	; 0x84
 80072fe:	4313      	orrs	r3, r2
 8007300:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	01db      	lsls	r3, r3, #7
 800730c:	4413      	add	r3, r2
 800730e:	3384      	adds	r3, #132	; 0x84
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	01db      	lsls	r3, r3, #7
 800731c:	4413      	add	r3, r2
 800731e:	3384      	adds	r3, #132	; 0x84
 8007320:	461a      	mov	r2, r3
 8007322:	2300      	movs	r3, #0
 8007324:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	4413      	add	r3, r2
 8007332:	3384      	adds	r3, #132	; 0x84
 8007334:	461a      	mov	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d102      	bne.n	800734a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007344:	2304      	movs	r3, #4
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	e01b      	b.n	8007382 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d102      	bne.n	8007358 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007352:	2303      	movs	r3, #3
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	e014      	b.n	8007382 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b04      	cmp	r3, #4
 800735e:	d00b      	beq.n	8007378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007364:	2b02      	cmp	r3, #2
 8007366:	d007      	beq.n	8007378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800736c:	2b03      	cmp	r3, #3
 800736e:	d003      	beq.n	8007378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007374:	2b07      	cmp	r3, #7
 8007376:	d102      	bne.n	800737e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007378:	2302      	movs	r3, #2
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e001      	b.n	8007382 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	4413      	add	r3, r2
 800738e:	3384      	adds	r3, #132	; 0x84
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	4611      	mov	r1, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	01d2      	lsls	r2, r2, #7
 800739c:	440a      	add	r2, r1
 800739e:	3284      	adds	r2, #132	; 0x84
 80073a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80073a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	041a      	lsls	r2, r3, #16
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1acb      	subs	r3, r1, r3
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	fb01 f303 	mul.w	r3, r1, r3
 80073c2:	3303      	adds	r3, #3
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6809      	ldr	r1, [r1, #0]
 80073c8:	4608      	mov	r0, r1
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	01c9      	lsls	r1, r1, #7
 80073ce:	4401      	add	r1, r0
 80073d0:	3184      	adds	r1, #132	; 0x84
 80073d2:	4313      	orrs	r3, r2
 80073d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	01db      	lsls	r3, r3, #7
 80073e0:	4413      	add	r3, r2
 80073e2:	3384      	adds	r3, #132	; 0x84
 80073e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	01db      	lsls	r3, r3, #7
 80073f0:	440b      	add	r3, r1
 80073f2:	3384      	adds	r3, #132	; 0x84
 80073f4:	4619      	mov	r1, r3
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <LTDC_SetConfig+0x330>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	01db      	lsls	r3, r3, #7
 8007406:	4413      	add	r3, r2
 8007408:	3384      	adds	r3, #132	; 0x84
 800740a:	461a      	mov	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	4413      	add	r3, r2
 800741e:	3384      	adds	r3, #132	; 0x84
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	4611      	mov	r1, r2
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	01d2      	lsls	r2, r2, #7
 800742c:	440a      	add	r2, r1
 800742e:	3284      	adds	r2, #132	; 0x84
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	6013      	str	r3, [r2, #0]
}
 8007436:	bf00      	nop
 8007438:	3724      	adds	r7, #36	; 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	fffff8f8 	.word	0xfffff8f8
 8007448:	fffff800 	.word	0xfffff800

0800744c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a04      	ldr	r2, [pc, #16]	; (8007468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745a:	6013      	str	r3, [r2, #0]
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40007000 	.word	0x40007000

0800746c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007476:	4b23      	ldr	r3, [pc, #140]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	4a22      	ldr	r2, [pc, #136]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 800747c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007480:	6413      	str	r3, [r2, #64]	; 0x40
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800748e:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800749a:	f7fd f971 	bl	8004780 <HAL_GetTick>
 800749e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074a0:	e009      	b.n	80074b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074a2:	f7fd f96d 	bl	8004780 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b0:	d901      	bls.n	80074b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e022      	b.n	80074fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c2:	d1ee      	bne.n	80074a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074d0:	f7fd f956 	bl	8004780 <HAL_GetTick>
 80074d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074d6:	e009      	b.n	80074ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074d8:	f7fd f952 	bl	8004780 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074e6:	d901      	bls.n	80074ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e007      	b.n	80074fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f8:	d1ee      	bne.n	80074d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40023800 	.word	0x40023800
 8007508:	40007000 	.word	0x40007000

0800750c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e291      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8087 	beq.w	800763e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007530:	4b96      	ldr	r3, [pc, #600]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 030c 	and.w	r3, r3, #12
 8007538:	2b04      	cmp	r3, #4
 800753a:	d00c      	beq.n	8007556 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800753c:	4b93      	ldr	r3, [pc, #588]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 030c 	and.w	r3, r3, #12
 8007544:	2b08      	cmp	r3, #8
 8007546:	d112      	bne.n	800756e <HAL_RCC_OscConfig+0x62>
 8007548:	4b90      	ldr	r3, [pc, #576]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007554:	d10b      	bne.n	800756e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007556:	4b8d      	ldr	r3, [pc, #564]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d06c      	beq.n	800763c <HAL_RCC_OscConfig+0x130>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d168      	bne.n	800763c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e26b      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007576:	d106      	bne.n	8007586 <HAL_RCC_OscConfig+0x7a>
 8007578:	4b84      	ldr	r3, [pc, #528]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a83      	ldr	r2, [pc, #524]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800757e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e02e      	b.n	80075e4 <HAL_RCC_OscConfig+0xd8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10c      	bne.n	80075a8 <HAL_RCC_OscConfig+0x9c>
 800758e:	4b7f      	ldr	r3, [pc, #508]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7e      	ldr	r2, [pc, #504]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	4b7c      	ldr	r3, [pc, #496]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a7b      	ldr	r2, [pc, #492]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	e01d      	b.n	80075e4 <HAL_RCC_OscConfig+0xd8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b0:	d10c      	bne.n	80075cc <HAL_RCC_OscConfig+0xc0>
 80075b2:	4b76      	ldr	r3, [pc, #472]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a75      	ldr	r2, [pc, #468]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	4b73      	ldr	r3, [pc, #460]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a72      	ldr	r2, [pc, #456]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e00b      	b.n	80075e4 <HAL_RCC_OscConfig+0xd8>
 80075cc:	4b6f      	ldr	r3, [pc, #444]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a6e      	ldr	r2, [pc, #440]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4b6c      	ldr	r3, [pc, #432]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6b      	ldr	r2, [pc, #428]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d013      	beq.n	8007614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fd f8c8 	bl	8004780 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075f4:	f7fd f8c4 	bl	8004780 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	; 0x64
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e21f      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007606:	4b61      	ldr	r3, [pc, #388]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0xe8>
 8007612:	e014      	b.n	800763e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007614:	f7fd f8b4 	bl	8004780 <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800761c:	f7fd f8b0 	bl	8004780 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b64      	cmp	r3, #100	; 0x64
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e20b      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800762e:	4b57      	ldr	r3, [pc, #348]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0x110>
 800763a:	e000      	b.n	800763e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d069      	beq.n	800771e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800764a:	4b50      	ldr	r3, [pc, #320]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007656:	4b4d      	ldr	r3, [pc, #308]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b08      	cmp	r3, #8
 8007660:	d11c      	bne.n	800769c <HAL_RCC_OscConfig+0x190>
 8007662:	4b4a      	ldr	r3, [pc, #296]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d116      	bne.n	800769c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800766e:	4b47      	ldr	r3, [pc, #284]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_RCC_OscConfig+0x17a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e1df      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007686:	4b41      	ldr	r3, [pc, #260]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	493d      	ldr	r1, [pc, #244]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007696:	4313      	orrs	r3, r2
 8007698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769a:	e040      	b.n	800771e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d023      	beq.n	80076ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076a4:	4b39      	ldr	r3, [pc, #228]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a38      	ldr	r2, [pc, #224]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b0:	f7fd f866 	bl	8004780 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076b8:	f7fd f862 	bl	8004780 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e1bd      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ca:	4b30      	ldr	r3, [pc, #192]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d6:	4b2d      	ldr	r3, [pc, #180]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4929      	ldr	r1, [pc, #164]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	600b      	str	r3, [r1, #0]
 80076ea:	e018      	b.n	800771e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ec:	4b27      	ldr	r3, [pc, #156]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a26      	ldr	r2, [pc, #152]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fd f842 	bl	8004780 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007700:	f7fd f83e 	bl	8004780 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e199      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d038      	beq.n	800779c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d019      	beq.n	8007766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800773e:	f7fd f81f 	bl	8004780 <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007746:	f7fd f81b 	bl	8004780 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e176      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800775a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0x23a>
 8007764:	e01a      	b.n	800779c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776a:	4a08      	ldr	r2, [pc, #32]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007772:	f7fd f805 	bl	8004780 <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007778:	e00a      	b.n	8007790 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800777a:	f7fd f801 	bl	8004780 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d903      	bls.n	8007790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e15c      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
 800778c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007790:	4b91      	ldr	r3, [pc, #580]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ee      	bne.n	800777a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80a4 	beq.w	80078f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077aa:	4b8b      	ldr	r3, [pc, #556]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10d      	bne.n	80077d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077b6:	4b88      	ldr	r3, [pc, #544]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	4a87      	ldr	r2, [pc, #540]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c0:	6413      	str	r3, [r2, #64]	; 0x40
 80077c2:	4b85      	ldr	r3, [pc, #532]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077d2:	4b82      	ldr	r3, [pc, #520]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d118      	bne.n	8007810 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077de:	4b7f      	ldr	r3, [pc, #508]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a7e      	ldr	r2, [pc, #504]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 80077e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ea:	f7fc ffc9 	bl	8004780 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f2:	f7fc ffc5 	bl	8004780 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b64      	cmp	r3, #100	; 0x64
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e120      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007804:	4b75      	ldr	r3, [pc, #468]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d106      	bne.n	8007826 <HAL_RCC_OscConfig+0x31a>
 8007818:	4b6f      	ldr	r3, [pc, #444]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800781a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781c:	4a6e      	ldr	r2, [pc, #440]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	6713      	str	r3, [r2, #112]	; 0x70
 8007824:	e02d      	b.n	8007882 <HAL_RCC_OscConfig+0x376>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10c      	bne.n	8007848 <HAL_RCC_OscConfig+0x33c>
 800782e:	4b6a      	ldr	r3, [pc, #424]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	4a69      	ldr	r2, [pc, #420]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	6713      	str	r3, [r2, #112]	; 0x70
 800783a:	4b67      	ldr	r3, [pc, #412]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	4a66      	ldr	r2, [pc, #408]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007840:	f023 0304 	bic.w	r3, r3, #4
 8007844:	6713      	str	r3, [r2, #112]	; 0x70
 8007846:	e01c      	b.n	8007882 <HAL_RCC_OscConfig+0x376>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b05      	cmp	r3, #5
 800784e:	d10c      	bne.n	800786a <HAL_RCC_OscConfig+0x35e>
 8007850:	4b61      	ldr	r3, [pc, #388]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	4a60      	ldr	r2, [pc, #384]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007856:	f043 0304 	orr.w	r3, r3, #4
 800785a:	6713      	str	r3, [r2, #112]	; 0x70
 800785c:	4b5e      	ldr	r3, [pc, #376]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a5d      	ldr	r2, [pc, #372]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
 8007868:	e00b      	b.n	8007882 <HAL_RCC_OscConfig+0x376>
 800786a:	4b5b      	ldr	r3, [pc, #364]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a5a      	ldr	r2, [pc, #360]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	4b58      	ldr	r3, [pc, #352]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4a57      	ldr	r2, [pc, #348]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d015      	beq.n	80078b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788a:	f7fc ff79 	bl	8004780 <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007890:	e00a      	b.n	80078a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007892:	f7fc ff75 	bl	8004780 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e0ce      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a8:	4b4b      	ldr	r3, [pc, #300]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0ee      	beq.n	8007892 <HAL_RCC_OscConfig+0x386>
 80078b4:	e014      	b.n	80078e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b6:	f7fc ff63 	bl	8004780 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078bc:	e00a      	b.n	80078d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078be:	f7fc ff5f 	bl	8004780 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e0b8      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d4:	4b40      	ldr	r3, [pc, #256]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ee      	bne.n	80078be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078e6:	4b3c      	ldr	r3, [pc, #240]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a3b      	ldr	r2, [pc, #236]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80a4 	beq.w	8007a44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078fc:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b08      	cmp	r3, #8
 8007906:	d06b      	beq.n	80079e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d149      	bne.n	80079a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007910:	4b31      	ldr	r3, [pc, #196]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a30      	ldr	r2, [pc, #192]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800791a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fc ff30 	bl	8004780 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007924:	f7fc ff2c 	bl	8004780 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e087      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007936:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	019b      	lsls	r3, r3, #6
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	3b01      	subs	r3, #1
 800795c:	041b      	lsls	r3, r3, #16
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	4313      	orrs	r3, r2
 8007968:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800796a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800796e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007970:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800797a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7fc ff00 	bl	8004780 <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007984:	f7fc fefc 	bl	8004780 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e057      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f0      	beq.n	8007984 <HAL_RCC_OscConfig+0x478>
 80079a2:	e04f      	b.n	8007a44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a0b      	ldr	r2, [pc, #44]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80079aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fc fee6 	bl	8004780 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b8:	f7fc fee2 	bl	8004780 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e03d      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4ac>
 80079d6:	e035      	b.n	8007a44 <HAL_RCC_OscConfig+0x538>
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079e0:	4b1b      	ldr	r3, [pc, #108]	; (8007a50 <HAL_RCC_OscConfig+0x544>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d028      	beq.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d121      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d11a      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d111      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d107      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d001      	beq.n	8007a44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800

08007a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0d0      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b6a      	ldr	r3, [pc, #424]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d910      	bls.n	8007a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b67      	ldr	r3, [pc, #412]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 020f 	bic.w	r2, r3, #15
 8007a82:	4965      	ldr	r1, [pc, #404]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8a:	4b63      	ldr	r3, [pc, #396]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d001      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0b8      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a58      	ldr	r2, [pc, #352]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007acc:	4b53      	ldr	r3, [pc, #332]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a52      	ldr	r2, [pc, #328]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ad8:	4b50      	ldr	r3, [pc, #320]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	494d      	ldr	r1, [pc, #308]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d040      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d107      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d115      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e07f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b16:	4b41      	ldr	r3, [pc, #260]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e073      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b26:	4b3d      	ldr	r3, [pc, #244]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e06b      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b36:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 0203 	bic.w	r2, r3, #3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4936      	ldr	r1, [pc, #216]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b48:	f7fc fe1a 	bl	8004780 <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b50:	f7fc fe16 	bl	8004780 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e053      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b66:	4b2d      	ldr	r3, [pc, #180]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 020c 	and.w	r2, r3, #12
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1eb      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b78:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d210      	bcs.n	8007ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 020f 	bic.w	r2, r3, #15
 8007b8e:	4922      	ldr	r1, [pc, #136]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e032      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4916      	ldr	r1, [pc, #88]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	490e      	ldr	r1, [pc, #56]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007be6:	f000 f821 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 8007bea:	4601      	mov	r1, r0
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <HAL_RCC_ClockConfig+0x1cc>)
 8007bf8:	5cd3      	ldrb	r3, [r2, r3]
 8007bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_RCC_ClockConfig+0x1d0>)
 8007c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_ClockConfig+0x1d4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fc fc94 	bl	8004534 <HAL_InitTick>

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	40023c00 	.word	0x40023c00
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	0800fc88 	.word	0x0800fc88
 8007c24:	20000034 	.word	0x20000034
 8007c28:	20000038 	.word	0x20000038

08007c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c42:	4b50      	ldr	r3, [pc, #320]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d007      	beq.n	8007c5e <HAL_RCC_GetSysClockFreq+0x32>
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d008      	beq.n	8007c64 <HAL_RCC_GetSysClockFreq+0x38>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 808d 	bne.w	8007d72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c58:	4b4b      	ldr	r3, [pc, #300]	; (8007d88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007c5a:	60bb      	str	r3, [r7, #8]
      break;
 8007c5c:	e08c      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c5e:	4b4b      	ldr	r3, [pc, #300]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8007c60:	60bb      	str	r3, [r7, #8]
      break;
 8007c62:	e089      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c64:	4b47      	ldr	r3, [pc, #284]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c6e:	4b45      	ldr	r3, [pc, #276]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d023      	beq.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c7a:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	f04f 0400 	mov.w	r4, #0
 8007c84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	ea03 0501 	and.w	r5, r3, r1
 8007c90:	ea04 0602 	and.w	r6, r4, r2
 8007c94:	4a3d      	ldr	r2, [pc, #244]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8007c96:	fb02 f106 	mul.w	r1, r2, r6
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	fb02 f205 	mul.w	r2, r2, r5
 8007ca0:	440a      	add	r2, r1
 8007ca2:	493a      	ldr	r1, [pc, #232]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8007ca4:	fba5 0101 	umull	r0, r1, r5, r1
 8007ca8:	1853      	adds	r3, r2, r1
 8007caa:	4619      	mov	r1, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f04f 0400 	mov.w	r4, #0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4623      	mov	r3, r4
 8007cb6:	f7f8 fafb 	bl	80002b0 <__aeabi_uldivmod>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e049      	b.n	8007d56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cc2:	4b30      	ldr	r3, [pc, #192]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	f04f 0400 	mov.w	r4, #0
 8007ccc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	ea03 0501 	and.w	r5, r3, r1
 8007cd8:	ea04 0602 	and.w	r6, r4, r2
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	f04f 0400 	mov.w	r4, #0
 8007ce8:	0154      	lsls	r4, r2, #5
 8007cea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007cee:	014b      	lsls	r3, r1, #5
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	1b49      	subs	r1, r1, r5
 8007cf6:	eb62 0206 	sbc.w	r2, r2, r6
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	f04f 0400 	mov.w	r4, #0
 8007d02:	0194      	lsls	r4, r2, #6
 8007d04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007d08:	018b      	lsls	r3, r1, #6
 8007d0a:	1a5b      	subs	r3, r3, r1
 8007d0c:	eb64 0402 	sbc.w	r4, r4, r2
 8007d10:	f04f 0100 	mov.w	r1, #0
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	00e2      	lsls	r2, r4, #3
 8007d1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007d1e:	00d9      	lsls	r1, r3, #3
 8007d20:	460b      	mov	r3, r1
 8007d22:	4614      	mov	r4, r2
 8007d24:	195b      	adds	r3, r3, r5
 8007d26:	eb44 0406 	adc.w	r4, r4, r6
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	02a2      	lsls	r2, r4, #10
 8007d34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007d38:	0299      	lsls	r1, r3, #10
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	4621      	mov	r1, r4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f04f 0400 	mov.w	r4, #0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	f7f8 fab0 	bl	80002b0 <__aeabi_uldivmod>
 8007d50:	4603      	mov	r3, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	3301      	adds	r3, #1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	60bb      	str	r3, [r7, #8]
      break;
 8007d70:	e002      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007d74:	60bb      	str	r3, [r7, #8]
      break;
 8007d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d78:	68bb      	ldr	r3, [r7, #8]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40023800 	.word	0x40023800
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	017d7840 	.word	0x017d7840

08007d90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000034 	.word	0x20000034

08007da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dac:	f7ff fff0 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007db0:	4601      	mov	r1, r0
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0a9b      	lsrs	r3, r3, #10
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dbe:	5cd3      	ldrb	r3, [r2, r3]
 8007dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	0800fc98 	.word	0x0800fc98

08007dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dd4:	f7ff ffdc 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4601      	mov	r1, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0b5b      	lsrs	r3, r3, #13
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4a03      	ldr	r2, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de6:	5cd3      	ldrb	r3, [r2, r3]
 8007de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	0800fc98 	.word	0x0800fc98

08007df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	220f      	movs	r2, #15
 8007e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0203 	and.w	r2, r3, #3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <HAL_RCC_GetClockConfig+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	601a      	str	r2, [r3, #0]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800
 8007e58:	40023c00 	.word	0x40023c00

08007e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d012      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e84:	4b69      	ldr	r3, [pc, #420]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4a68      	ldr	r2, [pc, #416]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e8e:	6093      	str	r3, [r2, #8]
 8007e90:	4b66      	ldr	r3, [pc, #408]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	4964      	ldr	r1, [pc, #400]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d017      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eb6:	4b5d      	ldr	r3, [pc, #372]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	4959      	ldr	r1, [pc, #356]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed4:	d101      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d017      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ef2:	4b4e      	ldr	r3, [pc, #312]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	494a      	ldr	r1, [pc, #296]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f10:	d101      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 808b 	beq.w	8008056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f40:	4b3a      	ldr	r3, [pc, #232]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	4a39      	ldr	r2, [pc, #228]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8007f4c:	4b37      	ldr	r3, [pc, #220]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f58:	4b35      	ldr	r3, [pc, #212]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a34      	ldr	r2, [pc, #208]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f64:	f7fc fc0c 	bl	8004780 <HAL_GetTick>
 8007f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f6c:	f7fc fc08 	bl	8004780 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b64      	cmp	r3, #100	; 0x64
 8007f78:	d901      	bls.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e355      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f7e:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f0      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f8a:	4b28      	ldr	r3, [pc, #160]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d035      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d02e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fb2:	4b1e      	ldr	r3, [pc, #120]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007fca:	4a18      	ldr	r2, [pc, #96]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fd0:	4b16      	ldr	r3, [pc, #88]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d114      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fc fbd0 	bl	8004780 <HAL_GetTick>
 8007fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe4:	f7fc fbcc 	bl	8004780 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e317      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0ee      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008012:	d111      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008022:	400b      	ands	r3, r1
 8008024:	4901      	ldr	r1, [pc, #4]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008026:	4313      	orrs	r3, r2
 8008028:	608b      	str	r3, [r1, #8]
 800802a:	e00b      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800802c:	40023800 	.word	0x40023800
 8008030:	40007000 	.word	0x40007000
 8008034:	0ffffcff 	.word	0x0ffffcff
 8008038:	4bb0      	ldr	r3, [pc, #704]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	4aaf      	ldr	r2, [pc, #700]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800803e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008042:	6093      	str	r3, [r2, #8]
 8008044:	4bad      	ldr	r3, [pc, #692]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008050:	49aa      	ldr	r1, [pc, #680]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008052:	4313      	orrs	r3, r2
 8008054:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b00      	cmp	r3, #0
 8008060:	d010      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008062:	4ba6      	ldr	r3, [pc, #664]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008068:	4aa4      	ldr	r2, [pc, #656]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008072:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008074:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	499f      	ldr	r1, [pc, #636]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008090:	4b9a      	ldr	r3, [pc, #616]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809e:	4997      	ldr	r1, [pc, #604]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080b2:	4b92      	ldr	r3, [pc, #584]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c0:	498e      	ldr	r1, [pc, #568]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080d4:	4b89      	ldr	r3, [pc, #548]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e2:	4986      	ldr	r1, [pc, #536]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080f6:	4b81      	ldr	r3, [pc, #516]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	497d      	ldr	r1, [pc, #500]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008118:	4b78      	ldr	r3, [pc, #480]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811e:	f023 0203 	bic.w	r2, r3, #3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	4975      	ldr	r1, [pc, #468]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800813a:	4b70      	ldr	r3, [pc, #448]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008140:	f023 020c 	bic.w	r2, r3, #12
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008148:	496c      	ldr	r1, [pc, #432]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800815c:	4b67      	ldr	r3, [pc, #412]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008162:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816a:	4964      	ldr	r1, [pc, #400]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800817e:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008184:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	495b      	ldr	r1, [pc, #364]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081a0:	4b56      	ldr	r3, [pc, #344]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	4953      	ldr	r1, [pc, #332]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80081c2:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	494a      	ldr	r1, [pc, #296]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80081e4:	4b45      	ldr	r3, [pc, #276]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f2:	4942      	ldr	r1, [pc, #264]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008206:	4b3d      	ldr	r3, [pc, #244]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	4939      	ldr	r1, [pc, #228]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008228:	4b34      	ldr	r3, [pc, #208]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800822a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008236:	4931      	ldr	r1, [pc, #196]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d011      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800824a:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800824c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008250:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008258:	4928      	ldr	r1, [pc, #160]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800825a:	4313      	orrs	r3, r2
 800825c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008268:	d101      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800826a:	2301      	movs	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800828a:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008298:	4918      	ldr	r1, [pc, #96]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082ac:	4b13      	ldr	r3, [pc, #76]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082bc:	490f      	ldr	r1, [pc, #60]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d005      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d2:	f040 80d8 	bne.w	8008486 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082e2:	f7fc fa4d 	bl	8004780 <HAL_GetTick>
 80082e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082e8:	e00a      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082ea:	f7fc fa49 	bl	8004780 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b64      	cmp	r3, #100	; 0x64
 80082f6:	d903      	bls.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e196      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80082fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008300:	4b6c      	ldr	r3, [pc, #432]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1ee      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d021      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d11d      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008320:	4b64      	ldr	r3, [pc, #400]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800832e:	4b61      	ldr	r3, [pc, #388]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008334:	0e1b      	lsrs	r3, r3, #24
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	019a      	lsls	r2, r3, #6
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	431a      	orrs	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	071b      	lsls	r3, r3, #28
 8008354:	4957      	ldr	r1, [pc, #348]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02e      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008386:	d129      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008388:	4b4a      	ldr	r3, [pc, #296]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800838a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008396:	4b47      	ldr	r3, [pc, #284]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839c:	0f1b      	lsrs	r3, r3, #28
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	019a      	lsls	r2, r3, #6
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	041b      	lsls	r3, r3, #16
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	431a      	orrs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	071b      	lsls	r3, r3, #28
 80083bc:	493d      	ldr	r1, [pc, #244]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083c4:	4b3b      	ldr	r3, [pc, #236]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ca:	f023 021f 	bic.w	r2, r3, #31
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	3b01      	subs	r3, #1
 80083d4:	4937      	ldr	r1, [pc, #220]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01d      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083e8:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ee:	0e1b      	lsrs	r3, r3, #24
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083f6:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083fc:	0f1b      	lsrs	r3, r3, #28
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	019a      	lsls	r2, r3, #6
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	431a      	orrs	r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	061b      	lsls	r3, r3, #24
 8008416:	431a      	orrs	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	071b      	lsls	r3, r3, #28
 800841c:	4925      	ldr	r1, [pc, #148]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d011      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	019a      	lsls	r2, r3, #6
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	061b      	lsls	r3, r3, #24
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	071b      	lsls	r3, r3, #28
 800844c:	4919      	ldr	r1, [pc, #100]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008454:	4b17      	ldr	r3, [pc, #92]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a16      	ldr	r2, [pc, #88]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800845a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800845e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008460:	f7fc f98e 	bl	8004780 <HAL_GetTick>
 8008464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008466:	e008      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008468:	f7fc f98a 	bl	8004780 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b64      	cmp	r3, #100	; 0x64
 8008474:	d901      	bls.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e0d7      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0f0      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2b01      	cmp	r3, #1
 800848a:	f040 80cd 	bne.w	8008628 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800849a:	f7fc f971 	bl	8004780 <HAL_GetTick>
 800849e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084a0:	e00a      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084a2:	f7fc f96d 	bl	8004780 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b64      	cmp	r3, #100	; 0x64
 80084ae:	d903      	bls.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e0ba      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80084b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084b8:	4b5e      	ldr	r3, [pc, #376]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c4:	d0ed      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02e      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d12a      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084ee:	4b51      	ldr	r3, [pc, #324]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	0c1b      	lsrs	r3, r3, #16
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084fc:	4b4d      	ldr	r3, [pc, #308]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	0f1b      	lsrs	r3, r3, #28
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	019a      	lsls	r2, r3, #6
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	061b      	lsls	r3, r3, #24
 800851c:	431a      	orrs	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	071b      	lsls	r3, r3, #28
 8008522:	4944      	ldr	r1, [pc, #272]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800852a:	4b42      	ldr	r3, [pc, #264]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800852c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008530:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	3b01      	subs	r3, #1
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	493d      	ldr	r1, [pc, #244]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d022      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008558:	d11d      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800855a:	4b36      	ldr	r3, [pc, #216]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008560:	0e1b      	lsrs	r3, r3, #24
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008568:	4b32      	ldr	r3, [pc, #200]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800856e:	0f1b      	lsrs	r3, r3, #28
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	019a      	lsls	r2, r3, #6
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	431a      	orrs	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	071b      	lsls	r3, r3, #28
 800858e:	4929      	ldr	r1, [pc, #164]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d028      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085a2:	4b24      	ldr	r3, [pc, #144]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085b0:	4b20      	ldr	r3, [pc, #128]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	0c1b      	lsrs	r3, r3, #16
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	019a      	lsls	r2, r3, #6
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	041b      	lsls	r3, r3, #16
 80085c8:	431a      	orrs	r2, r3
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	4917      	ldr	r1, [pc, #92]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085de:	4b15      	ldr	r3, [pc, #84]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4911      	ldr	r1, [pc, #68]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085f4:	4b0f      	ldr	r3, [pc, #60]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a0e      	ldr	r2, [pc, #56]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008600:	f7fc f8be 	bl	8004780 <HAL_GetTick>
 8008604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008606:	e008      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008608:	f7fc f8ba 	bl	8004780 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b64      	cmp	r3, #100	; 0x64
 8008614:	d901      	bls.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e007      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008626:	d1ef      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40023800 	.word	0x40023800

08008638 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e06b      	b.n	8008722 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7f5b      	ldrb	r3, [r3, #29]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d105      	bne.n	8008660 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fb fcaa 	bl	8003fb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	22ca      	movs	r2, #202	; 0xca
 800866c:	625a      	str	r2, [r3, #36]	; 0x24
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2253      	movs	r2, #83	; 0x53
 8008674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb00 	bl	8008c7c <RTC_EnterInitMode>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	22ff      	movs	r2, #255	; 0xff
 8008688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2204      	movs	r2, #4
 800868e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e046      	b.n	8008722 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6899      	ldr	r1, [r3, #8]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b23      	ldr	r3, [pc, #140]	; (800872c <HAL_RTC_Init+0xf4>)
 80086a0:	400b      	ands	r3, r1
 80086a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6899      	ldr	r1, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	68d2      	ldr	r2, [r2, #12]
 80086ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6919      	ldr	r1, [r3, #16]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	041a      	lsls	r2, r3, #16
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ee:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0208 	bic.w	r2, r2, #8
 80086fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	22ff      	movs	r2, #255	; 0xff
 8008718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008720:	2300      	movs	r3, #0
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	ff8fffbf 	.word	0xff8fffbf

08008730 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	7f1b      	ldrb	r3, [r3, #28]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_RTC_SetTime+0x1c>
 8008748:	2302      	movs	r3, #2
 800874a:	e0a8      	b.n	800889e <HAL_RTC_SetTime+0x16e>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2202      	movs	r2, #2
 8008756:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d126      	bne.n	80087ac <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d102      	bne.n	8008772 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 faac 	bl	8008cd4 <RTC_ByteToBcd2>
 800877c:	4603      	mov	r3, r0
 800877e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 faa5 	bl	8008cd4 <RTC_ByteToBcd2>
 800878a:	4603      	mov	r3, r0
 800878c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800878e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	789b      	ldrb	r3, [r3, #2]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fa9d 	bl	8008cd4 <RTC_ByteToBcd2>
 800879a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800879c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	7b1b      	ldrb	r3, [r3, #12]
 80087a4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	e018      	b.n	80087de <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087cc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80087d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	7b1b      	ldrb	r3, [r3, #12]
 80087d8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	22ca      	movs	r2, #202	; 0xca
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2253      	movs	r2, #83	; 0x53
 80087ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fa44 	bl	8008c7c <RTC_EnterInitMode>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22ff      	movs	r2, #255	; 0xff
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2204      	movs	r2, #4
 8008806:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e045      	b.n	800889e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	6979      	ldr	r1, [r7, #20]
 8008818:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <HAL_RTC_SetTime+0x178>)
 800881a:	400b      	ands	r3, r1
 800881c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800882c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6899      	ldr	r1, [r3, #8]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	431a      	orrs	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008854:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	d111      	bne.n	8008888 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 f9e1 	bl	8008c2c <HAL_RTC_WaitForSynchro>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	22ff      	movs	r2, #255	; 0xff
 8008876:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2204      	movs	r2, #4
 800887c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e00a      	b.n	800889e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800889c:	2300      	movs	r3, #0
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd90      	pop	{r4, r7, pc}
 80088a6:	bf00      	nop
 80088a8:	007f7f7f 	.word	0x007f7f7f

080088ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	7f1b      	ldrb	r3, [r3, #28]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_RTC_SetDate+0x1c>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e092      	b.n	80089ee <HAL_RTC_SetDate+0x142>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2202      	movs	r2, #2
 80088d2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10e      	bne.n	80088f8 <HAL_RTC_SetDate+0x4c>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	330a      	adds	r3, #10
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d11c      	bne.n	8008938 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	78db      	ldrb	r3, [r3, #3]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f9e6 	bl	8008cd4 <RTC_ByteToBcd2>
 8008908:	4603      	mov	r3, r0
 800890a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f9df 	bl	8008cd4 <RTC_ByteToBcd2>
 8008916:	4603      	mov	r3, r0
 8008918:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800891a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	789b      	ldrb	r3, [r3, #2]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f9d7 	bl	8008cd4 <RTC_ByteToBcd2>
 8008926:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008928:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	e00e      	b.n	8008956 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	78db      	ldrb	r3, [r3, #3]
 800893c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008944:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800894a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	22ca      	movs	r2, #202	; 0xca
 800895c:	625a      	str	r2, [r3, #36]	; 0x24
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2253      	movs	r2, #83	; 0x53
 8008964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f988 	bl	8008c7c <RTC_EnterInitMode>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	22ff      	movs	r2, #255	; 0xff
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2204      	movs	r2, #4
 800897e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e031      	b.n	80089ee <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	6979      	ldr	r1, [r7, #20]
 8008990:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <HAL_RTC_SetDate+0x14c>)
 8008992:	400b      	ands	r3, r1
 8008994:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d111      	bne.n	80089d8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f939 	bl	8008c2c <HAL_RTC_WaitForSynchro>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	22ff      	movs	r2, #255	; 0xff
 80089c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2204      	movs	r2, #4
 80089cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e00a      	b.n	80089ee <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}
 80089f6:	bf00      	nop
 80089f8:	00ffff3f 	.word	0x00ffff3f

080089fc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b089      	sub	sp, #36	; 0x24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	7f1b      	ldrb	r3, [r3, #28]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_RTC_SetAlarm+0x24>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e101      	b.n	8008c24 <HAL_RTC_SetAlarm+0x228>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d137      	bne.n	8008aa2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2200      	movs	r2, #0
 8008a44:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f942 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a50:	4603      	mov	r3, r0
 8008a52:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f93b 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a62:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	789b      	ldrb	r3, [r3, #2]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f933 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a6e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008a70:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	7b1b      	ldrb	r3, [r3, #12]
 8008a78:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a7a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f925 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a8e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e023      	b.n	8008aea <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	785b      	ldrb	r3, [r3, #1]
 8008ac0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ac2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ac8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	7b1b      	ldrb	r3, [r3, #12]
 8008ace:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ad0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ad8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008ada:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ae0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	22ca      	movs	r2, #202	; 0xca
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2253      	movs	r2, #83	; 0x53
 8008b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0e:	d13f      	bne.n	8008b90 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b1e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b2e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b30:	f7fb fe26 	bl	8004780 <HAL_GetTick>
 8008b34:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008b36:	e013      	b.n	8008b60 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b38:	f7fb fe22 	bl	8004780 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b46:	d90b      	bls.n	8008b60 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	22ff      	movs	r2, #255	; 0xff
 8008b4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2203      	movs	r2, #3
 8008b54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e061      	b.n	8008c24 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0e4      	beq.n	8008b38 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b8c:	609a      	str	r2, [r3, #8]
 8008b8e:	e03e      	b.n	8008c0e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b9e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bb0:	f7fb fde6 	bl	8004780 <HAL_GetTick>
 8008bb4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008bb6:	e013      	b.n	8008be0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bb8:	f7fb fde2 	bl	8004780 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bc6:	d90b      	bls.n	8008be0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e021      	b.n	8008c24 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0e4      	beq.n	8008bb8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3724      	adds	r7, #36	; 0x24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd90      	pop	{r4, r7, pc}

08008c2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c48:	f7fb fd9a 	bl	8004780 <HAL_GetTick>
 8008c4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c4e:	e009      	b.n	8008c64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c50:	f7fb fd96 	bl	8004780 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c5e:	d901      	bls.n	8008c64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e007      	b.n	8008c74 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0ee      	beq.n	8008c50 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d119      	bne.n	8008cca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ca0:	f7fb fd6e 	bl	8004780 <HAL_GetTick>
 8008ca4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ca6:	e009      	b.n	8008cbc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ca8:	f7fb fd6a 	bl	8004780 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb6:	d901      	bls.n	8008cbc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e007      	b.n	8008ccc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0ee      	beq.n	8008ca8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008ce2:	e005      	b.n	8008cf0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	3b0a      	subs	r3, #10
 8008cee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	2b09      	cmp	r3, #9
 8008cf4:	d8f6      	bhi.n	8008ce4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	7f1b      	ldrb	r3, [r3, #28]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e03e      	b.n	8008daa <HAL_RTCEx_SetTimeStamp+0x9a>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2202      	movs	r2, #2
 8008d36:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	4b1e      	ldr	r3, [pc, #120]	; (8008db8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	22ca      	movs	r2, #202	; 0xca
 8008d52:	625a      	str	r2, [r3, #36]	; 0x24
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2253      	movs	r2, #83	; 0x53
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0206 	bic.w	r2, r2, #6
 8008d6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d92:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	22ff      	movs	r2, #255	; 0xff
 8008d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	fffff7f7 	.word	0xfffff7f7

08008dbc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e025      	b.n	8008e1c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7fb fb9b 	bl	8004520 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f002 f9d1 	bl	800b1a4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	f002 fa3b 	bl	800b288 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d101      	bne.n	8008e40 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e018      	b.n	8008e72 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f002 fa99 	bl	800b388 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d104      	bne.n	8008e68 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2205      	movs	r2, #5
 8008e62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008e66:	e003      	b.n	8008e70 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d101      	bne.n	8008e94 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008e90:	2302      	movs	r3, #2
 8008e92:	e00e      	b.n	8008eb2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f002 fa91 	bl	800b3ca <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e084      	b.n	8008fd6 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7fb f87e 	bl	8003fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f0c:	d902      	bls.n	8008f14 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e002      	b.n	8008f1a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f22:	d007      	beq.n	8008f34 <HAL_SPI_Init+0x7a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f2c:	d002      	beq.n	8008f34 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10b      	bne.n	8008f54 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f44:	d903      	bls.n	8008f4e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f4c:	e002      	b.n	8008f54 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	ea42 0103 	orr.w	r1, r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	0c1b      	lsrs	r3, r3, #16
 8008f94:	f003 0204 	and.w	r2, r3, #4
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	ea42 0103 	orr.w	r1, r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e01d      	b.n	800902c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fb f861 	bl	80040cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2202      	movs	r2, #2
 800900e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f000 fbc3 	bl	80097a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <HAL_TIM_Base_Start_IT+0x50>)
 8009054:	4013      	ands	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d00b      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x42>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009064:	d007      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0201 	orr.w	r2, r2, #1
 8009074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	00010007 	.word	0x00010007

08009088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e01d      	b.n	80090d6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f815 	bl	80090de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f000 fb6e 	bl	80097a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b02      	cmp	r3, #2
 8009106:	d122      	bne.n	800914e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b02      	cmp	r3, #2
 8009114:	d11b      	bne.n	800914e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f06f 0202 	mvn.w	r2, #2
 800911e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fb19 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 800913a:	e005      	b.n	8009148 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fb0b 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb1c 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b04      	cmp	r3, #4
 800915a:	d122      	bne.n	80091a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d11b      	bne.n	80091a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f06f 0204 	mvn.w	r2, #4
 8009172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 faef 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 800918e:	e005      	b.n	800919c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fae1 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 faf2 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d122      	bne.n	80091f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	d11b      	bne.n	80091f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f06f 0208 	mvn.w	r2, #8
 80091c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2204      	movs	r2, #4
 80091cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fac5 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 80091e2:	e005      	b.n	80091f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fab7 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fac8 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b10      	cmp	r3, #16
 8009202:	d122      	bne.n	800924a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b10      	cmp	r3, #16
 8009210:	d11b      	bne.n	800924a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f06f 0210 	mvn.w	r2, #16
 800921a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2208      	movs	r2, #8
 8009220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa9b 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 8009236:	e005      	b.n	8009244 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa8d 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa9e 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d10e      	bne.n	8009276 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b01      	cmp	r3, #1
 8009264:	d107      	bne.n	8009276 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f06f 0201 	mvn.w	r2, #1
 800926e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f8 ff43 	bl	80020fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	2b80      	cmp	r3, #128	; 0x80
 8009282:	d10e      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b80      	cmp	r3, #128	; 0x80
 8009290:	d107      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800929a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ffb9 	bl	800a214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b0:	d10e      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092bc:	2b80      	cmp	r3, #128	; 0x80
 80092be:	d107      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 ffac 	bl	800a228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092da:	2b40      	cmp	r3, #64	; 0x40
 80092dc:	d10e      	bne.n	80092fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	d107      	bne.n	80092fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa4c 	bl	8009794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b20      	cmp	r3, #32
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b20      	cmp	r3, #32
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0220 	mvn.w	r2, #32
 8009320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 ff6c 	bl	800a200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009346:	2302      	movs	r3, #2
 8009348:	e105      	b.n	8009556 <HAL_TIM_PWM_ConfigChannel+0x226>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2202      	movs	r2, #2
 8009356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b14      	cmp	r3, #20
 800935e:	f200 80f0 	bhi.w	8009542 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009362:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093bd 	.word	0x080093bd
 800936c:	08009543 	.word	0x08009543
 8009370:	08009543 	.word	0x08009543
 8009374:	08009543 	.word	0x08009543
 8009378:	080093fd 	.word	0x080093fd
 800937c:	08009543 	.word	0x08009543
 8009380:	08009543 	.word	0x08009543
 8009384:	08009543 	.word	0x08009543
 8009388:	0800943f 	.word	0x0800943f
 800938c:	08009543 	.word	0x08009543
 8009390:	08009543 	.word	0x08009543
 8009394:	08009543 	.word	0x08009543
 8009398:	0800947f 	.word	0x0800947f
 800939c:	08009543 	.word	0x08009543
 80093a0:	08009543 	.word	0x08009543
 80093a4:	08009543 	.word	0x08009543
 80093a8:	080094c1 	.word	0x080094c1
 80093ac:	08009543 	.word	0x08009543
 80093b0:	08009543 	.word	0x08009543
 80093b4:	08009543 	.word	0x08009543
 80093b8:	08009501 	.word	0x08009501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68b9      	ldr	r1, [r7, #8]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fa90 	bl	80098e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 0208 	orr.w	r2, r2, #8
 80093d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0204 	bic.w	r2, r2, #4
 80093e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6999      	ldr	r1, [r3, #24]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	619a      	str	r2, [r3, #24]
      break;
 80093fa:	e0a3      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68b9      	ldr	r1, [r7, #8]
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fae2 	bl	80099cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699a      	ldr	r2, [r3, #24]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6999      	ldr	r1, [r3, #24]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	021a      	lsls	r2, r3, #8
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	619a      	str	r2, [r3, #24]
      break;
 800943c:	e082      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fb39 	bl	8009abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0208 	orr.w	r2, r2, #8
 8009458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0204 	bic.w	r2, r2, #4
 8009468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69d9      	ldr	r1, [r3, #28]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	61da      	str	r2, [r3, #28]
      break;
 800947c:	e062      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 fb8f 	bl	8009ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69d9      	ldr	r1, [r3, #28]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	021a      	lsls	r2, r3, #8
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	61da      	str	r2, [r3, #28]
      break;
 80094be:	e041      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fbc6 	bl	8009c58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0208 	orr.w	r2, r2, #8
 80094da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0204 	bic.w	r2, r2, #4
 80094ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094fe:	e021      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fbf8 	bl	8009cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800951a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	021a      	lsls	r2, r3, #8
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009540:	e000      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009542:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop

08009560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_TIM_ConfigClockSource+0x18>
 8009574:	2302      	movs	r3, #2
 8009576:	e0a6      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x166>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <HAL_TIM_ConfigClockSource+0x170>)
 8009594:	4013      	ands	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800959e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b40      	cmp	r3, #64	; 0x40
 80095ae:	d067      	beq.n	8009680 <HAL_TIM_ConfigClockSource+0x120>
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d80b      	bhi.n	80095cc <HAL_TIM_ConfigClockSource+0x6c>
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d073      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d802      	bhi.n	80095c2 <HAL_TIM_ConfigClockSource+0x62>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d06f      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80095c0:	e078      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d06c      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
 80095c6:	2b30      	cmp	r3, #48	; 0x30
 80095c8:	d06a      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80095ca:	e073      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095cc:	2b70      	cmp	r3, #112	; 0x70
 80095ce:	d00d      	beq.n	80095ec <HAL_TIM_ConfigClockSource+0x8c>
 80095d0:	2b70      	cmp	r3, #112	; 0x70
 80095d2:	d804      	bhi.n	80095de <HAL_TIM_ConfigClockSource+0x7e>
 80095d4:	2b50      	cmp	r3, #80	; 0x50
 80095d6:	d033      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0xe0>
 80095d8:	2b60      	cmp	r3, #96	; 0x60
 80095da:	d041      	beq.n	8009660 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80095dc:	e06a      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e2:	d066      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x152>
 80095e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e8:	d017      	beq.n	800961a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80095ea:	e063      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	6899      	ldr	r1, [r3, #8]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f000 fcd4 	bl	8009fa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800960e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	609a      	str	r2, [r3, #8]
      break;
 8009618:	e04c      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	6899      	ldr	r1, [r3, #8]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f000 fcbd 	bl	8009fa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963c:	609a      	str	r2, [r3, #8]
      break;
 800963e:	e039      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	6859      	ldr	r1, [r3, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	461a      	mov	r2, r3
 800964e:	f000 fc31 	bl	8009eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2150      	movs	r1, #80	; 0x50
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc8a 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 800965e:	e029      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6859      	ldr	r1, [r3, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	461a      	mov	r2, r3
 800966e:	f000 fc50 	bl	8009f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2160      	movs	r1, #96	; 0x60
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fc7a 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 800967e:	e019      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	6859      	ldr	r1, [r3, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	461a      	mov	r2, r3
 800968e:	f000 fc11 	bl	8009eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2140      	movs	r1, #64	; 0x40
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fc6a 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 800969e:	e009      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f000 fc61 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 80096b0:	e000      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80096b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	fffeff88 	.word	0xfffeff88

080096d4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_SlaveConfigSynchro+0x18>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e031      	b.n	8009750 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fb50 	bl	8009da4 <TIM_SlaveTimer_SetConfig>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e018      	b.n	8009750 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68da      	ldr	r2, [r3, #12]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800972c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800973c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a40      	ldr	r2, [pc, #256]	; (80098bc <TIM_Base_SetConfig+0x114>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d013      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c6:	d00f      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a3d      	ldr	r2, [pc, #244]	; (80098c0 <TIM_Base_SetConfig+0x118>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00b      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a3c      	ldr	r2, [pc, #240]	; (80098c4 <TIM_Base_SetConfig+0x11c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d007      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a3b      	ldr	r2, [pc, #236]	; (80098c8 <TIM_Base_SetConfig+0x120>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d003      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3a      	ldr	r2, [pc, #232]	; (80098cc <TIM_Base_SetConfig+0x124>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d108      	bne.n	80097fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2f      	ldr	r2, [pc, #188]	; (80098bc <TIM_Base_SetConfig+0x114>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d02b      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009808:	d027      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a2c      	ldr	r2, [pc, #176]	; (80098c0 <TIM_Base_SetConfig+0x118>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d023      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2b      	ldr	r2, [pc, #172]	; (80098c4 <TIM_Base_SetConfig+0x11c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d01f      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a2a      	ldr	r2, [pc, #168]	; (80098c8 <TIM_Base_SetConfig+0x120>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d01b      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a29      	ldr	r2, [pc, #164]	; (80098cc <TIM_Base_SetConfig+0x124>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d017      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a28      	ldr	r2, [pc, #160]	; (80098d0 <TIM_Base_SetConfig+0x128>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d013      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a27      	ldr	r2, [pc, #156]	; (80098d4 <TIM_Base_SetConfig+0x12c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a26      	ldr	r2, [pc, #152]	; (80098d8 <TIM_Base_SetConfig+0x130>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a25      	ldr	r2, [pc, #148]	; (80098dc <TIM_Base_SetConfig+0x134>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a24      	ldr	r2, [pc, #144]	; (80098e0 <TIM_Base_SetConfig+0x138>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a23      	ldr	r2, [pc, #140]	; (80098e4 <TIM_Base_SetConfig+0x13c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d108      	bne.n	800986c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a0a      	ldr	r2, [pc, #40]	; (80098bc <TIM_Base_SetConfig+0x114>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_Base_SetConfig+0xf8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a0c      	ldr	r2, [pc, #48]	; (80098cc <TIM_Base_SetConfig+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d103      	bne.n	80098a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	691a      	ldr	r2, [r3, #16]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	615a      	str	r2, [r3, #20]
}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40010000 	.word	0x40010000
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	40000c00 	.word	0x40000c00
 80098cc:	40010400 	.word	0x40010400
 80098d0:	40014000 	.word	0x40014000
 80098d4:	40014400 	.word	0x40014400
 80098d8:	40014800 	.word	0x40014800
 80098dc:	40001800 	.word	0x40001800
 80098e0:	40001c00 	.word	0x40001c00
 80098e4:	40002000 	.word	0x40002000

080098e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	f023 0201 	bic.w	r2, r3, #1
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4b2b      	ldr	r3, [pc, #172]	; (80099c0 <TIM_OC1_SetConfig+0xd8>)
 8009914:	4013      	ands	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f023 0302 	bic.w	r3, r3, #2
 8009930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a21      	ldr	r2, [pc, #132]	; (80099c4 <TIM_OC1_SetConfig+0xdc>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d003      	beq.n	800994c <TIM_OC1_SetConfig+0x64>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <TIM_OC1_SetConfig+0xe0>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d10c      	bne.n	8009966 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f023 0308 	bic.w	r3, r3, #8
 8009952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f023 0304 	bic.w	r3, r3, #4
 8009964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <TIM_OC1_SetConfig+0xdc>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d003      	beq.n	8009976 <TIM_OC1_SetConfig+0x8e>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <TIM_OC1_SetConfig+0xe0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d111      	bne.n	800999a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800997c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	4313      	orrs	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	621a      	str	r2, [r3, #32]
}
 80099b4:	bf00      	nop
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	fffeff8f 	.word	0xfffeff8f
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40010400 	.word	0x40010400

080099cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f023 0210 	bic.w	r2, r3, #16
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4b2e      	ldr	r3, [pc, #184]	; (8009ab0 <TIM_OC2_SetConfig+0xe4>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f023 0320 	bic.w	r3, r3, #32
 8009a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a23      	ldr	r2, [pc, #140]	; (8009ab4 <TIM_OC2_SetConfig+0xe8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d003      	beq.n	8009a34 <TIM_OC2_SetConfig+0x68>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a22      	ldr	r2, [pc, #136]	; (8009ab8 <TIM_OC2_SetConfig+0xec>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d10d      	bne.n	8009a50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	011b      	lsls	r3, r3, #4
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a18      	ldr	r2, [pc, #96]	; (8009ab4 <TIM_OC2_SetConfig+0xe8>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d003      	beq.n	8009a60 <TIM_OC2_SetConfig+0x94>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a17      	ldr	r2, [pc, #92]	; (8009ab8 <TIM_OC2_SetConfig+0xec>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d113      	bne.n	8009a88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	621a      	str	r2, [r3, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	feff8fff 	.word	0xfeff8fff
 8009ab4:	40010000 	.word	0x40010000
 8009ab8:	40010400 	.word	0x40010400

08009abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4b2d      	ldr	r3, [pc, #180]	; (8009b9c <TIM_OC3_SetConfig+0xe0>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a22      	ldr	r2, [pc, #136]	; (8009ba0 <TIM_OC3_SetConfig+0xe4>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d003      	beq.n	8009b22 <TIM_OC3_SetConfig+0x66>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a21      	ldr	r2, [pc, #132]	; (8009ba4 <TIM_OC3_SetConfig+0xe8>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d10d      	bne.n	8009b3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	021b      	lsls	r3, r3, #8
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a17      	ldr	r2, [pc, #92]	; (8009ba0 <TIM_OC3_SetConfig+0xe4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d003      	beq.n	8009b4e <TIM_OC3_SetConfig+0x92>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <TIM_OC3_SetConfig+0xe8>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d113      	bne.n	8009b76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	011b      	lsls	r3, r3, #4
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	621a      	str	r2, [r3, #32]
}
 8009b90:	bf00      	nop
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	fffeff8f 	.word	0xfffeff8f
 8009ba0:	40010000 	.word	0x40010000
 8009ba4:	40010400 	.word	0x40010400

08009ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4b1e      	ldr	r3, [pc, #120]	; (8009c4c <TIM_OC4_SetConfig+0xa4>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	021b      	lsls	r3, r3, #8
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	031b      	lsls	r3, r3, #12
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <TIM_OC4_SetConfig+0xa8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d003      	beq.n	8009c10 <TIM_OC4_SetConfig+0x68>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a12      	ldr	r2, [pc, #72]	; (8009c54 <TIM_OC4_SetConfig+0xac>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d109      	bne.n	8009c24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	019b      	lsls	r3, r3, #6
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	621a      	str	r2, [r3, #32]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	feff8fff 	.word	0xfeff8fff
 8009c50:	40010000 	.word	0x40010000
 8009c54:	40010400 	.word	0x40010400

08009c58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <TIM_OC5_SetConfig+0x98>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a12      	ldr	r2, [pc, #72]	; (8009cf4 <TIM_OC5_SetConfig+0x9c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_OC5_SetConfig+0x5e>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a11      	ldr	r2, [pc, #68]	; (8009cf8 <TIM_OC5_SetConfig+0xa0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d109      	bne.n	8009cca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	621a      	str	r2, [r3, #32]
}
 8009ce4:	bf00      	nop
 8009ce6:	371c      	adds	r7, #28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	fffeff8f 	.word	0xfffeff8f
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40010400 	.word	0x40010400

08009cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <TIM_OC6_SetConfig+0x9c>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <TIM_OC6_SetConfig+0xa0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_OC6_SetConfig+0x60>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <TIM_OC6_SetConfig+0xa4>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d109      	bne.n	8009d70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	029b      	lsls	r3, r3, #10
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	621a      	str	r2, [r3, #32]
}
 8009d8a:	bf00      	nop
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	feff8fff 	.word	0xfeff8fff
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40010400 	.word	0x40010400

08009da4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4b39      	ldr	r3, [pc, #228]	; (8009eb0 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	2b30      	cmp	r3, #48	; 0x30
 8009de8:	d05c      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
 8009dea:	2b30      	cmp	r3, #48	; 0x30
 8009dec:	d806      	bhi.n	8009dfc <TIM_SlaveTimer_SetConfig+0x58>
 8009dee:	2b10      	cmp	r3, #16
 8009df0:	d058      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d056      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d054      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009dfa:	e054      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009dfc:	2b50      	cmp	r3, #80	; 0x50
 8009dfe:	d03d      	beq.n	8009e7c <TIM_SlaveTimer_SetConfig+0xd8>
 8009e00:	2b50      	cmp	r3, #80	; 0x50
 8009e02:	d802      	bhi.n	8009e0a <TIM_SlaveTimer_SetConfig+0x66>
 8009e04:	2b40      	cmp	r3, #64	; 0x40
 8009e06:	d010      	beq.n	8009e2a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8009e08:	e04d      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009e0a:	2b60      	cmp	r3, #96	; 0x60
 8009e0c:	d040      	beq.n	8009e90 <TIM_SlaveTimer_SetConfig+0xec>
 8009e0e:	2b70      	cmp	r3, #112	; 0x70
 8009e10:	d000      	beq.n	8009e14 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009e12:	e048      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68d9      	ldr	r1, [r3, #12]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f000 f8c0 	bl	8009fa8 <TIM_ETR_SetConfig>
      break;
 8009e28:	e03d      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	d101      	bne.n	8009e36 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e038      	b.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6a1a      	ldr	r2, [r3, #32]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0201 	bic.w	r2, r2, #1
 8009e4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	621a      	str	r2, [r3, #32]
      break;
 8009e7a:	e014      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	6899      	ldr	r1, [r3, #8]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f000 f813 	bl	8009eb4 <TIM_TI1_ConfigInputStage>
      break;
 8009e8e:	e00a      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6899      	ldr	r1, [r3, #8]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f000 f838 	bl	8009f12 <TIM_TI2_ConfigInputStage>
      break;
 8009ea2:	e000      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009ea4:	bf00      	nop
  }
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	fffefff8 	.word	0xfffefff8

08009eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f023 0201 	bic.w	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f023 030a 	bic.w	r3, r3, #10
 8009ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	621a      	str	r2, [r3, #32]
}
 8009f06:	bf00      	nop
 8009f08:	371c      	adds	r7, #28
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b087      	sub	sp, #28
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	f023 0210 	bic.w	r2, r3, #16
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	031b      	lsls	r3, r3, #12
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	621a      	str	r2, [r3, #32]
}
 8009f66:	bf00      	nop
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	f043 0307 	orr.w	r3, r3, #7
 8009f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	609a      	str	r2, [r3, #8]
}
 8009f9c:	bf00      	nop
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	021a      	lsls	r2, r3, #8
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	609a      	str	r2, [r3, #8]
}
 8009fdc:	bf00      	nop
 8009fde:	371c      	adds	r7, #28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e06d      	b.n	800a0dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a30      	ldr	r2, [pc, #192]	; (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d004      	beq.n	800a034 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a2f      	ldr	r2, [pc, #188]	; (800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d108      	bne.n	800a046 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a03a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a20      	ldr	r2, [pc, #128]	; (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d01d      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a1d      	ldr	r2, [pc, #116]	; (800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a1c      	ldr	r2, [pc, #112]	; (800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a1a      	ldr	r2, [pc, #104]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a16      	ldr	r2, [pc, #88]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a15      	ldr	r2, [pc, #84]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d10c      	bne.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	40010000 	.word	0x40010000
 800a0ec:	40010400 	.word	0x40010400
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40014000 	.word	0x40014000
 800a100:	40001800 	.word	0x40001800

0800a104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e065      	b.n	800a1ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	4313      	orrs	r3, r2
 800a188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	041b      	lsls	r3, r3, #16
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a16      	ldr	r2, [pc, #88]	; (800a1f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d004      	beq.n	800a1ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a14      	ldr	r2, [pc, #80]	; (800a1fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d115      	bne.n	800a1da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	051b      	lsls	r3, r3, #20
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40010400 	.word	0x40010400

0800a200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e040      	b.n	800a2d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7fa f800 	bl	8004264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2224      	movs	r2, #36	; 0x24
 800a268:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0201 	bic.w	r2, r2, #1
 800a278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 faa6 	bl	800a7cc <UART_SetConfig>
 800a280:	4603      	mov	r3, r0
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e022      	b.n	800a2d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fd44 	bl	800ad20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0201 	orr.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fdcb 	bl	800ae64 <UART_CheckIdleState>
 800a2ce:	4603      	mov	r3, r0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d17f      	bne.n	800a3f0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <HAL_UART_Transmit+0x24>
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e078      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_UART_Transmit+0x36>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e071      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2221      	movs	r2, #33	; 0x21
 800a320:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a322:	f7fa fa2d 	bl	8004780 <HAL_GetTick>
 800a326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	88fa      	ldrh	r2, [r7, #6]
 800a32c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	88fa      	ldrh	r2, [r7, #6]
 800a334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a340:	d108      	bne.n	800a354 <HAL_UART_Transmit+0x7c>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	e003      	b.n	800a35c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a358:	2300      	movs	r3, #0
 800a35a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a364:	e02c      	b.n	800a3c0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2200      	movs	r2, #0
 800a36e:	2180      	movs	r1, #128	; 0x80
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 fda6 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e038      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a394:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	3302      	adds	r3, #2
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	e007      	b.n	800a3ae <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1cc      	bne.n	800a366 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	2140      	movs	r1, #64	; 0x40
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 fd73 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e005      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e000      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a3f0:	2302      	movs	r3, #2
  }
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a40e:	2b20      	cmp	r3, #32
 800a410:	f040 808a 	bne.w	800a528 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <HAL_UART_Receive_IT+0x24>
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e082      	b.n	800a52a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_UART_Receive_IT+0x36>
 800a42e:	2302      	movs	r3, #2
 800a430:	e07b      	b.n	800a52a <HAL_UART_Receive_IT+0x12e>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	88fa      	ldrh	r2, [r7, #6]
 800a444:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45e:	d10e      	bne.n	800a47e <HAL_UART_Receive_IT+0x82>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d105      	bne.n	800a474 <HAL_UART_Receive_IT+0x78>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a46e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a472:	e02d      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	22ff      	movs	r2, #255	; 0xff
 800a478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a47c:	e028      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10d      	bne.n	800a4a2 <HAL_UART_Receive_IT+0xa6>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d104      	bne.n	800a498 <HAL_UART_Receive_IT+0x9c>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	22ff      	movs	r2, #255	; 0xff
 800a492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a496:	e01b      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	227f      	movs	r2, #127	; 0x7f
 800a49c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4a0:	e016      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4aa:	d10d      	bne.n	800a4c8 <HAL_UART_Receive_IT+0xcc>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <HAL_UART_Receive_IT+0xc2>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	227f      	movs	r2, #127	; 0x7f
 800a4b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4bc:	e008      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	223f      	movs	r2, #63	; 0x3f
 800a4c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4c6:	e003      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2222      	movs	r2, #34	; 0x22
 800a4da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f4:	d107      	bne.n	800a506 <HAL_UART_Receive_IT+0x10a>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d103      	bne.n	800a506 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <HAL_UART_Receive_IT+0x13c>)
 800a502:	661a      	str	r2, [r3, #96]	; 0x60
 800a504:	e002      	b.n	800a50c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4a0c      	ldr	r2, [pc, #48]	; (800a53c <HAL_UART_Receive_IT+0x140>)
 800a50a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a522:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	e000      	b.n	800a52a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a528:	2302      	movs	r3, #2
  }
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	0800b0fd 	.word	0x0800b0fd
 800a53c:	0800b057 	.word	0x0800b057

0800a540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a560:	69fa      	ldr	r2, [r7, #28]
 800a562:	f640 030f 	movw	r3, #2063	; 0x80f
 800a566:	4013      	ands	r3, r2
 800a568:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 8100 	beq.w	800a78e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
      }
      return;
 800a596:	e0fa      	b.n	800a78e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 80d5 	beq.w	800a74a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d105      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80ca 	beq.w	800a74a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00e      	beq.n	800a5de <HAL_UART_IRQHandler+0x9e>
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d6:	f043 0201 	orr.w	r2, r3, #1
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00e      	beq.n	800a606 <HAL_UART_IRQHandler+0xc6>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5fe:	f043 0204 	orr.w	r2, r3, #4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00e      	beq.n	800a62e <HAL_UART_IRQHandler+0xee>
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2204      	movs	r2, #4
 800a620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a626:	f043 0202 	orr.w	r2, r3, #2
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b00      	cmp	r3, #0
 800a636:	d013      	beq.n	800a660 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d009      	beq.n	800a660 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2208      	movs	r2, #8
 800a652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a658:	f043 0208 	orr.w	r2, r3, #8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00f      	beq.n	800a68a <HAL_UART_IRQHandler+0x14a>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a67c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a682:	f043 0220 	orr.w	r2, r3, #32
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d07f      	beq.n	800a792 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	f003 0320 	and.w	r3, r3, #32
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d007      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ba:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d004      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d031      	beq.n	800a738 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc6f 	bl	800afb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	d123      	bne.n	800a730 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6f6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d013      	beq.n	800a728 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a704:	4a26      	ldr	r2, [pc, #152]	; (800a7a0 <HAL_UART_IRQHandler+0x260>)
 800a706:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fa fefb 	bl	8005508 <HAL_DMA_Abort_IT>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d016      	beq.n	800a746 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a722:	4610      	mov	r0, r2
 800a724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a726:	e00e      	b.n	800a746 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f845 	bl	800a7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72e:	e00a      	b.n	800a746 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f841 	bl	800a7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a736:	e006      	b.n	800a746 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f83d 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a744:	e025      	b.n	800a792 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a746:	bf00      	nop
    return;
 800a748:	e023      	b.n	800a792 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00d      	beq.n	800a770 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d008      	beq.n	800a770 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a762:	2b00      	cmp	r3, #0
 800a764:	d017      	beq.n	800a796 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	4798      	blx	r3
    }
    return;
 800a76e:	e012      	b.n	800a796 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00e      	beq.n	800a798 <HAL_UART_IRQHandler+0x258>
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fc4d 	bl	800b024 <UART_EndTransmit_IT>
    return;
 800a78a:	bf00      	nop
 800a78c:	e004      	b.n	800a798 <HAL_UART_IRQHandler+0x258>
      return;
 800a78e:	bf00      	nop
 800a790:	e002      	b.n	800a798 <HAL_UART_IRQHandler+0x258>
    return;
 800a792:	bf00      	nop
 800a794:	e000      	b.n	800a798 <HAL_UART_IRQHandler+0x258>
    return;
 800a796:	bf00      	nop
  }

}
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800aff9 	.word	0x0800aff9

0800a7a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4bb1      	ldr	r3, [pc, #708]	; (800aac0 <UART_SetConfig+0x2f4>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	6939      	ldr	r1, [r7, #16]
 800a804:	430b      	orrs	r3, r1
 800a806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	430a      	orrs	r2, r1
 800a840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a9f      	ldr	r2, [pc, #636]	; (800aac4 <UART_SetConfig+0x2f8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d121      	bne.n	800a890 <UART_SetConfig+0xc4>
 800a84c:	4b9e      	ldr	r3, [pc, #632]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a852:	f003 0303 	and.w	r3, r3, #3
 800a856:	2b03      	cmp	r3, #3
 800a858:	d816      	bhi.n	800a888 <UART_SetConfig+0xbc>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x94>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a871 	.word	0x0800a871
 800a864:	0800a87d 	.word	0x0800a87d
 800a868:	0800a877 	.word	0x0800a877
 800a86c:	0800a883 	.word	0x0800a883
 800a870:	2301      	movs	r3, #1
 800a872:	77fb      	strb	r3, [r7, #31]
 800a874:	e151      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a876:	2302      	movs	r3, #2
 800a878:	77fb      	strb	r3, [r7, #31]
 800a87a:	e14e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a87c:	2304      	movs	r3, #4
 800a87e:	77fb      	strb	r3, [r7, #31]
 800a880:	e14b      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a882:	2308      	movs	r3, #8
 800a884:	77fb      	strb	r3, [r7, #31]
 800a886:	e148      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a888:	2310      	movs	r3, #16
 800a88a:	77fb      	strb	r3, [r7, #31]
 800a88c:	bf00      	nop
 800a88e:	e144      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a8d      	ldr	r2, [pc, #564]	; (800aacc <UART_SetConfig+0x300>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d134      	bne.n	800a904 <UART_SetConfig+0x138>
 800a89a:	4b8b      	ldr	r3, [pc, #556]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a0:	f003 030c 	and.w	r3, r3, #12
 800a8a4:	2b0c      	cmp	r3, #12
 800a8a6:	d829      	bhi.n	800a8fc <UART_SetConfig+0x130>
 800a8a8:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <UART_SetConfig+0xe4>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a8e5 	.word	0x0800a8e5
 800a8b4:	0800a8fd 	.word	0x0800a8fd
 800a8b8:	0800a8fd 	.word	0x0800a8fd
 800a8bc:	0800a8fd 	.word	0x0800a8fd
 800a8c0:	0800a8f1 	.word	0x0800a8f1
 800a8c4:	0800a8fd 	.word	0x0800a8fd
 800a8c8:	0800a8fd 	.word	0x0800a8fd
 800a8cc:	0800a8fd 	.word	0x0800a8fd
 800a8d0:	0800a8eb 	.word	0x0800a8eb
 800a8d4:	0800a8fd 	.word	0x0800a8fd
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a8fd 	.word	0x0800a8fd
 800a8e0:	0800a8f7 	.word	0x0800a8f7
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e117      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	77fb      	strb	r3, [r7, #31]
 800a8ee:	e114      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	77fb      	strb	r3, [r7, #31]
 800a8f4:	e111      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	77fb      	strb	r3, [r7, #31]
 800a8fa:	e10e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	bf00      	nop
 800a902:	e10a      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a71      	ldr	r2, [pc, #452]	; (800aad0 <UART_SetConfig+0x304>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d120      	bne.n	800a950 <UART_SetConfig+0x184>
 800a90e:	4b6e      	ldr	r3, [pc, #440]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d00f      	beq.n	800a93c <UART_SetConfig+0x170>
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d802      	bhi.n	800a926 <UART_SetConfig+0x15a>
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <UART_SetConfig+0x164>
 800a924:	e010      	b.n	800a948 <UART_SetConfig+0x17c>
 800a926:	2b20      	cmp	r3, #32
 800a928:	d005      	beq.n	800a936 <UART_SetConfig+0x16a>
 800a92a:	2b30      	cmp	r3, #48	; 0x30
 800a92c:	d009      	beq.n	800a942 <UART_SetConfig+0x176>
 800a92e:	e00b      	b.n	800a948 <UART_SetConfig+0x17c>
 800a930:	2300      	movs	r3, #0
 800a932:	77fb      	strb	r3, [r7, #31]
 800a934:	e0f1      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a936:	2302      	movs	r3, #2
 800a938:	77fb      	strb	r3, [r7, #31]
 800a93a:	e0ee      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a93c:	2304      	movs	r3, #4
 800a93e:	77fb      	strb	r3, [r7, #31]
 800a940:	e0eb      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a942:	2308      	movs	r3, #8
 800a944:	77fb      	strb	r3, [r7, #31]
 800a946:	e0e8      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a948:	2310      	movs	r3, #16
 800a94a:	77fb      	strb	r3, [r7, #31]
 800a94c:	bf00      	nop
 800a94e:	e0e4      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a5f      	ldr	r2, [pc, #380]	; (800aad4 <UART_SetConfig+0x308>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d120      	bne.n	800a99c <UART_SetConfig+0x1d0>
 800a95a:	4b5b      	ldr	r3, [pc, #364]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d00f      	beq.n	800a988 <UART_SetConfig+0x1bc>
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d802      	bhi.n	800a972 <UART_SetConfig+0x1a6>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d005      	beq.n	800a97c <UART_SetConfig+0x1b0>
 800a970:	e010      	b.n	800a994 <UART_SetConfig+0x1c8>
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d005      	beq.n	800a982 <UART_SetConfig+0x1b6>
 800a976:	2bc0      	cmp	r3, #192	; 0xc0
 800a978:	d009      	beq.n	800a98e <UART_SetConfig+0x1c2>
 800a97a:	e00b      	b.n	800a994 <UART_SetConfig+0x1c8>
 800a97c:	2300      	movs	r3, #0
 800a97e:	77fb      	strb	r3, [r7, #31]
 800a980:	e0cb      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a982:	2302      	movs	r3, #2
 800a984:	77fb      	strb	r3, [r7, #31]
 800a986:	e0c8      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a988:	2304      	movs	r3, #4
 800a98a:	77fb      	strb	r3, [r7, #31]
 800a98c:	e0c5      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a98e:	2308      	movs	r3, #8
 800a990:	77fb      	strb	r3, [r7, #31]
 800a992:	e0c2      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a994:	2310      	movs	r3, #16
 800a996:	77fb      	strb	r3, [r7, #31]
 800a998:	bf00      	nop
 800a99a:	e0be      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a4d      	ldr	r2, [pc, #308]	; (800aad8 <UART_SetConfig+0x30c>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d124      	bne.n	800a9f0 <UART_SetConfig+0x224>
 800a9a6:	4b48      	ldr	r3, [pc, #288]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b4:	d012      	beq.n	800a9dc <UART_SetConfig+0x210>
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	d802      	bhi.n	800a9c2 <UART_SetConfig+0x1f6>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <UART_SetConfig+0x204>
 800a9c0:	e012      	b.n	800a9e8 <UART_SetConfig+0x21c>
 800a9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9c6:	d006      	beq.n	800a9d6 <UART_SetConfig+0x20a>
 800a9c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9cc:	d009      	beq.n	800a9e2 <UART_SetConfig+0x216>
 800a9ce:	e00b      	b.n	800a9e8 <UART_SetConfig+0x21c>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	77fb      	strb	r3, [r7, #31]
 800a9d4:	e0a1      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	77fb      	strb	r3, [r7, #31]
 800a9da:	e09e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9dc:	2304      	movs	r3, #4
 800a9de:	77fb      	strb	r3, [r7, #31]
 800a9e0:	e09b      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	77fb      	strb	r3, [r7, #31]
 800a9e6:	e098      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	77fb      	strb	r3, [r7, #31]
 800a9ec:	bf00      	nop
 800a9ee:	e094      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a39      	ldr	r2, [pc, #228]	; (800aadc <UART_SetConfig+0x310>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d124      	bne.n	800aa44 <UART_SetConfig+0x278>
 800a9fa:	4b33      	ldr	r3, [pc, #204]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa08:	d012      	beq.n	800aa30 <UART_SetConfig+0x264>
 800aa0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa0e:	d802      	bhi.n	800aa16 <UART_SetConfig+0x24a>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <UART_SetConfig+0x258>
 800aa14:	e012      	b.n	800aa3c <UART_SetConfig+0x270>
 800aa16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa1a:	d006      	beq.n	800aa2a <UART_SetConfig+0x25e>
 800aa1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa20:	d009      	beq.n	800aa36 <UART_SetConfig+0x26a>
 800aa22:	e00b      	b.n	800aa3c <UART_SetConfig+0x270>
 800aa24:	2301      	movs	r3, #1
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e077      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e074      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa30:	2304      	movs	r3, #4
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	e071      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa36:	2308      	movs	r3, #8
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e06e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	bf00      	nop
 800aa42:	e06a      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a25      	ldr	r2, [pc, #148]	; (800aae0 <UART_SetConfig+0x314>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d124      	bne.n	800aa98 <UART_SetConfig+0x2cc>
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <UART_SetConfig+0x2fc>)
 800aa50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5c:	d012      	beq.n	800aa84 <UART_SetConfig+0x2b8>
 800aa5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa62:	d802      	bhi.n	800aa6a <UART_SetConfig+0x29e>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d007      	beq.n	800aa78 <UART_SetConfig+0x2ac>
 800aa68:	e012      	b.n	800aa90 <UART_SetConfig+0x2c4>
 800aa6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa6e:	d006      	beq.n	800aa7e <UART_SetConfig+0x2b2>
 800aa70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa74:	d009      	beq.n	800aa8a <UART_SetConfig+0x2be>
 800aa76:	e00b      	b.n	800aa90 <UART_SetConfig+0x2c4>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	77fb      	strb	r3, [r7, #31]
 800aa7c:	e04d      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	77fb      	strb	r3, [r7, #31]
 800aa82:	e04a      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa84:	2304      	movs	r3, #4
 800aa86:	77fb      	strb	r3, [r7, #31]
 800aa88:	e047      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa8a:	2308      	movs	r3, #8
 800aa8c:	77fb      	strb	r3, [r7, #31]
 800aa8e:	e044      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa90:	2310      	movs	r3, #16
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	bf00      	nop
 800aa96:	e040      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <UART_SetConfig+0x318>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d139      	bne.n	800ab16 <UART_SetConfig+0x34a>
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <UART_SetConfig+0x2fc>)
 800aaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aaac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab0:	d027      	beq.n	800ab02 <UART_SetConfig+0x336>
 800aab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab6:	d817      	bhi.n	800aae8 <UART_SetConfig+0x31c>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01c      	beq.n	800aaf6 <UART_SetConfig+0x32a>
 800aabc:	e027      	b.n	800ab0e <UART_SetConfig+0x342>
 800aabe:	bf00      	nop
 800aac0:	efff69f3 	.word	0xefff69f3
 800aac4:	40011000 	.word	0x40011000
 800aac8:	40023800 	.word	0x40023800
 800aacc:	40004400 	.word	0x40004400
 800aad0:	40004800 	.word	0x40004800
 800aad4:	40004c00 	.word	0x40004c00
 800aad8:	40005000 	.word	0x40005000
 800aadc:	40011400 	.word	0x40011400
 800aae0:	40007800 	.word	0x40007800
 800aae4:	40007c00 	.word	0x40007c00
 800aae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaec:	d006      	beq.n	800aafc <UART_SetConfig+0x330>
 800aaee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aaf2:	d009      	beq.n	800ab08 <UART_SetConfig+0x33c>
 800aaf4:	e00b      	b.n	800ab0e <UART_SetConfig+0x342>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e00e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aafc:	2302      	movs	r3, #2
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e00b      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab02:	2304      	movs	r3, #4
 800ab04:	77fb      	strb	r3, [r7, #31]
 800ab06:	e008      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab08:	2308      	movs	r3, #8
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	e005      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab0e:	2310      	movs	r3, #16
 800ab10:	77fb      	strb	r3, [r7, #31]
 800ab12:	bf00      	nop
 800ab14:	e001      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab16:	2310      	movs	r3, #16
 800ab18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab22:	d17f      	bne.n	800ac24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ab24:	7ffb      	ldrb	r3, [r7, #31]
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d85c      	bhi.n	800abe4 <UART_SetConfig+0x418>
 800ab2a:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <UART_SetConfig+0x364>)
 800ab2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab30:	0800ab55 	.word	0x0800ab55
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab95 	.word	0x0800ab95
 800ab3c:	0800abe5 	.word	0x0800abe5
 800ab40:	0800abad 	.word	0x0800abad
 800ab44:	0800abe5 	.word	0x0800abe5
 800ab48:	0800abe5 	.word	0x0800abe5
 800ab4c:	0800abe5 	.word	0x0800abe5
 800ab50:	0800abcd 	.word	0x0800abcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab54:	f7fd f928 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800ab58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	005a      	lsls	r2, r3, #1
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	085b      	lsrs	r3, r3, #1
 800ab64:	441a      	add	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	61bb      	str	r3, [r7, #24]
        break;
 800ab72:	e03a      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab74:	f7fd f92c 	bl	8007dd0 <HAL_RCC_GetPCLK2Freq>
 800ab78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	005a      	lsls	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	085b      	lsrs	r3, r3, #1
 800ab84:	441a      	add	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	61bb      	str	r3, [r7, #24]
        break;
 800ab92:	e02a      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	085a      	lsrs	r2, r3, #1
 800ab9a:	4b5f      	ldr	r3, [pc, #380]	; (800ad18 <UART_SetConfig+0x54c>)
 800ab9c:	4413      	add	r3, r2
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6852      	ldr	r2, [r2, #4]
 800aba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	61bb      	str	r3, [r7, #24]
        break;
 800abaa:	e01e      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abac:	f7fd f83e 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 800abb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	005a      	lsls	r2, r3, #1
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	085b      	lsrs	r3, r3, #1
 800abbc:	441a      	add	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	61bb      	str	r3, [r7, #24]
        break;
 800abca:	e00e      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	085b      	lsrs	r3, r3, #1
 800abd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	fbb2 f3f3 	udiv	r3, r2, r3
 800abde:	b29b      	uxth	r3, r3
 800abe0:	61bb      	str	r3, [r7, #24]
        break;
 800abe2:	e002      	b.n	800abea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	75fb      	strb	r3, [r7, #23]
        break;
 800abe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	2b0f      	cmp	r3, #15
 800abee:	d916      	bls.n	800ac1e <UART_SetConfig+0x452>
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf6:	d212      	bcs.n	800ac1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f023 030f 	bic.w	r3, r3, #15
 800ac00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	897b      	ldrh	r3, [r7, #10]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	897a      	ldrh	r2, [r7, #10]
 800ac1a:	60da      	str	r2, [r3, #12]
 800ac1c:	e070      	b.n	800ad00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	75fb      	strb	r3, [r7, #23]
 800ac22:	e06d      	b.n	800ad00 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ac24:	7ffb      	ldrb	r3, [r7, #31]
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d859      	bhi.n	800acde <UART_SetConfig+0x512>
 800ac2a:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <UART_SetConfig+0x464>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac55 	.word	0x0800ac55
 800ac34:	0800ac73 	.word	0x0800ac73
 800ac38:	0800ac91 	.word	0x0800ac91
 800ac3c:	0800acdf 	.word	0x0800acdf
 800ac40:	0800aca9 	.word	0x0800aca9
 800ac44:	0800acdf 	.word	0x0800acdf
 800ac48:	0800acdf 	.word	0x0800acdf
 800ac4c:	0800acdf 	.word	0x0800acdf
 800ac50:	0800acc7 	.word	0x0800acc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac54:	f7fd f8a8 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800ac58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	085a      	lsrs	r2, r3, #1
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	441a      	add	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	61bb      	str	r3, [r7, #24]
        break;
 800ac70:	e038      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac72:	f7fd f8ad 	bl	8007dd0 <HAL_RCC_GetPCLK2Freq>
 800ac76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	085a      	lsrs	r2, r3, #1
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	61bb      	str	r3, [r7, #24]
        break;
 800ac8e:	e029      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	085a      	lsrs	r2, r3, #1
 800ac96:	4b21      	ldr	r3, [pc, #132]	; (800ad1c <UART_SetConfig+0x550>)
 800ac98:	4413      	add	r3, r2
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6852      	ldr	r2, [r2, #4]
 800ac9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	61bb      	str	r3, [r7, #24]
        break;
 800aca6:	e01d      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aca8:	f7fc ffc0 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 800acac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	085a      	lsrs	r2, r3, #1
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	441a      	add	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	61bb      	str	r3, [r7, #24]
        break;
 800acc4:	e00e      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd8:	b29b      	uxth	r3, r3
 800acda:	61bb      	str	r3, [r7, #24]
        break;
 800acdc:	e002      	b.n	800ace4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	75fb      	strb	r3, [r7, #23]
        break;
 800ace2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2b0f      	cmp	r3, #15
 800ace8:	d908      	bls.n	800acfc <UART_SetConfig+0x530>
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf0:	d204      	bcs.n	800acfc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	60da      	str	r2, [r3, #12]
 800acfa:	e001      	b.n	800ad00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	01e84800 	.word	0x01e84800
 800ad1c:	00f42400 	.word	0x00f42400

0800ad20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	f003 0308 	and.w	r3, r3, #8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01a      	beq.n	800ae36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae1e:	d10a      	bne.n	800ae36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	605a      	str	r2, [r3, #4]
  }
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae72:	f7f9 fc85 	bl	8004780 <HAL_GetTick>
 800ae76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b08      	cmp	r3, #8
 800ae84:	d10e      	bne.n	800aea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f814 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e00a      	b.n	800aeba <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2220      	movs	r2, #32
 800aeae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	4613      	mov	r3, r2
 800aed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed2:	e05d      	b.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d059      	beq.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aedc:	f7f9 fc50 	bl	8004780 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d302      	bcc.n	800aef2 <UART_WaitOnFlagUntilTimeout+0x30>
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d11b      	bne.n	800af2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0201 	bic.w	r2, r2, #1
 800af10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2220      	movs	r2, #32
 800af16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e042      	b.n	800afb0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0304 	and.w	r3, r3, #4
 800af34:	2b00      	cmp	r3, #0
 800af36:	d02b      	beq.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af46:	d123      	bne.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af50:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0201 	bic.w	r2, r2, #1
 800af70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2220      	movs	r2, #32
 800af76:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2220      	movs	r2, #32
 800af7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2220      	movs	r2, #32
 800af82:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e00f      	b.n	800afb0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	69da      	ldr	r2, [r3, #28]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	4013      	ands	r3, r2
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	bf0c      	ite	eq
 800afa0:	2301      	moveq	r3, #1
 800afa2:	2300      	movne	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	461a      	mov	r2, r3
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d092      	beq.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800afce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 0201 	bic.w	r2, r2, #1
 800afde:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2220      	movs	r2, #32
 800afe4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	661a      	str	r2, [r3, #96]	; 0x60
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fbce 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b03a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fbab 	bl	800a7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b064:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b06a:	2b22      	cmp	r3, #34	; 0x22
 800b06c:	d13a      	bne.n	800b0e4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b076:	89bb      	ldrh	r3, [r7, #12]
 800b078:	b2d9      	uxtb	r1, r3
 800b07a:	89fb      	ldrh	r3, [r7, #14]
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	400a      	ands	r2, r1
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3b01      	subs	r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d121      	bne.n	800b0f4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689a      	ldr	r2, [r3, #8]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 0201 	bic.w	r2, r2, #1
 800b0ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7f6 ff4d 	bl	8001f7c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0e2:	e007      	b.n	800b0f4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f042 0208 	orr.w	r2, r2, #8
 800b0f2:	619a      	str	r2, [r3, #24]
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b10a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b110:	2b22      	cmp	r3, #34	; 0x22
 800b112:	d13a      	bne.n	800b18a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b120:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b122:	89ba      	ldrh	r2, [r7, #12]
 800b124:	89fb      	ldrh	r3, [r7, #14]
 800b126:	4013      	ands	r3, r2
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b132:	1c9a      	adds	r2, r3, #2
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3b01      	subs	r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d121      	bne.n	800b19a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b164:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689a      	ldr	r2, [r3, #8]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0201 	bic.w	r2, r2, #1
 800b174:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7f6 fefa 	bl	8001f7c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b188:	e007      	b.n	800b19a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f042 0208 	orr.w	r2, r2, #8
 800b198:	619a      	str	r2, [r3, #24]
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d027      	beq.n	800b20e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4b2f      	ldr	r3, [pc, #188]	; (800b284 <FMC_SDRAM_Init+0xe0>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1d4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b1da:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b1e0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b1e6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b1ec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b1f2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b1f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b1fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	e032      	b.n	800b274 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b21a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b224:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b22a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	4b12      	ldr	r3, [pc, #72]	; (800b284 <FMC_SDRAM_Init+0xe0>)
 800b23c:	4013      	ands	r3, r2
 800b23e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b248:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b24e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b254:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b25a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b260:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	4313      	orrs	r3, r2
 800b266:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	ffff8000 	.word	0xffff8000

0800b288 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d02e      	beq.n	800b300 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2ae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b2d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b2dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b2e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	609a      	str	r2, [r3, #8]
 800b2fe:	e039      	b.n	800b374 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <FMC_SDRAM_Timing_Init+0xfc>)
 800b30a:	4013      	ands	r3, r2
 800b30c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	3b01      	subs	r3, #1
 800b314:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b31e:	4313      	orrs	r3, r2
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	4313      	orrs	r3, r2
 800b324:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b332:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	3b01      	subs	r3, #1
 800b340:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b342:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	3b01      	subs	r3, #1
 800b34a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b34c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	3b01      	subs	r3, #1
 800b354:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b356:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b360:	4313      	orrs	r3, r2
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	371c      	adds	r7, #28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	ff0f0fff 	.word	0xff0f0fff

0800b388 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b3aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695a      	ldr	r2, [r3, #20]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b402:	2b84      	cmp	r3, #132	; 0x84
 800b404:	d005      	beq.n	800b412 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	3303      	adds	r3, #3
 800b410:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b424:	f001 f8d4 	bl	800c5d0 <vTaskStartScheduler>
  
  return osOK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b42e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b430:	b089      	sub	sp, #36	; 0x24
 800b432:	af04      	add	r7, sp, #16
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d020      	beq.n	800b482 <osThreadCreate+0x54>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01c      	beq.n	800b482 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685c      	ldr	r4, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681d      	ldr	r5, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691e      	ldr	r6, [r3, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff ffc8 	bl	800b3f0 <makeFreeRtosPriority>
 800b460:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b46a:	9202      	str	r2, [sp, #8]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	9100      	str	r1, [sp, #0]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	4632      	mov	r2, r6
 800b474:	4629      	mov	r1, r5
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fe52 	bl	800c120 <xTaskCreateStatic>
 800b47c:	4603      	mov	r3, r0
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e01c      	b.n	800b4bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685c      	ldr	r4, [r3, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b48e:	b29e      	uxth	r6, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff ffaa 	bl	800b3f0 <makeFreeRtosPriority>
 800b49c:	4602      	mov	r2, r0
 800b49e:	f107 030c 	add.w	r3, r7, #12
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	9200      	str	r2, [sp, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fe97 	bl	800c1e0 <xTaskCreate>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d001      	beq.n	800b4bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <osDelay+0x16>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	e000      	b.n	800b4de <osDelay+0x18>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f001 f840 	bl	800c564 <vTaskDelay>
  
  return osOK;
 800b4e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4619      	mov	r1, r3
 800b504:	2001      	movs	r0, #1
 800b506:	f000 fa60 	bl	800b9ca <xQueueCreateMutexStatic>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e003      	b.n	800b516 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b50e:	2001      	movs	r0, #1
 800b510:	f000 fa43 	bl	800b99a <xQueueCreateMutex>
 800b514:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b51e:	b590      	push	{r4, r7, lr}
 800b520:	b085      	sub	sp, #20
 800b522:	af02      	add	r7, sp, #8
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d012      	beq.n	800b556 <osMessageCreate+0x38>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00e      	beq.n	800b556 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6859      	ldr	r1, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689a      	ldr	r2, [r3, #8]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68dc      	ldr	r4, [r3, #12]
 800b548:	2300      	movs	r3, #0
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	4623      	mov	r3, r4
 800b54e:	f000 f92d 	bl	800b7ac <xQueueGenericCreateStatic>
 800b552:	4603      	mov	r3, r0
 800b554:	e008      	b.n	800b568 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	4619      	mov	r1, r3
 800b562:	f000 f9a0 	bl	800b8a6 <xQueueGenericCreate>
 800b566:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd90      	pop	{r4, r7, pc}

0800b570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f103 0208 	add.w	r2, r3, #8
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f103 0208 	add.w	r2, r3, #8
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f103 0208 	add.w	r2, r3, #8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
}
 800b606:	bf00      	nop
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d103      	bne.n	800b632 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	e00c      	b.n	800b64c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3308      	adds	r3, #8
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	e002      	b.n	800b640 <vListInsert+0x2e>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d2f6      	bcs.n	800b63a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	601a      	str	r2, [r3, #0]
}
 800b678:	bf00      	nop
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6892      	ldr	r2, [r2, #8]
 800b69a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	6852      	ldr	r2, [r2, #4]
 800b6a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d103      	bne.n	800b6b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	1e5a      	subs	r2, r3, #1
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10b      	bne.n	800b704 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	b672      	cpsid	i
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	b662      	cpsie	i
 800b700:	60bb      	str	r3, [r7, #8]
 800b702:	e7fe      	b.n	800b702 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b704:	f001 fdb8 	bl	800d278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b710:	68f9      	ldr	r1, [r7, #12]
 800b712:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	441a      	add	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b734:	3b01      	subs	r3, #1
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b73a:	fb01 f303 	mul.w	r3, r1, r3
 800b73e:	441a      	add	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	22ff      	movs	r2, #255	; 0xff
 800b748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	22ff      	movs	r2, #255	; 0xff
 800b750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d114      	bne.n	800b784 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01a      	beq.n	800b798 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3310      	adds	r3, #16
 800b766:	4618      	mov	r0, r3
 800b768:	f001 f9b2 	bl	800cad0 <xTaskRemoveFromEventList>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d012      	beq.n	800b798 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b772:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <xQueueGenericReset+0xd0>)
 800b774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	e009      	b.n	800b798 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3310      	adds	r3, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fef1 	bl	800b570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3324      	adds	r3, #36	; 0x24
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff feec 	bl	800b570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b798:	f001 fda0 	bl	800d2dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b79c:	2301      	movs	r3, #1
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08e      	sub	sp, #56	; 0x38
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <xQueueGenericCreateStatic+0x2c>
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	b672      	cpsid	i
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	b662      	cpsie	i
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7d6:	e7fe      	b.n	800b7d6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <xQueueGenericCreateStatic+0x4a>
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	b672      	cpsid	i
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	b662      	cpsie	i
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <xQueueGenericCreateStatic+0x56>
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <xQueueGenericCreateStatic+0x5a>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <xQueueGenericCreateStatic+0x5c>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <xQueueGenericCreateStatic+0x78>
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	b672      	cpsid	i
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	b662      	cpsie	i
 800b820:	623b      	str	r3, [r7, #32]
 800b822:	e7fe      	b.n	800b822 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d102      	bne.n	800b830 <xQueueGenericCreateStatic+0x84>
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <xQueueGenericCreateStatic+0x88>
 800b830:	2301      	movs	r3, #1
 800b832:	e000      	b.n	800b836 <xQueueGenericCreateStatic+0x8a>
 800b834:	2300      	movs	r3, #0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10b      	bne.n	800b852 <xQueueGenericCreateStatic+0xa6>
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	b672      	cpsid	i
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	b662      	cpsie	i
 800b84e:	61fb      	str	r3, [r7, #28]
 800b850:	e7fe      	b.n	800b850 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b852:	2348      	movs	r3, #72	; 0x48
 800b854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b48      	cmp	r3, #72	; 0x48
 800b85a:	d00b      	beq.n	800b874 <xQueueGenericCreateStatic+0xc8>
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	b672      	cpsid	i
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	b662      	cpsie	i
 800b870:	61bb      	str	r3, [r7, #24]
 800b872:	e7fe      	b.n	800b872 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b874:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00d      	beq.n	800b89c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b888:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	68b9      	ldr	r1, [r7, #8]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f846 	bl	800b928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3730      	adds	r7, #48	; 0x30
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b08a      	sub	sp, #40	; 0x28
 800b8aa:	af02      	add	r7, sp, #8
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <xQueueGenericCreate+0x2c>
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	b672      	cpsid	i
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	b662      	cpsie	i
 800b8ce:	613b      	str	r3, [r7, #16]
 800b8d0:	e7fe      	b.n	800b8d0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	e004      	b.n	800b8e8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	fb02 f303 	mul.w	r3, r2, r3
 800b8e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	3348      	adds	r3, #72	; 0x48
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fde5 	bl	800d4bc <pvPortMalloc>
 800b8f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d011      	beq.n	800b91e <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	3348      	adds	r3, #72	; 0x48
 800b902:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b90c:	79fa      	ldrb	r2, [r7, #7]
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4613      	mov	r3, r2
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 f805 	bl	800b928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b91e:	69bb      	ldr	r3, [r7, #24]
	}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
 800b934:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d103      	bne.n	800b944 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	e002      	b.n	800b94a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b956:	2101      	movs	r1, #1
 800b958:	69b8      	ldr	r0, [r7, #24]
 800b95a:	f7ff febd 	bl	800b6d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00e      	beq.n	800b992 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f837 	bl	800ba00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b086      	sub	sp, #24
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b9ac:	79fb      	ldrb	r3, [r7, #7]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6939      	ldr	r1, [r7, #16]
 800b9b2:	6978      	ldr	r0, [r7, #20]
 800b9b4:	f7ff ff77 	bl	800b8a6 <xQueueGenericCreate>
 800b9b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff ffd3 	bl	800b966 <prvInitialiseMutex>

		return xNewQueue;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
	}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af02      	add	r7, sp, #8
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	6039      	str	r1, [r7, #0]
 800b9d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	6939      	ldr	r1, [r7, #16]
 800b9e8:	6978      	ldr	r0, [r7, #20]
 800b9ea:	f7ff fedf 	bl	800b7ac <xQueueGenericCreateStatic>
 800b9ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f7ff ffb8 	bl	800b966 <prvInitialiseMutex>

		return xNewQueue;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
	}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08e      	sub	sp, #56	; 0x38
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10b      	bne.n	800ba34 <xQueueGenericSend+0x34>
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	b672      	cpsid	i
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	b662      	cpsie	i
 800ba30:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba32:	e7fe      	b.n	800ba32 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d103      	bne.n	800ba42 <xQueueGenericSend+0x42>
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <xQueueGenericSend+0x46>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e000      	b.n	800ba48 <xQueueGenericSend+0x48>
 800ba46:	2300      	movs	r3, #0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10b      	bne.n	800ba64 <xQueueGenericSend+0x64>
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	b672      	cpsid	i
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	b662      	cpsie	i
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
 800ba62:	e7fe      	b.n	800ba62 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d103      	bne.n	800ba72 <xQueueGenericSend+0x72>
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <xQueueGenericSend+0x76>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e000      	b.n	800ba78 <xQueueGenericSend+0x78>
 800ba76:	2300      	movs	r3, #0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <xQueueGenericSend+0x94>
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	623b      	str	r3, [r7, #32]
 800ba92:	e7fe      	b.n	800ba92 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba94:	f001 f9dc 	bl	800ce50 <xTaskGetSchedulerState>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d102      	bne.n	800baa4 <xQueueGenericSend+0xa4>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <xQueueGenericSend+0xa8>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <xQueueGenericSend+0xaa>
 800baa8:	2300      	movs	r3, #0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10b      	bne.n	800bac6 <xQueueGenericSend+0xc6>
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	b672      	cpsid	i
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	b662      	cpsie	i
 800bac2:	61fb      	str	r3, [r7, #28]
 800bac4:	e7fe      	b.n	800bac4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bac6:	f001 fbd7 	bl	800d278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d302      	bcc.n	800badc <xQueueGenericSend+0xdc>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d129      	bne.n	800bb30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae2:	f000 fa0d 	bl	800bf00 <prvCopyDataToQueue>
 800bae6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	2b00      	cmp	r3, #0
 800baee:	d010      	beq.n	800bb12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	3324      	adds	r3, #36	; 0x24
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 ffeb 	bl	800cad0 <xTaskRemoveFromEventList>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d013      	beq.n	800bb28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb00:	4b3f      	ldr	r3, [pc, #252]	; (800bc00 <xQueueGenericSend+0x200>)
 800bb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	e00a      	b.n	800bb28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d007      	beq.n	800bb28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb18:	4b39      	ldr	r3, [pc, #228]	; (800bc00 <xQueueGenericSend+0x200>)
 800bb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb28:	f001 fbd8 	bl	800d2dc <vPortExitCritical>
				return pdPASS;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e063      	b.n	800bbf8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb36:	f001 fbd1 	bl	800d2dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e05c      	b.n	800bbf8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb44:	f107 0314 	add.w	r3, r7, #20
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 f825 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb52:	f001 fbc3 	bl	800d2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb56:	f000 fd9d 	bl	800c694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb5a:	f001 fb8d 	bl	800d278 <vPortEnterCritical>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb64:	b25b      	sxtb	r3, r3
 800bb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6a:	d103      	bne.n	800bb74 <xQueueGenericSend+0x174>
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb7a:	b25b      	sxtb	r3, r3
 800bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb80:	d103      	bne.n	800bb8a <xQueueGenericSend+0x18a>
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb8a:	f001 fba7 	bl	800d2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb8e:	1d3a      	adds	r2, r7, #4
 800bb90:	f107 0314 	add.w	r3, r7, #20
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f001 f814 	bl	800cbc4 <xTaskCheckForTimeOut>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d124      	bne.n	800bbec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba4:	f000 faa4 	bl	800c0f0 <prvIsQueueFull>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d018      	beq.n	800bbe0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	3310      	adds	r3, #16
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 ff64 	bl	800ca84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbbe:	f000 fa2f 	bl	800c020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbc2:	f000 fd75 	bl	800c6b0 <xTaskResumeAll>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f47f af7c 	bne.w	800bac6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <xQueueGenericSend+0x200>)
 800bbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	e772      	b.n	800bac6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbe2:	f000 fa1d 	bl	800c020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbe6:	f000 fd63 	bl	800c6b0 <xTaskResumeAll>
 800bbea:	e76c      	b.n	800bac6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbee:	f000 fa17 	bl	800c020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbf2:	f000 fd5d 	bl	800c6b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3738      	adds	r7, #56	; 0x38
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	e000ed04 	.word	0xe000ed04

0800bc04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <xQueueGenericSendFromISR+0x30>
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	b672      	cpsid	i
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	b662      	cpsie	i
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
 800bc32:	e7fe      	b.n	800bc32 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d103      	bne.n	800bc42 <xQueueGenericSendFromISR+0x3e>
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <xQueueGenericSendFromISR+0x42>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e000      	b.n	800bc48 <xQueueGenericSendFromISR+0x44>
 800bc46:	2300      	movs	r3, #0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10b      	bne.n	800bc64 <xQueueGenericSendFromISR+0x60>
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	b672      	cpsid	i
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	b662      	cpsie	i
 800bc60:	623b      	str	r3, [r7, #32]
 800bc62:	e7fe      	b.n	800bc62 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d103      	bne.n	800bc72 <xQueueGenericSendFromISR+0x6e>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <xQueueGenericSendFromISR+0x72>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <xQueueGenericSendFromISR+0x74>
 800bc76:	2300      	movs	r3, #0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10b      	bne.n	800bc94 <xQueueGenericSendFromISR+0x90>
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	b672      	cpsid	i
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	b662      	cpsie	i
 800bc90:	61fb      	str	r3, [r7, #28]
 800bc92:	e7fe      	b.n	800bc92 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc94:	f001 fbd0 	bl	800d438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc98:	f3ef 8211 	mrs	r2, BASEPRI
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	b672      	cpsid	i
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	b662      	cpsie	i
 800bcb0:	61ba      	str	r2, [r7, #24]
 800bcb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d302      	bcc.n	800bcca <xQueueGenericSendFromISR+0xc6>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d12c      	bne.n	800bd24 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcda:	f000 f911 	bl	800bf00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcde:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce6:	d112      	bne.n	800bd0e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d016      	beq.n	800bd1e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	3324      	adds	r3, #36	; 0x24
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 feeb 	bl	800cad0 <xTaskRemoveFromEventList>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00e      	beq.n	800bd1e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00b      	beq.n	800bd1e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	e007      	b.n	800bd1e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd12:	3301      	adds	r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	b25a      	sxtb	r2, r3
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bd22:	e001      	b.n	800bd28 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
 800bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3738      	adds	r7, #56	; 0x38
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08c      	sub	sp, #48	; 0x30
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10b      	bne.n	800bd6e <xQueueReceive+0x32>
	__asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5a:	b672      	cpsid	i
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	b662      	cpsie	i
 800bd6a:	623b      	str	r3, [r7, #32]
 800bd6c:	e7fe      	b.n	800bd6c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <xQueueReceive+0x40>
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <xQueueReceive+0x44>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <xQueueReceive+0x46>
 800bd80:	2300      	movs	r3, #0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10b      	bne.n	800bd9e <xQueueReceive+0x62>
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	b672      	cpsid	i
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	b662      	cpsie	i
 800bd9a:	61fb      	str	r3, [r7, #28]
 800bd9c:	e7fe      	b.n	800bd9c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd9e:	f001 f857 	bl	800ce50 <xTaskGetSchedulerState>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <xQueueReceive+0x72>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <xQueueReceive+0x76>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <xQueueReceive+0x78>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10b      	bne.n	800bdd0 <xQueueReceive+0x94>
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	b672      	cpsid	i
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	b662      	cpsie	i
 800bdcc:	61bb      	str	r3, [r7, #24]
 800bdce:	e7fe      	b.n	800bdce <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdd0:	f001 fa52 	bl	800d278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01f      	beq.n	800be20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde4:	f000 f8f6 	bl	800bfd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	1e5a      	subs	r2, r3, #1
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00f      	beq.n	800be18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fe67 	bl	800cad0 <xTaskRemoveFromEventList>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d007      	beq.n	800be18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be08:	4b3c      	ldr	r3, [pc, #240]	; (800befc <xQueueReceive+0x1c0>)
 800be0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be18:	f001 fa60 	bl	800d2dc <vPortExitCritical>
				return pdPASS;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e069      	b.n	800bef4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d103      	bne.n	800be2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be26:	f001 fa59 	bl	800d2dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e062      	b.n	800bef4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d106      	bne.n	800be42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be34:	f107 0310 	add.w	r3, r7, #16
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fead 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be3e:	2301      	movs	r3, #1
 800be40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be42:	f001 fa4b 	bl	800d2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be46:	f000 fc25 	bl	800c694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be4a:	f001 fa15 	bl	800d278 <vPortEnterCritical>
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be54:	b25b      	sxtb	r3, r3
 800be56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5a:	d103      	bne.n	800be64 <xQueueReceive+0x128>
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be70:	d103      	bne.n	800be7a <xQueueReceive+0x13e>
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be7a:	f001 fa2f 	bl	800d2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be7e:	1d3a      	adds	r2, r7, #4
 800be80:	f107 0310 	add.w	r3, r7, #16
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fe9c 	bl	800cbc4 <xTaskCheckForTimeOut>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d123      	bne.n	800beda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be94:	f000 f916 	bl	800c0c4 <prvIsQueueEmpty>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d017      	beq.n	800bece <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	3324      	adds	r3, #36	; 0x24
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	4611      	mov	r1, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fdec 	bl	800ca84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beae:	f000 f8b7 	bl	800c020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beb2:	f000 fbfd 	bl	800c6b0 <xTaskResumeAll>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d189      	bne.n	800bdd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <xQueueReceive+0x1c0>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	e780      	b.n	800bdd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed0:	f000 f8a6 	bl	800c020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bed4:	f000 fbec 	bl	800c6b0 <xTaskResumeAll>
 800bed8:	e77a      	b.n	800bdd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800beda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bedc:	f000 f8a0 	bl	800c020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bee0:	f000 fbe6 	bl	800c6b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee6:	f000 f8ed 	bl	800c0c4 <prvIsQueueEmpty>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	f43f af6f 	beq.w	800bdd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3730      	adds	r7, #48	; 0x30
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10d      	bne.n	800bf3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d14d      	bne.n	800bfc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ffae 	bl	800ce8c <xTaskPriorityDisinherit>
 800bf30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	609a      	str	r2, [r3, #8]
 800bf38:	e043      	b.n	800bfc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d119      	bne.n	800bf74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6858      	ldr	r0, [r3, #4]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf48:	461a      	mov	r2, r3
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	f001 fcc4 	bl	800d8d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf58:	441a      	add	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d32b      	bcc.n	800bfc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	605a      	str	r2, [r3, #4]
 800bf72:	e026      	b.n	800bfc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68d8      	ldr	r0, [r3, #12]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	68b9      	ldr	r1, [r7, #8]
 800bf80:	f001 fcaa 	bl	800d8d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	425b      	negs	r3, r3
 800bf8e:	441a      	add	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68da      	ldr	r2, [r3, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d207      	bcs.n	800bfb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	689a      	ldr	r2, [r3, #8]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa8:	425b      	negs	r3, r3
 800bfaa:	441a      	add	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d105      	bne.n	800bfc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfca:	697b      	ldr	r3, [r7, #20]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d018      	beq.n	800c018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68da      	ldr	r2, [r3, #12]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	441a      	add	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68da      	ldr	r2, [r3, #12]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d303      	bcc.n	800c008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68d9      	ldr	r1, [r3, #12]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c010:	461a      	mov	r2, r3
 800c012:	6838      	ldr	r0, [r7, #0]
 800c014:	f001 fc60 	bl	800d8d8 <memcpy>
	}
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c028:	f001 f926 	bl	800d278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c034:	e011      	b.n	800c05a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d012      	beq.n	800c064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3324      	adds	r3, #36	; 0x24
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fd44 	bl	800cad0 <xTaskRemoveFromEventList>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c04e:	f000 fe1d 	bl	800cc8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	3b01      	subs	r3, #1
 800c056:	b2db      	uxtb	r3, r3
 800c058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dce9      	bgt.n	800c036 <prvUnlockQueue+0x16>
 800c062:	e000      	b.n	800c066 <prvUnlockQueue+0x46>
					break;
 800c064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	22ff      	movs	r2, #255	; 0xff
 800c06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c06e:	f001 f935 	bl	800d2dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c072:	f001 f901 	bl	800d278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c07c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c07e:	e011      	b.n	800c0a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d012      	beq.n	800c0ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3310      	adds	r3, #16
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 fd1f 	bl	800cad0 <xTaskRemoveFromEventList>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c098:	f000 fdf8 	bl	800cc8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dce9      	bgt.n	800c080 <prvUnlockQueue+0x60>
 800c0ac:	e000      	b.n	800c0b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	22ff      	movs	r2, #255	; 0xff
 800c0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0b8:	f001 f910 	bl	800d2dc <vPortExitCritical>
}
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0cc:	f001 f8d4 	bl	800d278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	e001      	b.n	800c0e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0e2:	f001 f8fb 	bl	800d2dc <vPortExitCritical>

	return xReturn;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0f8:	f001 f8be 	bl	800d278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c104:	429a      	cmp	r2, r3
 800c106:	d102      	bne.n	800c10e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c108:	2301      	movs	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e001      	b.n	800c112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c112:	f001 f8e3 	bl	800d2dc <vPortExitCritical>

	return xReturn;
 800c116:	68fb      	ldr	r3, [r7, #12]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08e      	sub	sp, #56	; 0x38
 800c124:	af04      	add	r7, sp, #16
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10b      	bne.n	800c14c <xTaskCreateStatic+0x2c>
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	b672      	cpsid	i
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	b662      	cpsie	i
 800c148:	623b      	str	r3, [r7, #32]
 800c14a:	e7fe      	b.n	800c14a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10b      	bne.n	800c16a <xTaskCreateStatic+0x4a>
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	b672      	cpsid	i
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	b662      	cpsie	i
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	e7fe      	b.n	800c168 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c16a:	2358      	movs	r3, #88	; 0x58
 800c16c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b58      	cmp	r3, #88	; 0x58
 800c172:	d00b      	beq.n	800c18c <xTaskCreateStatic+0x6c>
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	b672      	cpsid	i
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	b662      	cpsie	i
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	e7fe      	b.n	800c18a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c18c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	2b00      	cmp	r3, #0
 800c192:	d01e      	beq.n	800c1d2 <xTaskCreateStatic+0xb2>
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	2b00      	cmp	r3, #0
 800c198:	d01b      	beq.n	800c1d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9303      	str	r3, [sp, #12]
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	9302      	str	r3, [sp, #8]
 800c1b4:	f107 0314 	add.w	r3, r7, #20
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f850 	bl	800c26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1cc:	f000 f8e0 	bl	800c390 <prvAddNewTaskToReadyList>
 800c1d0:	e001      	b.n	800c1d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1d6:	697b      	ldr	r3, [r7, #20]
	}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3728      	adds	r7, #40	; 0x28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08c      	sub	sp, #48	; 0x30
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	603b      	str	r3, [r7, #0]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1f0:	88fb      	ldrh	r3, [r7, #6]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 f961 	bl	800d4bc <pvPortMalloc>
 800c1fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00e      	beq.n	800c220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c202:	2058      	movs	r0, #88	; 0x58
 800c204:	f001 f95a 	bl	800d4bc <pvPortMalloc>
 800c208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	631a      	str	r2, [r3, #48]	; 0x30
 800c216:	e005      	b.n	800c224 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c218:	6978      	ldr	r0, [r7, #20]
 800c21a:	f001 fa1b 	bl	800d654 <vPortFree>
 800c21e:	e001      	b.n	800c224 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c220:	2300      	movs	r3, #0
 800c222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d017      	beq.n	800c25a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c232:	88fa      	ldrh	r2, [r7, #6]
 800c234:	2300      	movs	r3, #0
 800c236:	9303      	str	r3, [sp, #12]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	68b9      	ldr	r1, [r7, #8]
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f80e 	bl	800c26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c24e:	69f8      	ldr	r0, [r7, #28]
 800c250:	f000 f89e 	bl	800c390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c254:	2301      	movs	r3, #1
 800c256:	61bb      	str	r3, [r7, #24]
 800c258:	e002      	b.n	800c260 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295
 800c25e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c260:	69bb      	ldr	r3, [r7, #24]
	}
 800c262:	4618      	mov	r0, r3
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b088      	sub	sp, #32
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
 800c276:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	461a      	mov	r2, r3
 800c282:	21a5      	movs	r1, #165	; 0xa5
 800c284:	f001 fb33 	bl	800d8ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c292:	440b      	add	r3, r1
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	f023 0307 	bic.w	r3, r3, #7
 800c2a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <prvInitialiseNewTask+0x5a>
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	b672      	cpsid	i
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	b662      	cpsie	i
 800c2c0:	617b      	str	r3, [r7, #20]
 800c2c2:	e7fe      	b.n	800c2c2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d01f      	beq.n	800c30a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61fb      	str	r3, [r7, #28]
 800c2ce:	e012      	b.n	800c2f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	7819      	ldrb	r1, [r3, #0]
 800c2d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4413      	add	r3, r2
 800c2de:	3334      	adds	r3, #52	; 0x34
 800c2e0:	460a      	mov	r2, r1
 800c2e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d006      	beq.n	800c2fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	61fb      	str	r3, [r7, #28]
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	2b0f      	cmp	r3, #15
 800c2fa:	d9e9      	bls.n	800c2d0 <prvInitialiseNewTask+0x66>
 800c2fc:	e000      	b.n	800c300 <prvInitialiseNewTask+0x96>
			{
				break;
 800c2fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c308:	e003      	b.n	800c312 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	2b06      	cmp	r3, #6
 800c316:	d901      	bls.n	800c31c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c318:	2306      	movs	r3, #6
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c326:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	2200      	movs	r2, #0
 800c32c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	3304      	adds	r3, #4
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff f93c 	bl	800b5b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	3318      	adds	r3, #24
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff f937 	bl	800b5b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	f1c3 0207 	rsb	r2, r3, #7
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c356:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	2200      	movs	r2, #0
 800c35c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	2200      	movs	r2, #0
 800c362:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	2200      	movs	r2, #0
 800c368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	69b8      	ldr	r0, [r7, #24]
 800c372:	f000 fe79 	bl	800d068 <pxPortInitialiseStack>
 800c376:	4602      	mov	r2, r0
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c386:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c388:	bf00      	nop
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c398:	f000 ff6e 	bl	800d278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c39c:	4b2a      	ldr	r3, [pc, #168]	; (800c448 <prvAddNewTaskToReadyList+0xb8>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	4a29      	ldr	r2, [pc, #164]	; (800c448 <prvAddNewTaskToReadyList+0xb8>)
 800c3a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3a6:	4b29      	ldr	r3, [pc, #164]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d109      	bne.n	800c3c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3ae:	4a27      	ldr	r2, [pc, #156]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3b4:	4b24      	ldr	r3, [pc, #144]	; (800c448 <prvAddNewTaskToReadyList+0xb8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d110      	bne.n	800c3de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3bc:	f000 fc8c 	bl	800ccd8 <prvInitialiseTaskLists>
 800c3c0:	e00d      	b.n	800c3de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3c2:	4b23      	ldr	r3, [pc, #140]	; (800c450 <prvAddNewTaskToReadyList+0xc0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d109      	bne.n	800c3de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3ca:	4b20      	ldr	r3, [pc, #128]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d802      	bhi.n	800c3de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3d8:	4a1c      	ldr	r2, [pc, #112]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3de:	4b1d      	ldr	r3, [pc, #116]	; (800c454 <prvAddNewTaskToReadyList+0xc4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	4a1b      	ldr	r2, [pc, #108]	; (800c454 <prvAddNewTaskToReadyList+0xc4>)
 800c3e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	409a      	lsls	r2, r3
 800c3f0:	4b19      	ldr	r3, [pc, #100]	; (800c458 <prvAddNewTaskToReadyList+0xc8>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	4a18      	ldr	r2, [pc, #96]	; (800c458 <prvAddNewTaskToReadyList+0xc8>)
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4a15      	ldr	r2, [pc, #84]	; (800c45c <prvAddNewTaskToReadyList+0xcc>)
 800c408:	441a      	add	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7ff f8da 	bl	800b5ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c416:	f000 ff61 	bl	800d2dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c41a:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <prvAddNewTaskToReadyList+0xc0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00e      	beq.n	800c440 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c422:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d207      	bcs.n	800c440 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <prvAddNewTaskToReadyList+0xd0>)
 800c432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20000670 	.word	0x20000670
 800c44c:	20000570 	.word	0x20000570
 800c450:	2000067c 	.word	0x2000067c
 800c454:	2000068c 	.word	0x2000068c
 800c458:	20000678 	.word	0x20000678
 800c45c:	20000574 	.word	0x20000574
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c46e:	2300      	movs	r3, #0
 800c470:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10b      	bne.n	800c490 <vTaskDelayUntil+0x2c>
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	b672      	cpsid	i
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	b662      	cpsie	i
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	e7fe      	b.n	800c48e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10b      	bne.n	800c4ae <vTaskDelayUntil+0x4a>
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	b672      	cpsid	i
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	b662      	cpsie	i
 800c4aa:	613b      	str	r3, [r7, #16]
 800c4ac:	e7fe      	b.n	800c4ac <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c4ae:	4b2a      	ldr	r3, [pc, #168]	; (800c558 <vTaskDelayUntil+0xf4>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00b      	beq.n	800c4ce <vTaskDelayUntil+0x6a>
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	b672      	cpsid	i
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	b662      	cpsie	i
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	e7fe      	b.n	800c4cc <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c4ce:	f000 f8e1 	bl	800c694 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c4d2:	4b22      	ldr	r3, [pc, #136]	; (800c55c <vTaskDelayUntil+0xf8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	4413      	add	r3, r2
 800c4e0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6a3a      	ldr	r2, [r7, #32]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d20b      	bcs.n	800c504 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d211      	bcs.n	800c51a <vTaskDelayUntil+0xb6>
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d90d      	bls.n	800c51a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c4fe:	2301      	movs	r3, #1
 800c500:	627b      	str	r3, [r7, #36]	; 0x24
 800c502:	e00a      	b.n	800c51a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d303      	bcc.n	800c516 <vTaskDelayUntil+0xb2>
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	429a      	cmp	r2, r3
 800c514:	d901      	bls.n	800c51a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c516:	2301      	movs	r3, #1
 800c518:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c526:	69fa      	ldr	r2, [r7, #28]
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2100      	movs	r1, #0
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fd34 	bl	800cf9c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c534:	f000 f8bc 	bl	800c6b0 <xTaskResumeAll>
 800c538:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d107      	bne.n	800c550 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c540:	4b07      	ldr	r3, [pc, #28]	; (800c560 <vTaskDelayUntil+0xfc>)
 800c542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c550:	bf00      	nop
 800c552:	3728      	adds	r7, #40	; 0x28
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20000698 	.word	0x20000698
 800c55c:	20000674 	.word	0x20000674
 800c560:	e000ed04 	.word	0xe000ed04

0800c564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d018      	beq.n	800c5a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c576:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <vTaskDelay+0x64>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <vTaskDelay+0x32>
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	b672      	cpsid	i
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	b662      	cpsie	i
 800c592:	60bb      	str	r3, [r7, #8]
 800c594:	e7fe      	b.n	800c594 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c596:	f000 f87d 	bl	800c694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c59a:	2100      	movs	r1, #0
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fcfd 	bl	800cf9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5a2:	f000 f885 	bl	800c6b0 <xTaskResumeAll>
 800c5a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d107      	bne.n	800c5be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c5ae:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <vTaskDelay+0x68>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20000698 	.word	0x20000698
 800c5cc:	e000ed04 	.word	0xe000ed04

0800c5d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08a      	sub	sp, #40	; 0x28
 800c5d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c5de:	463a      	mov	r2, r7
 800c5e0:	1d39      	adds	r1, r7, #4
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f3 fffc 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	9202      	str	r2, [sp, #8]
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	491f      	ldr	r1, [pc, #124]	; (800c67c <vTaskStartScheduler+0xac>)
 800c600:	481f      	ldr	r0, [pc, #124]	; (800c680 <vTaskStartScheduler+0xb0>)
 800c602:	f7ff fd8d 	bl	800c120 <xTaskCreateStatic>
 800c606:	4602      	mov	r2, r0
 800c608:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <vTaskStartScheduler+0xb4>)
 800c60a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c60c:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <vTaskStartScheduler+0xb4>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c614:	2301      	movs	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
 800c618:	e001      	b.n	800c61e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d117      	bne.n	800c654 <vTaskStartScheduler+0x84>
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	b672      	cpsid	i
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	b662      	cpsie	i
 800c638:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c63a:	4b13      	ldr	r3, [pc, #76]	; (800c688 <vTaskStartScheduler+0xb8>)
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295
 800c640:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c642:	4b12      	ldr	r3, [pc, #72]	; (800c68c <vTaskStartScheduler+0xbc>)
 800c644:	2201      	movs	r2, #1
 800c646:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c648:	4b11      	ldr	r3, [pc, #68]	; (800c690 <vTaskStartScheduler+0xc0>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c64e:	f000 fd97 	bl	800d180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c652:	e00f      	b.n	800c674 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d10b      	bne.n	800c674 <vTaskStartScheduler+0xa4>
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	60fb      	str	r3, [r7, #12]
 800c672:	e7fe      	b.n	800c672 <vTaskStartScheduler+0xa2>
}
 800c674:	bf00      	nop
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	0800e1c8 	.word	0x0800e1c8
 800c680:	0800cca5 	.word	0x0800cca5
 800c684:	20000694 	.word	0x20000694
 800c688:	20000690 	.word	0x20000690
 800c68c:	2000067c 	.word	0x2000067c
 800c690:	20000674 	.word	0x20000674

0800c694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c694:	b480      	push	{r7}
 800c696:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <vTaskSuspendAll+0x18>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3301      	adds	r3, #1
 800c69e:	4a03      	ldr	r2, [pc, #12]	; (800c6ac <vTaskSuspendAll+0x18>)
 800c6a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c6a2:	bf00      	nop
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	20000698 	.word	0x20000698

0800c6b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c6be:	4b42      	ldr	r3, [pc, #264]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10b      	bne.n	800c6de <xTaskResumeAll+0x2e>
 800c6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ca:	b672      	cpsid	i
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	b662      	cpsie	i
 800c6da:	603b      	str	r3, [r7, #0]
 800c6dc:	e7fe      	b.n	800c6dc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c6de:	f000 fdcb 	bl	800d278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6e2:	4b39      	ldr	r3, [pc, #228]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	4a37      	ldr	r2, [pc, #220]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ec:	4b36      	ldr	r3, [pc, #216]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d161      	bne.n	800c7b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6f4:	4b35      	ldr	r3, [pc, #212]	; (800c7cc <xTaskResumeAll+0x11c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d05d      	beq.n	800c7b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6fc:	e02e      	b.n	800c75c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6fe:	4b34      	ldr	r3, [pc, #208]	; (800c7d0 <xTaskResumeAll+0x120>)
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3318      	adds	r3, #24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe ffba 	bl	800b684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3304      	adds	r3, #4
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe ffb5 	bl	800b684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71e:	2201      	movs	r2, #1
 800c720:	409a      	lsls	r2, r3
 800c722:	4b2c      	ldr	r3, [pc, #176]	; (800c7d4 <xTaskResumeAll+0x124>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4313      	orrs	r3, r2
 800c728:	4a2a      	ldr	r2, [pc, #168]	; (800c7d4 <xTaskResumeAll+0x124>)
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c730:	4613      	mov	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4a27      	ldr	r2, [pc, #156]	; (800c7d8 <xTaskResumeAll+0x128>)
 800c73a:	441a      	add	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3304      	adds	r3, #4
 800c740:	4619      	mov	r1, r3
 800c742:	4610      	mov	r0, r2
 800c744:	f7fe ff41 	bl	800b5ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74c:	4b23      	ldr	r3, [pc, #140]	; (800c7dc <xTaskResumeAll+0x12c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	429a      	cmp	r2, r3
 800c754:	d302      	bcc.n	800c75c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c756:	4b22      	ldr	r3, [pc, #136]	; (800c7e0 <xTaskResumeAll+0x130>)
 800c758:	2201      	movs	r2, #1
 800c75a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c75c:	4b1c      	ldr	r3, [pc, #112]	; (800c7d0 <xTaskResumeAll+0x120>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1cc      	bne.n	800c6fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c76a:	f000 fb51 	bl	800ce10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c76e:	4b1d      	ldr	r3, [pc, #116]	; (800c7e4 <xTaskResumeAll+0x134>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d010      	beq.n	800c79c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c77a:	f000 f847 	bl	800c80c <xTaskIncrementTick>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c784:	4b16      	ldr	r3, [pc, #88]	; (800c7e0 <xTaskResumeAll+0x130>)
 800c786:	2201      	movs	r2, #1
 800c788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1f1      	bne.n	800c77a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c796:	4b13      	ldr	r3, [pc, #76]	; (800c7e4 <xTaskResumeAll+0x134>)
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c79c:	4b10      	ldr	r3, [pc, #64]	; (800c7e0 <xTaskResumeAll+0x130>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d009      	beq.n	800c7b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	; (800c7e8 <xTaskResumeAll+0x138>)
 800c7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7b8:	f000 fd90 	bl	800d2dc <vPortExitCritical>

	return xAlreadyYielded;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000698 	.word	0x20000698
 800c7cc:	20000670 	.word	0x20000670
 800c7d0:	20000630 	.word	0x20000630
 800c7d4:	20000678 	.word	0x20000678
 800c7d8:	20000574 	.word	0x20000574
 800c7dc:	20000570 	.word	0x20000570
 800c7e0:	20000684 	.word	0x20000684
 800c7e4:	20000680 	.word	0x20000680
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c7f2:	4b05      	ldr	r3, [pc, #20]	; (800c808 <xTaskGetTickCount+0x1c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c7f8:	687b      	ldr	r3, [r7, #4]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	20000674 	.word	0x20000674

0800c80c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c812:	2300      	movs	r3, #0
 800c814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c816:	4b4f      	ldr	r3, [pc, #316]	; (800c954 <xTaskIncrementTick+0x148>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f040 8089 	bne.w	800c932 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c820:	4b4d      	ldr	r3, [pc, #308]	; (800c958 <xTaskIncrementTick+0x14c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c828:	4a4b      	ldr	r2, [pc, #300]	; (800c958 <xTaskIncrementTick+0x14c>)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d121      	bne.n	800c878 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c834:	4b49      	ldr	r3, [pc, #292]	; (800c95c <xTaskIncrementTick+0x150>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <xTaskIncrementTick+0x4a>
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	b672      	cpsid	i
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	b662      	cpsie	i
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	e7fe      	b.n	800c854 <xTaskIncrementTick+0x48>
 800c856:	4b41      	ldr	r3, [pc, #260]	; (800c95c <xTaskIncrementTick+0x150>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	4b40      	ldr	r3, [pc, #256]	; (800c960 <xTaskIncrementTick+0x154>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a3e      	ldr	r2, [pc, #248]	; (800c95c <xTaskIncrementTick+0x150>)
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	4a3e      	ldr	r2, [pc, #248]	; (800c960 <xTaskIncrementTick+0x154>)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	4b3e      	ldr	r3, [pc, #248]	; (800c964 <xTaskIncrementTick+0x158>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3301      	adds	r3, #1
 800c870:	4a3c      	ldr	r2, [pc, #240]	; (800c964 <xTaskIncrementTick+0x158>)
 800c872:	6013      	str	r3, [r2, #0]
 800c874:	f000 facc 	bl	800ce10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c878:	4b3b      	ldr	r3, [pc, #236]	; (800c968 <xTaskIncrementTick+0x15c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d348      	bcc.n	800c914 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c882:	4b36      	ldr	r3, [pc, #216]	; (800c95c <xTaskIncrementTick+0x150>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d104      	bne.n	800c896 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c88c:	4b36      	ldr	r3, [pc, #216]	; (800c968 <xTaskIncrementTick+0x15c>)
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	601a      	str	r2, [r3, #0]
					break;
 800c894:	e03e      	b.n	800c914 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c896:	4b31      	ldr	r3, [pc, #196]	; (800c95c <xTaskIncrementTick+0x150>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d203      	bcs.n	800c8b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c8ae:	4a2e      	ldr	r2, [pc, #184]	; (800c968 <xTaskIncrementTick+0x15c>)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c8b4:	e02e      	b.n	800c914 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fee2 	bl	800b684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d004      	beq.n	800c8d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	3318      	adds	r3, #24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fe fed9 	bl	800b684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	409a      	lsls	r2, r3
 800c8da:	4b24      	ldr	r3, [pc, #144]	; (800c96c <xTaskIncrementTick+0x160>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	4a22      	ldr	r2, [pc, #136]	; (800c96c <xTaskIncrementTick+0x160>)
 800c8e2:	6013      	str	r3, [r2, #0]
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <xTaskIncrementTick+0x164>)
 800c8f2:	441a      	add	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4610      	mov	r0, r2
 800c8fc:	f7fe fe65 	bl	800b5ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c904:	4b1b      	ldr	r3, [pc, #108]	; (800c974 <xTaskIncrementTick+0x168>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d3b9      	bcc.n	800c882 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c90e:	2301      	movs	r3, #1
 800c910:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c912:	e7b6      	b.n	800c882 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c914:	4b17      	ldr	r3, [pc, #92]	; (800c974 <xTaskIncrementTick+0x168>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91a:	4915      	ldr	r1, [pc, #84]	; (800c970 <xTaskIncrementTick+0x164>)
 800c91c:	4613      	mov	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	440b      	add	r3, r1
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d907      	bls.n	800c93c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800c92c:	2301      	movs	r3, #1
 800c92e:	617b      	str	r3, [r7, #20]
 800c930:	e004      	b.n	800c93c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c932:	4b11      	ldr	r3, [pc, #68]	; (800c978 <xTaskIncrementTick+0x16c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	4a0f      	ldr	r2, [pc, #60]	; (800c978 <xTaskIncrementTick+0x16c>)
 800c93a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c93c:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <xTaskIncrementTick+0x170>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800c944:	2301      	movs	r3, #1
 800c946:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c948:	697b      	ldr	r3, [r7, #20]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20000698 	.word	0x20000698
 800c958:	20000674 	.word	0x20000674
 800c95c:	20000628 	.word	0x20000628
 800c960:	2000062c 	.word	0x2000062c
 800c964:	20000688 	.word	0x20000688
 800c968:	20000690 	.word	0x20000690
 800c96c:	20000678 	.word	0x20000678
 800c970:	20000574 	.word	0x20000574
 800c974:	20000570 	.word	0x20000570
 800c978:	20000680 	.word	0x20000680
 800c97c:	20000684 	.word	0x20000684

0800c980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c986:	4b3a      	ldr	r3, [pc, #232]	; (800ca70 <vTaskSwitchContext+0xf0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d003      	beq.n	800c996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c98e:	4b39      	ldr	r3, [pc, #228]	; (800ca74 <vTaskSwitchContext+0xf4>)
 800c990:	2201      	movs	r2, #1
 800c992:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c994:	e067      	b.n	800ca66 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800c996:	4b37      	ldr	r3, [pc, #220]	; (800ca74 <vTaskSwitchContext+0xf4>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a2:	61fb      	str	r3, [r7, #28]
 800c9a4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c9a8:	61bb      	str	r3, [r7, #24]
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d111      	bne.n	800c9d8 <vTaskSwitchContext+0x58>
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69ba      	ldr	r2, [r7, #24]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d10b      	bne.n	800c9d8 <vTaskSwitchContext+0x58>
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d105      	bne.n	800c9d8 <vTaskSwitchContext+0x58>
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	330c      	adds	r3, #12
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d008      	beq.n	800c9ea <vTaskSwitchContext+0x6a>
 800c9d8:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b26      	ldr	r3, [pc, #152]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3334      	adds	r3, #52	; 0x34
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f7f3 fdea 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ea:	4b24      	ldr	r3, [pc, #144]	; (800ca7c <vTaskSwitchContext+0xfc>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	fab3 f383 	clz	r3, r3
 800c9f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c9f8:	7afb      	ldrb	r3, [r7, #11]
 800c9fa:	f1c3 031f 	rsb	r3, r3, #31
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	491f      	ldr	r1, [pc, #124]	; (800ca80 <vTaskSwitchContext+0x100>)
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	4613      	mov	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10b      	bne.n	800ca2c <vTaskSwitchContext+0xac>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	b672      	cpsid	i
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	b662      	cpsie	i
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	e7fe      	b.n	800ca2a <vTaskSwitchContext+0xaa>
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4a12      	ldr	r2, [pc, #72]	; (800ca80 <vTaskSwitchContext+0x100>)
 800ca38:	4413      	add	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	605a      	str	r2, [r3, #4]
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d104      	bne.n	800ca5c <vTaskSwitchContext+0xdc>
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	605a      	str	r2, [r3, #4]
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	4a05      	ldr	r2, [pc, #20]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800ca64:	6013      	str	r3, [r2, #0]
}
 800ca66:	bf00      	nop
 800ca68:	3720      	adds	r7, #32
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000698 	.word	0x20000698
 800ca74:	20000684 	.word	0x20000684
 800ca78:	20000570 	.word	0x20000570
 800ca7c:	20000678 	.word	0x20000678
 800ca80:	20000574 	.word	0x20000574

0800ca84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <vTaskPlaceOnEventList+0x28>
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	b672      	cpsid	i
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	b662      	cpsie	i
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	e7fe      	b.n	800caaa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800caac:	4b07      	ldr	r3, [pc, #28]	; (800cacc <vTaskPlaceOnEventList+0x48>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3318      	adds	r3, #24
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7fe fdac 	bl	800b612 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800caba:	2101      	movs	r1, #1
 800cabc:	6838      	ldr	r0, [r7, #0]
 800cabe:	f000 fa6d 	bl	800cf9c <prvAddCurrentTaskToDelayedList>
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000570 	.word	0x20000570

0800cad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10b      	bne.n	800cafe <xTaskRemoveFromEventList+0x2e>
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	b672      	cpsid	i
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	b662      	cpsie	i
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	e7fe      	b.n	800cafc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	3318      	adds	r3, #24
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fdbe 	bl	800b684 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb08:	4b1d      	ldr	r3, [pc, #116]	; (800cb80 <xTaskRemoveFromEventList+0xb0>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d11c      	bne.n	800cb4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe fdb5 	bl	800b684 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1e:	2201      	movs	r2, #1
 800cb20:	409a      	lsls	r2, r3
 800cb22:	4b18      	ldr	r3, [pc, #96]	; (800cb84 <xTaskRemoveFromEventList+0xb4>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	4a16      	ldr	r2, [pc, #88]	; (800cb84 <xTaskRemoveFromEventList+0xb4>)
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	4613      	mov	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <xTaskRemoveFromEventList+0xb8>)
 800cb3a:	441a      	add	r2, r3
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7fe fd41 	bl	800b5ca <vListInsertEnd>
 800cb48:	e005      	b.n	800cb56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	3318      	adds	r3, #24
 800cb4e:	4619      	mov	r1, r3
 800cb50:	480e      	ldr	r0, [pc, #56]	; (800cb8c <xTaskRemoveFromEventList+0xbc>)
 800cb52:	f7fe fd3a 	bl	800b5ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <xTaskRemoveFromEventList+0xc0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d905      	bls.n	800cb70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <xTaskRemoveFromEventList+0xc4>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	e001      	b.n	800cb74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb74:	697b      	ldr	r3, [r7, #20]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20000698 	.word	0x20000698
 800cb84:	20000678 	.word	0x20000678
 800cb88:	20000574 	.word	0x20000574
 800cb8c:	20000630 	.word	0x20000630
 800cb90:	20000570 	.word	0x20000570
 800cb94:	20000684 	.word	0x20000684

0800cb98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <vTaskInternalSetTimeOutState+0x24>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cba8:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <vTaskInternalSetTimeOutState+0x28>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	605a      	str	r2, [r3, #4]
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000688 	.word	0x20000688
 800cbc0:	20000674 	.word	0x20000674

0800cbc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10b      	bne.n	800cbec <xTaskCheckForTimeOut+0x28>
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	b672      	cpsid	i
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	b662      	cpsie	i
 800cbe8:	613b      	str	r3, [r7, #16]
 800cbea:	e7fe      	b.n	800cbea <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10b      	bne.n	800cc0a <xTaskCheckForTimeOut+0x46>
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	b672      	cpsid	i
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	b662      	cpsie	i
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	e7fe      	b.n	800cc08 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800cc0a:	f000 fb35 	bl	800d278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc0e:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <xTaskCheckForTimeOut+0xc0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d102      	bne.n	800cc2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	e023      	b.n	800cc76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <xTaskCheckForTimeOut+0xc4>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d007      	beq.n	800cc4a <xTaskCheckForTimeOut+0x86>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d302      	bcc.n	800cc4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cc44:	2301      	movs	r3, #1
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	e015      	b.n	800cc76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d20b      	bcs.n	800cc6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff ff99 	bl	800cb98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
 800cc6a:	e004      	b.n	800cc76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc72:	2301      	movs	r3, #1
 800cc74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc76:	f000 fb31 	bl	800d2dc <vPortExitCritical>

	return xReturn;
 800cc7a:	69fb      	ldr	r3, [r7, #28]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3720      	adds	r7, #32
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	20000674 	.word	0x20000674
 800cc88:	20000688 	.word	0x20000688

0800cc8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <vTaskMissedYield+0x14>)
 800cc92:	2201      	movs	r2, #1
 800cc94:	601a      	str	r2, [r3, #0]
}
 800cc96:	bf00      	nop
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	20000684 	.word	0x20000684

0800cca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ccac:	f000 f854 	bl	800cd58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <prvIdleTask+0x2c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d907      	bls.n	800ccc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ccb8:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <prvIdleTask+0x30>)
 800ccba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ccc8:	f7f3 fc72 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cccc:	e7ee      	b.n	800ccac <prvIdleTask+0x8>
 800ccce:	bf00      	nop
 800ccd0:	20000574 	.word	0x20000574
 800ccd4:	e000ed04 	.word	0xe000ed04

0800ccd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccde:	2300      	movs	r3, #0
 800cce0:	607b      	str	r3, [r7, #4]
 800cce2:	e00c      	b.n	800ccfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4a12      	ldr	r2, [pc, #72]	; (800cd38 <prvInitialiseTaskLists+0x60>)
 800ccf0:	4413      	add	r3, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe fc3c 	bl	800b570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	607b      	str	r3, [r7, #4]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b06      	cmp	r3, #6
 800cd02:	d9ef      	bls.n	800cce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd04:	480d      	ldr	r0, [pc, #52]	; (800cd3c <prvInitialiseTaskLists+0x64>)
 800cd06:	f7fe fc33 	bl	800b570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd0a:	480d      	ldr	r0, [pc, #52]	; (800cd40 <prvInitialiseTaskLists+0x68>)
 800cd0c:	f7fe fc30 	bl	800b570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd10:	480c      	ldr	r0, [pc, #48]	; (800cd44 <prvInitialiseTaskLists+0x6c>)
 800cd12:	f7fe fc2d 	bl	800b570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd16:	480c      	ldr	r0, [pc, #48]	; (800cd48 <prvInitialiseTaskLists+0x70>)
 800cd18:	f7fe fc2a 	bl	800b570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd1c:	480b      	ldr	r0, [pc, #44]	; (800cd4c <prvInitialiseTaskLists+0x74>)
 800cd1e:	f7fe fc27 	bl	800b570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd22:	4b0b      	ldr	r3, [pc, #44]	; (800cd50 <prvInitialiseTaskLists+0x78>)
 800cd24:	4a05      	ldr	r2, [pc, #20]	; (800cd3c <prvInitialiseTaskLists+0x64>)
 800cd26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd28:	4b0a      	ldr	r3, [pc, #40]	; (800cd54 <prvInitialiseTaskLists+0x7c>)
 800cd2a:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <prvInitialiseTaskLists+0x68>)
 800cd2c:	601a      	str	r2, [r3, #0]
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20000574 	.word	0x20000574
 800cd3c:	20000600 	.word	0x20000600
 800cd40:	20000614 	.word	0x20000614
 800cd44:	20000630 	.word	0x20000630
 800cd48:	20000644 	.word	0x20000644
 800cd4c:	2000065c 	.word	0x2000065c
 800cd50:	20000628 	.word	0x20000628
 800cd54:	2000062c 	.word	0x2000062c

0800cd58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd5e:	e019      	b.n	800cd94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd60:	f000 fa8a 	bl	800d278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <prvCheckTasksWaitingTermination+0x4c>)
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fc87 	bl	800b684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd76:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <prvCheckTasksWaitingTermination+0x50>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	4a0a      	ldr	r2, [pc, #40]	; (800cda8 <prvCheckTasksWaitingTermination+0x50>)
 800cd7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd80:	4b0a      	ldr	r3, [pc, #40]	; (800cdac <prvCheckTasksWaitingTermination+0x54>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <prvCheckTasksWaitingTermination+0x54>)
 800cd88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd8a:	f000 faa7 	bl	800d2dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f80e 	bl	800cdb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd94:	4b05      	ldr	r3, [pc, #20]	; (800cdac <prvCheckTasksWaitingTermination+0x54>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e1      	bne.n	800cd60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20000644 	.word	0x20000644
 800cda8:	20000670 	.word	0x20000670
 800cdac:	20000658 	.word	0x20000658

0800cdb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d108      	bne.n	800cdd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 fc44 	bl	800d654 <vPortFree>
				vPortFree( pxTCB );
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fc41 	bl	800d654 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cdd2:	e019      	b.n	800ce08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d103      	bne.n	800cde6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fc38 	bl	800d654 <vPortFree>
	}
 800cde4:	e010      	b.n	800ce08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d00b      	beq.n	800ce08 <prvDeleteTCB+0x58>
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	b672      	cpsid	i
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	b662      	cpsie	i
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e7fe      	b.n	800ce06 <prvDeleteTCB+0x56>
	}
 800ce08:	bf00      	nop
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce16:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <prvResetNextTaskUnblockTime+0x38>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d104      	bne.n	800ce2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce20:	4b0a      	ldr	r3, [pc, #40]	; (800ce4c <prvResetNextTaskUnblockTime+0x3c>)
 800ce22:	f04f 32ff 	mov.w	r2, #4294967295
 800ce26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ce28:	e008      	b.n	800ce3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <prvResetNextTaskUnblockTime+0x38>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	4a04      	ldr	r2, [pc, #16]	; (800ce4c <prvResetNextTaskUnblockTime+0x3c>)
 800ce3a:	6013      	str	r3, [r2, #0]
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	20000628 	.word	0x20000628
 800ce4c:	20000690 	.word	0x20000690

0800ce50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <xTaskGetSchedulerState+0x34>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d102      	bne.n	800ce64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	607b      	str	r3, [r7, #4]
 800ce62:	e008      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <xTaskGetSchedulerState+0x38>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	607b      	str	r3, [r7, #4]
 800ce70:	e001      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ce72:	2300      	movs	r3, #0
 800ce74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce76:	687b      	ldr	r3, [r7, #4]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	2000067c 	.word	0x2000067c
 800ce88:	20000698 	.word	0x20000698

0800ce8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d070      	beq.n	800cf84 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cea2:	4b3b      	ldr	r3, [pc, #236]	; (800cf90 <xTaskPriorityDisinherit+0x104>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d00b      	beq.n	800cec4 <xTaskPriorityDisinherit+0x38>
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	b672      	cpsid	i
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	b662      	cpsie	i
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	e7fe      	b.n	800cec2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10b      	bne.n	800cee4 <xTaskPriorityDisinherit+0x58>
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	b672      	cpsid	i
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	b662      	cpsie	i
 800cee0:	60bb      	str	r3, [r7, #8]
 800cee2:	e7fe      	b.n	800cee2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cee8:	1e5a      	subs	r2, r3, #1
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d044      	beq.n	800cf84 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d140      	bne.n	800cf84 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	3304      	adds	r3, #4
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fbbc 	bl	800b684 <uxListRemove>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d115      	bne.n	800cf3e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf16:	491f      	ldr	r1, [pc, #124]	; (800cf94 <xTaskPriorityDisinherit+0x108>)
 800cf18:	4613      	mov	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	440b      	add	r3, r1
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10a      	bne.n	800cf3e <xTaskPriorityDisinherit+0xb2>
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf32:	43da      	mvns	r2, r3
 800cf34:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4013      	ands	r3, r2
 800cf3a:	4a17      	ldr	r2, [pc, #92]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4a:	f1c3 0207 	rsb	r2, r3, #7
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf56:	2201      	movs	r2, #1
 800cf58:	409a      	lsls	r2, r3
 800cf5a:	4b0f      	ldr	r3, [pc, #60]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	4a0d      	ldr	r2, [pc, #52]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf68:	4613      	mov	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4a08      	ldr	r2, [pc, #32]	; (800cf94 <xTaskPriorityDisinherit+0x108>)
 800cf72:	441a      	add	r2, r3
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	f7fe fb25 	bl	800b5ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf80:	2301      	movs	r3, #1
 800cf82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf84:	697b      	ldr	r3, [r7, #20]
	}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000570 	.word	0x20000570
 800cf94:	20000574 	.word	0x20000574
 800cf98:	20000678 	.word	0x20000678

0800cf9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfa6:	4b29      	ldr	r3, [pc, #164]	; (800d04c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfac:	4b28      	ldr	r3, [pc, #160]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fb66 	bl	800b684 <uxListRemove>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cfbe:	4b24      	ldr	r3, [pc, #144]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfca:	43da      	mvns	r2, r3
 800cfcc:	4b21      	ldr	r3, [pc, #132]	; (800d054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	4a20      	ldr	r2, [pc, #128]	; (800d054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfdc:	d10a      	bne.n	800cff4 <prvAddCurrentTaskToDelayedList+0x58>
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfe4:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	4619      	mov	r1, r3
 800cfec:	481a      	ldr	r0, [pc, #104]	; (800d058 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cfee:	f7fe faec 	bl	800b5ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cff2:	e026      	b.n	800d042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4413      	add	r3, r2
 800cffa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cffc:	4b14      	ldr	r3, [pc, #80]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d209      	bcs.n	800d020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d00c:	4b13      	ldr	r3, [pc, #76]	; (800d05c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3304      	adds	r3, #4
 800d016:	4619      	mov	r1, r3
 800d018:	4610      	mov	r0, r2
 800d01a:	f7fe fafa 	bl	800b612 <vListInsert>
}
 800d01e:	e010      	b.n	800d042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d020:	4b0f      	ldr	r3, [pc, #60]	; (800d060 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	3304      	adds	r3, #4
 800d02a:	4619      	mov	r1, r3
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7fe faf0 	bl	800b612 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d032:	4b0c      	ldr	r3, [pc, #48]	; (800d064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d202      	bcs.n	800d042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d03c:	4a09      	ldr	r2, [pc, #36]	; (800d064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	6013      	str	r3, [r2, #0]
}
 800d042:	bf00      	nop
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	20000674 	.word	0x20000674
 800d050:	20000570 	.word	0x20000570
 800d054:	20000678 	.word	0x20000678
 800d058:	2000065c 	.word	0x2000065c
 800d05c:	2000062c 	.word	0x2000062c
 800d060:	20000628 	.word	0x20000628
 800d064:	20000690 	.word	0x20000690

0800d068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3b04      	subs	r3, #4
 800d078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3b04      	subs	r3, #4
 800d086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f023 0201 	bic.w	r2, r3, #1
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3b04      	subs	r3, #4
 800d096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d098:	4a0c      	ldr	r2, [pc, #48]	; (800d0cc <pxPortInitialiseStack+0x64>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3b14      	subs	r3, #20
 800d0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3b04      	subs	r3, #4
 800d0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f06f 0202 	mvn.w	r2, #2
 800d0b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3b20      	subs	r3, #32
 800d0bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0be:	68fb      	ldr	r3, [r7, #12]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	0800d0d1 	.word	0x0800d0d1

0800d0d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0da:	4b13      	ldr	r3, [pc, #76]	; (800d128 <prvTaskExitError+0x58>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e2:	d00b      	beq.n	800d0fc <prvTaskExitError+0x2c>
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	b672      	cpsid	i
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	b662      	cpsie	i
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e7fe      	b.n	800d0fa <prvTaskExitError+0x2a>
 800d0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d100:	b672      	cpsid	i
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	b662      	cpsie	i
 800d110:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d112:	bf00      	nop
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0fc      	beq.n	800d114 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d11a:	bf00      	nop
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	20000040 	.word	0x20000040
 800d12c:	00000000 	.word	0x00000000

0800d130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <pxCurrentTCBConst2>)
 800d132:	6819      	ldr	r1, [r3, #0]
 800d134:	6808      	ldr	r0, [r1, #0]
 800d136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	f380 8809 	msr	PSP, r0
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8811 	msr	BASEPRI, r0
 800d14a:	4770      	bx	lr
 800d14c:	f3af 8000 	nop.w

0800d150 <pxCurrentTCBConst2>:
 800d150:	20000570 	.word	0x20000570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop

0800d158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d158:	4808      	ldr	r0, [pc, #32]	; (800d17c <prvPortStartFirstTask+0x24>)
 800d15a:	6800      	ldr	r0, [r0, #0]
 800d15c:	6800      	ldr	r0, [r0, #0]
 800d15e:	f380 8808 	msr	MSP, r0
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	f380 8814 	msr	CONTROL, r0
 800d16a:	b662      	cpsie	i
 800d16c:	b661      	cpsie	f
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	df00      	svc	0
 800d178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d17a:	bf00      	nop
 800d17c:	e000ed08 	.word	0xe000ed08

0800d180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d186:	4b36      	ldr	r3, [pc, #216]	; (800d260 <xPortStartScheduler+0xe0>)
 800d188:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	22ff      	movs	r2, #255	; 0xff
 800d196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	4b2e      	ldr	r3, [pc, #184]	; (800d264 <xPortStartScheduler+0xe4>)
 800d1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1ae:	4b2e      	ldr	r3, [pc, #184]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1b0:	2207      	movs	r2, #7
 800d1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1b4:	e009      	b.n	800d1ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d1b6:	4b2c      	ldr	r3, [pc, #176]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	4a2a      	ldr	r2, [pc, #168]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ca:	78fb      	ldrb	r3, [r7, #3]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d2:	2b80      	cmp	r3, #128	; 0x80
 800d1d4:	d0ef      	beq.n	800d1b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1d6:	4b24      	ldr	r3, [pc, #144]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f1c3 0307 	rsb	r3, r3, #7
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	d00b      	beq.n	800d1fa <xPortStartScheduler+0x7a>
 800d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e6:	b672      	cpsid	i
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	b662      	cpsie	i
 800d1f6:	60bb      	str	r3, [r7, #8]
 800d1f8:	e7fe      	b.n	800d1f8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1fa:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	021b      	lsls	r3, r3, #8
 800d200:	4a19      	ldr	r2, [pc, #100]	; (800d268 <xPortStartScheduler+0xe8>)
 800d202:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d204:	4b18      	ldr	r3, [pc, #96]	; (800d268 <xPortStartScheduler+0xe8>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d20c:	4a16      	ldr	r2, [pc, #88]	; (800d268 <xPortStartScheduler+0xe8>)
 800d20e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	b2da      	uxtb	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d218:	4b14      	ldr	r3, [pc, #80]	; (800d26c <xPortStartScheduler+0xec>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a13      	ldr	r2, [pc, #76]	; (800d26c <xPortStartScheduler+0xec>)
 800d21e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d222:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d224:	4b11      	ldr	r3, [pc, #68]	; (800d26c <xPortStartScheduler+0xec>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a10      	ldr	r2, [pc, #64]	; (800d26c <xPortStartScheduler+0xec>)
 800d22a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d22e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d230:	f000 f8d4 	bl	800d3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d234:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <xPortStartScheduler+0xf0>)
 800d236:	2200      	movs	r2, #0
 800d238:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d23a:	f000 f8f3 	bl	800d424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d23e:	4b0d      	ldr	r3, [pc, #52]	; (800d274 <xPortStartScheduler+0xf4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a0c      	ldr	r2, [pc, #48]	; (800d274 <xPortStartScheduler+0xf4>)
 800d244:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d248:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d24a:	f7ff ff85 	bl	800d158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d24e:	f7ff fb97 	bl	800c980 <vTaskSwitchContext>
	prvTaskExitError();
 800d252:	f7ff ff3d 	bl	800d0d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	e000e400 	.word	0xe000e400
 800d264:	2000069c 	.word	0x2000069c
 800d268:	200006a0 	.word	0x200006a0
 800d26c:	e000ed20 	.word	0xe000ed20
 800d270:	20000040 	.word	0x20000040
 800d274:	e000ef34 	.word	0xe000ef34

0800d278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	b672      	cpsid	i
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	b662      	cpsie	i
 800d292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d294:	4b0f      	ldr	r3, [pc, #60]	; (800d2d4 <vPortEnterCritical+0x5c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	4a0e      	ldr	r2, [pc, #56]	; (800d2d4 <vPortEnterCritical+0x5c>)
 800d29c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d29e:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <vPortEnterCritical+0x5c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d110      	bne.n	800d2c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <vPortEnterCritical+0x60>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00b      	beq.n	800d2c8 <vPortEnterCritical+0x50>
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	b672      	cpsid	i
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	b662      	cpsie	i
 800d2c4:	603b      	str	r3, [r7, #0]
 800d2c6:	e7fe      	b.n	800d2c6 <vPortEnterCritical+0x4e>
	}
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	20000040 	.word	0x20000040
 800d2d8:	e000ed04 	.word	0xe000ed04

0800d2dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2e2:	4b12      	ldr	r3, [pc, #72]	; (800d32c <vPortExitCritical+0x50>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <vPortExitCritical+0x26>
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	b672      	cpsid	i
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	b662      	cpsie	i
 800d2fe:	607b      	str	r3, [r7, #4]
 800d300:	e7fe      	b.n	800d300 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d302:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <vPortExitCritical+0x50>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3b01      	subs	r3, #1
 800d308:	4a08      	ldr	r2, [pc, #32]	; (800d32c <vPortExitCritical+0x50>)
 800d30a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <vPortExitCritical+0x50>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d104      	bne.n	800d31e <vPortExitCritical+0x42>
 800d314:	2300      	movs	r3, #0
 800d316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d31e:	bf00      	nop
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20000040 	.word	0x20000040

0800d330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d330:	f3ef 8009 	mrs	r0, PSP
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	4b15      	ldr	r3, [pc, #84]	; (800d390 <pxCurrentTCBConst>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	f01e 0f10 	tst.w	lr, #16
 800d340:	bf08      	it	eq
 800d342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	6010      	str	r0, [r2, #0]
 800d34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d350:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d354:	b672      	cpsid	i
 800d356:	f380 8811 	msr	BASEPRI, r0
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	b662      	cpsie	i
 800d364:	f7ff fb0c 	bl	800c980 <vTaskSwitchContext>
 800d368:	f04f 0000 	mov.w	r0, #0
 800d36c:	f380 8811 	msr	BASEPRI, r0
 800d370:	bc09      	pop	{r0, r3}
 800d372:	6819      	ldr	r1, [r3, #0]
 800d374:	6808      	ldr	r0, [r1, #0]
 800d376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37a:	f01e 0f10 	tst.w	lr, #16
 800d37e:	bf08      	it	eq
 800d380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d384:	f380 8809 	msr	PSP, r0
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop

0800d390 <pxCurrentTCBConst>:
 800d390:	20000570 	.word	0x20000570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop

0800d398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	b672      	cpsid	i
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	b662      	cpsie	i
 800d3b2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3b4:	f7ff fa2a 	bl	800c80c <xTaskIncrementTick>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3be:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <SysTick_Handler+0x40>)
 800d3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	e000ed04 	.word	0xe000ed04

0800d3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3e0:	4b0b      	ldr	r3, [pc, #44]	; (800d410 <vPortSetupTimerInterrupt+0x34>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <vPortSetupTimerInterrupt+0x38>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <vPortSetupTimerInterrupt+0x3c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a0a      	ldr	r2, [pc, #40]	; (800d41c <vPortSetupTimerInterrupt+0x40>)
 800d3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f6:	099b      	lsrs	r3, r3, #6
 800d3f8:	4a09      	ldr	r2, [pc, #36]	; (800d420 <vPortSetupTimerInterrupt+0x44>)
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3fe:	4b04      	ldr	r3, [pc, #16]	; (800d410 <vPortSetupTimerInterrupt+0x34>)
 800d400:	2207      	movs	r2, #7
 800d402:	601a      	str	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	e000e010 	.word	0xe000e010
 800d414:	e000e018 	.word	0xe000e018
 800d418:	20000034 	.word	0x20000034
 800d41c:	10624dd3 	.word	0x10624dd3
 800d420:	e000e014 	.word	0xe000e014

0800d424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d434 <vPortEnableVFP+0x10>
 800d428:	6801      	ldr	r1, [r0, #0]
 800d42a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d42e:	6001      	str	r1, [r0, #0]
 800d430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d432:	bf00      	nop
 800d434:	e000ed88 	.word	0xe000ed88

0800d438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d43e:	f3ef 8305 	mrs	r3, IPSR
 800d442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2b0f      	cmp	r3, #15
 800d448:	d915      	bls.n	800d476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d44a:	4a18      	ldr	r2, [pc, #96]	; (800d4ac <vPortValidateInterruptPriority+0x74>)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d454:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <vPortValidateInterruptPriority+0x78>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	7afa      	ldrb	r2, [r7, #11]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d20b      	bcs.n	800d476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	b672      	cpsid	i
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	b662      	cpsie	i
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	e7fe      	b.n	800d474 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <vPortValidateInterruptPriority+0x7c>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d47e:	4b0e      	ldr	r3, [pc, #56]	; (800d4b8 <vPortValidateInterruptPriority+0x80>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d90b      	bls.n	800d49e <vPortValidateInterruptPriority+0x66>
 800d486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48a:	b672      	cpsid	i
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	b662      	cpsie	i
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	e7fe      	b.n	800d49c <vPortValidateInterruptPriority+0x64>
	}
 800d49e:	bf00      	nop
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	e000e3f0 	.word	0xe000e3f0
 800d4b0:	2000069c 	.word	0x2000069c
 800d4b4:	e000ed0c 	.word	0xe000ed0c
 800d4b8:	200006a0 	.word	0x200006a0

0800d4bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08a      	sub	sp, #40	; 0x28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4c8:	f7ff f8e4 	bl	800c694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4cc:	4b5c      	ldr	r3, [pc, #368]	; (800d640 <pvPortMalloc+0x184>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4d4:	f000 f91a 	bl	800d70c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4d8:	4b5a      	ldr	r3, [pc, #360]	; (800d644 <pvPortMalloc+0x188>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4013      	ands	r3, r2
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f040 8090 	bne.w	800d606 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01e      	beq.n	800d52a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d4ec:	2208      	movs	r2, #8
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f003 0307 	and.w	r3, r3, #7
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d015      	beq.n	800d52a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f023 0307 	bic.w	r3, r3, #7
 800d504:	3308      	adds	r3, #8
 800d506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f003 0307 	and.w	r3, r3, #7
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00b      	beq.n	800d52a <pvPortMalloc+0x6e>
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	b672      	cpsid	i
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	b662      	cpsie	i
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	e7fe      	b.n	800d528 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d06a      	beq.n	800d606 <pvPortMalloc+0x14a>
 800d530:	4b45      	ldr	r3, [pc, #276]	; (800d648 <pvPortMalloc+0x18c>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d865      	bhi.n	800d606 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d53a:	4b44      	ldr	r3, [pc, #272]	; (800d64c <pvPortMalloc+0x190>)
 800d53c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d53e:	4b43      	ldr	r3, [pc, #268]	; (800d64c <pvPortMalloc+0x190>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d544:	e004      	b.n	800d550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	d903      	bls.n	800d562 <pvPortMalloc+0xa6>
 800d55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1f1      	bne.n	800d546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d562:	4b37      	ldr	r3, [pc, #220]	; (800d640 <pvPortMalloc+0x184>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d568:	429a      	cmp	r2, r3
 800d56a:	d04c      	beq.n	800d606 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2208      	movs	r2, #8
 800d572:	4413      	add	r3, r2
 800d574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	1ad2      	subs	r2, r2, r3
 800d586:	2308      	movs	r3, #8
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d920      	bls.n	800d5d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4413      	add	r3, r2
 800d594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	f003 0307 	and.w	r3, r3, #7
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <pvPortMalloc+0xfc>
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	b672      	cpsid	i
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	b662      	cpsie	i
 800d5b4:	613b      	str	r3, [r7, #16]
 800d5b6:	e7fe      	b.n	800d5b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5ca:	69b8      	ldr	r0, [r7, #24]
 800d5cc:	f000 f900 	bl	800d7d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <pvPortMalloc+0x18c>)
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	4a1b      	ldr	r2, [pc, #108]	; (800d648 <pvPortMalloc+0x18c>)
 800d5dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5de:	4b1a      	ldr	r3, [pc, #104]	; (800d648 <pvPortMalloc+0x18c>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <pvPortMalloc+0x194>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d203      	bcs.n	800d5f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5ea:	4b17      	ldr	r3, [pc, #92]	; (800d648 <pvPortMalloc+0x18c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a18      	ldr	r2, [pc, #96]	; (800d650 <pvPortMalloc+0x194>)
 800d5f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	4b13      	ldr	r3, [pc, #76]	; (800d644 <pvPortMalloc+0x188>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d606:	f7ff f853 	bl	800c6b0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d610:	f7f2 ffe0 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	f003 0307 	and.w	r3, r3, #7
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00b      	beq.n	800d636 <pvPortMalloc+0x17a>
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	b672      	cpsid	i
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	b662      	cpsie	i
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	e7fe      	b.n	800d634 <pvPortMalloc+0x178>
	return pvReturn;
 800d636:	69fb      	ldr	r3, [r7, #28]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3728      	adds	r7, #40	; 0x28
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	200086ac 	.word	0x200086ac
 800d644:	200086b8 	.word	0x200086b8
 800d648:	200086b0 	.word	0x200086b0
 800d64c:	200086a4 	.word	0x200086a4
 800d650:	200086b4 	.word	0x200086b4

0800d654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d04a      	beq.n	800d6fc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d666:	2308      	movs	r3, #8
 800d668:	425b      	negs	r3, r3
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	4b22      	ldr	r3, [pc, #136]	; (800d704 <vPortFree+0xb0>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10b      	bne.n	800d69a <vPortFree+0x46>
 800d682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d686:	b672      	cpsid	i
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	b662      	cpsie	i
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	e7fe      	b.n	800d698 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00b      	beq.n	800d6ba <vPortFree+0x66>
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	b672      	cpsid	i
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	b662      	cpsie	i
 800d6b6:	60bb      	str	r3, [r7, #8]
 800d6b8:	e7fe      	b.n	800d6b8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	4b11      	ldr	r3, [pc, #68]	; (800d704 <vPortFree+0xb0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d019      	beq.n	800d6fc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d115      	bne.n	800d6fc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	685a      	ldr	r2, [r3, #4]
 800d6d4:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <vPortFree+0xb0>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	43db      	mvns	r3, r3
 800d6da:	401a      	ands	r2, r3
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6e0:	f7fe ffd8 	bl	800c694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	4b07      	ldr	r3, [pc, #28]	; (800d708 <vPortFree+0xb4>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	4a06      	ldr	r2, [pc, #24]	; (800d708 <vPortFree+0xb4>)
 800d6f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6f2:	6938      	ldr	r0, [r7, #16]
 800d6f4:	f000 f86c 	bl	800d7d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d6f8:	f7fe ffda 	bl	800c6b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6fc:	bf00      	nop
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	200086b8 	.word	0x200086b8
 800d708:	200086b0 	.word	0x200086b0

0800d70c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d716:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d718:	4b27      	ldr	r3, [pc, #156]	; (800d7b8 <prvHeapInit+0xac>)
 800d71a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f003 0307 	and.w	r3, r3, #7
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00c      	beq.n	800d740 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3307      	adds	r3, #7
 800d72a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f023 0307 	bic.w	r3, r3, #7
 800d732:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	4a1f      	ldr	r2, [pc, #124]	; (800d7b8 <prvHeapInit+0xac>)
 800d73c:	4413      	add	r3, r2
 800d73e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d744:	4a1d      	ldr	r2, [pc, #116]	; (800d7bc <prvHeapInit+0xb0>)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d74a:	4b1c      	ldr	r3, [pc, #112]	; (800d7bc <prvHeapInit+0xb0>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	4413      	add	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d758:	2208      	movs	r2, #8
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	1a9b      	subs	r3, r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f023 0307 	bic.w	r3, r3, #7
 800d766:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4a15      	ldr	r2, [pc, #84]	; (800d7c0 <prvHeapInit+0xb4>)
 800d76c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d76e:	4b14      	ldr	r3, [pc, #80]	; (800d7c0 <prvHeapInit+0xb4>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2200      	movs	r2, #0
 800d774:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d776:	4b12      	ldr	r3, [pc, #72]	; (800d7c0 <prvHeapInit+0xb4>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	1ad2      	subs	r2, r2, r3
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <prvHeapInit+0xb4>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	4a0a      	ldr	r2, [pc, #40]	; (800d7c4 <prvHeapInit+0xb8>)
 800d79a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4a09      	ldr	r2, [pc, #36]	; (800d7c8 <prvHeapInit+0xbc>)
 800d7a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7a4:	4b09      	ldr	r3, [pc, #36]	; (800d7cc <prvHeapInit+0xc0>)
 800d7a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7aa:	601a      	str	r2, [r3, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	200006a4 	.word	0x200006a4
 800d7bc:	200086a4 	.word	0x200086a4
 800d7c0:	200086ac 	.word	0x200086ac
 800d7c4:	200086b4 	.word	0x200086b4
 800d7c8:	200086b0 	.word	0x200086b0
 800d7cc:	200086b8 	.word	0x200086b8

0800d7d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7d8:	4b28      	ldr	r3, [pc, #160]	; (800d87c <prvInsertBlockIntoFreeList+0xac>)
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	e002      	b.n	800d7e4 <prvInsertBlockIntoFreeList+0x14>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d8f7      	bhi.n	800d7de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d108      	bne.n	800d812 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	441a      	add	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	441a      	add	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d118      	bne.n	800d858 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	4b15      	ldr	r3, [pc, #84]	; (800d880 <prvInsertBlockIntoFreeList+0xb0>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d00d      	beq.n	800d84e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	441a      	add	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	e008      	b.n	800d860 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d84e:	4b0c      	ldr	r3, [pc, #48]	; (800d880 <prvInsertBlockIntoFreeList+0xb0>)
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	e003      	b.n	800d860 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	429a      	cmp	r2, r3
 800d866:	d002      	beq.n	800d86e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d86e:	bf00      	nop
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	200086a4 	.word	0x200086a4
 800d880:	200086ac 	.word	0x200086ac

0800d884 <__errno>:
 800d884:	4b01      	ldr	r3, [pc, #4]	; (800d88c <__errno+0x8>)
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	20000044 	.word	0x20000044

0800d890 <__libc_init_array>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	4e0d      	ldr	r6, [pc, #52]	; (800d8c8 <__libc_init_array+0x38>)
 800d894:	4c0d      	ldr	r4, [pc, #52]	; (800d8cc <__libc_init_array+0x3c>)
 800d896:	1ba4      	subs	r4, r4, r6
 800d898:	10a4      	asrs	r4, r4, #2
 800d89a:	2500      	movs	r5, #0
 800d89c:	42a5      	cmp	r5, r4
 800d89e:	d109      	bne.n	800d8b4 <__libc_init_array+0x24>
 800d8a0:	4e0b      	ldr	r6, [pc, #44]	; (800d8d0 <__libc_init_array+0x40>)
 800d8a2:	4c0c      	ldr	r4, [pc, #48]	; (800d8d4 <__libc_init_array+0x44>)
 800d8a4:	f000 fc28 	bl	800e0f8 <_init>
 800d8a8:	1ba4      	subs	r4, r4, r6
 800d8aa:	10a4      	asrs	r4, r4, #2
 800d8ac:	2500      	movs	r5, #0
 800d8ae:	42a5      	cmp	r5, r4
 800d8b0:	d105      	bne.n	800d8be <__libc_init_array+0x2e>
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8b8:	4798      	blx	r3
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	e7ee      	b.n	800d89c <__libc_init_array+0xc>
 800d8be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8c2:	4798      	blx	r3
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	e7f2      	b.n	800d8ae <__libc_init_array+0x1e>
 800d8c8:	0800fce4 	.word	0x0800fce4
 800d8cc:	0800fce4 	.word	0x0800fce4
 800d8d0:	0800fce4 	.word	0x0800fce4
 800d8d4:	0800fce8 	.word	0x0800fce8

0800d8d8 <memcpy>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	1e43      	subs	r3, r0, #1
 800d8dc:	440a      	add	r2, r1
 800d8de:	4291      	cmp	r1, r2
 800d8e0:	d100      	bne.n	800d8e4 <memcpy+0xc>
 800d8e2:	bd10      	pop	{r4, pc}
 800d8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ec:	e7f7      	b.n	800d8de <memcpy+0x6>

0800d8ee <memset>:
 800d8ee:	4402      	add	r2, r0
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d100      	bne.n	800d8f8 <memset+0xa>
 800d8f6:	4770      	bx	lr
 800d8f8:	f803 1b01 	strb.w	r1, [r3], #1
 800d8fc:	e7f9      	b.n	800d8f2 <memset+0x4>
	...

0800d900 <siprintf>:
 800d900:	b40e      	push	{r1, r2, r3}
 800d902:	b500      	push	{lr}
 800d904:	b09c      	sub	sp, #112	; 0x70
 800d906:	ab1d      	add	r3, sp, #116	; 0x74
 800d908:	9002      	str	r0, [sp, #8]
 800d90a:	9006      	str	r0, [sp, #24]
 800d90c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d910:	4809      	ldr	r0, [pc, #36]	; (800d938 <siprintf+0x38>)
 800d912:	9107      	str	r1, [sp, #28]
 800d914:	9104      	str	r1, [sp, #16]
 800d916:	4909      	ldr	r1, [pc, #36]	; (800d93c <siprintf+0x3c>)
 800d918:	f853 2b04 	ldr.w	r2, [r3], #4
 800d91c:	9105      	str	r1, [sp, #20]
 800d91e:	6800      	ldr	r0, [r0, #0]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	a902      	add	r1, sp, #8
 800d924:	f000 f866 	bl	800d9f4 <_svfiprintf_r>
 800d928:	9b02      	ldr	r3, [sp, #8]
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
 800d92e:	b01c      	add	sp, #112	; 0x70
 800d930:	f85d eb04 	ldr.w	lr, [sp], #4
 800d934:	b003      	add	sp, #12
 800d936:	4770      	bx	lr
 800d938:	20000044 	.word	0x20000044
 800d93c:	ffff0208 	.word	0xffff0208

0800d940 <__ssputs_r>:
 800d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	688e      	ldr	r6, [r1, #8]
 800d946:	429e      	cmp	r6, r3
 800d948:	4682      	mov	sl, r0
 800d94a:	460c      	mov	r4, r1
 800d94c:	4690      	mov	r8, r2
 800d94e:	4699      	mov	r9, r3
 800d950:	d837      	bhi.n	800d9c2 <__ssputs_r+0x82>
 800d952:	898a      	ldrh	r2, [r1, #12]
 800d954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d958:	d031      	beq.n	800d9be <__ssputs_r+0x7e>
 800d95a:	6825      	ldr	r5, [r4, #0]
 800d95c:	6909      	ldr	r1, [r1, #16]
 800d95e:	1a6f      	subs	r7, r5, r1
 800d960:	6965      	ldr	r5, [r4, #20]
 800d962:	2302      	movs	r3, #2
 800d964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d968:	fb95 f5f3 	sdiv	r5, r5, r3
 800d96c:	f109 0301 	add.w	r3, r9, #1
 800d970:	443b      	add	r3, r7
 800d972:	429d      	cmp	r5, r3
 800d974:	bf38      	it	cc
 800d976:	461d      	movcc	r5, r3
 800d978:	0553      	lsls	r3, r2, #21
 800d97a:	d530      	bpl.n	800d9de <__ssputs_r+0x9e>
 800d97c:	4629      	mov	r1, r5
 800d97e:	f000 fb21 	bl	800dfc4 <_malloc_r>
 800d982:	4606      	mov	r6, r0
 800d984:	b950      	cbnz	r0, 800d99c <__ssputs_r+0x5c>
 800d986:	230c      	movs	r3, #12
 800d988:	f8ca 3000 	str.w	r3, [sl]
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d992:	81a3      	strh	r3, [r4, #12]
 800d994:	f04f 30ff 	mov.w	r0, #4294967295
 800d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99c:	463a      	mov	r2, r7
 800d99e:	6921      	ldr	r1, [r4, #16]
 800d9a0:	f7ff ff9a 	bl	800d8d8 <memcpy>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	6126      	str	r6, [r4, #16]
 800d9b2:	6165      	str	r5, [r4, #20]
 800d9b4:	443e      	add	r6, r7
 800d9b6:	1bed      	subs	r5, r5, r7
 800d9b8:	6026      	str	r6, [r4, #0]
 800d9ba:	60a5      	str	r5, [r4, #8]
 800d9bc:	464e      	mov	r6, r9
 800d9be:	454e      	cmp	r6, r9
 800d9c0:	d900      	bls.n	800d9c4 <__ssputs_r+0x84>
 800d9c2:	464e      	mov	r6, r9
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	4641      	mov	r1, r8
 800d9c8:	6820      	ldr	r0, [r4, #0]
 800d9ca:	f000 fa93 	bl	800def4 <memmove>
 800d9ce:	68a3      	ldr	r3, [r4, #8]
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	60a3      	str	r3, [r4, #8]
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	441e      	add	r6, r3
 800d9d8:	6026      	str	r6, [r4, #0]
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e7dc      	b.n	800d998 <__ssputs_r+0x58>
 800d9de:	462a      	mov	r2, r5
 800d9e0:	f000 fb4a 	bl	800e078 <_realloc_r>
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1e2      	bne.n	800d9b0 <__ssputs_r+0x70>
 800d9ea:	6921      	ldr	r1, [r4, #16]
 800d9ec:	4650      	mov	r0, sl
 800d9ee:	f000 fa9b 	bl	800df28 <_free_r>
 800d9f2:	e7c8      	b.n	800d986 <__ssputs_r+0x46>

0800d9f4 <_svfiprintf_r>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	461d      	mov	r5, r3
 800d9fa:	898b      	ldrh	r3, [r1, #12]
 800d9fc:	061f      	lsls	r7, r3, #24
 800d9fe:	b09d      	sub	sp, #116	; 0x74
 800da00:	4680      	mov	r8, r0
 800da02:	460c      	mov	r4, r1
 800da04:	4616      	mov	r6, r2
 800da06:	d50f      	bpl.n	800da28 <_svfiprintf_r+0x34>
 800da08:	690b      	ldr	r3, [r1, #16]
 800da0a:	b96b      	cbnz	r3, 800da28 <_svfiprintf_r+0x34>
 800da0c:	2140      	movs	r1, #64	; 0x40
 800da0e:	f000 fad9 	bl	800dfc4 <_malloc_r>
 800da12:	6020      	str	r0, [r4, #0]
 800da14:	6120      	str	r0, [r4, #16]
 800da16:	b928      	cbnz	r0, 800da24 <_svfiprintf_r+0x30>
 800da18:	230c      	movs	r3, #12
 800da1a:	f8c8 3000 	str.w	r3, [r8]
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295
 800da22:	e0c8      	b.n	800dbb6 <_svfiprintf_r+0x1c2>
 800da24:	2340      	movs	r3, #64	; 0x40
 800da26:	6163      	str	r3, [r4, #20]
 800da28:	2300      	movs	r3, #0
 800da2a:	9309      	str	r3, [sp, #36]	; 0x24
 800da2c:	2320      	movs	r3, #32
 800da2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da32:	2330      	movs	r3, #48	; 0x30
 800da34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da38:	9503      	str	r5, [sp, #12]
 800da3a:	f04f 0b01 	mov.w	fp, #1
 800da3e:	4637      	mov	r7, r6
 800da40:	463d      	mov	r5, r7
 800da42:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da46:	b10b      	cbz	r3, 800da4c <_svfiprintf_r+0x58>
 800da48:	2b25      	cmp	r3, #37	; 0x25
 800da4a:	d13e      	bne.n	800daca <_svfiprintf_r+0xd6>
 800da4c:	ebb7 0a06 	subs.w	sl, r7, r6
 800da50:	d00b      	beq.n	800da6a <_svfiprintf_r+0x76>
 800da52:	4653      	mov	r3, sl
 800da54:	4632      	mov	r2, r6
 800da56:	4621      	mov	r1, r4
 800da58:	4640      	mov	r0, r8
 800da5a:	f7ff ff71 	bl	800d940 <__ssputs_r>
 800da5e:	3001      	adds	r0, #1
 800da60:	f000 80a4 	beq.w	800dbac <_svfiprintf_r+0x1b8>
 800da64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da66:	4453      	add	r3, sl
 800da68:	9309      	str	r3, [sp, #36]	; 0x24
 800da6a:	783b      	ldrb	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 809d 	beq.w	800dbac <_svfiprintf_r+0x1b8>
 800da72:	2300      	movs	r3, #0
 800da74:	f04f 32ff 	mov.w	r2, #4294967295
 800da78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da7c:	9304      	str	r3, [sp, #16]
 800da7e:	9307      	str	r3, [sp, #28]
 800da80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da84:	931a      	str	r3, [sp, #104]	; 0x68
 800da86:	462f      	mov	r7, r5
 800da88:	2205      	movs	r2, #5
 800da8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800da8e:	4850      	ldr	r0, [pc, #320]	; (800dbd0 <_svfiprintf_r+0x1dc>)
 800da90:	f7f2 fbbe 	bl	8000210 <memchr>
 800da94:	9b04      	ldr	r3, [sp, #16]
 800da96:	b9d0      	cbnz	r0, 800dace <_svfiprintf_r+0xda>
 800da98:	06d9      	lsls	r1, r3, #27
 800da9a:	bf44      	itt	mi
 800da9c:	2220      	movmi	r2, #32
 800da9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800daa2:	071a      	lsls	r2, r3, #28
 800daa4:	bf44      	itt	mi
 800daa6:	222b      	movmi	r2, #43	; 0x2b
 800daa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800daac:	782a      	ldrb	r2, [r5, #0]
 800daae:	2a2a      	cmp	r2, #42	; 0x2a
 800dab0:	d015      	beq.n	800dade <_svfiprintf_r+0xea>
 800dab2:	9a07      	ldr	r2, [sp, #28]
 800dab4:	462f      	mov	r7, r5
 800dab6:	2000      	movs	r0, #0
 800dab8:	250a      	movs	r5, #10
 800daba:	4639      	mov	r1, r7
 800dabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dac0:	3b30      	subs	r3, #48	; 0x30
 800dac2:	2b09      	cmp	r3, #9
 800dac4:	d94d      	bls.n	800db62 <_svfiprintf_r+0x16e>
 800dac6:	b1b8      	cbz	r0, 800daf8 <_svfiprintf_r+0x104>
 800dac8:	e00f      	b.n	800daea <_svfiprintf_r+0xf6>
 800daca:	462f      	mov	r7, r5
 800dacc:	e7b8      	b.n	800da40 <_svfiprintf_r+0x4c>
 800dace:	4a40      	ldr	r2, [pc, #256]	; (800dbd0 <_svfiprintf_r+0x1dc>)
 800dad0:	1a80      	subs	r0, r0, r2
 800dad2:	fa0b f000 	lsl.w	r0, fp, r0
 800dad6:	4318      	orrs	r0, r3
 800dad8:	9004      	str	r0, [sp, #16]
 800dada:	463d      	mov	r5, r7
 800dadc:	e7d3      	b.n	800da86 <_svfiprintf_r+0x92>
 800dade:	9a03      	ldr	r2, [sp, #12]
 800dae0:	1d11      	adds	r1, r2, #4
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	9103      	str	r1, [sp, #12]
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	db01      	blt.n	800daee <_svfiprintf_r+0xfa>
 800daea:	9207      	str	r2, [sp, #28]
 800daec:	e004      	b.n	800daf8 <_svfiprintf_r+0x104>
 800daee:	4252      	negs	r2, r2
 800daf0:	f043 0302 	orr.w	r3, r3, #2
 800daf4:	9207      	str	r2, [sp, #28]
 800daf6:	9304      	str	r3, [sp, #16]
 800daf8:	783b      	ldrb	r3, [r7, #0]
 800dafa:	2b2e      	cmp	r3, #46	; 0x2e
 800dafc:	d10c      	bne.n	800db18 <_svfiprintf_r+0x124>
 800dafe:	787b      	ldrb	r3, [r7, #1]
 800db00:	2b2a      	cmp	r3, #42	; 0x2a
 800db02:	d133      	bne.n	800db6c <_svfiprintf_r+0x178>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	9203      	str	r2, [sp, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bfb8      	it	lt
 800db10:	f04f 33ff 	movlt.w	r3, #4294967295
 800db14:	3702      	adds	r7, #2
 800db16:	9305      	str	r3, [sp, #20]
 800db18:	4d2e      	ldr	r5, [pc, #184]	; (800dbd4 <_svfiprintf_r+0x1e0>)
 800db1a:	7839      	ldrb	r1, [r7, #0]
 800db1c:	2203      	movs	r2, #3
 800db1e:	4628      	mov	r0, r5
 800db20:	f7f2 fb76 	bl	8000210 <memchr>
 800db24:	b138      	cbz	r0, 800db36 <_svfiprintf_r+0x142>
 800db26:	2340      	movs	r3, #64	; 0x40
 800db28:	1b40      	subs	r0, r0, r5
 800db2a:	fa03 f000 	lsl.w	r0, r3, r0
 800db2e:	9b04      	ldr	r3, [sp, #16]
 800db30:	4303      	orrs	r3, r0
 800db32:	3701      	adds	r7, #1
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	7839      	ldrb	r1, [r7, #0]
 800db38:	4827      	ldr	r0, [pc, #156]	; (800dbd8 <_svfiprintf_r+0x1e4>)
 800db3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db3e:	2206      	movs	r2, #6
 800db40:	1c7e      	adds	r6, r7, #1
 800db42:	f7f2 fb65 	bl	8000210 <memchr>
 800db46:	2800      	cmp	r0, #0
 800db48:	d038      	beq.n	800dbbc <_svfiprintf_r+0x1c8>
 800db4a:	4b24      	ldr	r3, [pc, #144]	; (800dbdc <_svfiprintf_r+0x1e8>)
 800db4c:	bb13      	cbnz	r3, 800db94 <_svfiprintf_r+0x1a0>
 800db4e:	9b03      	ldr	r3, [sp, #12]
 800db50:	3307      	adds	r3, #7
 800db52:	f023 0307 	bic.w	r3, r3, #7
 800db56:	3308      	adds	r3, #8
 800db58:	9303      	str	r3, [sp, #12]
 800db5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5c:	444b      	add	r3, r9
 800db5e:	9309      	str	r3, [sp, #36]	; 0x24
 800db60:	e76d      	b.n	800da3e <_svfiprintf_r+0x4a>
 800db62:	fb05 3202 	mla	r2, r5, r2, r3
 800db66:	2001      	movs	r0, #1
 800db68:	460f      	mov	r7, r1
 800db6a:	e7a6      	b.n	800daba <_svfiprintf_r+0xc6>
 800db6c:	2300      	movs	r3, #0
 800db6e:	3701      	adds	r7, #1
 800db70:	9305      	str	r3, [sp, #20]
 800db72:	4619      	mov	r1, r3
 800db74:	250a      	movs	r5, #10
 800db76:	4638      	mov	r0, r7
 800db78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db7c:	3a30      	subs	r2, #48	; 0x30
 800db7e:	2a09      	cmp	r2, #9
 800db80:	d903      	bls.n	800db8a <_svfiprintf_r+0x196>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0c8      	beq.n	800db18 <_svfiprintf_r+0x124>
 800db86:	9105      	str	r1, [sp, #20]
 800db88:	e7c6      	b.n	800db18 <_svfiprintf_r+0x124>
 800db8a:	fb05 2101 	mla	r1, r5, r1, r2
 800db8e:	2301      	movs	r3, #1
 800db90:	4607      	mov	r7, r0
 800db92:	e7f0      	b.n	800db76 <_svfiprintf_r+0x182>
 800db94:	ab03      	add	r3, sp, #12
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4622      	mov	r2, r4
 800db9a:	4b11      	ldr	r3, [pc, #68]	; (800dbe0 <_svfiprintf_r+0x1ec>)
 800db9c:	a904      	add	r1, sp, #16
 800db9e:	4640      	mov	r0, r8
 800dba0:	f3af 8000 	nop.w
 800dba4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dba8:	4681      	mov	r9, r0
 800dbaa:	d1d6      	bne.n	800db5a <_svfiprintf_r+0x166>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	065b      	lsls	r3, r3, #25
 800dbb0:	f53f af35 	bmi.w	800da1e <_svfiprintf_r+0x2a>
 800dbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb6:	b01d      	add	sp, #116	; 0x74
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	ab03      	add	r3, sp, #12
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <_svfiprintf_r+0x1ec>)
 800dbc4:	a904      	add	r1, sp, #16
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f000 f882 	bl	800dcd0 <_printf_i>
 800dbcc:	e7ea      	b.n	800dba4 <_svfiprintf_r+0x1b0>
 800dbce:	bf00      	nop
 800dbd0:	0800fca8 	.word	0x0800fca8
 800dbd4:	0800fcae 	.word	0x0800fcae
 800dbd8:	0800fcb2 	.word	0x0800fcb2
 800dbdc:	00000000 	.word	0x00000000
 800dbe0:	0800d941 	.word	0x0800d941

0800dbe4 <_printf_common>:
 800dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe8:	4691      	mov	r9, r2
 800dbea:	461f      	mov	r7, r3
 800dbec:	688a      	ldr	r2, [r1, #8]
 800dbee:	690b      	ldr	r3, [r1, #16]
 800dbf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	bfb8      	it	lt
 800dbf8:	4613      	movlt	r3, r2
 800dbfa:	f8c9 3000 	str.w	r3, [r9]
 800dbfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc02:	4606      	mov	r6, r0
 800dc04:	460c      	mov	r4, r1
 800dc06:	b112      	cbz	r2, 800dc0e <_printf_common+0x2a>
 800dc08:	3301      	adds	r3, #1
 800dc0a:	f8c9 3000 	str.w	r3, [r9]
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	0699      	lsls	r1, r3, #26
 800dc12:	bf42      	ittt	mi
 800dc14:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dc18:	3302      	addmi	r3, #2
 800dc1a:	f8c9 3000 	strmi.w	r3, [r9]
 800dc1e:	6825      	ldr	r5, [r4, #0]
 800dc20:	f015 0506 	ands.w	r5, r5, #6
 800dc24:	d107      	bne.n	800dc36 <_printf_common+0x52>
 800dc26:	f104 0a19 	add.w	sl, r4, #25
 800dc2a:	68e3      	ldr	r3, [r4, #12]
 800dc2c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc30:	1a9b      	subs	r3, r3, r2
 800dc32:	42ab      	cmp	r3, r5
 800dc34:	dc28      	bgt.n	800dc88 <_printf_common+0xa4>
 800dc36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dc3a:	6822      	ldr	r2, [r4, #0]
 800dc3c:	3300      	adds	r3, #0
 800dc3e:	bf18      	it	ne
 800dc40:	2301      	movne	r3, #1
 800dc42:	0692      	lsls	r2, r2, #26
 800dc44:	d42d      	bmi.n	800dca2 <_printf_common+0xbe>
 800dc46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	47c0      	blx	r8
 800dc50:	3001      	adds	r0, #1
 800dc52:	d020      	beq.n	800dc96 <_printf_common+0xb2>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	68e5      	ldr	r5, [r4, #12]
 800dc58:	f8d9 2000 	ldr.w	r2, [r9]
 800dc5c:	f003 0306 	and.w	r3, r3, #6
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	bf08      	it	eq
 800dc64:	1aad      	subeq	r5, r5, r2
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	bf0c      	ite	eq
 800dc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc70:	2500      	movne	r5, #0
 800dc72:	4293      	cmp	r3, r2
 800dc74:	bfc4      	itt	gt
 800dc76:	1a9b      	subgt	r3, r3, r2
 800dc78:	18ed      	addgt	r5, r5, r3
 800dc7a:	f04f 0900 	mov.w	r9, #0
 800dc7e:	341a      	adds	r4, #26
 800dc80:	454d      	cmp	r5, r9
 800dc82:	d11a      	bne.n	800dcba <_printf_common+0xd6>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e008      	b.n	800dc9a <_printf_common+0xb6>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4652      	mov	r2, sl
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	4630      	mov	r0, r6
 800dc90:	47c0      	blx	r8
 800dc92:	3001      	adds	r0, #1
 800dc94:	d103      	bne.n	800dc9e <_printf_common+0xba>
 800dc96:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc9e:	3501      	adds	r5, #1
 800dca0:	e7c3      	b.n	800dc2a <_printf_common+0x46>
 800dca2:	18e1      	adds	r1, r4, r3
 800dca4:	1c5a      	adds	r2, r3, #1
 800dca6:	2030      	movs	r0, #48	; 0x30
 800dca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcac:	4422      	add	r2, r4
 800dcae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcb6:	3302      	adds	r3, #2
 800dcb8:	e7c5      	b.n	800dc46 <_printf_common+0x62>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	47c0      	blx	r8
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d0e6      	beq.n	800dc96 <_printf_common+0xb2>
 800dcc8:	f109 0901 	add.w	r9, r9, #1
 800dccc:	e7d8      	b.n	800dc80 <_printf_common+0x9c>
	...

0800dcd0 <_printf_i>:
 800dcd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dcd8:	460c      	mov	r4, r1
 800dcda:	7e09      	ldrb	r1, [r1, #24]
 800dcdc:	b085      	sub	sp, #20
 800dcde:	296e      	cmp	r1, #110	; 0x6e
 800dce0:	4617      	mov	r7, r2
 800dce2:	4606      	mov	r6, r0
 800dce4:	4698      	mov	r8, r3
 800dce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dce8:	f000 80b3 	beq.w	800de52 <_printf_i+0x182>
 800dcec:	d822      	bhi.n	800dd34 <_printf_i+0x64>
 800dcee:	2963      	cmp	r1, #99	; 0x63
 800dcf0:	d036      	beq.n	800dd60 <_printf_i+0x90>
 800dcf2:	d80a      	bhi.n	800dd0a <_printf_i+0x3a>
 800dcf4:	2900      	cmp	r1, #0
 800dcf6:	f000 80b9 	beq.w	800de6c <_printf_i+0x19c>
 800dcfa:	2958      	cmp	r1, #88	; 0x58
 800dcfc:	f000 8083 	beq.w	800de06 <_printf_i+0x136>
 800dd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dd08:	e032      	b.n	800dd70 <_printf_i+0xa0>
 800dd0a:	2964      	cmp	r1, #100	; 0x64
 800dd0c:	d001      	beq.n	800dd12 <_printf_i+0x42>
 800dd0e:	2969      	cmp	r1, #105	; 0x69
 800dd10:	d1f6      	bne.n	800dd00 <_printf_i+0x30>
 800dd12:	6820      	ldr	r0, [r4, #0]
 800dd14:	6813      	ldr	r3, [r2, #0]
 800dd16:	0605      	lsls	r5, r0, #24
 800dd18:	f103 0104 	add.w	r1, r3, #4
 800dd1c:	d52a      	bpl.n	800dd74 <_printf_i+0xa4>
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6011      	str	r1, [r2, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	da03      	bge.n	800dd2e <_printf_i+0x5e>
 800dd26:	222d      	movs	r2, #45	; 0x2d
 800dd28:	425b      	negs	r3, r3
 800dd2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd2e:	486f      	ldr	r0, [pc, #444]	; (800deec <_printf_i+0x21c>)
 800dd30:	220a      	movs	r2, #10
 800dd32:	e039      	b.n	800dda8 <_printf_i+0xd8>
 800dd34:	2973      	cmp	r1, #115	; 0x73
 800dd36:	f000 809d 	beq.w	800de74 <_printf_i+0x1a4>
 800dd3a:	d808      	bhi.n	800dd4e <_printf_i+0x7e>
 800dd3c:	296f      	cmp	r1, #111	; 0x6f
 800dd3e:	d020      	beq.n	800dd82 <_printf_i+0xb2>
 800dd40:	2970      	cmp	r1, #112	; 0x70
 800dd42:	d1dd      	bne.n	800dd00 <_printf_i+0x30>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	f043 0320 	orr.w	r3, r3, #32
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	e003      	b.n	800dd56 <_printf_i+0x86>
 800dd4e:	2975      	cmp	r1, #117	; 0x75
 800dd50:	d017      	beq.n	800dd82 <_printf_i+0xb2>
 800dd52:	2978      	cmp	r1, #120	; 0x78
 800dd54:	d1d4      	bne.n	800dd00 <_printf_i+0x30>
 800dd56:	2378      	movs	r3, #120	; 0x78
 800dd58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd5c:	4864      	ldr	r0, [pc, #400]	; (800def0 <_printf_i+0x220>)
 800dd5e:	e055      	b.n	800de0c <_printf_i+0x13c>
 800dd60:	6813      	ldr	r3, [r2, #0]
 800dd62:	1d19      	adds	r1, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6011      	str	r1, [r2, #0]
 800dd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd70:	2301      	movs	r3, #1
 800dd72:	e08c      	b.n	800de8e <_printf_i+0x1be>
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6011      	str	r1, [r2, #0]
 800dd78:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd7c:	bf18      	it	ne
 800dd7e:	b21b      	sxthne	r3, r3
 800dd80:	e7cf      	b.n	800dd22 <_printf_i+0x52>
 800dd82:	6813      	ldr	r3, [r2, #0]
 800dd84:	6825      	ldr	r5, [r4, #0]
 800dd86:	1d18      	adds	r0, r3, #4
 800dd88:	6010      	str	r0, [r2, #0]
 800dd8a:	0628      	lsls	r0, r5, #24
 800dd8c:	d501      	bpl.n	800dd92 <_printf_i+0xc2>
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	e002      	b.n	800dd98 <_printf_i+0xc8>
 800dd92:	0668      	lsls	r0, r5, #25
 800dd94:	d5fb      	bpl.n	800dd8e <_printf_i+0xbe>
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	4854      	ldr	r0, [pc, #336]	; (800deec <_printf_i+0x21c>)
 800dd9a:	296f      	cmp	r1, #111	; 0x6f
 800dd9c:	bf14      	ite	ne
 800dd9e:	220a      	movne	r2, #10
 800dda0:	2208      	moveq	r2, #8
 800dda2:	2100      	movs	r1, #0
 800dda4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dda8:	6865      	ldr	r5, [r4, #4]
 800ddaa:	60a5      	str	r5, [r4, #8]
 800ddac:	2d00      	cmp	r5, #0
 800ddae:	f2c0 8095 	blt.w	800dedc <_printf_i+0x20c>
 800ddb2:	6821      	ldr	r1, [r4, #0]
 800ddb4:	f021 0104 	bic.w	r1, r1, #4
 800ddb8:	6021      	str	r1, [r4, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d13d      	bne.n	800de3a <_printf_i+0x16a>
 800ddbe:	2d00      	cmp	r5, #0
 800ddc0:	f040 808e 	bne.w	800dee0 <_printf_i+0x210>
 800ddc4:	4665      	mov	r5, ip
 800ddc6:	2a08      	cmp	r2, #8
 800ddc8:	d10b      	bne.n	800dde2 <_printf_i+0x112>
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	07db      	lsls	r3, r3, #31
 800ddce:	d508      	bpl.n	800dde2 <_printf_i+0x112>
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	6862      	ldr	r2, [r4, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	bfde      	ittt	le
 800ddd8:	2330      	movle	r3, #48	; 0x30
 800ddda:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddde:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dde2:	ebac 0305 	sub.w	r3, ip, r5
 800dde6:	6123      	str	r3, [r4, #16]
 800dde8:	f8cd 8000 	str.w	r8, [sp]
 800ddec:	463b      	mov	r3, r7
 800ddee:	aa03      	add	r2, sp, #12
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7ff fef6 	bl	800dbe4 <_printf_common>
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d14d      	bne.n	800de98 <_printf_i+0x1c8>
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	b005      	add	sp, #20
 800de02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de06:	4839      	ldr	r0, [pc, #228]	; (800deec <_printf_i+0x21c>)
 800de08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800de0c:	6813      	ldr	r3, [r2, #0]
 800de0e:	6821      	ldr	r1, [r4, #0]
 800de10:	1d1d      	adds	r5, r3, #4
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6015      	str	r5, [r2, #0]
 800de16:	060a      	lsls	r2, r1, #24
 800de18:	d50b      	bpl.n	800de32 <_printf_i+0x162>
 800de1a:	07ca      	lsls	r2, r1, #31
 800de1c:	bf44      	itt	mi
 800de1e:	f041 0120 	orrmi.w	r1, r1, #32
 800de22:	6021      	strmi	r1, [r4, #0]
 800de24:	b91b      	cbnz	r3, 800de2e <_printf_i+0x15e>
 800de26:	6822      	ldr	r2, [r4, #0]
 800de28:	f022 0220 	bic.w	r2, r2, #32
 800de2c:	6022      	str	r2, [r4, #0]
 800de2e:	2210      	movs	r2, #16
 800de30:	e7b7      	b.n	800dda2 <_printf_i+0xd2>
 800de32:	064d      	lsls	r5, r1, #25
 800de34:	bf48      	it	mi
 800de36:	b29b      	uxthmi	r3, r3
 800de38:	e7ef      	b.n	800de1a <_printf_i+0x14a>
 800de3a:	4665      	mov	r5, ip
 800de3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800de40:	fb02 3311 	mls	r3, r2, r1, r3
 800de44:	5cc3      	ldrb	r3, [r0, r3]
 800de46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800de4a:	460b      	mov	r3, r1
 800de4c:	2900      	cmp	r1, #0
 800de4e:	d1f5      	bne.n	800de3c <_printf_i+0x16c>
 800de50:	e7b9      	b.n	800ddc6 <_printf_i+0xf6>
 800de52:	6813      	ldr	r3, [r2, #0]
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	6961      	ldr	r1, [r4, #20]
 800de58:	1d18      	adds	r0, r3, #4
 800de5a:	6010      	str	r0, [r2, #0]
 800de5c:	0628      	lsls	r0, r5, #24
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	d501      	bpl.n	800de66 <_printf_i+0x196>
 800de62:	6019      	str	r1, [r3, #0]
 800de64:	e002      	b.n	800de6c <_printf_i+0x19c>
 800de66:	066a      	lsls	r2, r5, #25
 800de68:	d5fb      	bpl.n	800de62 <_printf_i+0x192>
 800de6a:	8019      	strh	r1, [r3, #0]
 800de6c:	2300      	movs	r3, #0
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	4665      	mov	r5, ip
 800de72:	e7b9      	b.n	800dde8 <_printf_i+0x118>
 800de74:	6813      	ldr	r3, [r2, #0]
 800de76:	1d19      	adds	r1, r3, #4
 800de78:	6011      	str	r1, [r2, #0]
 800de7a:	681d      	ldr	r5, [r3, #0]
 800de7c:	6862      	ldr	r2, [r4, #4]
 800de7e:	2100      	movs	r1, #0
 800de80:	4628      	mov	r0, r5
 800de82:	f7f2 f9c5 	bl	8000210 <memchr>
 800de86:	b108      	cbz	r0, 800de8c <_printf_i+0x1bc>
 800de88:	1b40      	subs	r0, r0, r5
 800de8a:	6060      	str	r0, [r4, #4]
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	2300      	movs	r3, #0
 800de92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de96:	e7a7      	b.n	800dde8 <_printf_i+0x118>
 800de98:	6923      	ldr	r3, [r4, #16]
 800de9a:	462a      	mov	r2, r5
 800de9c:	4639      	mov	r1, r7
 800de9e:	4630      	mov	r0, r6
 800dea0:	47c0      	blx	r8
 800dea2:	3001      	adds	r0, #1
 800dea4:	d0aa      	beq.n	800ddfc <_printf_i+0x12c>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	079b      	lsls	r3, r3, #30
 800deaa:	d413      	bmi.n	800ded4 <_printf_i+0x204>
 800deac:	68e0      	ldr	r0, [r4, #12]
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	4298      	cmp	r0, r3
 800deb2:	bfb8      	it	lt
 800deb4:	4618      	movlt	r0, r3
 800deb6:	e7a3      	b.n	800de00 <_printf_i+0x130>
 800deb8:	2301      	movs	r3, #1
 800deba:	464a      	mov	r2, r9
 800debc:	4639      	mov	r1, r7
 800debe:	4630      	mov	r0, r6
 800dec0:	47c0      	blx	r8
 800dec2:	3001      	adds	r0, #1
 800dec4:	d09a      	beq.n	800ddfc <_printf_i+0x12c>
 800dec6:	3501      	adds	r5, #1
 800dec8:	68e3      	ldr	r3, [r4, #12]
 800deca:	9a03      	ldr	r2, [sp, #12]
 800decc:	1a9b      	subs	r3, r3, r2
 800dece:	42ab      	cmp	r3, r5
 800ded0:	dcf2      	bgt.n	800deb8 <_printf_i+0x1e8>
 800ded2:	e7eb      	b.n	800deac <_printf_i+0x1dc>
 800ded4:	2500      	movs	r5, #0
 800ded6:	f104 0919 	add.w	r9, r4, #25
 800deda:	e7f5      	b.n	800dec8 <_printf_i+0x1f8>
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1ac      	bne.n	800de3a <_printf_i+0x16a>
 800dee0:	7803      	ldrb	r3, [r0, #0]
 800dee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800deea:	e76c      	b.n	800ddc6 <_printf_i+0xf6>
 800deec:	0800fcb9 	.word	0x0800fcb9
 800def0:	0800fcca 	.word	0x0800fcca

0800def4 <memmove>:
 800def4:	4288      	cmp	r0, r1
 800def6:	b510      	push	{r4, lr}
 800def8:	eb01 0302 	add.w	r3, r1, r2
 800defc:	d807      	bhi.n	800df0e <memmove+0x1a>
 800defe:	1e42      	subs	r2, r0, #1
 800df00:	4299      	cmp	r1, r3
 800df02:	d00a      	beq.n	800df1a <memmove+0x26>
 800df04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df08:	f802 4f01 	strb.w	r4, [r2, #1]!
 800df0c:	e7f8      	b.n	800df00 <memmove+0xc>
 800df0e:	4283      	cmp	r3, r0
 800df10:	d9f5      	bls.n	800defe <memmove+0xa>
 800df12:	1881      	adds	r1, r0, r2
 800df14:	1ad2      	subs	r2, r2, r3
 800df16:	42d3      	cmn	r3, r2
 800df18:	d100      	bne.n	800df1c <memmove+0x28>
 800df1a:	bd10      	pop	{r4, pc}
 800df1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800df24:	e7f7      	b.n	800df16 <memmove+0x22>
	...

0800df28 <_free_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4605      	mov	r5, r0
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d045      	beq.n	800dfbc <_free_r+0x94>
 800df30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df34:	1f0c      	subs	r4, r1, #4
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfb8      	it	lt
 800df3a:	18e4      	addlt	r4, r4, r3
 800df3c:	f000 f8d2 	bl	800e0e4 <__malloc_lock>
 800df40:	4a1f      	ldr	r2, [pc, #124]	; (800dfc0 <_free_r+0x98>)
 800df42:	6813      	ldr	r3, [r2, #0]
 800df44:	4610      	mov	r0, r2
 800df46:	b933      	cbnz	r3, 800df56 <_free_r+0x2e>
 800df48:	6063      	str	r3, [r4, #4]
 800df4a:	6014      	str	r4, [r2, #0]
 800df4c:	4628      	mov	r0, r5
 800df4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df52:	f000 b8c8 	b.w	800e0e6 <__malloc_unlock>
 800df56:	42a3      	cmp	r3, r4
 800df58:	d90c      	bls.n	800df74 <_free_r+0x4c>
 800df5a:	6821      	ldr	r1, [r4, #0]
 800df5c:	1862      	adds	r2, r4, r1
 800df5e:	4293      	cmp	r3, r2
 800df60:	bf04      	itt	eq
 800df62:	681a      	ldreq	r2, [r3, #0]
 800df64:	685b      	ldreq	r3, [r3, #4]
 800df66:	6063      	str	r3, [r4, #4]
 800df68:	bf04      	itt	eq
 800df6a:	1852      	addeq	r2, r2, r1
 800df6c:	6022      	streq	r2, [r4, #0]
 800df6e:	6004      	str	r4, [r0, #0]
 800df70:	e7ec      	b.n	800df4c <_free_r+0x24>
 800df72:	4613      	mov	r3, r2
 800df74:	685a      	ldr	r2, [r3, #4]
 800df76:	b10a      	cbz	r2, 800df7c <_free_r+0x54>
 800df78:	42a2      	cmp	r2, r4
 800df7a:	d9fa      	bls.n	800df72 <_free_r+0x4a>
 800df7c:	6819      	ldr	r1, [r3, #0]
 800df7e:	1858      	adds	r0, r3, r1
 800df80:	42a0      	cmp	r0, r4
 800df82:	d10b      	bne.n	800df9c <_free_r+0x74>
 800df84:	6820      	ldr	r0, [r4, #0]
 800df86:	4401      	add	r1, r0
 800df88:	1858      	adds	r0, r3, r1
 800df8a:	4282      	cmp	r2, r0
 800df8c:	6019      	str	r1, [r3, #0]
 800df8e:	d1dd      	bne.n	800df4c <_free_r+0x24>
 800df90:	6810      	ldr	r0, [r2, #0]
 800df92:	6852      	ldr	r2, [r2, #4]
 800df94:	605a      	str	r2, [r3, #4]
 800df96:	4401      	add	r1, r0
 800df98:	6019      	str	r1, [r3, #0]
 800df9a:	e7d7      	b.n	800df4c <_free_r+0x24>
 800df9c:	d902      	bls.n	800dfa4 <_free_r+0x7c>
 800df9e:	230c      	movs	r3, #12
 800dfa0:	602b      	str	r3, [r5, #0]
 800dfa2:	e7d3      	b.n	800df4c <_free_r+0x24>
 800dfa4:	6820      	ldr	r0, [r4, #0]
 800dfa6:	1821      	adds	r1, r4, r0
 800dfa8:	428a      	cmp	r2, r1
 800dfaa:	bf04      	itt	eq
 800dfac:	6811      	ldreq	r1, [r2, #0]
 800dfae:	6852      	ldreq	r2, [r2, #4]
 800dfb0:	6062      	str	r2, [r4, #4]
 800dfb2:	bf04      	itt	eq
 800dfb4:	1809      	addeq	r1, r1, r0
 800dfb6:	6021      	streq	r1, [r4, #0]
 800dfb8:	605c      	str	r4, [r3, #4]
 800dfba:	e7c7      	b.n	800df4c <_free_r+0x24>
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	200086bc 	.word	0x200086bc

0800dfc4 <_malloc_r>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	1ccd      	adds	r5, r1, #3
 800dfc8:	f025 0503 	bic.w	r5, r5, #3
 800dfcc:	3508      	adds	r5, #8
 800dfce:	2d0c      	cmp	r5, #12
 800dfd0:	bf38      	it	cc
 800dfd2:	250c      	movcc	r5, #12
 800dfd4:	2d00      	cmp	r5, #0
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	db01      	blt.n	800dfde <_malloc_r+0x1a>
 800dfda:	42a9      	cmp	r1, r5
 800dfdc:	d903      	bls.n	800dfe6 <_malloc_r+0x22>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	6033      	str	r3, [r6, #0]
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	bd70      	pop	{r4, r5, r6, pc}
 800dfe6:	f000 f87d 	bl	800e0e4 <__malloc_lock>
 800dfea:	4a21      	ldr	r2, [pc, #132]	; (800e070 <_malloc_r+0xac>)
 800dfec:	6814      	ldr	r4, [r2, #0]
 800dfee:	4621      	mov	r1, r4
 800dff0:	b991      	cbnz	r1, 800e018 <_malloc_r+0x54>
 800dff2:	4c20      	ldr	r4, [pc, #128]	; (800e074 <_malloc_r+0xb0>)
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	b91b      	cbnz	r3, 800e000 <_malloc_r+0x3c>
 800dff8:	4630      	mov	r0, r6
 800dffa:	f000 f863 	bl	800e0c4 <_sbrk_r>
 800dffe:	6020      	str	r0, [r4, #0]
 800e000:	4629      	mov	r1, r5
 800e002:	4630      	mov	r0, r6
 800e004:	f000 f85e 	bl	800e0c4 <_sbrk_r>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d124      	bne.n	800e056 <_malloc_r+0x92>
 800e00c:	230c      	movs	r3, #12
 800e00e:	6033      	str	r3, [r6, #0]
 800e010:	4630      	mov	r0, r6
 800e012:	f000 f868 	bl	800e0e6 <__malloc_unlock>
 800e016:	e7e4      	b.n	800dfe2 <_malloc_r+0x1e>
 800e018:	680b      	ldr	r3, [r1, #0]
 800e01a:	1b5b      	subs	r3, r3, r5
 800e01c:	d418      	bmi.n	800e050 <_malloc_r+0x8c>
 800e01e:	2b0b      	cmp	r3, #11
 800e020:	d90f      	bls.n	800e042 <_malloc_r+0x7e>
 800e022:	600b      	str	r3, [r1, #0]
 800e024:	50cd      	str	r5, [r1, r3]
 800e026:	18cc      	adds	r4, r1, r3
 800e028:	4630      	mov	r0, r6
 800e02a:	f000 f85c 	bl	800e0e6 <__malloc_unlock>
 800e02e:	f104 000b 	add.w	r0, r4, #11
 800e032:	1d23      	adds	r3, r4, #4
 800e034:	f020 0007 	bic.w	r0, r0, #7
 800e038:	1ac3      	subs	r3, r0, r3
 800e03a:	d0d3      	beq.n	800dfe4 <_malloc_r+0x20>
 800e03c:	425a      	negs	r2, r3
 800e03e:	50e2      	str	r2, [r4, r3]
 800e040:	e7d0      	b.n	800dfe4 <_malloc_r+0x20>
 800e042:	428c      	cmp	r4, r1
 800e044:	684b      	ldr	r3, [r1, #4]
 800e046:	bf16      	itet	ne
 800e048:	6063      	strne	r3, [r4, #4]
 800e04a:	6013      	streq	r3, [r2, #0]
 800e04c:	460c      	movne	r4, r1
 800e04e:	e7eb      	b.n	800e028 <_malloc_r+0x64>
 800e050:	460c      	mov	r4, r1
 800e052:	6849      	ldr	r1, [r1, #4]
 800e054:	e7cc      	b.n	800dff0 <_malloc_r+0x2c>
 800e056:	1cc4      	adds	r4, r0, #3
 800e058:	f024 0403 	bic.w	r4, r4, #3
 800e05c:	42a0      	cmp	r0, r4
 800e05e:	d005      	beq.n	800e06c <_malloc_r+0xa8>
 800e060:	1a21      	subs	r1, r4, r0
 800e062:	4630      	mov	r0, r6
 800e064:	f000 f82e 	bl	800e0c4 <_sbrk_r>
 800e068:	3001      	adds	r0, #1
 800e06a:	d0cf      	beq.n	800e00c <_malloc_r+0x48>
 800e06c:	6025      	str	r5, [r4, #0]
 800e06e:	e7db      	b.n	800e028 <_malloc_r+0x64>
 800e070:	200086bc 	.word	0x200086bc
 800e074:	200086c0 	.word	0x200086c0

0800e078 <_realloc_r>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	4607      	mov	r7, r0
 800e07c:	4614      	mov	r4, r2
 800e07e:	460e      	mov	r6, r1
 800e080:	b921      	cbnz	r1, 800e08c <_realloc_r+0x14>
 800e082:	4611      	mov	r1, r2
 800e084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e088:	f7ff bf9c 	b.w	800dfc4 <_malloc_r>
 800e08c:	b922      	cbnz	r2, 800e098 <_realloc_r+0x20>
 800e08e:	f7ff ff4b 	bl	800df28 <_free_r>
 800e092:	4625      	mov	r5, r4
 800e094:	4628      	mov	r0, r5
 800e096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e098:	f000 f826 	bl	800e0e8 <_malloc_usable_size_r>
 800e09c:	42a0      	cmp	r0, r4
 800e09e:	d20f      	bcs.n	800e0c0 <_realloc_r+0x48>
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f7ff ff8e 	bl	800dfc4 <_malloc_r>
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0f2      	beq.n	800e094 <_realloc_r+0x1c>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	f7ff fc11 	bl	800d8d8 <memcpy>
 800e0b6:	4631      	mov	r1, r6
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f7ff ff35 	bl	800df28 <_free_r>
 800e0be:	e7e9      	b.n	800e094 <_realloc_r+0x1c>
 800e0c0:	4635      	mov	r5, r6
 800e0c2:	e7e7      	b.n	800e094 <_realloc_r+0x1c>

0800e0c4 <_sbrk_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4c06      	ldr	r4, [pc, #24]	; (800e0e0 <_sbrk_r+0x1c>)
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	f7f6 fac0 	bl	8004654 <_sbrk>
 800e0d4:	1c43      	adds	r3, r0, #1
 800e0d6:	d102      	bne.n	800e0de <_sbrk_r+0x1a>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	b103      	cbz	r3, 800e0de <_sbrk_r+0x1a>
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	bd38      	pop	{r3, r4, r5, pc}
 800e0e0:	20008d9c 	.word	0x20008d9c

0800e0e4 <__malloc_lock>:
 800e0e4:	4770      	bx	lr

0800e0e6 <__malloc_unlock>:
 800e0e6:	4770      	bx	lr

0800e0e8 <_malloc_usable_size_r>:
 800e0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ec:	1f18      	subs	r0, r3, #4
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	bfbc      	itt	lt
 800e0f2:	580b      	ldrlt	r3, [r1, r0]
 800e0f4:	18c0      	addlt	r0, r0, r3
 800e0f6:	4770      	bx	lr

0800e0f8 <_init>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	bf00      	nop
 800e0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fe:	bc08      	pop	{r3}
 800e100:	469e      	mov	lr, r3
 800e102:	4770      	bx	lr

0800e104 <_fini>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	bf00      	nop
 800e108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10a:	bc08      	pop	{r3}
 800e10c:	469e      	mov	lr, r3
 800e10e:	4770      	bx	lr
