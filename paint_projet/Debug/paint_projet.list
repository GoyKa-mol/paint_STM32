
paint_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         0000df40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bcc  0800e110  0800e110  0001e110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcdc  0800fcdc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcdc  0800fcdc  0001fcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fce4  0800fce4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fce4  0800fce4  0001fce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fce8  0800fce8  0001fce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800fcec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cf8  200000a8  0800fd94  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008da0  0800fd94  00028da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7f6  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005535  00000000  00000000  0004c8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025d8  00000000  00000000  00051e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002340  00000000  00000000  000543e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e27c  00000000  00000000  00056720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f3df  00000000  00000000  0008499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001149d1  00000000  00000000  000a3d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b874c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a324  00000000  00000000  001b87c8  2**2
=======
  1 .text         0000f8b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002168  0800fa80  0800fa80  0001fa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011be8  08011be8  000310a4  2**0
                  CONTENTS
  4 .ARM          00000008  08011be8  08011be8  00021be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bf0  08011bf0  000310a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bf0  08011bf0  00021bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bf4  08011bf4  00021bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a4  20000000  08011bf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d30  200010a4  08012c9c  000310a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009dd4  08012c9c  00039dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000310a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d208  00000000  00000000  000310d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005592  00000000  00000000  0005e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002658  00000000  00000000  00063870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023c0  00000000  00000000  00065ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e296  00000000  00000000  00068288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f913  00000000  00000000  0009651e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114bc0  00000000  00000000  000b5e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ca9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a570  00000000  00000000  001caa6c  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
<<<<<<< Updated upstream
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e0f8 	.word	0x0800e0f8
=======
 80001e8:	200010a4 	.word	0x200010a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fa68 	.word	0x0800fa68
>>>>>>> Stashed changes

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800e0f8 	.word	0x0800e0f8
=======
 8000208:	200010a8 	.word	0x200010a8
 800020c:	0800fa68 	.word	0x0800fa68
>>>>>>> Stashed changes

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
<<<<<<< Updated upstream
 8000610:	200000c4 	.word	0x200000c4
 8000614:	2000011c 	.word	0x2000011c
=======
 8000610:	200010c0 	.word	0x200010c0
 8000614:	20001118 	.word	0x20001118
>>>>>>> Stashed changes

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
<<<<<<< Updated upstream
 8000624:	f001 ff18 	bl	8002458 <TS_IO_Delay>
=======
 8000624:	f003 fa5a 	bl	8003adc <TS_IO_Delay>
>>>>>>> Stashed changes

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000672:	f001 fed3 	bl	800241c <TS_IO_Read>
=======
 8000672:	f003 fa15 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 80006de:	f001 fe9d 	bl	800241c <TS_IO_Read>
=======
 80006de:	f003 f9df 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
 8000718:	2000031c 	.word	0x2000031c
=======
 8000718:	20001318 	.word	0x20001318
>>>>>>> Stashed changes

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000844:	f001 fdea 	bl	800241c <TS_IO_Read>
=======
 8000844:	f003 f92c 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000860:	f001 fddc 	bl	800241c <TS_IO_Read>
=======
 8000860:	f003 f91e 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000896:	f001 fdc1 	bl	800241c <TS_IO_Read>
=======
 8000896:	f003 f903 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 80008b2:	f001 fdb3 	bl	800241c <TS_IO_Read>
=======
 80008b2:	f003 f8f5 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
<<<<<<< Updated upstream
 80008f4:	2000031c 	.word	0x2000031c
 80008f8:	20000320 	.word	0x20000320
=======
 80008f4:	20001318 	.word	0x20001318
 80008f8:	2000131c 	.word	0x2000131c
>>>>>>> Stashed changes

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000918:	f001 fd66 	bl	80023e8 <TS_IO_Write>
=======
 8000918:	f003 f8a8 	bl	8003a6c <TS_IO_Write>
>>>>>>> Stashed changes
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000940:	f001 fd52 	bl	80023e8 <TS_IO_Write>
=======
 8000940:	f003 f894 	bl	8003a6c <TS_IO_Write>
>>>>>>> Stashed changes
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000992:	f001 fd43 	bl	800241c <TS_IO_Read>
=======
 8000992:	f003 f885 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
      break;
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
      break;
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
      break;
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
      break;
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000aa8:	f001 fcb8 	bl	800241c <TS_IO_Read>
=======
 8000aa8:	f002 fffa 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000ac8:	f001 fca8 	bl	800241c <TS_IO_Read>
=======
 8000ac8:	f002 ffea 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
<<<<<<< Updated upstream
 8000ae4:	f001 fc9a 	bl	800241c <TS_IO_Read>
=======
 8000ae4:	f002 ffdc 	bl	8003aa0 <TS_IO_Read>
>>>>>>> Stashed changes
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
<<<<<<< Updated upstream
 8000b04:	2000031c 	.word	0x2000031c
=======
 8000b04:	20001318 	.word	0x20001318
>>>>>>> Stashed changes

08000b08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
<<<<<<< Updated upstream
 8000b1c:	2000031c 	.word	0x2000031c
=======
 8000b1c:	20001318 	.word	0x20001318
>>>>>>> Stashed changes

08000b20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
<<<<<<< Updated upstream
 8000b2e:	f001 fc51 	bl	80023d4 <TS_IO_Init>
=======
 8000b2e:	f002 ff93 	bl	8003a58 <TS_IO_Init>
>>>>>>> Stashed changes

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
<<<<<<< Updated upstream
 8000b3c:	2000031c 	.word	0x2000031c
=======
 8000b3c:	20001318 	.word	0x20001318
>>>>>>> Stashed changes

08000b40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0ac      	sub	sp, #176	; 0xb0
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
<<<<<<< Updated upstream
 	char text[50]={};
 8000b62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00c febf 	bl	800d8ee <memset>
=======
    char text[50]={};
 8000b62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00e fb77 	bl	800f25e <memset>
>>>>>>> Stashed changes
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000b86:	f003 fdda 	bl	800473e <HAL_Init>
=======
 8000b8a:	f005 f9ec 	bl	8005f66 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f96f 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f001 f809 	bl	8001ba4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b92:	f000 fa6d 	bl	8001070 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b96:	f000 fb19 	bl	80011cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b9a:	f000 fb57 	bl	800124c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b9e:	f000 fb95 	bl	80012cc <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba2:	f000 fc15 	bl	80013d0 <MX_RTC_Init>
  MX_SPI2_Init();
 8000ba6:	f000 fcb9 	bl	800151c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000baa:	f000 fcf5 	bl	8001598 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bae:	f000 fd47 	bl	8001640 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb2:	f000 fd93 	bl	80016dc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bb6:	f000 fe1f 	bl	80017f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bba:	f000 fe6b 	bl	8001894 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 ff43 	bl	8001a48 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc2:	f000 ff71 	bl	8001aa8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bc6:	f000 fa01 	bl	8000fcc <MX_ADC1_Init>
  MX_DAC_Init();
 8000bca:	f000 faa3 	bl	8001114 <MX_DAC_Init>
  MX_UART7_Init();
 8000bce:	f000 ff0b 	bl	80019e8 <MX_UART7_Init>
  MX_FMC_Init();
 8000bd2:	f000 ff99 	bl	8001b08 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000bd6:	f000 fac7 	bl	8001168 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
<<<<<<< Updated upstream
 8000bda:	f001 fc49 	bl	8002470 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bde:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be2:	2000      	movs	r0, #0
 8000be4:	f001 fcdc 	bl	80025a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000be8:	f001 fcb2 	bl	8002550 <BSP_LCD_GetXSize>
 8000bec:	4604      	mov	r4, r0
 8000bee:	f001 fcc3 	bl	8002578 <BSP_LCD_GetYSize>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	fb03 f304 	mul.w	r3, r3, r4
 8000bf8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	f001 fccd 	bl	80025a0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c06:	f002 f92d 	bl	8002e64 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f001 fd28 	bl	8002660 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f001 fda8 	bl	8002768 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font24);
 8000c18:	4881      	ldr	r0, [pc, #516]	; (8000e20 <main+0x2c4>)
 8000c1a:	f001 fd75 	bl	8002708 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000c1e:	4881      	ldr	r0, [pc, #516]	; (8000e24 <main+0x2c8>)
 8000c20:	f001 fd40 	bl	80026a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f001 fd54 	bl	80026d4 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c2c:	f001 fc90 	bl	8002550 <BSP_LCD_GetXSize>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b29c      	uxth	r4, r3
 8000c34:	f001 fca0 	bl	8002578 <BSP_LCD_GetYSize>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f002 fcde 	bl	8003600 <BSP_TS_Init>
  HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4978      	ldr	r1, [pc, #480]	; (8000e28 <main+0x2cc>)
 8000c48:	4878      	ldr	r0, [pc, #480]	; (8000e2c <main+0x2d0>)
 8000c4a:	f009 fbd7 	bl	800a3fc <HAL_UART_Receive_IT>
=======
 8000bde:	f002 ff89 	bl	8003af4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000be2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be6:	2000      	movs	r0, #0
 8000be8:	f003 f81c 	bl	8003c24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bec:	f002 fff2 	bl	8003bd4 <BSP_LCD_GetXSize>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	f003 f803 	bl	8003bfc <BSP_LCD_GetYSize>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	fb03 f304 	mul.w	r3, r3, r4
 8000bfc:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4619      	mov	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f003 f80d 	bl	8003c24 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c0a:	f003 fd37 	bl	800467c <BSP_LCD_DisplayOn>
  BSP_LCD_SetFont(&Font12);
 8000c0e:	48a7      	ldr	r0, [pc, #668]	; (8000eac <main+0x350>)
 8000c10:	f003 f8aa 	bl	8003d68 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f003 f88c 	bl	8003d34 <BSP_LCD_SetBackColor>
  BSP_LCD_SelectLayer(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f003 f861 	bl	8003ce4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f003 f8d0 	bl	8003dc8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c2c:	f003 f86a 	bl	8003d04 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 245, 480, 5);
 8000c30:	2305      	movs	r3, #5
 8000c32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c36:	21f5      	movs	r1, #245	; 0xf5
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f003 fc05 	bl	8004448 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(480-5-taille_menu, 0, 5, 245);
 8000c3e:	23f5      	movs	r3, #245	; 0xf5
 8000c40:	2205      	movs	r2, #5
 8000c42:	2100      	movs	r1, #0
 8000c44:	f240 10a9 	movw	r0, #425	; 0x1a9
 8000c48:	f003 fbfe 	bl	8004448 <BSP_LCD_FillRect>
  BSP_LCD_SelectLayer(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 f849 	bl	8003ce4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	f003 f8b7 	bl	8003dc8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c5a:	4895      	ldr	r0, [pc, #596]	; (8000eb0 <main+0x354>)
 8000c5c:	f003 f852 	bl	8003d04 <BSP_LCD_SetTextColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c60:	f002 ffb8 	bl	8003bd4 <BSP_LCD_GetXSize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29c      	uxth	r4, r3
 8000c68:	f002 ffc8 	bl	8003bfc <BSP_LCD_GetYSize>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4620      	mov	r0, r4
 8000c74:	f004 f8d0 	bl	8004e18 <BSP_TS_Init>
  HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	498e      	ldr	r1, [pc, #568]	; (8000eb4 <main+0x358>)
 8000c7c:	488e      	ldr	r0, [pc, #568]	; (8000eb8 <main+0x35c>)
 8000c7e:	f00a ff21 	bl	800bac4 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c52:	2300      	movs	r3, #0
 8000c54:	653b      	str	r3, [r7, #80]	; 0x50
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
<<<<<<< Updated upstream
 8000c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00a fc47 	bl	800b4ee <osMutexCreate>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b73      	ldr	r3, [pc, #460]	; (8000e30 <main+0x2d4>)
 8000c64:	601a      	str	r2, [r3, #0]
=======
 8000c8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00b ff8f 	bl	800cbb6 <osMutexCreate>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	4b88      	ldr	r3, [pc, #544]	; (8000ebc <main+0x360>)
 8000c9c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueUART */
  osMessageQDef(myQueueUART, 16, uint8_t);
 8000c66:	4b73      	ldr	r3, [pc, #460]	; (8000e34 <main+0x2d8>)
 8000c68:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueUARTHandle = osMessageCreate(osMessageQ(myQueueUART), NULL);
<<<<<<< Updated upstream
 8000c72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00a fc50 	bl	800b51e <osMessageCreate>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	4b6d      	ldr	r3, [pc, #436]	; (8000e38 <main+0x2dc>)
 8000c82:	601a      	str	r2, [r3, #0]
=======
 8000caa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00b ff98 	bl	800cbe6 <osMessageCreate>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b82      	ldr	r3, [pc, #520]	; (8000ec4 <main+0x368>)
 8000cba:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c84:	4b6d      	ldr	r3, [pc, #436]	; (8000e3c <main+0x2e0>)
 8000c86:	f107 0420 	add.w	r4, r7, #32
 8000c8a:	461d      	mov	r5, r3
 8000c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
<<<<<<< Updated upstream
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00a fbc5 	bl	800b42e <osThreadCreate>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <main+0x2e4>)
 8000ca8:	601a      	str	r2, [r3, #0]
=======
 8000cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00b ff0d 	bl	800caf6 <osThreadCreate>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <main+0x370>)
 8000ce0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* definition and creation of Mode */
  osThreadDef(Mode, StartMode, osPriorityIdle, 0, 512);
 8000caa:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <main+0x2e8>)
 8000cac:	1d3c      	adds	r4, r7, #4
 8000cae:	461d      	mov	r5, r3
 8000cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModeHandle = osThreadCreate(osThread(Mode), NULL);
<<<<<<< Updated upstream
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f00a fbb4 	bl	800b42e <osThreadCreate>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	4b5f      	ldr	r3, [pc, #380]	; (8000e48 <main+0x2ec>)
 8000cca:	601a      	str	r2, [r3, #0]
=======
 8000cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fefa 	bl	800caf6 <osThreadCreate>
 8000d02:	4602      	mov	r2, r0
 8000d04:	4b73      	ldr	r3, [pc, #460]	; (8000ed4 <main+0x378>)
 8000d06:	601a      	str	r2, [r3, #0]

  /* definition and creation of Peindre */
  osThreadDef(Peindre, StartPeindre, osPriorityLow, 0, 1024);
 8000d08:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <main+0x37c>)
 8000d0a:	f107 0420 	add.w	r4, r7, #32
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeindreHandle = osThreadCreate(osThread(Peindre), NULL);
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00b fee7 	bl	800caf6 <osThreadCreate>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <main+0x380>)
 8000d2c:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskEtat */
  osThreadDef(TaskEtat, StartTaskEtat, osPriorityNormal, 0, 1024);
 8000d2e:	4b6c      	ldr	r3, [pc, #432]	; (8000ee0 <main+0x384>)
 8000d30:	1d3c      	adds	r4, r7, #4
 8000d32:	461d      	mov	r5, r3
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEtatHandle = osThreadCreate(osThread(TaskEtat), NULL);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00b fed6 	bl	800caf6 <osThreadCreate>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <main+0x388>)
 8000d4e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< Updated upstream
 8000ccc:	f00a fba8 	bl	800b420 <osKernelStart>
=======
 8000d50:	f00b feca 	bl	800cae8 <osKernelStart>
>>>>>>> Stashed changes
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
<<<<<<< Updated upstream
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	485d      	ldr	r0, [pc, #372]	; (8000e4c <main+0x2f0>)
 8000cd6:	f005 fa29 	bl	800612c <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	485b      	ldr	r0, [pc, #364]	; (8000e50 <main+0x2f4>)
 8000ce4:	f005 fa3a 	bl	800615c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	4857      	ldr	r0, [pc, #348]	; (8000e4c <main+0x2f0>)
 8000cee:	f005 fa1d 	bl	800612c <HAL_GPIO_ReadPin>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4856      	ldr	r0, [pc, #344]	; (8000e54 <main+0x2f8>)
 8000cfa:	f005 fa2f 	bl	800615c <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	4852      	ldr	r0, [pc, #328]	; (8000e4c <main+0x2f0>)
 8000d04:	f005 fa12 	bl	800612c <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d10:	4951      	ldr	r1, [pc, #324]	; (8000e58 <main+0x2fc>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00c fdf4 	bl	800d900 <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f001 fe52 	bl	80029c8 <BSP_LCD_DisplayStringAtLine>
=======
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4863      	ldr	r0, [pc, #396]	; (8000ee8 <main+0x38c>)
 8000d5a:	f006 fdfb 	bl	8007954 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d66:	4861      	ldr	r0, [pc, #388]	; (8000eec <main+0x390>)
 8000d68:	f006 fe0c 	bl	8007984 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	485d      	ldr	r0, [pc, #372]	; (8000ee8 <main+0x38c>)
 8000d72:	f006 fdef 	bl	8007954 <HAL_GPIO_ReadPin>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	485c      	ldr	r0, [pc, #368]	; (8000ef0 <main+0x394>)
 8000d7e:	f006 fe01 	bl	8007984 <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d86:	4858      	ldr	r0, [pc, #352]	; (8000ee8 <main+0x38c>)
 8000d88:	f006 fde4 	bl	8007954 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d94:	4957      	ldr	r1, [pc, #348]	; (8000ef4 <main+0x398>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00e fa6a 	bl	800f270 <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da0:	4619      	mov	r1, r3
 8000da2:	2005      	movs	r0, #5
 8000da4:	f003 f940 	bl	8004028 <BSP_LCD_DisplayStringAtLine>
>>>>>>> Stashed changes

	  sConfig.Channel = ADC_CHANNEL_6;
 8000d24:	2306      	movs	r3, #6
 8000d26:	657b      	str	r3, [r7, #84]	; 0x54
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
<<<<<<< Updated upstream
 8000d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	484b      	ldr	r0, [pc, #300]	; (8000e5c <main+0x300>)
 8000d30:	f003 feea 	bl	8004b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d34:	4849      	ldr	r0, [pc, #292]	; (8000e5c <main+0x300>)
 8000d36:	f003 fd95 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d3a:	bf00      	nop
 8000d3c:	2164      	movs	r1, #100	; 0x64
 8000d3e:	4847      	ldr	r0, [pc, #284]	; (8000e5c <main+0x300>)
 8000d40:	f003 fe50 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f8      	bne.n	8000d3c <main+0x1e0>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000d4a:	4844      	ldr	r0, [pc, #272]	; (8000e5c <main+0x300>)
 8000d4c:	f003 fece 	bl	8004aec <HAL_ADC_GetValue>
 8000d50:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
=======
 8000dae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4850      	ldr	r0, [pc, #320]	; (8000ef8 <main+0x39c>)
 8000db6:	f005 fabb 	bl	8006330 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dba:	484f      	ldr	r0, [pc, #316]	; (8000ef8 <main+0x39c>)
 8000dbc:	f005 f966 	bl	800608c <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc0:	bf00      	nop
 8000dc2:	2164      	movs	r1, #100	; 0x64
 8000dc4:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <main+0x39c>)
 8000dc6:	f005 fa21 	bl	800620c <HAL_ADC_PollForConversion>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f8      	bne.n	8000dc2 <main+0x266>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <main+0x39c>)
 8000dd2:	f005 fa9f 	bl	8006314 <HAL_ADC_GetValue>
 8000dd6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
>>>>>>> Stashed changes

	  sConfig.Channel = ADC_CHANNEL_7;
 8000d54:	2307      	movs	r3, #7
 8000d56:	657b      	str	r3, [r7, #84]	; 0x54
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
<<<<<<< Updated upstream
 8000d58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	483f      	ldr	r0, [pc, #252]	; (8000e5c <main+0x300>)
 8000d60:	f003 fed2 	bl	8004b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d64:	483d      	ldr	r0, [pc, #244]	; (8000e5c <main+0x300>)
 8000d66:	f003 fd7d 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d6a:	bf00      	nop
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	483b      	ldr	r0, [pc, #236]	; (8000e5c <main+0x300>)
 8000d70:	f003 fe38 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f8      	bne.n	8000d6c <main+0x210>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000d7a:	4838      	ldr	r0, [pc, #224]	; (8000e5c <main+0x300>)
 8000d7c:	f003 feb6 	bl	8004aec <HAL_ADC_GetValue>
 8000d80:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
=======
 8000de0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4844      	ldr	r0, [pc, #272]	; (8000ef8 <main+0x39c>)
 8000de8:	f005 faa2 	bl	8006330 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dec:	4842      	ldr	r0, [pc, #264]	; (8000ef8 <main+0x39c>)
 8000dee:	f005 f94d 	bl	800608c <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000df2:	bf00      	nop
 8000df4:	2164      	movs	r1, #100	; 0x64
 8000df6:	4840      	ldr	r0, [pc, #256]	; (8000ef8 <main+0x39c>)
 8000df8:	f005 fa08 	bl	800620c <HAL_ADC_PollForConversion>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f8      	bne.n	8000df4 <main+0x298>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000e02:	483d      	ldr	r0, [pc, #244]	; (8000ef8 <main+0x39c>)
 8000e04:	f005 fa86 	bl	8006314 <HAL_ADC_GetValue>
 8000e08:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
>>>>>>> Stashed changes

	  sConfig.Channel = ADC_CHANNEL_8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	657b      	str	r3, [r7, #84]	; 0x54
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
<<<<<<< Updated upstream
 8000d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4833      	ldr	r0, [pc, #204]	; (8000e5c <main+0x300>)
 8000d90:	f003 feba 	bl	8004b08 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d94:	4831      	ldr	r0, [pc, #196]	; (8000e5c <main+0x300>)
 8000d96:	f003 fd65 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d9a:	bf00      	nop
 8000d9c:	2164      	movs	r1, #100	; 0x64
 8000d9e:	482f      	ldr	r0, [pc, #188]	; (8000e5c <main+0x300>)
 8000da0:	f003 fe20 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f8      	bne.n	8000d9c <main+0x240>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000daa:	482c      	ldr	r0, [pc, #176]	; (8000e5c <main+0x300>)
 8000dac:	f003 fe9e 	bl	8004aec <HAL_ADC_GetValue>
 8000db0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

	  HAL_ADC_Start(&hadc1);
 8000db4:	482a      	ldr	r0, [pc, #168]	; (8000e60 <main+0x304>)
 8000db6:	f003 fd55 	bl	8004864 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000dba:	bf00      	nop
 8000dbc:	2164      	movs	r1, #100	; 0x64
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <main+0x304>)
 8000dc0:	f003 fe10 	bl	80049e4 <HAL_ADC_PollForConversion>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f8      	bne.n	8000dbc <main+0x260>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000dca:	4825      	ldr	r0, [pc, #148]	; (8000e60 <main+0x304>)
 8000dcc:	f003 fe8e 	bl	8004aec <HAL_ADC_GetValue>
 8000dd0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000dd4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000de8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000dec:	491d      	ldr	r1, [pc, #116]	; (8000e64 <main+0x308>)
 8000dee:	f00c fd87 	bl	800d900 <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000df2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df6:	4619      	mov	r1, r3
 8000df8:	2009      	movs	r0, #9
 8000dfa:	f001 fde5 	bl	80029c8 <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <main+0x30c>)
 8000e00:	f002 fc3e 	bl	8003680 <BSP_TS_GetState>
=======
 8000e12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <main+0x39c>)
 8000e1a:	f005 fa89 	bl	8006330 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000e1e:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <main+0x39c>)
 8000e20:	f005 f934 	bl	800608c <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000e24:	bf00      	nop
 8000e26:	2164      	movs	r1, #100	; 0x64
 8000e28:	4833      	ldr	r0, [pc, #204]	; (8000ef8 <main+0x39c>)
 8000e2a:	f005 f9ef 	bl	800620c <HAL_ADC_PollForConversion>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f8      	bne.n	8000e26 <main+0x2ca>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e34:	4830      	ldr	r0, [pc, #192]	; (8000ef8 <main+0x39c>)
 8000e36:	f005 fa6d 	bl	8006314 <HAL_ADC_GetValue>
 8000e3a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	  HAL_ADC_Start(&hadc1);
 8000e3e:	482f      	ldr	r0, [pc, #188]	; (8000efc <main+0x3a0>)
 8000e40:	f005 f924 	bl	800608c <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e44:	bf00      	nop
 8000e46:	2164      	movs	r1, #100	; 0x64
 8000e48:	482c      	ldr	r0, [pc, #176]	; (8000efc <main+0x3a0>)
 8000e4a:	f005 f9df 	bl	800620c <HAL_ADC_PollForConversion>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f8      	bne.n	8000e46 <main+0x2ea>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e54:	4829      	ldr	r0, [pc, #164]	; (8000efc <main+0x3a0>)
 8000e56:	f005 fa5d 	bl	8006314 <HAL_ADC_GetValue>
 8000e5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e5e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000e62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e72:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000e76:	4922      	ldr	r1, [pc, #136]	; (8000f00 <main+0x3a4>)
 8000e78:	f00e f9fa 	bl	800f270 <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e80:	4619      	mov	r1, r3
 8000e82:	2009      	movs	r0, #9
 8000e84:	f003 f8d0 	bl	8004028 <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000e88:	481e      	ldr	r0, [pc, #120]	; (8000f04 <main+0x3a8>)
 8000e8a:	f004 f805 	bl	8004e98 <BSP_TS_GetState>
>>>>>>> Stashed changes
	  if(TS_State.touchDetected){
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <main+0x30c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f43f af61 	beq.w	8000cd0 <main+0x174>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
<<<<<<< Updated upstream
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <main+0x30c>)
 8000e10:	8858      	ldrh	r0, [r3, #2]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <main+0x30c>)
 8000e14:	899b      	ldrh	r3, [r3, #12]
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f001 ff83 	bl	8002d24 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e1e:	e757      	b.n	8000cd0 <main+0x174>
 8000e20:	20000028 	.word	0x20000028
 8000e24:	ff0000ff 	.word	0xff0000ff
 8000e28:	20008c70 	.word	0x20008c70
 8000e2c:	20008a44 	.word	0x20008a44
 8000e30:	20008884 	.word	0x20008884
 8000e34:	0800e14c 	.word	0x0800e14c
 8000e38:	20008908 	.word	0x20008908
 8000e3c:	0800e168 	.word	0x0800e168
 8000e40:	200086c4 	.word	0x200086c4
 8000e44:	0800e18c 	.word	0x0800e18c
 8000e48:	20008c6c 	.word	0x20008c6c
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40021c00 	.word	0x40021c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	0800e110 	.word	0x0800e110
 8000e5c:	200089fc 	.word	0x200089fc
 8000e60:	200089b4 	.word	0x200089b4
 8000e64:	0800e11c 	.word	0x0800e11c
 8000e68:	20000324 	.word	0x20000324

08000e6c <SystemClock_Config>:
=======
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <main+0x3a8>)
 8000e9a:	8858      	ldrh	r0, [r3, #2]
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <main+0x3a8>)
 8000e9e:	899b      	ldrh	r3, [r3, #12]
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f003 fb4a 	bl	800453c <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000ea8:	e754      	b.n	8000d54 <main+0x1f8>
 8000eaa:	bf00      	nop
 8000eac:	20001024 	.word	0x20001024
 8000eb0:	ffff0000 	.word	0xffff0000
 8000eb4:	20009ca4 	.word	0x20009ca4
 8000eb8:	20009a70 	.word	0x20009a70
 8000ebc:	200098b0 	.word	0x200098b0
 8000ec0:	0800fabc 	.word	0x0800fabc
 8000ec4:	20009934 	.word	0x20009934
 8000ec8:	0800fad8 	.word	0x0800fad8
 8000ecc:	200096ec 	.word	0x200096ec
 8000ed0:	0800fafc 	.word	0x0800fafc
 8000ed4:	20009ca0 	.word	0x20009ca0
 8000ed8:	0800fb20 	.word	0x0800fb20
 8000edc:	20009820 	.word	0x20009820
 8000ee0:	0800fb48 	.word	0x0800fb48
 8000ee4:	20009be8 	.word	0x20009be8
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40021c00 	.word	0x40021c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	0800fa80 	.word	0x0800fa80
 8000ef8:	20009a28 	.word	0x20009a28
 8000efc:	200099e0 	.word	0x200099e0
 8000f00:	0800fa8c 	.word	0x0800fa8c
 8000f04:	20001320 	.word	0x20001320

08000f08 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b4      	sub	sp, #208	; 0xd0
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< Updated upstream
 8000e72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e76:	2230      	movs	r2, #48	; 0x30
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00c fd37 	bl	800d8ee <memset>
=======
 8000f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00e f9a1 	bl	800f25e <memset>
>>>>>>> Stashed changes
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
<<<<<<< Updated upstream
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2284      	movs	r2, #132	; 0x84
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00c fd28 	bl	800d8ee <memset>
=======
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2284      	movs	r2, #132	; 0x84
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00e f992 	bl	800f25e <memset>
>>>>>>> Stashed changes

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
<<<<<<< Updated upstream
 8000e9e:	f006 fad5 	bl	800744c <HAL_PWR_EnableBkUpAccess>
=======
 8000f3a:	f007 fe7d 	bl	8008c38 <HAL_PWR_EnableBkUpAccess>
>>>>>>> Stashed changes
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <SystemClock_Config+0x154>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <SystemClock_Config+0x154>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <SystemClock_Config+0x154>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <SystemClock_Config+0x158>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <SystemClock_Config+0x158>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <SystemClock_Config+0x158>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2309      	movs	r3, #9
 8000ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ef4:	2319      	movs	r3, #25
 8000ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000efa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f08:	2309      	movs	r3, #9
 8000f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< Updated upstream
 8000f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f006 fafa 	bl	800750c <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f1e:	f001 f8ff 	bl	8002120 <Error_Handler>
=======
 8000faa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 fea2 	bl	8008cf8 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fba:	f002 fbf3 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< Updated upstream
 8000f22:	f006 faa3 	bl	800746c <HAL_PWREx_EnableOverDrive>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f2c:	f001 f8f8 	bl	8002120 <Error_Handler>
=======
 8000fbe:	f007 fe4b 	bl	8008c58 <HAL_PWREx_EnableOverDrive>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc8:	f002 fbec 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
<<<<<<< Updated upstream
 8000f52:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f56:	2106      	movs	r1, #6
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fd7b 	bl	8007a54 <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000f64:	f001 f8dc 	bl	8002120 <Error_Handler>
=======
 8000fee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f008 f923 	bl	8009240 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001000:	f002 fbd0 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <SystemClock_Config+0x15c>)
 8000f6a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000f6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000f92:	2300      	movs	r3, #0
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
<<<<<<< Updated upstream
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 ff58 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000fb2:	f001 f8b5 	bl	8002120 <Error_Handler>
=======
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4618      	mov	r0, r3
 8001044:	f008 fb00 	bl	8009648 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800104e:	f002 fba9 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	37d0      	adds	r7, #208	; 0xd0
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	00015868 	.word	0x00015868

08000fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
<<<<<<< Updated upstream
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f003 fbd5 	bl	80047dc <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f001 f872 	bl	8002120 <Error_Handler>
=======
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_ADC1_Init+0x98>)
 80010ca:	f004 ff9b 	bl	8006004 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010d4:	f002 fb66 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
<<<<<<< Updated upstream
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 fd5b 	bl	8004b08 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f001 f862 	bl	8002120 <Error_Handler>
=======
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_ADC1_Init+0x98>)
 80010ea:	f005 f921 	bl	8006330 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010f4:	f002 fb56 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< Updated upstream
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200089b4 	.word	0x200089b4
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001
=======
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200099e0 	.word	0x200099e0
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001
>>>>>>> Stashed changes

08001070 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC3_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_ADC3_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC3_Init+0x98>)
 800108a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ADC3_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC3_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_ADC3_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC3_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC3_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_ADC3_Init+0x98>)
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC3_Init+0xa0>)
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC3_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_ADC3_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_ADC3_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC3_Init+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
<<<<<<< Updated upstream
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_ADC3_Init+0x98>)
 80010d2:	f003 fb83 	bl	80047dc <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80010dc:	f001 f820 	bl	8002120 <Error_Handler>
=======
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_ADC3_Init+0x98>)
 800116e:	f004 ff49 	bl	8006004 <HAL_ADC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001178:	f002 fb14 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010e0:	2306      	movs	r3, #6
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
<<<<<<< Updated upstream
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_ADC3_Init+0x98>)
 80010f2:	f003 fd09 	bl	8004b08 <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80010fc:	f001 f810 	bl	8002120 <Error_Handler>
=======
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_ADC3_Init+0x98>)
 800118e:	f005 f8cf 	bl	8006330 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001198:	f002 fb04 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
<<<<<<< Updated upstream
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200089fc 	.word	0x200089fc
 800110c:	40012200 	.word	0x40012200
 8001110:	0f000001 	.word	0x0f000001
=======
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20009a28 	.word	0x20009a28
 80011a8:	40012200 	.word	0x40012200
 80011ac:	0f000001 	.word	0x0f000001
>>>>>>> Stashed changes

08001114 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_DAC_Init+0x4c>)
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <MX_DAC_Init+0x50>)
 8001126:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
<<<<<<< Updated upstream
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_DAC_Init+0x4c>)
 800112a:	f004 f813 	bl	8005154 <HAL_DAC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001134:	f000 fff4 	bl	8002120 <Error_Handler>
=======
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_DAC_Init+0x4c>)
 80011c6:	f005 fbd9 	bl	800697c <HAL_DAC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d0:	f002 fae8 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
<<<<<<< Updated upstream
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <MX_DAC_Init+0x4c>)
 8001148:	f004 f87a 	bl	8005240 <HAL_DAC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001152:	f000 ffe5 	bl	8002120 <Error_Handler>
=======
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_DAC_Init+0x4c>)
 80011e4:	f005 fc40 	bl	8006a68 <HAL_DAC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ee:	f002 fad9 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
<<<<<<< Updated upstream
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20008ac4 	.word	0x20008ac4
 8001164:	40007400 	.word	0x40007400
=======
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20009af0 	.word	0x20009af0
 8001200:	40007400 	.word	0x40007400
>>>>>>> Stashed changes

08001168 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <MX_DMA2D_Init+0x60>)
 8001170:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
<<<<<<< Updated upstream
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 800119e:	f004 fa85 	bl	80056ac <HAL_DMA2D_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011a8:	f000 ffba 	bl	8002120 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011ac:	2101      	movs	r1, #1
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_DMA2D_Init+0x5c>)
 80011b0:	f004 fbda 	bl	8005968 <HAL_DMA2D_ConfigLayer>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80011ba:	f000 ffb1 	bl	8002120 <Error_Handler>
=======
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800123a:	f005 fe4b 	bl	8006ed4 <HAL_DMA2D_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001244:	f002 faae 	bl	80037a4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001248:	2101      	movs	r1, #1
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800124c:	f005 ffa0 	bl	8007190 <HAL_DMA2D_ConfigLayer>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001256:	f002 faa5 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
<<<<<<< Updated upstream
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20008bb8 	.word	0x20008bb8
 80011c8:	4002b000 	.word	0x4002b000
=======
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20009bec 	.word	0x20009bec
 8001264:	4002b000 	.word	0x4002b000
>>>>>>> Stashed changes

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< Updated upstream
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f004 ffc2 	bl	8006190 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f000 ff85 	bl	8002120 <Error_Handler>
=======
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	f006 fba0 	bl	80079e8 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f002 fa79 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< Updated upstream
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f005 fcd1 	bl	8006bc0 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f000 ff7c 	bl	8002120 <Error_Handler>
=======
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <MX_I2C1_Init+0x74>)
 80012b6:	f007 f8af 	bl	8008418 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f002 fa70 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
<<<<<<< Updated upstream
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f005 fd13 	bl	8006c56 <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f000 ff73 	bl	8002120 <Error_Handler>
=======
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_I2C1_Init+0x74>)
 80012c8:	f007 f8f1 	bl	80084ae <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f002 fa67 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< Updated upstream
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20008838 	.word	0x20008838
 8001244:	40005400 	.word	0x40005400
 8001248:	00c0eaff 	.word	0x00c0eaff
=======
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20009864 	.word	0x20009864
 80012e0:	40005400 	.word	0x40005400
 80012e4:	00c0eaff 	.word	0x00c0eaff
>>>>>>> Stashed changes

0800124c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <MX_I2C3_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_I2C3_Init+0x7c>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001264:	2201      	movs	r2, #1
 8001266:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_I2C3_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
<<<<<<< Updated upstream
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <MX_I2C3_Init+0x74>)
 8001288:	f004 ff82 	bl	8006190 <HAL_I2C_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001292:	f000 ff45 	bl	8002120 <Error_Handler>
=======
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_I2C3_Init+0x74>)
 8001324:	f006 fb60 	bl	80079e8 <HAL_I2C_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800132e:	f002 fa39 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
<<<<<<< Updated upstream
 8001296:	2100      	movs	r1, #0
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <MX_I2C3_Init+0x74>)
 800129a:	f005 fc91 	bl	8006bc0 <HAL_I2CEx_ConfigAnalogFilter>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012a4:	f000 ff3c 	bl	8002120 <Error_Handler>
=======
 8001332:	2100      	movs	r1, #0
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <MX_I2C3_Init+0x74>)
 8001336:	f007 f86f 	bl	8008418 <HAL_I2CEx_ConfigAnalogFilter>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001340:	f002 fa30 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
<<<<<<< Updated upstream
 80012a8:	2100      	movs	r1, #0
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_I2C3_Init+0x74>)
 80012ac:	f005 fcd3 	bl	8006c56 <HAL_I2CEx_ConfigDigitalFilter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 ff33 	bl	8002120 <Error_Handler>
=======
 8001344:	2100      	movs	r1, #0
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_I2C3_Init+0x74>)
 8001348:	f007 f8b1 	bl	80084ae <HAL_I2CEx_ConfigDigitalFilter>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001352:	f002 fa27 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
<<<<<<< Updated upstream
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200086c8 	.word	0x200086c8
 80012c4:	40005c00 	.word	0x40005c00
 80012c8:	00c0eaff 	.word	0x00c0eaff
=======
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200096f0 	.word	0x200096f0
 8001360:	40005c00 	.word	0x40005c00
 8001364:	00c0eaff 	.word	0x00c0eaff
>>>>>>> Stashed changes

080012cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
<<<<<<< Updated upstream
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2234      	movs	r2, #52	; 0x34
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00c fb08 	bl	800d8ee <memset>
=======
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2234      	movs	r2, #52	; 0x34
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00d ff72 	bl	800f25e <memset>
>>>>>>> Stashed changes

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012e0:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <MX_LTDC_Init+0x100>)
 80012e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012e4:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80012fe:	2228      	movs	r2, #40	; 0x28
 8001300:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001304:	2209      	movs	r2, #9
 8001306:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800130a:	2235      	movs	r2, #53	; 0x35
 800130c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001310:	220b      	movs	r2, #11
 8001312:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001316:	f240 2215 	movw	r2, #533	; 0x215
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800131e:	f240 121b 	movw	r2, #283	; 0x11b
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001326:	f240 2235 	movw	r2, #565	; 0x235
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800132e:	f240 121d 	movw	r2, #285	; 0x11d
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_LTDC_Init+0xfc>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
<<<<<<< Updated upstream
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_LTDC_Init+0xfc>)
 800134e:	f005 fccf 	bl	8006cf0 <HAL_LTDC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001358:	f000 fee2 	bl	8002120 <Error_Handler>
=======
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013ea:	f007 f8ad 	bl	8008548 <HAL_LTDC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013f4:	f002 f9d6 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  pLayerCfg.WindowX0 = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001360:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001364:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800136a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800136e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001370:	2302      	movs	r3, #2
 8001372:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001374:	23ff      	movs	r3, #255	; 0xff
 8001376:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800137c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001380:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001386:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800138c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001392:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
<<<<<<< Updated upstream
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_LTDC_Init+0xfc>)
 80013b2:	f005 fe2f 	bl	8007014 <HAL_LTDC_ConfigLayer>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80013bc:	f000 feb0 	bl	8002120 <Error_Handler>
=======
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_LTDC_Init+0xfc>)
 800144e:	f007 fa0d 	bl	800886c <HAL_LTDC_ConfigLayer>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001458:	f002 f9a4 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
<<<<<<< Updated upstream
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000890c 	.word	0x2000890c
 80013cc:	40016800 	.word	0x40016800
=======
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20009938 	.word	0x20009938
 8001468:	40016800 	.word	0x40016800
>>>>>>> Stashed changes

080013d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b092      	sub	sp, #72	; 0x48
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
<<<<<<< Updated upstream
 80013ec:	463b      	mov	r3, r7
 80013ee:	222c      	movs	r2, #44	; 0x2c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00c fa7b 	bl	800d8ee <memset>
=======
 8001488:	463b      	mov	r3, r7
 800148a:	222c      	movs	r2, #44	; 0x2c
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00d fee5 	bl	800f25e <memset>
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <MX_RTC_Init+0x144>)
 80013fa:	4a47      	ldr	r2, [pc, #284]	; (8001518 <MX_RTC_Init+0x148>)
 80013fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013fe:	4b45      	ldr	r3, [pc, #276]	; (8001514 <MX_RTC_Init+0x144>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <MX_RTC_Init+0x144>)
 8001406:	227f      	movs	r2, #127	; 0x7f
 8001408:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800140a:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MX_RTC_Init+0x144>)
 800140c:	22ff      	movs	r2, #255	; 0xff
 800140e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <MX_RTC_Init+0x144>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <MX_RTC_Init+0x144>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <MX_RTC_Init+0x144>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
<<<<<<< Updated upstream
 8001422:	483c      	ldr	r0, [pc, #240]	; (8001514 <MX_RTC_Init+0x144>)
 8001424:	f007 f908 	bl	8008638 <HAL_RTC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800142e:	f000 fe77 	bl	8002120 <Error_Handler>
=======
 80014be:	483c      	ldr	r0, [pc, #240]	; (80015b0 <MX_RTC_Init+0x144>)
 80014c0:	f008 fcb0 	bl	8009e24 <HAL_RTC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80014ca:	f002 f96b 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
<<<<<<< Updated upstream
 800144c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	482f      	ldr	r0, [pc, #188]	; (8001514 <MX_RTC_Init+0x144>)
 8001456:	f007 f96b 	bl	8008730 <HAL_RTC_SetTime>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001460:	f000 fe5e 	bl	8002120 <Error_Handler>
=======
 80014e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	482f      	ldr	r0, [pc, #188]	; (80015b0 <MX_RTC_Init+0x144>)
 80014f2:	f008 fd13 	bl	8009f1c <HAL_RTC_SetTime>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014fc:	f002 f952 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001464:	2301      	movs	r3, #1
 8001466:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
<<<<<<< Updated upstream
 800147c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001480:	2201      	movs	r2, #1
 8001482:	4619      	mov	r1, r3
 8001484:	4823      	ldr	r0, [pc, #140]	; (8001514 <MX_RTC_Init+0x144>)
 8001486:	f007 fa11 	bl	80088ac <HAL_RTC_SetDate>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001490:	f000 fe46 	bl	8002120 <Error_Handler>
=======
 8001518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	4823      	ldr	r0, [pc, #140]	; (80015b0 <MX_RTC_Init+0x144>)
 8001522:	f008 fdb9 	bl	800a098 <HAL_RTC_SetDate>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800152c:	f002 f93a 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001494:	2300      	movs	r3, #0
 8001496:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001498:	2300      	movs	r3, #0
 800149a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800149c:	2300      	movs	r3, #0
 800149e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80014be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
<<<<<<< Updated upstream
 80014c4:	463b      	mov	r3, r7
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <MX_RTC_Init+0x144>)
 80014cc:	f007 fa96 	bl	80089fc <HAL_RTC_SetAlarm>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80014d6:	f000 fe23 	bl	8002120 <Error_Handler>
=======
 8001560:	463b      	mov	r3, r7
 8001562:	2201      	movs	r2, #1
 8001564:	4619      	mov	r1, r3
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <MX_RTC_Init+0x144>)
 8001568:	f008 fe3e 	bl	800a1e8 <HAL_RTC_SetAlarm>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001572:	f002 f917 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80014da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
<<<<<<< Updated upstream
 80014e0:	463b      	mov	r3, r7
 80014e2:	2201      	movs	r2, #1
 80014e4:	4619      	mov	r1, r3
 80014e6:	480b      	ldr	r0, [pc, #44]	; (8001514 <MX_RTC_Init+0x144>)
 80014e8:	f007 fa88 	bl	80089fc <HAL_RTC_SetAlarm>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80014f2:	f000 fe15 	bl	8002120 <Error_Handler>
=======
 800157c:	463b      	mov	r3, r7
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <MX_RTC_Init+0x144>)
 8001584:	f008 fe30 	bl	800a1e8 <HAL_RTC_SetAlarm>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800158e:	f002 f909 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
<<<<<<< Updated upstream
 80014f6:	2202      	movs	r2, #2
 80014f8:	2100      	movs	r1, #0
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_RTC_Init+0x144>)
 80014fc:	f007 fc08 	bl	8008d10 <HAL_RTCEx_SetTimeStamp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001506:	f000 fe0b 	bl	8002120 <Error_Handler>
=======
 8001592:	2202      	movs	r2, #2
 8001594:	2100      	movs	r1, #0
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_RTC_Init+0x144>)
 8001598:	f008 ffb0 	bl	800a4fc <HAL_RTCEx_SetTimeStamp>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80015a2:	f002 f8ff 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
<<<<<<< Updated upstream
 800150a:	bf00      	nop
 800150c:	3748      	adds	r7, #72	; 0x48
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20008ad8 	.word	0x20008ad8
 8001518:	40002800 	.word	0x40002800
=======
 80015a6:	bf00      	nop
 80015a8:	3748      	adds	r7, #72	; 0x48
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20009b08 	.word	0x20009b08
 80015b4:	40002800 	.word	0x40002800
>>>>>>> Stashed changes

0800151c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_SPI2_Init+0x74>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <MX_SPI2_Init+0x78>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_SPI2_Init+0x74>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_SPI2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_SPI2_Init+0x74>)
 8001536:	f44f 7240 	mov.w	r2, #768	; 0x300
 800153a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_SPI2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_SPI2_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_SPI2_Init+0x74>)
 800154a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800154e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_SPI2_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_SPI2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_SPI2_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_SPI2_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_SPI2_Init+0x74>)
 800156a:	2207      	movs	r2, #7
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_SPI2_Init+0x74>)
 8001576:	2208      	movs	r2, #8
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
<<<<<<< Updated upstream
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_SPI2_Init+0x74>)
 800157c:	f007 fc9d 	bl	8008eba <HAL_SPI_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001586:	f000 fdcb 	bl	8002120 <Error_Handler>
=======
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_SPI2_Init+0x74>)
 8001618:	f009 f845 	bl	800a6a6 <HAL_SPI_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001622:	f002 f8bf 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
<<<<<<< Updated upstream
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20008714 	.word	0x20008714
 8001594:	40003800 	.word	0x40003800
=======
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000973c 	.word	0x2000973c
 8001630:	40003800 	.word	0x40003800
>>>>>>> Stashed changes

08001598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015b8:	4a20      	ldr	r2, [pc, #128]	; (800163c <MX_TIM1_Init+0xa4>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
<<<<<<< Updated upstream
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015e4:	f007 fcfb 	bl	8008fde <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015ee:	f000 fd97 	bl	8002120 <Error_Handler>
=======
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <MX_TIM1_Init+0xa0>)
 8001680:	f009 f8a3 	bl	800a7ca <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800168a:	f002 f88b 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
<<<<<<< Updated upstream
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_TIM1_Init+0xa0>)
 8001600:	f007 ffae 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800160a:	f000 fd89 	bl	8002120 <Error_Handler>
=======
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <MX_TIM1_Init+0xa0>)
 800169c:	f009 fb56 	bl	800ad4c <HAL_TIM_ConfigClockSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016a6:	f002 f87d 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
<<<<<<< Updated upstream
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_TIM1_Init+0xa0>)
 8001620:	f008 fce2 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800162a:	f000 fd79 	bl	8002120 <Error_Handler>
=======
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_TIM1_Init+0xa0>)
 80016bc:	f00a f88a 	bl	800b7d4 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016c6:	f002 f86d 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< Updated upstream
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20008af8 	.word	0x20008af8
 800163c:	40010000 	.word	0x40010000
=======
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20009b28 	.word	0x20009b28
 80016d8:	40010000 	.word	0x40010000
>>>>>>> Stashed changes

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM2_Init+0x98>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_TIM2_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
<<<<<<< Updated upstream
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_TIM2_Init+0x98>)
 8001688:	f007 fca9 	bl	8008fde <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001692:	f000 fd45 	bl	8002120 <Error_Handler>
=======
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_TIM2_Init+0x98>)
 8001724:	f009 f851 	bl	800a7ca <HAL_TIM_Base_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800172e:	f002 f839 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
<<<<<<< Updated upstream
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM2_Init+0x98>)
 80016a4:	f007 ff5c 	bl	8009560 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ae:	f000 fd37 	bl	8002120 <Error_Handler>
=======
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_TIM2_Init+0x98>)
 8001740:	f009 fb04 	bl	800ad4c <HAL_TIM_ConfigClockSource>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800174a:	f002 f82b 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
<<<<<<< Updated upstream
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM2_Init+0x98>)
 80016c0:	f008 fc92 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ca:	f000 fd29 	bl	8002120 <Error_Handler>
=======
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM2_Init+0x98>)
 800175c:	f00a f83a 	bl	800b7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001766:	f002 f81d 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< Updated upstream
 80016ce:	bf00      	nop
 80016d0:	3720      	adds	r7, #32
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20008bf8 	.word	0x20008bf8
=======
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20009c2c 	.word	0x20009c2c
>>>>>>> Stashed changes

080016dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	; 0x50
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001720:	4a34      	ldr	r2, [pc, #208]	; (80017f4 <MX_TIM3_Init+0x118>)
 8001722:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <MX_TIM3_Init+0x114>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_TIM3_Init+0x114>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
<<<<<<< Updated upstream
 8001744:	482a      	ldr	r0, [pc, #168]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001746:	f007 fc4a 	bl	8008fde <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001750:	f000 fce6 	bl	8002120 <Error_Handler>
=======
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <MX_TIM3_Init+0x114>)
 80017e2:	f008 fff2 	bl	800a7ca <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017ec:	f001 ffda 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
<<<<<<< Updated upstream
 800175a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800175e:	4619      	mov	r1, r3
 8001760:	4823      	ldr	r0, [pc, #140]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001762:	f007 fefd 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800176c:	f000 fcd8 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001772:	f007 fc89 	bl	8009088 <HAL_TIM_PWM_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 800177c:	f000 fcd0 	bl	8002120 <Error_Handler>
=======
 80017f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017fa:	4619      	mov	r1, r3
 80017fc:	4823      	ldr	r0, [pc, #140]	; (800188c <MX_TIM3_Init+0x114>)
 80017fe:	f009 faa5 	bl	800ad4c <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001808:	f001 ffcc 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <MX_TIM3_Init+0x114>)
 800180e:	f009 f831 	bl	800a874 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001818:	f001 ffc4 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
<<<<<<< Updated upstream
 8001788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178c:	4619      	mov	r1, r3
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_TIM3_Init+0x114>)
 8001790:	f007 ffa0 	bl	80096d4 <HAL_TIM_SlaveConfigSynchro>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800179a:	f000 fcc1 	bl	8002120 <Error_Handler>
=======
 8001824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM3_Init+0x114>)
 800182c:	f009 fb48 	bl	800aec0 <HAL_TIM_SlaveConfigSynchro>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001836:	f001 ffb5 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
<<<<<<< Updated upstream
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <MX_TIM3_Init+0x114>)
 80017ae:	f008 fc1b 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80017b8:	f000 fcb2 	bl	8002120 <Error_Handler>
=======
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	4619      	mov	r1, r3
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <MX_TIM3_Init+0x114>)
 800184a:	f009 ffc3 	bl	800b7d4 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001854:	f001 ffa6 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< Updated upstream
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_TIM3_Init+0x114>)
 80017d4:	f007 fdac 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80017de:	f000 fc9f 	bl	8002120 <Error_Handler>
=======
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <MX_TIM3_Init+0x114>)
 8001870:	f009 f954 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800187a:	f001 ff93 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< Updated upstream
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <MX_TIM3_Init+0x114>)
 80017e4:	f002 fce0 	bl	80041a8 <HAL_TIM_MspPostInit>

}
 80017e8:	bf00      	nop
 80017ea:	3750      	adds	r7, #80	; 0x50
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200088c8 	.word	0x200088c8
 80017f4:	40000400 	.word	0x40000400
=======
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM3_Init+0x114>)
 8001880:	f004 f89e 	bl	80059c0 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3750      	adds	r7, #80	; 0x50
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200098f4 	.word	0x200098f4
 8001890:	40000400 	.word	0x40000400
>>>>>>> Stashed changes

080017f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_TIM5_Init+0x94>)
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <MX_TIM5_Init+0x98>)
 800181a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM5_Init+0x94>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_TIM5_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM5_Init+0x94>)
 800182a:	f04f 32ff 	mov.w	r2, #4294967295
 800182e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM5_Init+0x94>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM5_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
<<<<<<< Updated upstream
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_TIM5_Init+0x94>)
 800183e:	f007 fbce 	bl	8008fde <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001848:	f000 fc6a 	bl	8002120 <Error_Handler>
=======
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <MX_TIM5_Init+0x94>)
 80018da:	f008 ff76 	bl	800a7ca <HAL_TIM_Base_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018e4:	f001 ff5e 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
<<<<<<< Updated upstream
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_TIM5_Init+0x94>)
 800185a:	f007 fe81 	bl	8009560 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001864:	f000 fc5c 	bl	8002120 <Error_Handler>
=======
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_TIM5_Init+0x94>)
 80018f6:	f009 fa29 	bl	800ad4c <HAL_TIM_ConfigClockSource>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001900:	f001 ff50 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
<<<<<<< Updated upstream
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM5_Init+0x94>)
 8001876:	f008 fbb7 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 fc4e 	bl	8002120 <Error_Handler>
=======
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_TIM5_Init+0x94>)
 8001912:	f009 ff5f 	bl	800b7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800191c:	f001 ff42 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
<<<<<<< Updated upstream
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20008888 	.word	0x20008888
 8001890:	40000c00 	.word	0x40000c00
=======
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200098b4 	.word	0x200098b4
 800192c:	40000c00 	.word	0x40000c00
>>>>>>> Stashed changes

08001894 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b09a      	sub	sp, #104	; 0x68
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
<<<<<<< Updated upstream
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	222c      	movs	r2, #44	; 0x2c
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c f80d 	bl	800d8ee <memset>
=======
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	222c      	movs	r2, #44	; 0x2c
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f00d fc77 	bl	800f25e <memset>
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018d6:	4a43      	ldr	r2, [pc, #268]	; (80019e4 <MX_TIM8_Init+0x150>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b3c      	ldr	r3, [pc, #240]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b39      	ldr	r3, [pc, #228]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
<<<<<<< Updated upstream
 8001900:	4837      	ldr	r0, [pc, #220]	; (80019e0 <MX_TIM8_Init+0x14c>)
 8001902:	f007 fb6c 	bl	8008fde <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800190c:	f000 fc08 	bl	8002120 <Error_Handler>
=======
 800199c:	4837      	ldr	r0, [pc, #220]	; (8001a7c <MX_TIM8_Init+0x14c>)
 800199e:	f008 ff14 	bl	800a7ca <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80019a8:	f001 fefc 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
<<<<<<< Updated upstream
 8001916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800191a:	4619      	mov	r1, r3
 800191c:	4830      	ldr	r0, [pc, #192]	; (80019e0 <MX_TIM8_Init+0x14c>)
 800191e:	f007 fe1f 	bl	8009560 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001928:	f000 fbfa 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800192c:	482c      	ldr	r0, [pc, #176]	; (80019e0 <MX_TIM8_Init+0x14c>)
 800192e:	f007 fbab 	bl	8009088 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001938:	f000 fbf2 	bl	8002120 <Error_Handler>
=======
 80019b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b6:	4619      	mov	r1, r3
 80019b8:	4830      	ldr	r0, [pc, #192]	; (8001a7c <MX_TIM8_Init+0x14c>)
 80019ba:	f009 f9c7 	bl	800ad4c <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80019c4:	f001 feee 	bl	80037a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019c8:	482c      	ldr	r0, [pc, #176]	; (8001a7c <MX_TIM8_Init+0x14c>)
 80019ca:	f008 ff53 	bl	800a874 <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80019d4:	f001 fee6 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
<<<<<<< Updated upstream
 8001948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800194c:	4619      	mov	r1, r3
 800194e:	4824      	ldr	r0, [pc, #144]	; (80019e0 <MX_TIM8_Init+0x14c>)
 8001950:	f008 fb4a 	bl	8009fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800195a:	f000 fbe1 	bl	8002120 <Error_Handler>
=======
 80019e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4824      	ldr	r0, [pc, #144]	; (8001a7c <MX_TIM8_Init+0x14c>)
 80019ec:	f009 fef2 	bl	800b7d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019f6:	f001 fed5 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	2360      	movs	r3, #96	; 0x60
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001966:	2300      	movs	r3, #0
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
<<<<<<< Updated upstream
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	220c      	movs	r2, #12
 800197c:	4619      	mov	r1, r3
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM8_Init+0x14c>)
 8001980:	f007 fcd6 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800198a:	f000 fbc9 	bl	8002120 <Error_Handler>
=======
 8001a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a16:	220c      	movs	r2, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001a1c:	f009 f87e 	bl	800ab1c <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001a26:	f001 febd 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
<<<<<<< Updated upstream
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80019c4:	f008 fb9e 	bl	800a104 <HAL_TIMEx_ConfigBreakDeadTime>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80019ce:	f000 fba7 	bl	8002120 <Error_Handler>
=======
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001a60:	f009 ff46 	bl	800b8f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a6a:	f001 fe9b 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
<<<<<<< Updated upstream
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM8_Init+0x14c>)
 80019d4:	f002 fbe8 	bl	80041a8 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3768      	adds	r7, #104	; 0x68
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200087f8 	.word	0x200087f8
 80019e4:	40010400 	.word	0x40010400
=======
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001a70:	f003 ffa6 	bl	80059c0 <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3768      	adds	r7, #104	; 0x68
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20009824 	.word	0x20009824
 8001a80:	40010400 	.word	0x40010400
>>>>>>> Stashed changes

080019e8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_UART7_Init+0x58>)
 80019ee:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <MX_UART7_Init+0x5c>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_UART7_Init+0x58>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_UART7_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
<<<<<<< Updated upstream
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_UART7_Init+0x58>)
 8001a2c:	f008 fc06 	bl	800a23c <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001a36:	f000 fb73 	bl	8002120 <Error_Handler>
=======
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_UART7_Init+0x58>)
 8001ac8:	f009 ffae 	bl	800ba28 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001ad2:	f001 fe67 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
<<<<<<< Updated upstream
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20008778 	.word	0x20008778
 8001a44:	40007800 	.word	0x40007800
=======
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200097a0 	.word	0x200097a0
 8001ae0:	40007800 	.word	0x40007800
>>>>>>> Stashed changes

08001a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <MX_USART1_UART_Init+0x5c>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
<<<<<<< Updated upstream
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_USART1_UART_Init+0x58>)
 8001a8c:	f008 fbd6 	bl	800a23c <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a96:	f000 fb43 	bl	8002120 <Error_Handler>
=======
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b28:	f009 ff7e 	bl	800ba28 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b32:	f001 fe37 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< Updated upstream
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20008a44 	.word	0x20008a44
 8001aa4:	40011000 	.word	0x40011000
=======
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20009a70 	.word	0x20009a70
 8001b40:	40011000 	.word	0x40011000
>>>>>>> Stashed changes

08001aa8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <MX_USART6_UART_Init+0x5c>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
<<<<<<< Updated upstream
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART6_UART_Init+0x58>)
 8001aec:	f008 fba6 	bl	800a23c <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001af6:	f000 fb13 	bl	8002120 <Error_Handler>
=======
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b88:	f009 ff4e 	bl	800ba28 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b92:	f001 fe07 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
<<<<<<< Updated upstream
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20008b38 	.word	0x20008b38
 8001b04:	40011400 	.word	0x40011400
=======
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20009b68 	.word	0x20009b68
 8001ba0:	40011400 	.word	0x40011400
>>>>>>> Stashed changes

08001b08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <MX_FMC_Init+0x98>)
 8001b24:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001b62:	2310      	movs	r3, #16
 8001b64:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001b66:	2310      	movs	r3, #16
 8001b68:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001b6e:	2310      	movs	r3, #16
 8001b70:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001b72:	2310      	movs	r3, #16
 8001b74:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001b76:	2310      	movs	r3, #16
 8001b78:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
<<<<<<< Updated upstream
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_FMC_Init+0x94>)
 8001b84:	f007 f91a 	bl	8008dbc <HAL_SDRAM_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001b8e:	f000 fac7 	bl	8002120 <Error_Handler>
=======
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_FMC_Init+0x94>)
 8001c20:	f008 fcc2 	bl	800a5a8 <HAL_SDRAM_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001c2a:	f001 fdbb 	bl	80037a4 <Error_Handler>
>>>>>>> Stashed changes
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
<<<<<<< Updated upstream
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20008c38 	.word	0x20008c38
 8001ba0:	a0000140 	.word	0xa0000140
=======
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20009c6c 	.word	0x20009c6c
 8001c3c:	a0000140 	.word	0xa0000140
>>>>>>> Stashed changes

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b090      	sub	sp, #64	; 0x40
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bba:	4bb0      	ldr	r3, [pc, #704]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4aaf      	ldr	r2, [pc, #700]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bc0:	f043 0310 	orr.w	r3, r3, #16
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4bad      	ldr	r3, [pc, #692]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4baa      	ldr	r3, [pc, #680]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4aa9      	ldr	r2, [pc, #676]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4ba7      	ldr	r3, [pc, #668]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4ba4      	ldr	r3, [pc, #656]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4aa3      	ldr	r2, [pc, #652]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4ba1      	ldr	r3, [pc, #644]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c02:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a9d      	ldr	r2, [pc, #628]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b9b      	ldr	r3, [pc, #620]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c1a:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a97      	ldr	r2, [pc, #604]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a91      	ldr	r2, [pc, #580]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a8b      	ldr	r2, [pc, #556]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c62:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a85      	ldr	r2, [pc, #532]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <MX_GPIO_Init+0x2d8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
<<<<<<< Updated upstream
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2160      	movs	r1, #96	; 0x60
 8001cc6:	486e      	ldr	r0, [pc, #440]	; (8001e80 <MX_GPIO_Init+0x2dc>)
 8001cc8:	f004 fa48 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2120      	movs	r1, #32
 8001cd0:	486c      	ldr	r0, [pc, #432]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001cd2:	f004 fa43 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2108      	movs	r1, #8
 8001cda:	486a      	ldr	r0, [pc, #424]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001cdc:	f004 fa3e 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	4868      	ldr	r0, [pc, #416]	; (8001e88 <MX_GPIO_Init+0x2e4>)
 8001ce6:	f004 fa39 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2108      	movs	r1, #8
 8001cee:	4867      	ldr	r0, [pc, #412]	; (8001e8c <MX_GPIO_Init+0x2e8>)
 8001cf0:	f004 fa34 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4863      	ldr	r0, [pc, #396]	; (8001e88 <MX_GPIO_Init+0x2e4>)
 8001cfc:	f004 fa2e 	bl	800615c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d00:	2200      	movs	r2, #0
 8001d02:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001d06:	4862      	ldr	r0, [pc, #392]	; (8001e90 <MX_GPIO_Init+0x2ec>)
 8001d08:	f004 fa28 	bl	800615c <HAL_GPIO_WritePin>
=======
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2160      	movs	r1, #96	; 0x60
 8001d62:	486e      	ldr	r0, [pc, #440]	; (8001f1c <MX_GPIO_Init+0x2dc>)
 8001d64:	f005 fe0e 	bl	8007984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	486c      	ldr	r0, [pc, #432]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001d6e:	f005 fe09 	bl	8007984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2108      	movs	r1, #8
 8001d76:	486a      	ldr	r0, [pc, #424]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001d78:	f005 fe04 	bl	8007984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4868      	ldr	r0, [pc, #416]	; (8001f24 <MX_GPIO_Init+0x2e4>)
 8001d82:	f005 fdff 	bl	8007984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2108      	movs	r1, #8
 8001d8a:	4867      	ldr	r0, [pc, #412]	; (8001f28 <MX_GPIO_Init+0x2e8>)
 8001d8c:	f005 fdfa 	bl	8007984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d96:	4863      	ldr	r0, [pc, #396]	; (8001f24 <MX_GPIO_Init+0x2e4>)
 8001d98:	f005 fdf4 	bl	8007984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001da2:	4862      	ldr	r0, [pc, #392]	; (8001f2c <MX_GPIO_Init+0x2ec>)
 8001da4:	f005 fdee 	bl	8007984 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
<<<<<<< Updated upstream
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2108      	movs	r1, #8
 8001d10:	4860      	ldr	r0, [pc, #384]	; (8001e94 <MX_GPIO_Init+0x2f0>)
 8001d12:	f004 fa23 	bl	800615c <HAL_GPIO_WritePin>
=======
 8001da8:	2200      	movs	r2, #0
 8001daa:	2108      	movs	r1, #8
 8001dac:	4860      	ldr	r0, [pc, #384]	; (8001f30 <MX_GPIO_Init+0x2f0>)
 8001dae:	f005 fde9 	bl	8007984 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d16:	2308      	movs	r3, #8
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4855      	ldr	r0, [pc, #340]	; (8001e80 <MX_GPIO_Init+0x2dc>)
 8001d2a:	f003 ff4b 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4855      	ldr	r0, [pc, #340]	; (8001f1c <MX_GPIO_Init+0x2dc>)
 8001dc6:	f005 fb11 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001d2e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d40:	230a      	movs	r3, #10
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4853      	ldr	r0, [pc, #332]	; (8001e98 <MX_GPIO_Init+0x2f4>)
 8001d4c:	f003 ff3a 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	4619      	mov	r1, r3
 8001de6:	4853      	ldr	r0, [pc, #332]	; (8001f34 <MX_GPIO_Init+0x2f4>)
 8001de8:	f005 fb00 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001d50:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	484d      	ldr	r0, [pc, #308]	; (8001e9c <MX_GPIO_Init+0x2f8>)
 8001d66:	f003 ff2d 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	484d      	ldr	r0, [pc, #308]	; (8001f38 <MX_GPIO_Init+0x2f8>)
 8001e02:	f005 faf3 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001d6a:	2360      	movs	r3, #96	; 0x60
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	483f      	ldr	r0, [pc, #252]	; (8001e80 <MX_GPIO_Init+0x2dc>)
 8001d82:	f003 ff1f 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	483f      	ldr	r0, [pc, #252]	; (8001f1c <MX_GPIO_Init+0x2dc>)
 8001e1e:	f005 fae5 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4841      	ldr	r0, [pc, #260]	; (8001ea0 <MX_GPIO_Init+0x2fc>)
 8001d9c:	f003 ff12 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	4619      	mov	r1, r3
 8001e36:	4841      	ldr	r0, [pc, #260]	; (8001f3c <MX_GPIO_Init+0x2fc>)
 8001e38:	f005 fad8 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001da0:	2340      	movs	r3, #64	; 0x40
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <MX_GPIO_Init+0x300>)
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db0:	4619      	mov	r1, r3
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001db4:	f003 ff06 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4834      	ldr	r0, [pc, #208]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001e50:	f005 facc 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001db8:	2328      	movs	r3, #40	; 0x28
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482d      	ldr	r0, [pc, #180]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001dd0:	f003 fef8 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	482d      	ldr	r0, [pc, #180]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001e6c:	f005 fabe 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001dd4:	f241 0308 	movw	r3, #4104	; 0x1008
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4826      	ldr	r0, [pc, #152]	; (8001e88 <MX_GPIO_Init+0x2e4>)
 8001dee:	f003 fee9 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4826      	ldr	r0, [pc, #152]	; (8001f24 <MX_GPIO_Init+0x2e4>)
 8001e8a:	f005 faaf 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4828      	ldr	r0, [pc, #160]	; (8001ea8 <MX_GPIO_Init+0x304>)
 8001e08:	f003 fedc 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4828      	ldr	r0, [pc, #160]	; (8001f44 <MX_GPIO_Init+0x304>)
 8001ea4:	f005 faa2 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	4619      	mov	r1, r3
 8001e22:	481a      	ldr	r0, [pc, #104]	; (8001e8c <MX_GPIO_Init+0x2e8>)
 8001e24:	f003 fece 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481a      	ldr	r0, [pc, #104]	; (8001f28 <MX_GPIO_Init+0x2e8>)
 8001ec0:	f005 fa94 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e28:	2310      	movs	r3, #16
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <MX_GPIO_Init+0x2e0>)
 8001e3c:	f003 fec2 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4812      	ldr	r0, [pc, #72]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001ed8:	f005 fa88 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e40:	f248 0304 	movw	r3, #32772	; 0x8004
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <MX_GPIO_Init+0x2ec>)
 8001e56:	f003 feb5 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <MX_GPIO_Init+0x2ec>)
 8001ef2:	f005 fa7b 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001e5a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <MX_GPIO_Init+0x2ec>)
 8001e74:	f003 fea6 	bl	8005bc4 <HAL_GPIO_Init>
 8001e78:	e018      	b.n	8001eac <MX_GPIO_Init+0x308>
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40022800 	.word	0x40022800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40021800 	.word	0x40021800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40022400 	.word	0x40022400
 8001ea4:	10120000 	.word	0x10120000
 8001ea8:	40020800 	.word	0x40020800
=======
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <MX_GPIO_Init+0x2ec>)
 8001f10:	f005 fa6c 	bl	80073ec <HAL_GPIO_Init>
 8001f14:	e018      	b.n	8001f48 <MX_GPIO_Init+0x308>
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40022800 	.word	0x40022800
 8001f2c:	40021c00 	.word	0x40021c00
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40022400 	.word	0x40022400
 8001f40:	10120000 	.word	0x10120000
 8001f44:	40020800 	.word	0x40020800
>>>>>>> Stashed changes

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <MX_GPIO_Init+0x3c0>)
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4829      	ldr	r0, [pc, #164]	; (8001f68 <MX_GPIO_Init+0x3c4>)
 8001ec2:	f003 fe7f 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4833      	ldr	r0, [pc, #204]	; (800202c <MX_GPIO_Init+0x3ec>)
 8001f5e:	f005 fa45 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4822      	ldr	r0, [pc, #136]	; (8001f6c <MX_GPIO_Init+0x3c8>)
 8001ee2:	f003 fe6f 	bl	8005bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001ee6:	2384      	movs	r3, #132	; 0x84
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481d      	ldr	r0, [pc, #116]	; (8001f70 <MX_GPIO_Init+0x3cc>)
 8001efa:	f003 fe63 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	482c      	ldr	r0, [pc, #176]	; (8002030 <MX_GPIO_Init+0x3f0>)
 8001f7e:	f005 fa35 	bl	80073ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BP_joystick_Pin */
  GPIO_InitStruct.Pin = BP_joystick_Pin;
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <MX_GPIO_Init+0x3f4>)
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BP_joystick_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	4828      	ldr	r0, [pc, #160]	; (8002038 <MX_GPIO_Init+0x3f8>)
 8001f96:	f005 fa29 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001efe:	2305      	movs	r3, #5
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f0e:	230a      	movs	r3, #10
 8001f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4816      	ldr	r0, [pc, #88]	; (8001f74 <MX_GPIO_Init+0x3d0>)
 8001f1a:	f003 fe53 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <MX_GPIO_Init+0x3fc>)
 8001fb6:	f005 fa19 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f32:	4619      	mov	r1, r3
 8001f34:	480e      	ldr	r0, [pc, #56]	; (8001f70 <MX_GPIO_Init+0x3cc>)
 8001f36:	f003 fe45 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8001fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4819      	ldr	r0, [pc, #100]	; (8002038 <MX_GPIO_Init+0x3f8>)
 8001fd2:	f005 fa0b 	bl	80073ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4813      	ldr	r0, [pc, #76]	; (8002038 <MX_GPIO_Init+0x3f8>)
 8001fea:	f005 f9ff 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f3a:	2328      	movs	r3, #40	; 0x28
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< Updated upstream
 8001f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	4808      	ldr	r0, [pc, #32]	; (8001f78 <MX_GPIO_Init+0x3d4>)
 8001f56:	f003 fe35 	bl	8005bc4 <HAL_GPIO_Init>

}
 8001f5a:	bf00      	nop
 8001f5c:	3740      	adds	r7, #64	; 0x40
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	10120000 	.word	0x10120000
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021c00 	.word	0x40021c00
 8001f70:	40021800 	.word	0x40021800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_UART_RxCpltCallback>:
=======
 8002002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002006:	4619      	mov	r1, r3
 8002008:	480d      	ldr	r0, [pc, #52]	; (8002040 <MX_GPIO_Init+0x400>)
 800200a:	f005 f9ef 	bl	80073ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2105      	movs	r1, #5
 8002012:	2017      	movs	r0, #23
 8002014:	f004 fc88 	bl	8006928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002018:	2017      	movs	r0, #23
 800201a:	f004 fca1 	bl	8006960 <HAL_NVIC_EnableIRQ>

}
 800201e:	bf00      	nop
 8002020:	3740      	adds	r7, #64	; 0x40
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	10120000 	.word	0x10120000
 800202c:	40022000 	.word	0x40022000
 8002030:	40021c00 	.word	0x40021c00
 8002034:	10110000 	.word	0x10110000
 8002038:	40021800 	.word	0x40021800
 800203c:	40020800 	.word	0x40020800
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
uint8_t Message;
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
<<<<<<< Updated upstream
 8001f84:	2201      	movs	r2, #1
 8001f86:	2120      	movs	r1, #32
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <HAL_UART_RxCpltCallback+0x44>)
 8001f8a:	f004 f8e7 	bl	800615c <HAL_GPIO_WritePin>
HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <HAL_UART_RxCpltCallback+0x48>)
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <HAL_UART_RxCpltCallback+0x4c>)
 8001f94:	f008 fa32 	bl	800a3fc <HAL_UART_Receive_IT>
=======
 800204c:	2201      	movs	r2, #1
 800204e:	2120      	movs	r1, #32
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <HAL_UART_RxCpltCallback+0x44>)
 8002052:	f005 fc97 	bl	8007984 <HAL_GPIO_WritePin>
HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8002056:	2201      	movs	r2, #1
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <HAL_UART_RxCpltCallback+0x48>)
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <HAL_UART_RxCpltCallback+0x4c>)
 800205c:	f009 fd32 	bl	800bac4 <HAL_UART_Receive_IT>
>>>>>>> Stashed changes
Message = rxbuffer[0];
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_UART_RxCpltCallback+0x48>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	73fb      	strb	r3, [r7, #15]
xQueueSendFromISR(myQueueUARTHandle, &Message, 0);
<<<<<<< Updated upstream
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_UART_RxCpltCallback+0x50>)
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f107 010f 	add.w	r1, r7, #15
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f009 fe2b 	bl	800bc04 <xQueueGenericSendFromISR>
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <HAL_UART_RxCpltCallback+0x44>)
 8001fb4:	f004 f8d2 	bl	800615c <HAL_GPIO_WritePin>
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	20008c70 	.word	0x20008c70
 8001fc8:	20008a44 	.word	0x20008a44
 8001fcc:	20008908 	.word	0x20008908

08001fd0 <StartDefaultTask>:
=======
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_UART_RxCpltCallback+0x50>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f107 010f 	add.w	r1, r7, #15
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	f00b f92b 	bl	800d2cc <xQueueGenericSendFromISR>
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,0);
 8002076:	2200      	movs	r2, #0
 8002078:	2120      	movs	r1, #32
 800207a:	4803      	ldr	r0, [pc, #12]	; (8002088 <HAL_UART_RxCpltCallback+0x44>)
 800207c:	f005 fc82 	bl	8007984 <HAL_GPIO_WritePin>
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	20009ca4 	.word	0x20009ca4
 8002090:	20009a70 	.word	0x20009a70
 8002094:	20009934 	.word	0x20009934

08002098 <HAL_GPIO_EXTI_Callback>:
/*
 * Interuption sur le click joystick
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2120      	movs	r1, #32
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_GPIO_EXTI_Callback+0x24>)
 80020a8:	f005 fc6c 	bl	8007984 <HAL_GPIO_WritePin>
	etat = etat_int;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80020b2:	701a      	strb	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	2000101b 	.word	0x2000101b
 80020c4:	2000101a 	.word	0x2000101a

080020c8 <TestConditionBord>:
/*
test les condition de bord en un point pour ne pas ecrire
hors de l'écran.
*/
char TestConditionBord(uint16_t x, uint16_t y, uint16_t rad)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
 80020d2:	460b      	mov	r3, r1
 80020d4:	80bb      	strh	r3, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	807b      	strh	r3, [r7, #2]
	char bool = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
	if(((x-rad)>=0) && ((x+rad)<=480-5-taille_menu) && ((y-rad)>=0) && ((y+rad)<246))
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db11      	blt.n	800210c <TestConditionBord+0x44>
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	4413      	add	r3, r2
 80020ee:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 80020f2:	da0b      	bge.n	800210c <TestConditionBord+0x44>
 80020f4:	88ba      	ldrh	r2, [r7, #4]
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db06      	blt.n	800210c <TestConditionBord+0x44>
 80020fe:	88ba      	ldrh	r2, [r7, #4]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4413      	add	r3, r2
 8002104:	2bf5      	cmp	r3, #245	; 0xf5
 8002106:	dc01      	bgt.n	800210c <TestConditionBord+0x44>
	{
		bool = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
	}
	return bool;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <LCD_PAINTBRUSH>:
/*
 * dessine la forme du pinceau actuel pour la zone de dessin
 */
void LCD_PAINTBRUSH(uint16_t x, uint16_t y,uint16_t rad)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
 8002126:	460b      	mov	r3, r1
 8002128:	80bb      	strh	r3, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	807b      	strh	r3, [r7, #2]
	switch(brush)
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <LCD_PAINTBRUSH+0x48>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <LCD_PAINTBRUSH+0x20>
 8002136:	2b01      	cmp	r3, #1
 8002138:	d008      	beq.n	800214c <LCD_PAINTBRUSH+0x30>
		BSP_LCD_FillCircle(x, y, rad);
		break;
	case 1 :
		BSP_LCD_FillRect(0, 0, 425, 246);
	}
}
 800213a:	e00e      	b.n	800215a <LCD_PAINTBRUSH+0x3e>
		BSP_LCD_FillCircle(x, y, rad);
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	88b9      	ldrh	r1, [r7, #4]
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 f9fa 	bl	800453c <BSP_LCD_FillCircle>
		break;
 8002148:	bf00      	nop
}
 800214a:	e006      	b.n	800215a <LCD_PAINTBRUSH+0x3e>
		BSP_LCD_FillRect(0, 0, 425, 246);
 800214c:	23f6      	movs	r3, #246	; 0xf6
 800214e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f002 f977 	bl	8004448 <BSP_LCD_FillRect>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20001019 	.word	0x20001019

08002168 <LCD_PAINTBRUSH_SAMPLE>:
/*
 * Dessine la forme du pinceau actuel pour la zone menu (fonction séparé car
 * pour la fonction de remplissage du fond on veut juste afficher un logo).
 */
void LCD_PAINTBRUSH_SAMPLE(uint16_t x, uint16_t y,uint16_t rad)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
 8002172:	460b      	mov	r3, r1
 8002174:	80bb      	strh	r3, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	807b      	strh	r3, [r7, #2]
	uint32_t color;
	switch(brush)
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <LCD_PAINTBRUSH_SAMPLE+0xcc>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <LCD_PAINTBRUSH_SAMPLE+0x20>
 8002182:	2b01      	cmp	r3, #1
 8002184:	d008      	beq.n	8002198 <LCD_PAINTBRUSH_SAMPLE+0x30>
				color = brush_remplir[i][j] | (brush_remplir[i][j]<<8) | (brush_remplir[i][j]<<16) | 0xFF000000;
				BSP_LCD_DrawPixel(x-15+j, y-15+i, color);
			}
		}
	}
}
 8002186:	e050      	b.n	800222a <LCD_PAINTBRUSH_SAMPLE+0xc2>
		BSP_LCD_FillCircle(x, y, rad);
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	88b9      	ldrh	r1, [r7, #4]
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	4618      	mov	r0, r3
 8002190:	f002 f9d4 	bl	800453c <BSP_LCD_FillCircle>
		break;
 8002194:	bf00      	nop
}
 8002196:	e048      	b.n	800222a <LCD_PAINTBRUSH_SAMPLE+0xc2>
		for(int i=0; i<34;i++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e042      	b.n	8002224 <LCD_PAINTBRUSH_SAMPLE+0xbc>
			for(int j=0; j<30;j++)
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e039      	b.n	8002218 <LCD_PAINTBRUSH_SAMPLE+0xb0>
				color = brush_remplir[i][j] | (brush_remplir[i][j]<<8) | (brush_remplir[i][j]<<16) | 0xFF000000;
 80021a4:	4924      	ldr	r1, [pc, #144]	; (8002238 <LCD_PAINTBRUSH_SAMPLE+0xd0>)
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80021b8:	481f      	ldr	r0, [pc, #124]	; (8002238 <LCD_PAINTBRUSH_SAMPLE+0xd0>)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4319      	orrs	r1, r3
 80021d0:	4819      	ldr	r0, [pc, #100]	; (8002238 <LCD_PAINTBRUSH_SAMPLE+0xd0>)
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ec:	60fb      	str	r3, [r7, #12]
				BSP_LCD_DrawPixel(x-15+j, y-15+i, color);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	4413      	add	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b0f      	subs	r3, #15
 80021fa:	b298      	uxth	r0, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b0f      	subs	r3, #15
 8002208:	b29b      	uxth	r3, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4619      	mov	r1, r3
 800220e:	f002 f8d3 	bl	80043b8 <BSP_LCD_DrawPixel>
			for(int j=0; j<30;j++)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3301      	adds	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b1d      	cmp	r3, #29
 800221c:	ddc2      	ble.n	80021a4 <LCD_PAINTBRUSH_SAMPLE+0x3c>
		for(int i=0; i<34;i++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b21      	cmp	r3, #33	; 0x21
 8002228:	ddb9      	ble.n	800219e <LCD_PAINTBRUSH_SAMPLE+0x36>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20001019 	.word	0x20001019
 8002238:	20000028 	.word	0x20000028

0800223c <AfficheTonalite>:
 * pour afficher toutes les tonalité il faudrait 256*6 = 1536 pixels, on prend donc que
 * 64 niveaux de tonalité pour chaque mélange (R+V, V+R, V+B, B+V, B+R, R+B). Soit un total
 * de 64*6 = 384 pixels nécessaire
 */
void AfficheTonalite()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	; 0x38
 8002240:	af00      	add	r7, sp, #0
	uint32_t RVB = 0x0;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
	BSP_LCD_SelectLayer(1);
 8002246:	2001      	movs	r0, #1
 8002248:	f001 fd4c 	bl	8003ce4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f001 fd58 	bl	8003d04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002254:	2315      	movs	r3, #21
 8002256:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800225a:	21fb      	movs	r1, #251	; 0xfb
 800225c:	2000      	movs	r0, #0
 800225e:	f002 f8f3 	bl	8004448 <BSP_LCD_FillRect>
	//affichage R+V :
	for(uint32_t i = 0;i<256; i = i+4)
 8002262:	2300      	movs	r3, #0
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
 8002266:	e022      	b.n	80022ae <AfficheTonalite+0x72>
   {
		RVB = 0xFFFF0000 | (i<<8); //Red à 255, Vert augmente
 8002268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	4b76      	ldr	r3, [pc, #472]	; (8002448 <AfficheTonalite+0x20c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002278:	e012      	b.n	80022a0 <AfficheTonalite+0x64>
		{
			BSP_LCD_DrawPixel(50+i/4, 252+j, RVB);
 800227a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	b29b      	uxth	r3, r3
 8002280:	3332      	adds	r3, #50	; 0x32
 8002282:	b298      	uxth	r0, r3
 8002284:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002288:	b29b      	uxth	r3, r3
 800228a:	33fc      	adds	r3, #252	; 0xfc
 800228c:	b29b      	uxth	r3, r3
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4619      	mov	r1, r3
 8002292:	f002 f891 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002296:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800229a:	3301      	adds	r3, #1
 800229c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022a4:	2b11      	cmp	r3, #17
 80022a6:	d9e8      	bls.n	800227a <AfficheTonalite+0x3e>
	for(uint32_t i = 0;i<256; i = i+4)
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	3304      	adds	r3, #4
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
 80022ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b0:	2bff      	cmp	r3, #255	; 0xff
 80022b2:	d9d9      	bls.n	8002268 <AfficheTonalite+0x2c>
		}
   }
	//affichage V+R :
	for(uint32_t i = 252;i<253; i = i-4)
 80022b4:	23fc      	movs	r3, #252	; 0xfc
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b8:	e023      	b.n	8002302 <AfficheTonalite+0xc6>
		// i est un uint donc quand i passe en dessus de 0 il est interprèter comme un grand nombre d'où le i<253
   {
		RVB = 0xFF00FF00 | (i<<16); //Vert à 255, Red diminue
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 80022c2:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ca:	e013      	b.n	80022f4 <AfficheTonalite+0xb8>
		{
			BSP_LCD_DrawPixel(114+(63-i/4), 252+j, RVB);
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f1c3 03b1 	rsb	r3, r3, #177	; 0xb1
 80022d6:	b298      	uxth	r0, r3
 80022d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022dc:	b29b      	uxth	r3, r3
 80022de:	33fc      	adds	r3, #252	; 0xfc
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f002 f867 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80022ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022ee:	3301      	adds	r3, #1
 80022f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022f8:	2b11      	cmp	r3, #17
 80022fa:	d9e7      	bls.n	80022cc <AfficheTonalite+0x90>
	for(uint32_t i = 252;i<253; i = i-4)
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	3b04      	subs	r3, #4
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	2bfc      	cmp	r3, #252	; 0xfc
 8002306:	d9d8      	bls.n	80022ba <AfficheTonalite+0x7e>
		}
   }
	//affichage V+B :
	for(uint32_t i = 0;i<256; i = i+4)
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e021      	b.n	8002352 <AfficheTonalite+0x116>
   {
		RVB = 0xFF00FF00 | i; // Vert à 255, Bleu augmente
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 8002314:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800231c:	e012      	b.n	8002344 <AfficheTonalite+0x108>
		{
			BSP_LCD_DrawPixel(178+i/4, 252+j, RVB);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	b29b      	uxth	r3, r3
 8002324:	33b2      	adds	r3, #178	; 0xb2
 8002326:	b298      	uxth	r0, r3
 8002328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800232c:	b29b      	uxth	r3, r3
 800232e:	33fc      	adds	r3, #252	; 0xfc
 8002330:	b29b      	uxth	r3, r3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4619      	mov	r1, r3
 8002336:	f002 f83f 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 800233a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800233e:	3301      	adds	r3, #1
 8002340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002348:	2b11      	cmp	r3, #17
 800234a:	d9e8      	bls.n	800231e <AfficheTonalite+0xe2>
	for(uint32_t i = 0;i<256; i = i+4)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3304      	adds	r3, #4
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	2bff      	cmp	r3, #255	; 0xff
 8002356:	d9da      	bls.n	800230e <AfficheTonalite+0xd2>
		}
   }
	//affichage B+V :
	for(uint32_t i = 252;i<253; i = i-4)
 8002358:	23fc      	movs	r3, #252	; 0xfc
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	e01f      	b.n	800239e <AfficheTonalite+0x162>
   {
		RVB = 0xFF0000FF | (i<<8); // Bleu à 255, Vert diminue
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	021a      	lsls	r2, r3, #8
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <AfficheTonalite+0x210>)
 8002364:	4313      	orrs	r3, r2
 8002366:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002368:	2300      	movs	r3, #0
 800236a:	76fb      	strb	r3, [r7, #27]
 800236c:	e011      	b.n	8002392 <AfficheTonalite+0x156>
		{
			BSP_LCD_DrawPixel(242+(63-i/4), 252+j, RVB);
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	b29a      	uxth	r2, r3
 8002374:	f240 1331 	movw	r3, #305	; 0x131
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	b298      	uxth	r0, r3
 800237c:	7efb      	ldrb	r3, [r7, #27]
 800237e:	b29b      	uxth	r3, r3
 8002380:	33fc      	adds	r3, #252	; 0xfc
 8002382:	b29b      	uxth	r3, r3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4619      	mov	r1, r3
 8002388:	f002 f816 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 800238c:	7efb      	ldrb	r3, [r7, #27]
 800238e:	3301      	adds	r3, #1
 8002390:	76fb      	strb	r3, [r7, #27]
 8002392:	7efb      	ldrb	r3, [r7, #27]
 8002394:	2b11      	cmp	r3, #17
 8002396:	d9ea      	bls.n	800236e <AfficheTonalite+0x132>
	for(uint32_t i = 252;i<253; i = i-4)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3b04      	subs	r3, #4
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2bfc      	cmp	r3, #252	; 0xfc
 80023a2:	d9dc      	bls.n	800235e <AfficheTonalite+0x122>
		}
   }
	//affichage B+R :
	for(uint32_t i = 0;i<256; i = i+4)
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e01e      	b.n	80023e8 <AfficheTonalite+0x1ac>
   {
		RVB = 0xFF0000FF | (i<<16);// Bleu à 255, Red augmente
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	041a      	lsls	r2, r3, #16
 80023ae:	4b27      	ldr	r3, [pc, #156]	; (800244c <AfficheTonalite+0x210>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	74fb      	strb	r3, [r7, #19]
 80023b8:	e010      	b.n	80023dc <AfficheTonalite+0x1a0>
		{
			BSP_LCD_DrawPixel(306+i/4, 252+j, RVB);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80023c4:	b298      	uxth	r0, r3
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	33fc      	adds	r3, #252	; 0xfc
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f001 fff1 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	3301      	adds	r3, #1
 80023da:	74fb      	strb	r3, [r7, #19]
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b11      	cmp	r3, #17
 80023e0:	d9eb      	bls.n	80023ba <AfficheTonalite+0x17e>
	for(uint32_t i = 0;i<256; i = i+4)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3304      	adds	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2bff      	cmp	r3, #255	; 0xff
 80023ec:	d9dd      	bls.n	80023aa <AfficheTonalite+0x16e>
		}
   }
	//affichage R+B :
	for(uint32_t i = 252;i<253; i = i-4)
 80023ee:	23fc      	movs	r3, #252	; 0xfc
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e01e      	b.n	8002432 <AfficheTonalite+0x1f6>
   {
		RVB = 0xFFFF0000 | (i);// Red à 255, Bleu diminue
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <AfficheTonalite+0x20c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	72fb      	strb	r3, [r7, #11]
 8002400:	e011      	b.n	8002426 <AfficheTonalite+0x1ea>
		{
			BSP_LCD_DrawPixel(370+(63-i/4), 252+j, RVB);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	b29a      	uxth	r2, r3
 8002408:	f240 13b1 	movw	r3, #433	; 0x1b1
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	b298      	uxth	r0, r3
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	b29b      	uxth	r3, r3
 8002414:	33fc      	adds	r3, #252	; 0xfc
 8002416:	b29b      	uxth	r3, r3
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4619      	mov	r1, r3
 800241c:	f001 ffcc 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002420:	7afb      	ldrb	r3, [r7, #11]
 8002422:	3301      	adds	r3, #1
 8002424:	72fb      	strb	r3, [r7, #11]
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	2b11      	cmp	r3, #17
 800242a:	d9ea      	bls.n	8002402 <AfficheTonalite+0x1c6>
	for(uint32_t i = 252;i<253; i = i-4)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3b04      	subs	r3, #4
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2bfc      	cmp	r3, #252	; 0xfc
 8002436:	d9dd      	bls.n	80023f4 <AfficheTonalite+0x1b8>
		}
   }
	osDelay(200);
 8002438:	20c8      	movs	r0, #200	; 0xc8
 800243a:	f00a fba8 	bl	800cb8e <osDelay>
}
 800243e:	bf00      	nop
 8002440:	3738      	adds	r7, #56	; 0x38
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	ffff0000 	.word	0xffff0000
 800244c:	ff0000ff 	.word	0xff0000ff

08002450 <AfficheLuminosite>:

/*
 * Affiche le dégradé de luminosité pour que l'utilisateur puisse faire son choix
 */
void AfficheLuminosite(float ton, float sat)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	ed87 0a01 	vstr	s0, [r7, #4]
 800245a:	edc7 0a00 	vstr	s1, [r7]
	float lum;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f001 fc40 	bl	8003ce4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f001 fc4c 	bl	8003d04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 800246c:	2315      	movs	r3, #21
 800246e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002472:	21fb      	movs	r1, #251	; 0xfb
 8002474:	2000      	movs	r0, #0
 8002476:	f001 ffe7 	bl	8004448 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e02e      	b.n	80024de <AfficheLuminosite+0x8e>
    {
		lum = (float)i/255;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800248a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80024f4 <AfficheLuminosite+0xa4>
 800248e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002492:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 8002496:	ed97 1a03 	vldr	s2, [r7, #12]
 800249a:	edd7 0a00 	vldr	s1, [r7]
 800249e:	ed97 0a01 	vldr	s0, [r7, #4]
 80024a2:	f000 f87d 	bl	80025a0 <FindCouleur>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ac:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	74fb      	strb	r3, [r7, #19]
 80024b2:	e00e      	b.n	80024d2 <AfficheLuminosite+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3364      	adds	r3, #100	; 0x64
 80024ba:	b298      	uxth	r0, r3
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	33fc      	adds	r3, #252	; 0xfc
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4619      	mov	r1, r3
 80024c8:	f001 ff76 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	3301      	adds	r3, #1
 80024d0:	74fb      	strb	r3, [r7, #19]
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d9ed      	bls.n	80024b4 <AfficheLuminosite+0x64>
	for(uint32_t i = 0;i<256;i++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2bff      	cmp	r3, #255	; 0xff
 80024e2:	d9cd      	bls.n	8002480 <AfficheLuminosite+0x30>
		}
    }
	osDelay(200);
 80024e4:	20c8      	movs	r0, #200	; 0xc8
 80024e6:	f00a fb52 	bl	800cb8e <osDelay>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	437f0000 	.word	0x437f0000

080024f8 <AfficheSaturation>:

/*
 * Affiche le dégradé de saturation pour que l'utilisateur puisse faire son choix
 */
void AfficheSaturation(float ton, float lum)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002502:	edc7 0a00 	vstr	s1, [r7]
	float sat;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 8002506:	2001      	movs	r0, #1
 8002508:	f001 fbec 	bl	8003ce4 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f001 fbf8 	bl	8003d04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002514:	2315      	movs	r3, #21
 8002516:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800251a:	21fb      	movs	r1, #251	; 0xfb
 800251c:	2000      	movs	r0, #0
 800251e:	f001 ff93 	bl	8004448 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e02e      	b.n	8002586 <AfficheSaturation+0x8e>
    {
		sat = (float)i/255;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002532:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800259c <AfficheSaturation+0xa4>
 8002536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800253a:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 800253e:	ed97 1a00 	vldr	s2, [r7]
 8002542:	edd7 0a03 	vldr	s1, [r7, #12]
 8002546:	ed97 0a01 	vldr	s0, [r7, #4]
 800254a:	f000 f829 	bl	80025a0 <FindCouleur>
 800254e:	4603      	mov	r3, r0
 8002550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002554:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 8002556:	2300      	movs	r3, #0
 8002558:	74fb      	strb	r3, [r7, #19]
 800255a:	e00e      	b.n	800257a <AfficheSaturation+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	b29b      	uxth	r3, r3
 8002560:	3364      	adds	r3, #100	; 0x64
 8002562:	b298      	uxth	r0, r3
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	b29b      	uxth	r3, r3
 8002568:	33fc      	adds	r3, #252	; 0xfc
 800256a:	b29b      	uxth	r3, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	4619      	mov	r1, r3
 8002570:	f001 ff22 	bl	80043b8 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	3301      	adds	r3, #1
 8002578:	74fb      	strb	r3, [r7, #19]
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	2b11      	cmp	r3, #17
 800257e:	d9ed      	bls.n	800255c <AfficheSaturation+0x64>
	for(uint32_t i = 0;i<256;i++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2bff      	cmp	r3, #255	; 0xff
 800258a:	d9cd      	bls.n	8002528 <AfficheSaturation+0x30>
		}
    }
	osDelay(200);
 800258c:	20c8      	movs	r0, #200	; 0xc8
 800258e:	f00a fafe 	bl	800cb8e <osDelay>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	437f0000 	.word	0x437f0000

080025a0 <FindCouleur>:
/*
 * trouve la couleur RVB à partir de la couleur TSL:
 * renvoi un entier de la forme RGB-888 : 0xRRVVBB
 */
uint32_t FindCouleur(float ton, float sat, float lum)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80025aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80025ae:	ed87 1a01 	vstr	s2, [r7, #4]
	char Red, Green, Blue;
	uint32_t color = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 0;
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 0;
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 0;
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	float C;
	float m;
	float T_prime;
	float X;
	C = lum*sat;
 80025c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80025cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	m = lum-C;
 80025d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80025dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	edc7 7a08 	vstr	s15, [r7, #32]
	T_prime = ton/60;
 80025e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80025ec:	eddf 6a61 	vldr	s13, [pc, #388]	; 8002774 <FindCouleur+0x1d4>
 80025f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f4:	edc7 7a07 	vstr	s15, [r7, #28]
	X = C*(1-absolu((modulo(T_prime, 2))-1));
 80025f8:	2002      	movs	r0, #2
 80025fa:	ed97 0a07 	vldr	s0, [r7, #28]
 80025fe:	f000 f917 	bl	8002830 <modulo>
 8002602:	eeb0 7a40 	vmov.f32	s14, s0
 8002606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800260a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	f000 f92f 	bl	8002874 <absolu>
 8002616:	eeb0 7a40 	vmov.f32	s14, s0
 800261a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800261e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002622:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a06 	vstr	s15, [r7, #24]
	if((T_prime>=0) && (T_prime<1))
 800262e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	db0d      	blt.n	8002658 <FindCouleur+0xb8>
 800263c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	d504      	bpl.n	8002658 <FindCouleur+0xb8>
	{
		R = C;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
		V = X;
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 8002656:	e044      	b.n	80026e2 <FindCouleur+0x142>
	}
	else if(T_prime<2)
 8002658:	edd7 7a07 	vldr	s15, [r7, #28]
 800265c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	d504      	bpl.n	8002674 <FindCouleur+0xd4>
	{
		R = X;
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
		V = C;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
 8002672:	e036      	b.n	80026e2 <FindCouleur+0x142>
	}
	else if(T_prime<3)
 8002674:	edd7 7a07 	vldr	s15, [r7, #28]
 8002678:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800267c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	d504      	bpl.n	8002690 <FindCouleur+0xf0>
	{
		B = X;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = C;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 800268e:	e028      	b.n	80026e2 <FindCouleur+0x142>
	}
	else if(T_prime<4)
 8002690:	edd7 7a07 	vldr	s15, [r7, #28]
 8002694:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d504      	bpl.n	80026ac <FindCouleur+0x10c>
	{
		B = C;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = X;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
 80026aa:	e01a      	b.n	80026e2 <FindCouleur+0x142>
	}
	else if(T_prime<5)
 80026ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80026b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	d504      	bpl.n	80026c8 <FindCouleur+0x128>
	{
		B = C;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		R = X;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e00c      	b.n	80026e2 <FindCouleur+0x142>
	}
	else if(T_prime<6)
 80026c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026cc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80026d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d8:	d503      	bpl.n	80026e2 <FindCouleur+0x142>
	{
		R = C;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
		B = X;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	R = (R+m)*255;
 80026e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80026ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002778 <FindCouleur+0x1d8>
 80026f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	V = (V+m)*255;
 80026fa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80026fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002778 <FindCouleur+0x1d8>
 800270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	B = (B+m)*255;
 8002712:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002716:	edd7 7a08 	vldr	s15, [r7, #32]
 800271a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002778 <FindCouleur+0x1d8>
 8002722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002726:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Red = (int)R;
 800272a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800272e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002732:	edc7 7a00 	vstr	s15, [r7]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	75fb      	strb	r3, [r7, #23]
	Green = (int)V;
 800273a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800273e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002742:	edc7 7a00 	vstr	s15, [r7]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	75bb      	strb	r3, [r7, #22]
	Blue = (int)B;
 800274a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800274e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002752:	edc7 7a00 	vstr	s15, [r7]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	757b      	strb	r3, [r7, #21]
	color = (Red<<16)+(Green<<8)+Blue;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	7dbb      	ldrb	r3, [r7, #22]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	441a      	add	r2, r3
 8002764:	7d7b      	ldrb	r3, [r7, #21]
 8002766:	4413      	add	r3, r2
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
	return color;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800276c:	4618      	mov	r0, r3
 800276e:	3738      	adds	r7, #56	; 0x38
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	42700000 	.word	0x42700000
 8002778:	437f0000 	.word	0x437f0000

0800277c <FindTonalite>:
/*
 * Renvoi la tonalité entre 0° et 360° à partir de la position du doigt sur la barre
 */
float FindTonalite(uint16_t pos)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
	float ton;
	ton = (float)pos;
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002790:	edc7 7a03 	vstr	s15, [r7, #12]
	ton = (ton/383)*360;
 8002794:	ed97 7a03 	vldr	s14, [r7, #12]
 8002798:	eddf 6a09 	vldr	s13, [pc, #36]	; 80027c0 <FindTonalite+0x44>
 800279c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80027c4 <FindTonalite+0x48>
 80027a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a8:	edc7 7a03 	vstr	s15, [r7, #12]
	return ton;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	ee07 3a90 	vmov	s15, r3
}
 80027b2:	eeb0 0a67 	vmov.f32	s0, s15
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	43bf8000 	.word	0x43bf8000
 80027c4:	43b40000 	.word	0x43b40000

080027c8 <FindLuminosite>:

/*
 * Renvoi la Luminosité entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindLuminosite(uint16_t pos)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
	return (float) pos/255;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027f8 <FindLuminosite+0x30>
 80027e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80027e8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	437f0000 	.word	0x437f0000

080027fc <FindSaturation>:

/*
 * Renvoi la Saturation entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindSaturation(uint16_t pos)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
	return (float)pos/255;
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800282c <FindSaturation+0x30>
 8002814:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002818:	eef0 7a66 	vmov.f32	s15, s13
}
 800281c:	eeb0 0a67 	vmov.f32	s0, s15
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	437f0000 	.word	0x437f0000

08002830 <modulo>:

float modulo(float val, char mod)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	ed87 0a01 	vstr	s0, [r7, #4]
 800283a:	4603      	mov	r3, r0
 800283c:	70fb      	strb	r3, [r7, #3]
	uint32_t q;
	q = (int) val/mod;
 800283e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002846:	ee17 2a90 	vmov	r2, s15
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002850:	60fb      	str	r3, [r7, #12]
	return(val - 2*q);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800285e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002866:	eeb0 0a67 	vmov.f32	s0, s15
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <absolu>:

float absolu(float val)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(val<0) return -val;
 800287e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d504      	bpl.n	8002896 <absolu+0x22>
 800288c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002890:	eef1 7a67 	vneg.f32	s15, s15
 8002894:	e001      	b.n	800289a <absolu+0x26>
	else return val;
 8002896:	edd7 7a01 	vldr	s15, [r7, #4]
}
 800289a:	eeb0 0a67 	vmov.f32	s0, s15
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <StartDefaultTask>:
>>>>>>> Stashed changes
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
<<<<<<< Updated upstream
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
=======
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
<<<<<<< Updated upstream
    osDelay(1);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f009 fa74 	bl	800b4c6 <osDelay>
 8001fde:	e7fb      	b.n	8001fd8 <StartDefaultTask+0x8>

08001fe0 <StartMode>:
=======
	  osDelay(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f00a f96c 	bl	800cb8e <osDelay>
 80028b6:	e7fb      	b.n	80028b0 <StartDefaultTask+0x8>

080028b8 <StartMode>:
>>>>>>> Stashed changes
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMode */
void StartMode(void const * argument)
{
<<<<<<< Updated upstream
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
=======
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	b0ca      	sub	sp, #296	; 0x128
 80028bc:	af00      	add	r7, sp, #0
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	6018      	str	r0, [r3, #0]
>>>>>>> Stashed changes
  /* USER CODE BEGIN StartMode */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
<<<<<<< Updated upstream
 8001fe8:	f00a fc00 	bl	800c7ec <xTaskGetTickCount>
 8001fec:	4603      	mov	r3, r0
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  static TS_StateTypeDef  TS_State;
  char etat = 'p';
 8001ff0:	2370      	movs	r3, #112	; 0x70
 8001ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  char layer = '0';
 8001ff6:	2330      	movs	r3, #48	; 0x30
 8001ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  char message_layer[] = "selectionner le layer (1 ou 2)";
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	; (80020e8 <StartMode+0x108>)
 8001ffe:	f107 0408 	add.w	r4, r7, #8
 8002002:	461d      	mov	r5, r3
 8002004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002008:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800200c:	c407      	stmia	r4!, {r0, r1, r2}
 800200e:	8023      	strh	r3, [r4, #0]
 8002010:	3402      	adds	r4, #2
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	7023      	strb	r3, [r4, #0]
  BSP_LCD_SetTransparency(1, 0x00);
 8002016:	2100      	movs	r1, #0
 8002018:	2001      	movs	r0, #1
 800201a:	f000 fb31 	bl	8002680 <BSP_LCD_SetTransparency>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800201e:	f04f 30ff 	mov.w	r0, #4294967295
 8002022:	f000 fba1 	bl	8002768 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002026:	4831      	ldr	r0, [pc, #196]	; (80020ec <StartMode+0x10c>)
 8002028:	f000 fb3c 	bl	80026a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetTransparency(1, 0x00);
 800202c:	2100      	movs	r1, #0
 800202e:	2001      	movs	r0, #1
 8002030:	f000 fb26 	bl	8002680 <BSP_LCD_SetTransparency>
=======
 80028c2:	f00b fb17 	bl	800def4 <xTaskGetTickCount>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  static TS_StateTypeDef  TS_State;
  char radius_prec; //rayon précédent pour supprimer le curseur dans la sélection
  char sous_menu = 0; // permet de savoir si on est dans un sous menu
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  char menu_couleur = 0; // permet de savoir si on est dans un des sous_menu couleur (tonalité, saturation, luminosité)
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  //valeur TSL pour la couleur
  float ton = 180.0;
 80028d8:	4ba9      	ldr	r3, [pc, #676]	; (8002b80 <StartMode+0x2c8>)
 80028da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  float lum = 0.5;
 80028de:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80028e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  float sat = 0.5;
 80028e6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80028ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  char layer = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  char text[] = "   Layer   |   Pinceau   | Transparence |   Couleur   |    Taille   ";
 80028f4:	4aa3      	ldr	r2, [pc, #652]	; (8002b84 <StartMode+0x2cc>)
 80028f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028fa:	4611      	mov	r1, r2
 80028fc:	2245      	movs	r2, #69	; 0x45
 80028fe:	4618      	mov	r0, r3
 8002900:	f00c fca2 	bl	800f248 <memcpy>
  char text_layer[] = "Calque 1        |        Calque 2";
 8002904:	4ba0      	ldr	r3, [pc, #640]	; (8002b88 <StartMode+0x2d0>)
 8002906:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 800290a:	461d      	mov	r5, r3
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	8023      	strh	r3, [r4, #0]
  char text_alpha[] = "Choisir la transparence : ";
 8002918:	4b9c      	ldr	r3, [pc, #624]	; (8002b8c <StartMode+0x2d4>)
 800291a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800291e:	461d      	mov	r5, r3
 8002920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002928:	c403      	stmia	r4!, {r0, r1}
 800292a:	8022      	strh	r2, [r4, #0]
 800292c:	3402      	adds	r4, #2
 800292e:	0c13      	lsrs	r3, r2, #16
 8002930:	7023      	strb	r3, [r4, #0]
  char text_couleur[] = "Tonalite  |    Saturation    | Luminosite";
 8002932:	4b97      	ldr	r3, [pc, #604]	; (8002b90 <StartMode+0x2d8>)
 8002934:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002938:	461d      	mov	r5, r3
 800293a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002946:	c403      	stmia	r4!, {r0, r1}
 8002948:	8022      	strh	r2, [r4, #0]
  couleur = FindCouleur(180,0.5,0.5)|0xFF000000;
 800294a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800294e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002952:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8002b94 <StartMode+0x2dc>
 8002956:	f7ff fe23 	bl	80025a0 <FindCouleur>
 800295a:	4603      	mov	r3, r0
 800295c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002960:	4a8d      	ldr	r2, [pc, #564]	; (8002b98 <StartMode+0x2e0>)
 8002962:	6013      	str	r3, [r2, #0]
  char text_taille[] = "Taille du pinceau :   px";
 8002964:	4b8d      	ldr	r3, [pc, #564]	; (8002b9c <StartMode+0x2e4>)
 8002966:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800296a:	461d      	mov	r5, r3
 800296c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002974:	c403      	stmia	r4!, {r0, r1}
 8002976:	7022      	strb	r2, [r4, #0]
  char text_brush[] = " <<<<            Valider            >>>>";
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	4a88      	ldr	r2, [pc, #544]	; (8002ba0 <StartMode+0x2e8>)
 800297e:	461c      	mov	r4, r3
 8002980:	4615      	mov	r5, r2
 8002982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800298a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800298e:	c403      	stmia	r4!, {r0, r1}
 8002990:	7022      	strb	r2, [r4, #0]
>>>>>>> Stashed changes
  for(;;)
  {
	  xQueueReceive(myQueueUARTHandle, &etat, 25);
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <StartMode+0x110>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 800203c:	2219      	movs	r2, #25
 800203e:	4618      	mov	r0, r3
 8002040:	f009 fe7c 	bl	800bd3c <xQueueReceive>
	  switch(etat)
<<<<<<< Updated upstream
 8002044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002048:	2b6c      	cmp	r3, #108	; 0x6c
 800204a:	d011      	beq.n	8002070 <StartMode+0x90>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d143      	bne.n	80020d8 <StartMode+0xf8>
	  {
	  case 'p' :
		  BSP_TS_GetState(&TS_State);
 8002050:	4828      	ldr	r0, [pc, #160]	; (80020f4 <StartMode+0x114>)
 8002052:	f001 fb15 	bl	8003680 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <StartMode+0x114>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03b      	beq.n	80020d6 <StartMode+0xf6>
		  {
			  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],20);
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <StartMode+0x114>)
 8002060:	8858      	ldrh	r0, [r3, #2]
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <StartMode+0x114>)
 8002064:	899b      	ldrh	r3, [r3, #12]
 8002066:	2214      	movs	r2, #20
 8002068:	4619      	mov	r1, r3
 800206a:	f000 fe5b 	bl	8002d24 <BSP_LCD_FillCircle>
		  }
		  break;
 800206e:	e032      	b.n	80020d6 <StartMode+0xf6>
	  case 'l' :
		  HAL_UART_Transmit(&huart1, message_layer, 31, 10);
 8002070:	f107 0108 	add.w	r1, r7, #8
 8002074:	230a      	movs	r3, #10
 8002076:	221f      	movs	r2, #31
 8002078:	481f      	ldr	r0, [pc, #124]	; (80020f8 <StartMode+0x118>)
 800207a:	f008 f92d 	bl	800a2d8 <HAL_UART_Transmit>
		  xQueueReceive(myQueueUARTHandle, &layer, 2000);
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <StartMode+0x110>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8002086:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800208a:	4618      	mov	r0, r3
 800208c:	f009 fe56 	bl	800bd3c <xQueueReceive>
		  layer = layer - 48;
 8002090:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002094:	3b30      	subs	r3, #48	; 0x30
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		  if(layer==0)
 800209c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <StartMode+0xd4>
		  {
			  BSP_LCD_SelectLayer(layer);
 80020a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fad9 	bl	8002660 <BSP_LCD_SelectLayer>
			  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020ae:	480f      	ldr	r0, [pc, #60]	; (80020ec <StartMode+0x10c>)
 80020b0:	f000 faf8 	bl	80026a4 <BSP_LCD_SetTextColor>
		  }
		  if(layer==1)
 80020b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <StartMode+0xee>
		  {
			  BSP_LCD_SelectLayer(layer);
 80020bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 facd 	bl	8002660 <BSP_LCD_SelectLayer>
			  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80020c6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80020ca:	f000 faeb 	bl	80026a4 <BSP_LCD_SetTextColor>
		  }
		  etat = 'p';
 80020ce:	2370      	movs	r3, #112	; 0x70
 80020d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020d4:	e000      	b.n	80020d8 <StartMode+0xf8>
		  break;
 80020d6:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 80020d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020dc:	2164      	movs	r1, #100	; 0x64
 80020de:	4618      	mov	r0, r3
 80020e0:	f00a f9c0 	bl	800c464 <vTaskDelayUntil>
	  xQueueReceive(myQueueUARTHandle, &etat, 25);
 80020e4:	e7a6      	b.n	8002034 <StartMode+0x54>
 80020e6:	bf00      	nop
 80020e8:	0800e1a8 	.word	0x0800e1a8
 80020ec:	ffff0000 	.word	0xffff0000
 80020f0:	20008908 	.word	0x20008908
 80020f4:	20000350 	.word	0x20000350
 80020f8:	20008a44 	.word	0x20008a44

080020fc <HAL_TIM_PeriodElapsedCallback>:
=======
 8002992:	4b84      	ldr	r3, [pc, #528]	; (8002ba4 <StartMode+0x2ec>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b07      	cmp	r3, #7
 8002998:	f200 859b 	bhi.w	80034d2 <StartMode+0xc1a>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <StartMode+0xec>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080034d3 	.word	0x080034d3
 80029a8:	080029c5 	.word	0x080029c5
 80029ac:	08002ab7 	.word	0x08002ab7
 80029b0:	08002bbd 	.word	0x08002bbd
 80029b4:	08002d8f 	.word	0x08002d8f
 80029b8:	08002f13 	.word	0x08002f13
 80029bc:	080032f5 	.word	0x080032f5
 80029c0:	080034b9 	.word	0x080034b9
		  break;
	  /*
	   * etat d'affichage du menu
	   */
	  case 1 :
		  if(myMutexLCDHandle != NULL)
 80029c4:	4b78      	ldr	r3, [pc, #480]	; (8002ba8 <StartMode+0x2f0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d06f      	beq.n	8002aac <StartMode+0x1f4>
		  {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80029cc:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <StartMode+0x2f0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f00a fd16 	bl	800d404 <xQueueSemaphoreTake>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d166      	bne.n	8002aac <StartMode+0x1f4>
			   {
				   BSP_LCD_SelectLayer(1);
 80029de:	2001      	movs	r0, #1
 80029e0:	f001 f980 	bl	8003ce4 <BSP_LCD_SelectLayer>
				   BSP_LCD_SetFont(&Font12);
 80029e4:	4871      	ldr	r0, [pc, #452]	; (8002bac <StartMode+0x2f4>)
 80029e6:	f001 f9bf 	bl	8003d68 <BSP_LCD_SetFont>
				   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	f001 f989 	bl	8003d04 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(0, 251, 480, 21);
 80029f2:	2315      	movs	r3, #21
 80029f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80029f8:	21fb      	movs	r1, #251	; 0xfb
 80029fa:	2000      	movs	r0, #0
 80029fc:	f001 fd24 	bl	8004448 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002a00:	486b      	ldr	r0, [pc, #428]	; (8002bb0 <StartMode+0x2f8>)
 8002a02:	f001 f97f 	bl	8003d04 <BSP_LCD_SetTextColor>
				   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text, CENTER_MODE);
 8002a06:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	21fc      	movs	r1, #252	; 0xfc
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f001 fa46 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
				   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002a14:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002a18:	f001 f974 	bl	8003d04 <BSP_LCD_SetTextColor>
				   LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002a1c:	2214      	movs	r2, #20
 8002a1e:	214b      	movs	r1, #75	; 0x4b
 8002a20:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002a24:	f7ff fba0 	bl	8002168 <LCD_PAINTBRUSH_SAMPLE>
				   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 8002a28:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8002a2c:	f001 f96a 	bl	8003d04 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <StartMode+0x2fc>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	00d2      	lsls	r2, r2, #3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3baa      	subs	r3, #170	; 0xaa
 8002a48:	b298      	uxth	r0, r3
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	2223      	movs	r2, #35	; 0x23
 8002a4e:	f240 1109 	movw	r1, #265	; 0x109
 8002a52:	f001 fcf9 	bl	8004448 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8002a56:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <StartMode+0x2e0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f950 	bl	8003d04 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8002a64:	2214      	movs	r2, #20
 8002a66:	2119      	movs	r1, #25
 8002a68:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002a6c:	f001 fd66 	bl	800453c <BSP_LCD_FillCircle>
				   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <StartMode+0x2e0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f943 	bl	8003d04 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 8002a7e:	2214      	movs	r2, #20
 8002a80:	217d      	movs	r1, #125	; 0x7d
 8002a82:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002a86:	f001 fd59 	bl	800453c <BSP_LCD_FillCircle>
				   BSP_LCD_SelectLayer(layer);
 8002a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 f928 	bl	8003ce4 <BSP_LCD_SelectLayer>
				   BSP_LCD_SetTextColor(couleur);
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <StartMode+0x2e0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 f933 	bl	8003d04 <BSP_LCD_SetTextColor>
				   xSemaphoreGive(myMutexLCDHandle);
 8002a9e:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <StartMode+0x2f0>)
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f00a fb0e 	bl	800d0c8 <xQueueGenericSend>
			   }
		   }
		  etat = 0;
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <StartMode+0x2ec>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
		  break;
 8002ab2:	f000 bd0e 	b.w	80034d2 <StartMode+0xc1a>
	  /*
	   * etat de sélection du calque
	   */
	  case 2 :
		  if(sous_menu == 0)
 8002ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d12e      	bne.n	8002b1c <StartMode+0x264>
		  {
			  if(myMutexLCDHandle != NULL)
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <StartMode+0x2f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d02a      	beq.n	8002b1c <StartMode+0x264>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <StartMode+0x2f0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f00a fc99 	bl	800d404 <xQueueSemaphoreTake>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d121      	bne.n	8002b1c <StartMode+0x264>
				   {
					   BSP_LCD_SelectLayer(1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f001 f903 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 8002ade:	4833      	ldr	r0, [pc, #204]	; (8002bac <StartMode+0x2f4>)
 8002ae0:	f001 f942 	bl	8003d68 <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f001 f90c 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002aec:	2315      	movs	r3, #21
 8002aee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002af2:	21fb      	movs	r1, #251	; 0xfb
 8002af4:	2000      	movs	r0, #0
 8002af6:	f001 fca7 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002afa:	482d      	ldr	r0, [pc, #180]	; (8002bb0 <StartMode+0x2f8>)
 8002afc:	f001 f902 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_layer, CENTER_MODE);
 8002b00:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002b04:	2301      	movs	r3, #1
 8002b06:	21fc      	movs	r1, #252	; 0xfc
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f001 f9c9 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <StartMode+0x2f0>)
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	f00a fad6 	bl	800d0c8 <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 8002b22:	4825      	ldr	r0, [pc, #148]	; (8002bb8 <StartMode+0x300>)
 8002b24:	f002 f9b8 	bl	8004e98 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <StartMode+0x300>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01c      	beq.n	8002b6a <StartMode+0x2b2>
		  {
			  if((TS_State.touchX[0]<240) && TS_State.touchY[0] > 250)
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <StartMode+0x300>)
 8002b32:	885b      	ldrh	r3, [r3, #2]
 8002b34:	2bef      	cmp	r3, #239	; 0xef
 8002b36:	d80a      	bhi.n	8002b4e <StartMode+0x296>
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <StartMode+0x300>)
 8002b3a:	899b      	ldrh	r3, [r3, #12]
 8002b3c:	2bfa      	cmp	r3, #250	; 0xfa
 8002b3e:	d906      	bls.n	8002b4e <StartMode+0x296>
			  {
				  layer = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				  sous_menu = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8002b4c:	e00d      	b.n	8002b6a <StartMode+0x2b2>
			  }
			  else if((TS_State.touchX[0]>240) && TS_State.touchY[0] > 250)
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <StartMode+0x300>)
 8002b50:	885b      	ldrh	r3, [r3, #2]
 8002b52:	2bf0      	cmp	r3, #240	; 0xf0
 8002b54:	d909      	bls.n	8002b6a <StartMode+0x2b2>
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <StartMode+0x300>)
 8002b58:	899b      	ldrh	r3, [r3, #12]
 8002b5a:	2bfa      	cmp	r3, #250	; 0xfa
 8002b5c:	d905      	bls.n	8002b6a <StartMode+0x2b2>
			  {
				  layer = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				  sous_menu = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 84a6 	bne.w	80034c0 <StartMode+0xc08>
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <StartMode+0x2ec>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
		  break;
 8002b7a:	f000 bca1 	b.w	80034c0 <StartMode+0xc08>
 8002b7e:	bf00      	nop
 8002b80:	43340000 	.word	0x43340000
 8002b84:	0800fb64 	.word	0x0800fb64
 8002b88:	0800fbac 	.word	0x0800fbac
 8002b8c:	0800fbd0 	.word	0x0800fbd0
 8002b90:	0800fbec 	.word	0x0800fbec
 8002b94:	43340000 	.word	0x43340000
 8002b98:	20009b04 	.word	0x20009b04
 8002b9c:	0800fc18 	.word	0x0800fc18
 8002ba0:	0800fc34 	.word	0x0800fc34
 8002ba4:	2000101a 	.word	0x2000101a
 8002ba8:	200098b0 	.word	0x200098b0
 8002bac:	20001024 	.word	0x20001024
 8002bb0:	ffff0000 	.word	0xffff0000
 8002bb4:	2000101b 	.word	0x2000101b
 8002bb8:	2000134c 	.word	0x2000134c
	  /*
	   * etat de sélection du pinceau
	   */
	  case 3 :
		  if(sous_menu == 0)
 8002bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d12e      	bne.n	8002c22 <StartMode+0x36a>
		  {
			  if(myMutexLCDHandle != NULL)
 8002bc4:	4ba3      	ldr	r3, [pc, #652]	; (8002e54 <StartMode+0x59c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02a      	beq.n	8002c22 <StartMode+0x36a>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002bcc:	4ba1      	ldr	r3, [pc, #644]	; (8002e54 <StartMode+0x59c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00a fc16 	bl	800d404 <xQueueSemaphoreTake>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d121      	bne.n	8002c22 <StartMode+0x36a>
				   {
					   BSP_LCD_SelectLayer(1);
 8002bde:	2001      	movs	r0, #1
 8002be0:	f001 f880 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 8002be4:	489c      	ldr	r0, [pc, #624]	; (8002e58 <StartMode+0x5a0>)
 8002be6:	f001 f8bf 	bl	8003d68 <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002bea:	f04f 30ff 	mov.w	r0, #4294967295
 8002bee:	f001 f889 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002bf2:	2315      	movs	r3, #21
 8002bf4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002bf8:	21fb      	movs	r1, #251	; 0xfb
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f001 fc24 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002c00:	4896      	ldr	r0, [pc, #600]	; (8002e5c <StartMode+0x5a4>)
 8002c02:	f001 f87f 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_brush, CENTER_MODE);
 8002c06:	f107 020c 	add.w	r2, r7, #12
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	21fc      	movs	r1, #252	; 0xfc
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f001 f946 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002c14:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <StartMode+0x59c>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f00a fa53 	bl	800d0c8 <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 8002c28:	488d      	ldr	r0, [pc, #564]	; (8002e60 <StartMode+0x5a8>)
 8002c2a:	f002 f935 	bl	8004e98 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002c2e:	4b8c      	ldr	r3, [pc, #560]	; (8002e60 <StartMode+0x5a8>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80a2 	beq.w	8002d7c <StartMode+0x4c4>
		  {
			  if((TS_State.touchX[0]<190) && TS_State.touchY[0] > 250)
 8002c38:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <StartMode+0x5a8>)
 8002c3a:	885b      	ldrh	r3, [r3, #2]
 8002c3c:	2bbd      	cmp	r3, #189	; 0xbd
 8002c3e:	d840      	bhi.n	8002cc2 <StartMode+0x40a>
 8002c40:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <StartMode+0x5a8>)
 8002c42:	899b      	ldrh	r3, [r3, #12]
 8002c44:	2bfa      	cmp	r3, #250	; 0xfa
 8002c46:	d93c      	bls.n	8002cc2 <StartMode+0x40a>
			  {
				  brush -= 1;
 8002c48:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <StartMode+0x5ac>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <StartMode+0x5ac>)
 8002c52:	701a      	strb	r2, [r3, #0]
				  if(brush<0) brush = max_brush;
				  if(myMutexLCDHandle != NULL)
 8002c54:	4b7f      	ldr	r3, [pc, #508]	; (8002e54 <StartMode+0x59c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02d      	beq.n	8002cb8 <StartMode+0x400>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002c5c:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <StartMode+0x59c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00a fbce 	bl	800d404 <xQueueSemaphoreTake>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d124      	bne.n	8002cb8 <StartMode+0x400>
					   {
						  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c72:	f001 f847 	bl	8003d04 <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(480-taille_menu , taille_menu, taille_menu-1, taille_menu);
 8002c76:	2332      	movs	r3, #50	; 0x32
 8002c78:	2231      	movs	r2, #49	; 0x31
 8002c7a:	2132      	movs	r1, #50	; 0x32
 8002c7c:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002c80:	f001 fbe2 	bl	8004448 <BSP_LCD_FillRect>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002c84:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002c88:	f001 f83c 	bl	8003d04 <BSP_LCD_SetTextColor>
						  LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002c8c:	2214      	movs	r2, #20
 8002c8e:	214b      	movs	r1, #75	; 0x4b
 8002c90:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002c94:	f7ff fa68 	bl	8002168 <LCD_PAINTBRUSH_SAMPLE>
						  BSP_LCD_SetTextColor(couleur);
 8002c98:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <StartMode+0x5b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 f831 	bl	8003d04 <BSP_LCD_SetTextColor>
						  xSemaphoreGive(myMutexLCDHandle);
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <StartMode+0x59c>)
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	f00a fa0c 	bl	800d0c8 <xQueueGenericSend>
					   }
				  }
				  while(TS_State.touchDetected) BSP_TS_GetState(&TS_State);;
 8002cb0:	e002      	b.n	8002cb8 <StartMode+0x400>
 8002cb2:	486b      	ldr	r0, [pc, #428]	; (8002e60 <StartMode+0x5a8>)
 8002cb4:	f002 f8f0 	bl	8004e98 <BSP_TS_GetState>
 8002cb8:	4b69      	ldr	r3, [pc, #420]	; (8002e60 <StartMode+0x5a8>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f8      	bne.n	8002cb2 <StartMode+0x3fa>
			  if((TS_State.touchX[0]<190) && TS_State.touchY[0] > 250)
 8002cc0:	e05c      	b.n	8002d7c <StartMode+0x4c4>
			  }
			  else if((TS_State.touchX[0]>290) && TS_State.touchY[0] > 250)
 8002cc2:	4b67      	ldr	r3, [pc, #412]	; (8002e60 <StartMode+0x5a8>)
 8002cc4:	885b      	ldrh	r3, [r3, #2]
 8002cc6:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002cca:	d947      	bls.n	8002d5c <StartMode+0x4a4>
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <StartMode+0x5a8>)
 8002cce:	899b      	ldrh	r3, [r3, #12]
 8002cd0:	2bfa      	cmp	r3, #250	; 0xfa
 8002cd2:	d943      	bls.n	8002d5c <StartMode+0x4a4>
			  {
				  brush += 1;
 8002cd4:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <StartMode+0x5ac>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <StartMode+0x5ac>)
 8002cde:	701a      	strb	r2, [r3, #0]
				  if(brush>max_brush) brush = 0;
 8002ce0:	4b60      	ldr	r3, [pc, #384]	; (8002e64 <StartMode+0x5ac>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d902      	bls.n	8002cee <StartMode+0x436>
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <StartMode+0x5ac>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 8002cee:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <StartMode+0x59c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02d      	beq.n	8002d52 <StartMode+0x49a>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <StartMode+0x59c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f00a fb81 	bl	800d404 <xQueueSemaphoreTake>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d124      	bne.n	8002d52 <StartMode+0x49a>
					   {
						  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f000 fffa 	bl	8003d04 <BSP_LCD_SetTextColor>
						  BSP_LCD_FillRect(480-taille_menu , taille_menu, taille_menu-1, taille_menu);
 8002d10:	2332      	movs	r3, #50	; 0x32
 8002d12:	2231      	movs	r2, #49	; 0x31
 8002d14:	2132      	movs	r1, #50	; 0x32
 8002d16:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 8002d1a:	f001 fb95 	bl	8004448 <BSP_LCD_FillRect>
						  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002d1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002d22:	f000 ffef 	bl	8003d04 <BSP_LCD_SetTextColor>
						  LCD_PAINTBRUSH_SAMPLE(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 8002d26:	2214      	movs	r2, #20
 8002d28:	214b      	movs	r1, #75	; 0x4b
 8002d2a:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002d2e:	f7ff fa1b 	bl	8002168 <LCD_PAINTBRUSH_SAMPLE>
						  BSP_LCD_SetTextColor(couleur);
 8002d32:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <StartMode+0x5b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 ffe4 	bl	8003d04 <BSP_LCD_SetTextColor>
						  xSemaphoreGive(myMutexLCDHandle);
 8002d3c:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <StartMode+0x59c>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	2300      	movs	r3, #0
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	f00a f9bf 	bl	800d0c8 <xQueueGenericSend>
					   }
				  }
				  while(TS_State.touchDetected) BSP_TS_GetState(&TS_State);;
 8002d4a:	e002      	b.n	8002d52 <StartMode+0x49a>
 8002d4c:	4844      	ldr	r0, [pc, #272]	; (8002e60 <StartMode+0x5a8>)
 8002d4e:	f002 f8a3 	bl	8004e98 <BSP_TS_GetState>
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <StartMode+0x5a8>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f8      	bne.n	8002d4c <StartMode+0x494>
			  else if((TS_State.touchX[0]>290) && TS_State.touchY[0] > 250)
 8002d5a:	e00f      	b.n	8002d7c <StartMode+0x4c4>
			  }
			  else if((TS_State.touchX[0]>190) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<290))
 8002d5c:	4b40      	ldr	r3, [pc, #256]	; (8002e60 <StartMode+0x5a8>)
 8002d5e:	885b      	ldrh	r3, [r3, #2]
 8002d60:	2bbe      	cmp	r3, #190	; 0xbe
 8002d62:	d90b      	bls.n	8002d7c <StartMode+0x4c4>
 8002d64:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <StartMode+0x5a8>)
 8002d66:	899b      	ldrh	r3, [r3, #12]
 8002d68:	2bfa      	cmp	r3, #250	; 0xfa
 8002d6a:	d907      	bls.n	8002d7c <StartMode+0x4c4>
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <StartMode+0x5a8>)
 8002d6e:	885b      	ldrh	r3, [r3, #2]
 8002d70:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8002d74:	d202      	bcs.n	8002d7c <StartMode+0x4c4>
			  {
				  sous_menu = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f040 839f 	bne.w	80034c4 <StartMode+0xc0c>
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <StartMode+0x5b4>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
		  break;
 8002d8c:	e39a      	b.n	80034c4 <StartMode+0xc0c>
	  /*
	   * etat de sélection de la transparence
	   */
	  case 4 :
		  if(sous_menu == 0)
 8002d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d156      	bne.n	8002e44 <StartMode+0x58c>
		  {
			  if(myMutexLCDHandle != NULL)
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <StartMode+0x59c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d052      	beq.n	8002e44 <StartMode+0x58c>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <StartMode+0x59c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002da6:	4618      	mov	r0, r3
 8002da8:	f00a fb2c 	bl	800d404 <xQueueSemaphoreTake>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d148      	bne.n	8002e44 <StartMode+0x58c>
				   {
					   BSP_LCD_SelectLayer(1);
 8002db2:	2001      	movs	r0, #1
 8002db4:	f000 ff96 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f000 ffa2 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002dc0:	2315      	movs	r3, #21
 8002dc2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002dc6:	21fb      	movs	r1, #251	; 0xfb
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f001 fb3d 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002dce:	4823      	ldr	r0, [pc, #140]	; (8002e5c <StartMode+0x5a4>)
 8002dd0:	f000 ff98 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_alpha, LEFT_MODE);
 8002dd4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002dd8:	2303      	movs	r3, #3
 8002dda:	21fc      	movs	r1, #252	; 0xfc
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f001 f85f 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
					   for(uint32_t i = 0;i<256; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002de8:	e021      	b.n	8002e2e <StartMode+0x576>
					   {
						   for(char j = 0; j<18; j++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002df0:	e014      	b.n	8002e1c <StartMode+0x564>
						   {
							   BSP_LCD_DrawPixel(200+i, 252+j, i << 24);
 8002df2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	33c8      	adds	r3, #200	; 0xc8
 8002dfa:	b298      	uxth	r0, r3
 8002dfc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	33fc      	adds	r3, #252	; 0xfc
 8002e04:	b299      	uxth	r1, r3
 8002e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f001 fad3 	bl	80043b8 <BSP_LCD_DrawPixel>
						   for(char j = 0; j<18; j++)
 8002e12:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e16:	3301      	adds	r3, #1
 8002e18:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002e1c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e20:	2b11      	cmp	r3, #17
 8002e22:	d9e6      	bls.n	8002df2 <StartMode+0x53a>
					   for(uint32_t i = 0;i<256; i++)
 8002e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	d9d9      	bls.n	8002dea <StartMode+0x532>
						   }
					   }
					   xSemaphoreGive(myMutexLCDHandle);
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <StartMode+0x59c>)
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f00a f942 	bl	800d0c8 <xQueueGenericSend>
				   }
			   }
		  }
		  sous_menu = 1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <StartMode+0x5a8>)
 8002e4c:	f002 f824 	bl	8004e98 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002e50:	e052      	b.n	8002ef8 <StartMode+0x640>
 8002e52:	bf00      	nop
 8002e54:	200098b0 	.word	0x200098b0
 8002e58:	20001024 	.word	0x20001024
 8002e5c:	ffff0000 	.word	0xffff0000
 8002e60:	2000134c 	.word	0x2000134c
 8002e64:	20001019 	.word	0x20001019
 8002e68:	20009b04 	.word	0x20009b04
 8002e6c:	2000101a 	.word	0x2000101a
		  {
			  if((TS_State.touchX[0]>200) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<455))
 8002e70:	4bbd      	ldr	r3, [pc, #756]	; (8003168 <StartMode+0x8b0>)
 8002e72:	885b      	ldrh	r3, [r3, #2]
 8002e74:	2bc8      	cmp	r3, #200	; 0xc8
 8002e76:	d939      	bls.n	8002eec <StartMode+0x634>
 8002e78:	4bbb      	ldr	r3, [pc, #748]	; (8003168 <StartMode+0x8b0>)
 8002e7a:	899b      	ldrh	r3, [r3, #12]
 8002e7c:	2bfa      	cmp	r3, #250	; 0xfa
 8002e7e:	d935      	bls.n	8002eec <StartMode+0x634>
 8002e80:	4bb9      	ldr	r3, [pc, #740]	; (8003168 <StartMode+0x8b0>)
 8002e82:	885b      	ldrh	r3, [r3, #2]
 8002e84:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8002e88:	d830      	bhi.n	8002eec <StartMode+0x634>
			  {
				  couleur &= 0x00FFFFFF; //on enlève l'ancienne transparence
 8002e8a:	4bb8      	ldr	r3, [pc, #736]	; (800316c <StartMode+0x8b4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e92:	4ab6      	ldr	r2, [pc, #728]	; (800316c <StartMode+0x8b4>)
 8002e94:	6013      	str	r3, [r2, #0]
				  couleur |= ((TS_State.touchX[0]-200)<<24);
 8002e96:	4bb4      	ldr	r3, [pc, #720]	; (8003168 <StartMode+0x8b0>)
 8002e98:	885b      	ldrh	r3, [r3, #2]
 8002e9a:	3bc8      	subs	r3, #200	; 0xc8
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4bb2      	ldr	r3, [pc, #712]	; (800316c <StartMode+0x8b4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4ab1      	ldr	r2, [pc, #708]	; (800316c <StartMode+0x8b4>)
 8002ea8:	6013      	str	r3, [r2, #0]
				  if(myMutexLCDHandle != NULL)
 8002eaa:	4bb1      	ldr	r3, [pc, #708]	; (8003170 <StartMode+0x8b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01c      	beq.n	8002eec <StartMode+0x634>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002eb2:	4baf      	ldr	r3, [pc, #700]	; (8003170 <StartMode+0x8b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2164      	movs	r1, #100	; 0x64
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f00a faa3 	bl	800d404 <xQueueSemaphoreTake>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d113      	bne.n	8002eec <StartMode+0x634>
					   {
						   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002ec4:	4ba9      	ldr	r3, [pc, #676]	; (800316c <StartMode+0x8b4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 ff19 	bl	8003d04 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 8002ed2:	2214      	movs	r2, #20
 8002ed4:	217d      	movs	r1, #125	; 0x7d
 8002ed6:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002eda:	f001 fb2f 	bl	800453c <BSP_LCD_FillCircle>
						   xSemaphoreGive(myMutexLCDHandle);
 8002ede:	4ba4      	ldr	r3, [pc, #656]	; (8003170 <StartMode+0x8b8>)
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f00a f8ee 	bl	800d0c8 <xQueueGenericSend>
					   }
				   }
			  }
			  sous_menu = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  BSP_TS_GetState(&TS_State);
 8002ef2:	489d      	ldr	r0, [pc, #628]	; (8003168 <StartMode+0x8b0>)
 8002ef4:	f001 ffd0 	bl	8004e98 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002ef8:	4b9b      	ldr	r3, [pc, #620]	; (8003168 <StartMode+0x8b0>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1b7      	bne.n	8002e70 <StartMode+0x5b8>
		  }
		  if(sous_menu == 0) etat = 1;
 8002f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 82df 	bne.w	80034c8 <StartMode+0xc10>
 8002f0a:	4b9a      	ldr	r3, [pc, #616]	; (8003174 <StartMode+0x8bc>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
		  break;
 8002f10:	e2da      	b.n	80034c8 <StartMode+0xc10>
	  /*
	   * etat de sélection de la couleur
	   */
	  case 5 :
		  if(sous_menu == 0)
 8002f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12c      	bne.n	8002f74 <StartMode+0x6bc>
		  {
			  if(myMutexLCDHandle != NULL)
 8002f1a:	4b95      	ldr	r3, [pc, #596]	; (8003170 <StartMode+0x8b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d028      	beq.n	8002f74 <StartMode+0x6bc>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002f22:	4b93      	ldr	r3, [pc, #588]	; (8003170 <StartMode+0x8b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f00a fa6a 	bl	800d404 <xQueueSemaphoreTake>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d11e      	bne.n	8002f74 <StartMode+0x6bc>
				   {
					   BSP_LCD_SelectLayer(1);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f000 fed4 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f000 fee0 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002f44:	2315      	movs	r3, #21
 8002f46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f4a:	21fb      	movs	r1, #251	; 0xfb
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f001 fa7b 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002f52:	4889      	ldr	r0, [pc, #548]	; (8003178 <StartMode+0x8c0>)
 8002f54:	f000 fed6 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_couleur, CENTER_MODE);
 8002f58:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	21fc      	movs	r1, #252	; 0xfc
 8002f60:	2000      	movs	r0, #0
 8002f62:	f000 ff9d 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002f66:	4b82      	ldr	r3, [pc, #520]	; (8003170 <StartMode+0x8b8>)
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f00a f8aa 	bl	800d0c8 <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  switch(menu_couleur)
 8002f7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	f200 81af 	bhi.w	80032e2 <StartMode+0xa2a>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <StartMode+0x6d4>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	080030b7 	.word	0x080030b7
 8002f94:	0800317d 	.word	0x0800317d
 8002f98:	0800322f 	.word	0x0800322f
		  {
		  /*
		   * premier sous_menu : choix entre tonalité, saturation et luminosité
		   */
		  case 0 :
			  BSP_TS_GetState(&TS_State);
 8002f9c:	4872      	ldr	r0, [pc, #456]	; (8003168 <StartMode+0x8b0>)
 8002f9e:	f001 ff7b 	bl	8004e98 <BSP_TS_GetState>
			  if(TS_State.touchDetected && menu_couleur == 0)
 8002fa2:	4b71      	ldr	r3, [pc, #452]	; (8003168 <StartMode+0x8b0>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 819a 	beq.w	80032e0 <StartMode+0xa28>
 8002fac:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 8195 	bne.w	80032e0 <StartMode+0xa28>
			  {
				  if((TS_State.touchX[0]<170) && TS_State.touchY[0] > 250)
 8002fb6:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <StartMode+0x8b0>)
 8002fb8:	885b      	ldrh	r3, [r3, #2]
 8002fba:	2ba9      	cmp	r3, #169	; 0xa9
 8002fbc:	d81e      	bhi.n	8002ffc <StartMode+0x744>
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <StartMode+0x8b0>)
 8002fc0:	899b      	ldrh	r3, [r3, #12]
 8002fc2:	2bfa      	cmp	r3, #250	; 0xfa
 8002fc4:	d91a      	bls.n	8002ffc <StartMode+0x744>
					  // clique sur tonalité
				  {
					  menu_couleur = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
					  if(myMutexLCDHandle != NULL)
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <StartMode+0x8b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d06c      	beq.n	80030ae <StartMode+0x7f6>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002fd4:	4b66      	ldr	r3, [pc, #408]	; (8003170 <StartMode+0x8b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f00a fa11 	bl	800d404 <xQueueSemaphoreTake>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d162      	bne.n	80030ae <StartMode+0x7f6>
						   {
							   AfficheTonalite();
 8002fe8:	f7ff f928 	bl	800223c <AfficheTonalite>
							   xSemaphoreGive(myMutexLCDHandle);
 8002fec:	4b60      	ldr	r3, [pc, #384]	; (8003170 <StartMode+0x8b8>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f00a f867 	bl	800d0c8 <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 8002ffa:	e058      	b.n	80030ae <StartMode+0x7f6>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]>310) && TS_State.touchY[0] > 250)
 8002ffc:	4b5a      	ldr	r3, [pc, #360]	; (8003168 <StartMode+0x8b0>)
 8002ffe:	885b      	ldrh	r3, [r3, #2]
 8003000:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003004:	d922      	bls.n	800304c <StartMode+0x794>
 8003006:	4b58      	ldr	r3, [pc, #352]	; (8003168 <StartMode+0x8b0>)
 8003008:	899b      	ldrh	r3, [r3, #12]
 800300a:	2bfa      	cmp	r3, #250	; 0xfa
 800300c:	d91e      	bls.n	800304c <StartMode+0x794>
					  //clique sur luminosité
				  {
					  menu_couleur = 2;
 800300e:	2302      	movs	r3, #2
 8003010:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
					  if(myMutexLCDHandle != NULL)
 8003014:	4b56      	ldr	r3, [pc, #344]	; (8003170 <StartMode+0x8b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d04a      	beq.n	80030b2 <StartMode+0x7fa>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 800301c:	4b54      	ldr	r3, [pc, #336]	; (8003170 <StartMode+0x8b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003024:	4618      	mov	r0, r3
 8003026:	f00a f9ed 	bl	800d404 <xQueueSemaphoreTake>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d140      	bne.n	80030b2 <StartMode+0x7fa>
						   {
							   AfficheLuminosite(ton, sat);
 8003030:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 8003034:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 8003038:	f7ff fa0a 	bl	8002450 <AfficheLuminosite>
							   xSemaphoreGive(myMutexLCDHandle);
 800303c:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <StartMode+0x8b8>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	f00a f83f 	bl	800d0c8 <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 800304a:	e032      	b.n	80030b2 <StartMode+0x7fa>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]<310) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]>170))
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <StartMode+0x8b0>)
 800304e:	885b      	ldrh	r3, [r3, #2]
 8003050:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003054:	f080 8144 	bcs.w	80032e0 <StartMode+0xa28>
 8003058:	4b43      	ldr	r3, [pc, #268]	; (8003168 <StartMode+0x8b0>)
 800305a:	899b      	ldrh	r3, [r3, #12]
 800305c:	2bfa      	cmp	r3, #250	; 0xfa
 800305e:	f240 813f 	bls.w	80032e0 <StartMode+0xa28>
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <StartMode+0x8b0>)
 8003064:	885b      	ldrh	r3, [r3, #2]
 8003066:	2baa      	cmp	r3, #170	; 0xaa
 8003068:	f240 813a 	bls.w	80032e0 <StartMode+0xa28>
					  //clique sur saturation
				  {
					  menu_couleur = 3;
 800306c:	2303      	movs	r3, #3
 800306e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
					  if(myMutexLCDHandle != NULL)
 8003072:	4b3f      	ldr	r3, [pc, #252]	; (8003170 <StartMode+0x8b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8132 	beq.w	80032e0 <StartMode+0xa28>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 800307c:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <StartMode+0x8b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003084:	4618      	mov	r0, r3
 8003086:	f00a f9bd 	bl	800d404 <xQueueSemaphoreTake>
 800308a:	4603      	mov	r3, r0
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 8127 	bne.w	80032e0 <StartMode+0xa28>
						   {
							   AfficheSaturation(ton, lum);
 8003092:	edd7 0a47 	vldr	s1, [r7, #284]	; 0x11c
 8003096:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 800309a:	f7ff fa2d 	bl	80024f8 <AfficheSaturation>
							   xSemaphoreGive(myMutexLCDHandle);
 800309e:	4b34      	ldr	r3, [pc, #208]	; (8003170 <StartMode+0x8b8>)
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	f00a f80e 	bl	800d0c8 <xQueueGenericSend>
						   }
					  }
				  }
			  }
			  break;
 80030ac:	e118      	b.n	80032e0 <StartMode+0xa28>
					  if(myMutexLCDHandle != NULL)
 80030ae:	bf00      	nop
 80030b0:	e116      	b.n	80032e0 <StartMode+0xa28>
					  if(myMutexLCDHandle != NULL)
 80030b2:	bf00      	nop
			  break;
 80030b4:	e114      	b.n	80032e0 <StartMode+0xa28>
		  /*
		   * on a affiché l'arc en ciel des tonalités, l'utilisateur choisit maintenant celle-ci.
		   */
		  case 1:
			  BSP_TS_GetState(&TS_State);
 80030b6:	482c      	ldr	r0, [pc, #176]	; (8003168 <StartMode+0x8b0>)
 80030b8:	f001 feee 	bl	8004e98 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 80030bc:	e04f      	b.n	800315e <StartMode+0x8a6>
			  {
				  if((TS_State.touchX[0]>=50) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<433))
 80030be:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <StartMode+0x8b0>)
 80030c0:	885b      	ldrh	r3, [r3, #2]
 80030c2:	2b31      	cmp	r3, #49	; 0x31
 80030c4:	d942      	bls.n	800314c <StartMode+0x894>
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <StartMode+0x8b0>)
 80030c8:	899b      	ldrh	r3, [r3, #12]
 80030ca:	2bfa      	cmp	r3, #250	; 0xfa
 80030cc:	d93e      	bls.n	800314c <StartMode+0x894>
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <StartMode+0x8b0>)
 80030d0:	885b      	ldrh	r3, [r3, #2]
 80030d2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80030d6:	d839      	bhi.n	800314c <StartMode+0x894>
				  {
					  ton = FindTonalite(TS_State.touchX[0]-50);
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <StartMode+0x8b0>)
 80030da:	885b      	ldrh	r3, [r3, #2]
 80030dc:	3b32      	subs	r3, #50	; 0x32
 80030de:	b29b      	uxth	r3, r3
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fb4b 	bl	800277c <FindTonalite>
 80030e6:	ed87 0a48 	vstr	s0, [r7, #288]	; 0x120
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 80030ea:	ed97 1a47 	vldr	s2, [r7, #284]	; 0x11c
 80030ee:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 80030f2:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 80030f6:	f7ff fa53 	bl	80025a0 <FindCouleur>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <StartMode+0x8b4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003104:	4313      	orrs	r3, r2
 8003106:	4a19      	ldr	r2, [pc, #100]	; (800316c <StartMode+0x8b4>)
 8003108:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <StartMode+0x8b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01c      	beq.n	800314c <StartMode+0x894>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <StartMode+0x8b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	4618      	mov	r0, r3
 800311a:	f00a f973 	bl	800d404 <xQueueSemaphoreTake>
 800311e:	4603      	mov	r3, r0
 8003120:	2b01      	cmp	r3, #1
 8003122:	d113      	bne.n	800314c <StartMode+0x894>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <StartMode+0x8b4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fde9 	bl	8003d04 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8003132:	2214      	movs	r2, #20
 8003134:	2119      	movs	r1, #25
 8003136:	f240 10c7 	movw	r0, #455	; 0x1c7
 800313a:	f001 f9ff 	bl	800453c <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <StartMode+0x8b8>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	f009 ffbe 	bl	800d0c8 <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				  sous_menu = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				  BSP_TS_GetState(&TS_State);
 8003158:	4803      	ldr	r0, [pc, #12]	; (8003168 <StartMode+0x8b0>)
 800315a:	f001 fe9d 	bl	8004e98 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 800315e:	4b02      	ldr	r3, [pc, #8]	; (8003168 <StartMode+0x8b0>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ab      	bne.n	80030be <StartMode+0x806>
			  }
			  break;
 8003166:	e0bc      	b.n	80032e2 <StartMode+0xa2a>
 8003168:	2000134c 	.word	0x2000134c
 800316c:	20009b04 	.word	0x20009b04
 8003170:	200098b0 	.word	0x200098b0
 8003174:	2000101a 	.word	0x2000101a
 8003178:	ffff0000 	.word	0xffff0000
		  /*
		   * On a Affiché le dégradé de luminosité, l'utilisateur chosit maintenant celle-ci
		   */
		  case 2:
			  BSP_TS_GetState(&TS_State);
 800317c:	488f      	ldr	r0, [pc, #572]	; (80033bc <StartMode+0xb04>)
 800317e:	f001 fe8b 	bl	8004e98 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003182:	e04f      	b.n	8003224 <StartMode+0x96c>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=356))
 8003184:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <StartMode+0xb04>)
 8003186:	885b      	ldrh	r3, [r3, #2]
 8003188:	2b63      	cmp	r3, #99	; 0x63
 800318a:	d942      	bls.n	8003212 <StartMode+0x95a>
 800318c:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <StartMode+0xb04>)
 800318e:	899b      	ldrh	r3, [r3, #12]
 8003190:	2bfa      	cmp	r3, #250	; 0xfa
 8003192:	d93e      	bls.n	8003212 <StartMode+0x95a>
 8003194:	4b89      	ldr	r3, [pc, #548]	; (80033bc <StartMode+0xb04>)
 8003196:	885b      	ldrh	r3, [r3, #2]
 8003198:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800319c:	d839      	bhi.n	8003212 <StartMode+0x95a>
				  {
					  lum = FindLuminosite(TS_State.touchX[0]-100);
 800319e:	4b87      	ldr	r3, [pc, #540]	; (80033bc <StartMode+0xb04>)
 80031a0:	885b      	ldrh	r3, [r3, #2]
 80031a2:	3b64      	subs	r3, #100	; 0x64
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fb0e 	bl	80027c8 <FindLuminosite>
 80031ac:	ed87 0a47 	vstr	s0, [r7, #284]	; 0x11c
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 80031b0:	ed97 1a47 	vldr	s2, [r7, #284]	; 0x11c
 80031b4:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 80031b8:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 80031bc:	f7ff f9f0 	bl	80025a0 <FindCouleur>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <StartMode+0xb08>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031ca:	4313      	orrs	r3, r2
 80031cc:	4a7c      	ldr	r2, [pc, #496]	; (80033c0 <StartMode+0xb08>)
 80031ce:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 80031d0:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <StartMode+0xb0c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <StartMode+0x95a>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 80031d8:	4b7a      	ldr	r3, [pc, #488]	; (80033c4 <StartMode+0xb0c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2164      	movs	r1, #100	; 0x64
 80031de:	4618      	mov	r0, r3
 80031e0:	f00a f910 	bl	800d404 <xQueueSemaphoreTake>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d113      	bne.n	8003212 <StartMode+0x95a>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 80031ea:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <StartMode+0xb08>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fd86 	bl	8003d04 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 80031f8:	2214      	movs	r2, #20
 80031fa:	2119      	movs	r1, #25
 80031fc:	f240 10c7 	movw	r0, #455	; 0x1c7
 8003200:	f001 f99c 	bl	800453c <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 8003204:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <StartMode+0xb0c>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	f009 ff5b 	bl	800d0c8 <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				  sous_menu = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				  BSP_TS_GetState(&TS_State);
 800321e:	4867      	ldr	r0, [pc, #412]	; (80033bc <StartMode+0xb04>)
 8003220:	f001 fe3a 	bl	8004e98 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003224:	4b65      	ldr	r3, [pc, #404]	; (80033bc <StartMode+0xb04>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ab      	bne.n	8003184 <StartMode+0x8cc>
			  }
			  break;
 800322c:	e059      	b.n	80032e2 <StartMode+0xa2a>
		  /*
		   * On a Affiché le dégradé de saturation, l'utilisateur chosit maintenant celle-ci
		   */
		  case 3:
			  BSP_TS_GetState(&TS_State);
 800322e:	4863      	ldr	r0, [pc, #396]	; (80033bc <StartMode+0xb04>)
 8003230:	f001 fe32 	bl	8004e98 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8003234:	e04f      	b.n	80032d6 <StartMode+0xa1e>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=356))
 8003236:	4b61      	ldr	r3, [pc, #388]	; (80033bc <StartMode+0xb04>)
 8003238:	885b      	ldrh	r3, [r3, #2]
 800323a:	2b63      	cmp	r3, #99	; 0x63
 800323c:	d942      	bls.n	80032c4 <StartMode+0xa0c>
 800323e:	4b5f      	ldr	r3, [pc, #380]	; (80033bc <StartMode+0xb04>)
 8003240:	899b      	ldrh	r3, [r3, #12]
 8003242:	2bfa      	cmp	r3, #250	; 0xfa
 8003244:	d93e      	bls.n	80032c4 <StartMode+0xa0c>
 8003246:	4b5d      	ldr	r3, [pc, #372]	; (80033bc <StartMode+0xb04>)
 8003248:	885b      	ldrh	r3, [r3, #2]
 800324a:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800324e:	d839      	bhi.n	80032c4 <StartMode+0xa0c>
				  {
					  sat = FindSaturation(TS_State.touchX[0]-100);
 8003250:	4b5a      	ldr	r3, [pc, #360]	; (80033bc <StartMode+0xb04>)
 8003252:	885b      	ldrh	r3, [r3, #2]
 8003254:	3b64      	subs	r3, #100	; 0x64
 8003256:	b29b      	uxth	r3, r3
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff facf 	bl	80027fc <FindSaturation>
 800325e:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8003262:	ed97 1a47 	vldr	s2, [r7, #284]	; 0x11c
 8003266:	edd7 0a46 	vldr	s1, [r7, #280]	; 0x118
 800326a:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 800326e:	f7ff f997 	bl	80025a0 <FindCouleur>
 8003272:	4602      	mov	r2, r0
 8003274:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <StartMode+0xb08>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800327c:	4313      	orrs	r3, r2
 800327e:	4a50      	ldr	r2, [pc, #320]	; (80033c0 <StartMode+0xb08>)
 8003280:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8003282:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <StartMode+0xb0c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01c      	beq.n	80032c4 <StartMode+0xa0c>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <StartMode+0xb0c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2164      	movs	r1, #100	; 0x64
 8003290:	4618      	mov	r0, r3
 8003292:	f00a f8b7 	bl	800d404 <xQueueSemaphoreTake>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d113      	bne.n	80032c4 <StartMode+0xa0c>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 800329c:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <StartMode+0xb08>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fd2d 	bl	8003d04 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 80032aa:	2214      	movs	r2, #20
 80032ac:	2119      	movs	r1, #25
 80032ae:	f240 10c7 	movw	r0, #455	; 0x1c7
 80032b2:	f001 f943 	bl	800453c <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 80032b6:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <StartMode+0xb0c>)
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	f009 ff02 	bl	800d0c8 <xQueueGenericSend>
						   }
					   }
				  }
				  menu_couleur = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				  sous_menu = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				  BSP_TS_GetState(&TS_State);
 80032d0:	483a      	ldr	r0, [pc, #232]	; (80033bc <StartMode+0xb04>)
 80032d2:	f001 fde1 	bl	8004e98 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <StartMode+0xb04>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ab      	bne.n	8003236 <StartMode+0x97e>
			  }
			  break;
 80032de:	e000      	b.n	80032e2 <StartMode+0xa2a>
			  break;
 80032e0:	bf00      	nop
		  }
		  if(sous_menu==0) etat = 1;
 80032e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 80f0 	bne.w	80034cc <StartMode+0xc14>
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <StartMode+0xb10>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
		  break;
 80032f2:	e0eb      	b.n	80034cc <StartMode+0xc14>
	  /*
	   * etat de sélection de la taille
	   */
	  case 6 :
		  if(sous_menu == 0)
 80032f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d158      	bne.n	80033ae <StartMode+0xaf6>
		  {
			  if(myMutexLCDHandle != NULL)
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <StartMode+0xb0c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d054      	beq.n	80033ae <StartMode+0xaf6>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8003304:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <StartMode+0xb0c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800330c:	4618      	mov	r0, r3
 800330e:	f00a f879 	bl	800d404 <xQueueSemaphoreTake>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d14a      	bne.n	80033ae <StartMode+0xaf6>
				   {
					   BSP_LCD_SelectLayer(1);
 8003318:	2001      	movs	r0, #1
 800331a:	f000 fce3 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800331e:	f04f 30ff 	mov.w	r0, #4294967295
 8003322:	f000 fcef 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8003326:	2315      	movs	r3, #21
 8003328:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800332c:	21fb      	movs	r1, #251	; 0xfb
 800332e:	2000      	movs	r0, #0
 8003330:	f001 f88a 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003334:	4825      	ldr	r0, [pc, #148]	; (80033cc <StartMode+0xb14>)
 8003336:	f000 fce5 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_taille, LEFT_MODE);
 800333a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800333e:	2303      	movs	r3, #3
 8003340:	21fc      	movs	r1, #252	; 0xfc
 8003342:	2000      	movs	r0, #0
 8003344:	f000 fdac 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
					   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003348:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800334c:	f000 fcda 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_DrawHLine(220, 261, 240);
 8003350:	22f0      	movs	r2, #240	; 0xf0
 8003352:	f240 1105 	movw	r1, #261	; 0x105
 8003356:	20dc      	movs	r0, #220	; 0xdc
 8003358:	f000 fe7e 	bl	8004058 <BSP_LCD_DrawHLine>
					   BSP_LCD_DrawVLine(220, 252, 18);
 800335c:	2212      	movs	r2, #18
 800335e:	21fc      	movs	r1, #252	; 0xfc
 8003360:	20dc      	movs	r0, #220	; 0xdc
 8003362:	f000 fed7 	bl	8004114 <BSP_LCD_DrawVLine>
					   BSP_LCD_DrawVLine(460, 252, 18);
 8003366:	2212      	movs	r2, #18
 8003368:	21fc      	movs	r1, #252	; 0xfc
 800336a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800336e:	f000 fed1 	bl	8004114 <BSP_LCD_DrawVLine>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003372:	4816      	ldr	r0, [pc, #88]	; (80033cc <StartMode+0xb14>)
 8003374:	f000 fcc6 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(220+12*radius, 252, 5, 18);
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <StartMode+0xb18>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	0052      	lsls	r2, r2, #1
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	b29b      	uxth	r3, r3
 8003388:	33dc      	adds	r3, #220	; 0xdc
 800338a:	b298      	uxth	r0, r3
 800338c:	2312      	movs	r3, #18
 800338e:	2205      	movs	r2, #5
 8003390:	21fc      	movs	r1, #252	; 0xfc
 8003392:	f001 f859 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(couleur);
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <StartMode+0xb08>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fcb2 	bl	8003d04 <BSP_LCD_SetTextColor>
					   xSemaphoreGive(myMutexLCDHandle);
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <StartMode+0xb0c>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	f009 fe8d 	bl	800d0c8 <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		  BSP_TS_GetState(&TS_State);
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <StartMode+0xb04>)
 80033b6:	f001 fd6f 	bl	8004e98 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 80033ba:	e071      	b.n	80034a0 <StartMode+0xbe8>
 80033bc:	2000134c 	.word	0x2000134c
 80033c0:	20009b04 	.word	0x20009b04
 80033c4:	200098b0 	.word	0x200098b0
 80033c8:	2000101a 	.word	0x2000101a
 80033cc:	ffff0000 	.word	0xffff0000
 80033d0:	20001018 	.word	0x20001018
		  {
			  if((TS_State.touchX[0]>220) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<460))
 80033d4:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <StartMode+0xc2c>)
 80033d6:	885b      	ldrh	r3, [r3, #2]
 80033d8:	2bdc      	cmp	r3, #220	; 0xdc
 80033da:	d95b      	bls.n	8003494 <StartMode+0xbdc>
 80033dc:	4b41      	ldr	r3, [pc, #260]	; (80034e4 <StartMode+0xc2c>)
 80033de:	899b      	ldrh	r3, [r3, #12]
 80033e0:	2bfa      	cmp	r3, #250	; 0xfa
 80033e2:	d957      	bls.n	8003494 <StartMode+0xbdc>
 80033e4:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <StartMode+0xc2c>)
 80033e6:	885b      	ldrh	r3, [r3, #2]
 80033e8:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80033ec:	d252      	bcs.n	8003494 <StartMode+0xbdc>
			  {
				  radius_prec = radius;
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <StartMode+0xc30>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
				  radius = (TS_State.touchX[0]-208)/12;
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <StartMode+0xc2c>)
 80033f8:	885b      	ldrh	r3, [r3, #2]
 80033fa:	3bd0      	subs	r3, #208	; 0xd0
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <StartMode+0xc34>)
 80033fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003402:	1052      	asrs	r2, r2, #1
 8003404:	17db      	asrs	r3, r3, #31
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <StartMode+0xc30>)
 800340c:	701a      	strb	r2, [r3, #0]
				  if(myMutexLCDHandle != NULL)
 800340e:	4b38      	ldr	r3, [pc, #224]	; (80034f0 <StartMode+0xc38>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03e      	beq.n	8003494 <StartMode+0xbdc>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <StartMode+0xc38>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2164      	movs	r1, #100	; 0x64
 800341c:	4618      	mov	r0, r3
 800341e:	f009 fff1 	bl	800d404 <xQueueSemaphoreTake>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d135      	bne.n	8003494 <StartMode+0xbdc>
					   {
						   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f000 fc6a 	bl	8003d04 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillRect(220+12*radius_prec, 252, 5, 18);
 8003430:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	0052      	lsls	r2, r2, #1
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	b29b      	uxth	r3, r3
 8003440:	33dc      	adds	r3, #220	; 0xdc
 8003442:	b298      	uxth	r0, r3
 8003444:	2312      	movs	r3, #18
 8003446:	2205      	movs	r2, #5
 8003448:	21fc      	movs	r1, #252	; 0xfc
 800344a:	f000 fffd 	bl	8004448 <BSP_LCD_FillRect>
						   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800344e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003452:	f000 fc57 	bl	8003d04 <BSP_LCD_SetTextColor>
						   BSP_LCD_DrawHLine(220, 261, 240);
 8003456:	22f0      	movs	r2, #240	; 0xf0
 8003458:	f240 1105 	movw	r1, #261	; 0x105
 800345c:	20dc      	movs	r0, #220	; 0xdc
 800345e:	f000 fdfb 	bl	8004058 <BSP_LCD_DrawHLine>
						   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003462:	4824      	ldr	r0, [pc, #144]	; (80034f4 <StartMode+0xc3c>)
 8003464:	f000 fc4e 	bl	8003d04 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillRect(220+12*radius, 252, 5, 18);
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <StartMode+0xc30>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	0052      	lsls	r2, r2, #1
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	b29b      	uxth	r3, r3
 8003478:	33dc      	adds	r3, #220	; 0xdc
 800347a:	b298      	uxth	r0, r3
 800347c:	2312      	movs	r3, #18
 800347e:	2205      	movs	r2, #5
 8003480:	21fc      	movs	r1, #252	; 0xfc
 8003482:	f000 ffe1 	bl	8004448 <BSP_LCD_FillRect>
						   xSemaphoreGive(myMutexLCDHandle);
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <StartMode+0xc38>)
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	2200      	movs	r2, #0
 800348e:	2100      	movs	r1, #0
 8003490:	f009 fe1a 	bl	800d0c8 <xQueueGenericSend>
					   }
				   }
			  }
			  sous_menu = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			  BSP_TS_GetState(&TS_State);
 800349a:	4812      	ldr	r0, [pc, #72]	; (80034e4 <StartMode+0xc2c>)
 800349c:	f001 fcfc 	bl	8004e98 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <StartMode+0xc2c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d195      	bne.n	80033d4 <StartMode+0xb1c>
		  }
		  if(sous_menu==0) etat = 1;
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10f      	bne.n	80034d0 <StartMode+0xc18>
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <StartMode+0xc40>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
		  break;
 80034b6:	e00b      	b.n	80034d0 <StartMode+0xc18>
	  /*
	   * etat de clear de la page de dessin.
	   */
	  case 7 :
		  etat = 1;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <StartMode+0xc40>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
		  break;
 80034be:	e008      	b.n	80034d2 <StartMode+0xc1a>
		  break;
 80034c0:	bf00      	nop
 80034c2:	e006      	b.n	80034d2 <StartMode+0xc1a>
		  break;
 80034c4:	bf00      	nop
 80034c6:	e004      	b.n	80034d2 <StartMode+0xc1a>
		  break;
 80034c8:	bf00      	nop
 80034ca:	e002      	b.n	80034d2 <StartMode+0xc1a>
		  break;
 80034cc:	bf00      	nop
 80034ce:	e000      	b.n	80034d2 <StartMode+0xc1a>
		  break;
 80034d0:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 80034d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034d6:	2164      	movs	r1, #100	; 0x64
 80034d8:	4618      	mov	r0, r3
 80034da:	f00a fb47 	bl	800db6c <vTaskDelayUntil>
	  switch(etat)
 80034de:	f7ff ba58 	b.w	8002992 <StartMode+0xda>
 80034e2:	bf00      	nop
 80034e4:	2000134c 	.word	0x2000134c
 80034e8:	20001018 	.word	0x20001018
 80034ec:	2aaaaaab 	.word	0x2aaaaaab
 80034f0:	200098b0 	.word	0x200098b0
 80034f4:	ffff0000 	.word	0xffff0000
 80034f8:	2000101a 	.word	0x2000101a

080034fc <StartPeindre>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPeindre */
void StartPeindre(void const * argument)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPeindre */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 8003504:	f00a fcf6 	bl	800def4 <xTaskGetTickCount>
 8003508:	4603      	mov	r3, r0
 800350a:	60fb      	str	r3, [r7, #12]
  static TS_StateTypeDef  TS_State;
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 800350c:	481c      	ldr	r0, [pc, #112]	; (8003580 <StartPeindre+0x84>)
 800350e:	f001 fcc3 	bl	8004e98 <BSP_TS_GetState>
	  if(TS_State.touchDetected && (TestConditionBord(TS_State.touchX[0], TS_State.touchY[0], radius)))
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <StartPeindre+0x84>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <StartPeindre+0x74>
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <StartPeindre+0x84>)
 800351c:	8858      	ldrh	r0, [r3, #2]
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <StartPeindre+0x84>)
 8003520:	8999      	ldrh	r1, [r3, #12]
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <StartPeindre+0x88>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	f7fe fdcd 	bl	80020c8 <TestConditionBord>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01d      	beq.n	8003570 <StartPeindre+0x74>
	  {
		  if(myMutexLCDHandle != NULL)
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <StartPeindre+0x8c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d019      	beq.n	8003570 <StartPeindre+0x74>
		   {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <StartPeindre+0x8c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f009 ff5e 	bl	800d404 <xQueueSemaphoreTake>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d110      	bne.n	8003570 <StartPeindre+0x74>
			   {
				   LCD_PAINTBRUSH(TS_State.touchX[0],TS_State.touchY[0],radius);
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <StartPeindre+0x84>)
 8003550:	8858      	ldrh	r0, [r3, #2]
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <StartPeindre+0x84>)
 8003554:	8999      	ldrh	r1, [r3, #12]
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <StartPeindre+0x88>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	f7fe fddd 	bl	800211c <LCD_PAINTBRUSH>
				   xSemaphoreGive(myMutexLCDHandle);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <StartPeindre+0x8c>)
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	2300      	movs	r3, #0
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	f009 fdac 	bl	800d0c8 <xQueueGenericSend>
			   }
		   }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 3);
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	2103      	movs	r1, #3
 8003576:	4618      	mov	r0, r3
 8003578:	f00a faf8 	bl	800db6c <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 800357c:	e7c6      	b.n	800350c <StartPeindre+0x10>
 800357e:	bf00      	nop
 8003580:	20001378 	.word	0x20001378
 8003584:	20001018 	.word	0x20001018
 8003588:	200098b0 	.word	0x200098b0

0800358c <StartTaskEtat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEtat */
void StartTaskEtat(void const * argument)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskEtat */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 8003594:	f00a fcae 	bl	800def4 <xTaskGetTickCount>
 8003598:	4603      	mov	r3, r0
 800359a:	61bb      	str	r3, [r7, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
  sConfig.Channel = ADC_CHANNEL_8;
 80035b2:	2308      	movs	r3, #8
 80035b4:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4619      	mov	r1, r3
 80035bc:	486b      	ldr	r0, [pc, #428]	; (800376c <StartTaskEtat+0x1e0>)
 80035be:	f002 feb7 	bl	8006330 <HAL_ADC_ConfigChannel>
  char etat_prec = 2;
 80035c2:	2302      	movs	r3, #2
 80035c4:	77fb      	strb	r3, [r7, #31]
  uint16_t joystick_h;
  /* Infinite loop */
  for(;;)
  {
	  if(etat == 0)
 80035c6:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <StartTaskEtat+0x1e4>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 80c5 	bne.w	800375a <StartTaskEtat+0x1ce>
	  {
		  HAL_ADC_Start(&hadc1);
 80035d0:	4868      	ldr	r0, [pc, #416]	; (8003774 <StartTaskEtat+0x1e8>)
 80035d2:	f002 fd5b 	bl	800608c <HAL_ADC_Start>
		  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80035d6:	bf00      	nop
 80035d8:	2164      	movs	r1, #100	; 0x64
 80035da:	4866      	ldr	r0, [pc, #408]	; (8003774 <StartTaskEtat+0x1e8>)
 80035dc:	f002 fe16 	bl	800620c <HAL_ADC_PollForConversion>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f8      	bne.n	80035d8 <StartTaskEtat+0x4c>
		  joystick_h = HAL_ADC_GetValue(&hadc1);
 80035e6:	4863      	ldr	r0, [pc, #396]	; (8003774 <StartTaskEtat+0x1e8>)
 80035e8:	f002 fe94 	bl	8006314 <HAL_ADC_GetValue>
 80035ec:	4603      	mov	r3, r0
 80035ee:	83bb      	strh	r3, [r7, #28]
		  if(joystick_h > 2500)
 80035f0:	8bbb      	ldrh	r3, [r7, #28]
 80035f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d956      	bls.n	80036a8 <StartTaskEtat+0x11c>
		  {
			  etat_prec = etat_int;
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <StartTaskEtat+0x1ec>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	77fb      	strb	r3, [r7, #31]
			  etat_int -= 1;
 8003600:	4b5d      	ldr	r3, [pc, #372]	; (8003778 <StartTaskEtat+0x1ec>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <StartTaskEtat+0x1ec>)
 800360a:	701a      	strb	r2, [r3, #0]
			  if(etat_int < 2) etat_int = etat_max;
 800360c:	4b5a      	ldr	r3, [pc, #360]	; (8003778 <StartTaskEtat+0x1ec>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d802      	bhi.n	800361a <StartTaskEtat+0x8e>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <StartTaskEtat+0x1ec>)
 8003616:	2206      	movs	r2, #6
 8003618:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 800361a:	4b58      	ldr	r3, [pc, #352]	; (800377c <StartTaskEtat+0x1f0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 809b 	beq.w	800375a <StartTaskEtat+0x1ce>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8003624:	4b55      	ldr	r3, [pc, #340]	; (800377c <StartTaskEtat+0x1f0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f009 feea 	bl	800d404 <xQueueSemaphoreTake>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	f040 8091 	bne.w	800375a <StartTaskEtat+0x1ce>
				   {
					   BSP_LCD_SelectLayer(1);
 8003638:	2001      	movs	r0, #1
 800363a:	f000 fb53 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800363e:	f04f 30ff 	mov.w	r0, #4294967295
 8003642:	f000 fb5f 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 8003646:	7ffb      	ldrb	r3, [r7, #31]
 8003648:	b29b      	uxth	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	00d2      	lsls	r2, r2, #3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	461a      	mov	r2, r3
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	3baa      	subs	r3, #170	; 0xaa
 800365c:	b298      	uxth	r0, r3
 800365e:	2305      	movs	r3, #5
 8003660:	2223      	movs	r2, #35	; 0x23
 8003662:	f240 1109 	movw	r1, #265	; 0x109
 8003666:	f000 feef 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF);
 800366a:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800366e:	f000 fb49 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <StartTaskEtat+0x1ec>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	00d2      	lsls	r2, r2, #3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	461a      	mov	r2, r3
 8003680:	00d2      	lsls	r2, r2, #3
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	b29b      	uxth	r3, r3
 8003688:	3baa      	subs	r3, #170	; 0xaa
 800368a:	b298      	uxth	r0, r3
 800368c:	2305      	movs	r3, #5
 800368e:	2223      	movs	r2, #35	; 0x23
 8003690:	f240 1109 	movw	r1, #265	; 0x109
 8003694:	f000 fed8 	bl	8004448 <BSP_LCD_FillRect>
					   xSemaphoreGive(myMutexLCDHandle);
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <StartTaskEtat+0x1f0>)
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	f009 fd11 	bl	800d0c8 <xQueueGenericSend>
 80036a6:	e058      	b.n	800375a <StartTaskEtat+0x1ce>
				   }
			   }
		  }
		  else if(joystick_h < 1500)
 80036a8:	8bbb      	ldrh	r3, [r7, #28]
 80036aa:	f240 52db 	movw	r2, #1499	; 0x5db
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d853      	bhi.n	800375a <StartTaskEtat+0x1ce>
		  {
			  etat_prec = etat_int;
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <StartTaskEtat+0x1ec>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	77fb      	strb	r3, [r7, #31]
			  etat_int += 1;
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <StartTaskEtat+0x1ec>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <StartTaskEtat+0x1ec>)
 80036c2:	701a      	strb	r2, [r3, #0]
			  if (etat_int > etat_max) etat_int = 2;
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <StartTaskEtat+0x1ec>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d902      	bls.n	80036d2 <StartTaskEtat+0x146>
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <StartTaskEtat+0x1ec>)
 80036ce:	2202      	movs	r2, #2
 80036d0:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 80036d2:	4b2a      	ldr	r3, [pc, #168]	; (800377c <StartTaskEtat+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03f      	beq.n	800375a <StartTaskEtat+0x1ce>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <StartTaskEtat+0x1f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f009 fe8f 	bl	800d404 <xQueueSemaphoreTake>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d136      	bne.n	800375a <StartTaskEtat+0x1ce>
				   {
					   BSP_LCD_SelectLayer(1);
 80036ec:	2001      	movs	r0, #1
 80036ee:	f000 faf9 	bl	8003ce4 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	f000 fb05 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	00d2      	lsls	r2, r2, #3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	461a      	mov	r2, r3
 8003706:	00d2      	lsls	r2, r2, #3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	3baa      	subs	r3, #170	; 0xaa
 8003710:	b298      	uxth	r0, r3
 8003712:	2305      	movs	r3, #5
 8003714:	2223      	movs	r2, #35	; 0x23
 8003716:	f240 1109 	movw	r1, #265	; 0x109
 800371a:	f000 fe95 	bl	8004448 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 800371e:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8003722:	f000 faef 	bl	8003d04 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <StartTaskEtat+0x1ec>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	00d2      	lsls	r2, r2, #3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	461a      	mov	r2, r3
 8003734:	00d2      	lsls	r2, r2, #3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	3baa      	subs	r3, #170	; 0xaa
 800373e:	b298      	uxth	r0, r3
 8003740:	2305      	movs	r3, #5
 8003742:	2223      	movs	r2, #35	; 0x23
 8003744:	f240 1109 	movw	r1, #265	; 0x109
 8003748:	f000 fe7e 	bl	8004448 <BSP_LCD_FillRect>
					   xSemaphoreGive(myMutexLCDHandle);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <StartTaskEtat+0x1f0>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	f009 fcb7 	bl	800d0c8 <xQueueGenericSend>
				   }
			   }
		  }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 300);
 800375a:	f107 0318 	add.w	r3, r7, #24
 800375e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003762:	4618      	mov	r0, r3
 8003764:	f00a fa02 	bl	800db6c <vTaskDelayUntil>
	  if(etat == 0)
 8003768:	e72d      	b.n	80035c6 <StartTaskEtat+0x3a>
 800376a:	bf00      	nop
 800376c:	20009a28 	.word	0x20009a28
 8003770:	2000101a 	.word	0x2000101a
 8003774:	200099e0 	.word	0x200099e0
 8003778:	2000101b 	.word	0x2000101b
 800377c:	200098b0 	.word	0x200098b0

08003780 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
=======
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
<<<<<<< Updated upstream
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800210e:	f002 fb23 	bl	8004758 <HAL_IncTick>
=======
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003792:	f002 fbf5 	bl	8005f80 <HAL_IncTick>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< Updated upstream
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40001000 	.word	0x40001000

08002120 <Error_Handler>:
=======
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40001000 	.word	0x40001000

080037a4 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
=======
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8002124:	b672      	cpsid	i
=======
 80037a8:	b672      	cpsid	i
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 8002126:	e7fe      	b.n	8002126 <Error_Handler+0x6>

08002128 <I2Cx_MspInit>:
=======
 80037aa:	e7fe      	b.n	80037aa <Error_Handler+0x6>

080037ac <I2Cx_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
<<<<<<< Updated upstream
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a51      	ldr	r2, [pc, #324]	; (8002278 <I2Cx_MspInit+0x150>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d14d      	bne.n	80021d4 <I2Cx_MspInit+0xac>
=======
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	; 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a51      	ldr	r2, [pc, #324]	; (80038fc <I2Cx_MspInit+0x150>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d14d      	bne.n	8003858 <I2Cx_MspInit+0xac>
>>>>>>> Stashed changes
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
<<<<<<< Updated upstream
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <I2Cx_MspInit+0x154>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a4f      	ldr	r2, [pc, #316]	; (800227c <I2Cx_MspInit+0x154>)
 800213e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b4d      	ldr	r3, [pc, #308]	; (800227c <I2Cx_MspInit+0x154>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002154:	2312      	movs	r3, #18
 8002156:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002160:	2304      	movs	r3, #4
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4845      	ldr	r0, [pc, #276]	; (8002280 <I2Cx_MspInit+0x158>)
 800216c:	f003 fd2a 	bl	8005bc4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4840      	ldr	r0, [pc, #256]	; (8002280 <I2Cx_MspInit+0x158>)
 800217e:	f003 fd21 	bl	8005bc4 <HAL_GPIO_Init>
=======
 80037bc:	4b50      	ldr	r3, [pc, #320]	; (8003900 <I2Cx_MspInit+0x154>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <I2Cx_MspInit+0x154>)
 80037c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c6:	6313      	str	r3, [r2, #48]	; 0x30
 80037c8:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <I2Cx_MspInit+0x154>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80037d8:	2312      	movs	r3, #18
 80037da:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80037e0:	2302      	movs	r3, #2
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80037e4:	2304      	movs	r3, #4
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037e8:	f107 031c 	add.w	r3, r7, #28
 80037ec:	4619      	mov	r1, r3
 80037ee:	4845      	ldr	r0, [pc, #276]	; (8003904 <I2Cx_MspInit+0x158>)
 80037f0:	f003 fdfc 	bl	80073ec <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80037f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	4619      	mov	r1, r3
 8003800:	4840      	ldr	r0, [pc, #256]	; (8003904 <I2Cx_MspInit+0x158>)
 8003802:	f003 fdf3 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
<<<<<<< Updated upstream
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <I2Cx_MspInit+0x154>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a3d      	ldr	r2, [pc, #244]	; (800227c <I2Cx_MspInit+0x154>)
 8002188:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <I2Cx_MspInit+0x154>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800219a:	4b38      	ldr	r3, [pc, #224]	; (800227c <I2Cx_MspInit+0x154>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a37      	ldr	r2, [pc, #220]	; (800227c <I2Cx_MspInit+0x154>)
 80021a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021a4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <I2Cx_MspInit+0x154>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a34      	ldr	r2, [pc, #208]	; (800227c <I2Cx_MspInit+0x154>)
 80021ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021b0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	210f      	movs	r1, #15
 80021b6:	2048      	movs	r0, #72	; 0x48
 80021b8:	f002 ffa2 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80021bc:	2048      	movs	r0, #72	; 0x48
 80021be:	f002 ffbb 	bl	8005138 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	210f      	movs	r1, #15
 80021c6:	2049      	movs	r0, #73	; 0x49
 80021c8:	f002 ff9a 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80021cc:	2049      	movs	r0, #73	; 0x49
 80021ce:	f002 ffb3 	bl	8005138 <HAL_NVIC_EnableIRQ>
=======
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <I2Cx_MspInit+0x154>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a3d      	ldr	r2, [pc, #244]	; (8003900 <I2Cx_MspInit+0x154>)
 800380c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <I2Cx_MspInit+0x154>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <I2Cx_MspInit+0x154>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4a37      	ldr	r2, [pc, #220]	; (8003900 <I2Cx_MspInit+0x154>)
 8003824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003828:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800382a:	4b35      	ldr	r3, [pc, #212]	; (8003900 <I2Cx_MspInit+0x154>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <I2Cx_MspInit+0x154>)
 8003830:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003834:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003836:	2200      	movs	r2, #0
 8003838:	210f      	movs	r1, #15
 800383a:	2048      	movs	r0, #72	; 0x48
 800383c:	f003 f874 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003840:	2048      	movs	r0, #72	; 0x48
 8003842:	f003 f88d 	bl	8006960 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003846:	2200      	movs	r2, #0
 8003848:	210f      	movs	r1, #15
 800384a:	2049      	movs	r0, #73	; 0x49
 800384c:	f003 f86c 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003850:	2049      	movs	r0, #73	; 0x49
 8003852:	f003 f885 	bl	8006960 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
<<<<<<< Updated upstream
 80021d2:	e04d      	b.n	8002270 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <I2Cx_MspInit+0x154>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <I2Cx_MspInit+0x154>)
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	6313      	str	r3, [r2, #48]	; 0x30
 80021e0:	4b26      	ldr	r3, [pc, #152]	; (800227c <I2Cx_MspInit+0x154>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80021f2:	2312      	movs	r3, #18
 80021f4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80021fa:	2302      	movs	r3, #2
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80021fe:	2304      	movs	r3, #4
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	481e      	ldr	r0, [pc, #120]	; (8002284 <I2Cx_MspInit+0x15c>)
 800220a:	f003 fcdb 	bl	8005bc4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800220e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	481a      	ldr	r0, [pc, #104]	; (8002284 <I2Cx_MspInit+0x15c>)
 800221c:	f003 fcd2 	bl	8005bc4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <I2Cx_MspInit+0x154>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <I2Cx_MspInit+0x154>)
 8002226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <I2Cx_MspInit+0x154>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <I2Cx_MspInit+0x154>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <I2Cx_MspInit+0x154>)
 800223e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002242:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <I2Cx_MspInit+0x154>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a0c      	ldr	r2, [pc, #48]	; (800227c <I2Cx_MspInit+0x154>)
 800224a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800224e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	210f      	movs	r1, #15
 8002254:	201f      	movs	r0, #31
 8002256:	f002 ff53 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800225a:	201f      	movs	r0, #31
 800225c:	f002 ff6c 	bl	8005138 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	210f      	movs	r1, #15
 8002264:	2020      	movs	r0, #32
 8002266:	f002 ff4b 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800226a:	2020      	movs	r0, #32
 800226c:	f002 ff64 	bl	8005138 <HAL_NVIC_EnableIRQ>
}
 8002270:	bf00      	nop
 8002272:	3730      	adds	r7, #48	; 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000037c 	.word	0x2000037c
 800227c:	40023800 	.word	0x40023800
 8002280:	40021c00 	.word	0x40021c00
 8002284:	40020400 	.word	0x40020400

08002288 <I2Cx_Init>:
=======
 8003856:	e04d      	b.n	80038f4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <I2Cx_MspInit+0x154>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <I2Cx_MspInit+0x154>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	6313      	str	r3, [r2, #48]	; 0x30
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <I2Cx_MspInit+0x154>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003874:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003876:	2312      	movs	r3, #18
 8003878:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800387e:	2302      	movs	r3, #2
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003882:	2304      	movs	r3, #4
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4619      	mov	r1, r3
 800388c:	481e      	ldr	r0, [pc, #120]	; (8003908 <I2Cx_MspInit+0x15c>)
 800388e:	f003 fdad 	bl	80073ec <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003898:	f107 031c 	add.w	r3, r7, #28
 800389c:	4619      	mov	r1, r3
 800389e:	481a      	ldr	r0, [pc, #104]	; (8003908 <I2Cx_MspInit+0x15c>)
 80038a0:	f003 fda4 	bl	80073ec <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <I2Cx_MspInit+0x154>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <I2Cx_MspInit+0x154>)
 80038aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <I2Cx_MspInit+0x154>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <I2Cx_MspInit+0x154>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <I2Cx_MspInit+0x154>)
 80038c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038c6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <I2Cx_MspInit+0x154>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <I2Cx_MspInit+0x154>)
 80038ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038d2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80038d4:	2200      	movs	r2, #0
 80038d6:	210f      	movs	r1, #15
 80038d8:	201f      	movs	r0, #31
 80038da:	f003 f825 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80038de:	201f      	movs	r0, #31
 80038e0:	f003 f83e 	bl	8006960 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	210f      	movs	r1, #15
 80038e8:	2020      	movs	r0, #32
 80038ea:	f003 f81d 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80038ee:	2020      	movs	r0, #32
 80038f0:	f003 f836 	bl	8006960 <HAL_NVIC_EnableIRQ>
}
 80038f4:	bf00      	nop
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200013a4 	.word	0x200013a4
 8003900:	40023800 	.word	0x40023800
 8003904:	40021c00 	.word	0x40021c00
 8003908:	40020400 	.word	0x40020400

0800390c <I2Cx_Init>:
>>>>>>> Stashed changes
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
<<<<<<< Updated upstream
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f004 fa6b 	bl	800676c <HAL_I2C_GetState>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d125      	bne.n	80022e8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <I2Cx_Init+0x68>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <I2Cx_Init+0x6c>)
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e002      	b.n	80022b2 <I2Cx_Init+0x2a>
=======
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f004 fb55 	bl	8007fc4 <HAL_I2C_GetState>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d125      	bne.n	800396c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <I2Cx_Init+0x68>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a13      	ldr	r2, [pc, #76]	; (8003978 <I2Cx_Init+0x6c>)
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e002      	b.n	8003936 <I2Cx_Init+0x2a>
>>>>>>> Stashed changes
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
<<<<<<< Updated upstream
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <I2Cx_Init+0x70>)
 80022b0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <I2Cx_Init+0x74>)
 80022b6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff23 	bl	8002128 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f003 ff54 	bl	8006190 <HAL_I2C_Init>
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000037c 	.word	0x2000037c
 80022f4:	40005c00 	.word	0x40005c00
 80022f8:	40005400 	.word	0x40005400
 80022fc:	40912732 	.word	0x40912732

08002300 <I2Cx_ReadMultiple>:
=======
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <I2Cx_Init+0x70>)
 8003934:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a11      	ldr	r2, [pc, #68]	; (8003980 <I2Cx_Init+0x74>)
 800393a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff23 	bl	80037ac <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f004 f83e 	bl	80079e8 <HAL_I2C_Init>
  }
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200013a4 	.word	0x200013a4
 8003978:	40005c00 	.word	0x40005c00
 800397c:	40005400 	.word	0x40005400
 8003980:	40912732 	.word	0x40912732

08003984 <I2Cx_ReadMultiple>:
>>>>>>> Stashed changes
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
<<<<<<< Updated upstream
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af04      	add	r7, sp, #16
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	72fb      	strb	r3, [r7, #11]
 8002312:	460b      	mov	r3, r1
 8002314:	813b      	strh	r3, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	b299      	uxth	r1, r3
 8002322:	88f8      	ldrh	r0, [r7, #6]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232a:	9302      	str	r3, [sp, #8]
 800232c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4603      	mov	r3, r0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f004 f8fe 	bl	8006538 <HAL_I2C_Mem_Read>
 800233c:	4603      	mov	r3, r0
 800233e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	4619      	mov	r1, r3
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f832 	bl	80023b4 <I2Cx_Error>
  }
  return status;    
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <I2Cx_WriteMultiple>:
=======
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af04      	add	r7, sp, #16
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	72fb      	strb	r3, [r7, #11]
 8003996:	460b      	mov	r3, r1
 8003998:	813b      	strh	r3, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	b299      	uxth	r1, r3
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4603      	mov	r3, r0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f004 f9e8 	bl	8007d90 <HAL_I2C_Mem_Read>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	4619      	mov	r1, r3
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f832 	bl	8003a38 <I2Cx_Error>
  }
  return status;    
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2Cx_WriteMultiple>:
>>>>>>> Stashed changes
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
<<<<<<< Updated upstream
 800235a:	b580      	push	{r7, lr}
 800235c:	b08a      	sub	sp, #40	; 0x28
 800235e:	af04      	add	r7, sp, #16
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	460b      	mov	r3, r1
 800236e:	813b      	strh	r3, [r7, #8]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	b299      	uxth	r1, r3
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4603      	mov	r3, r0
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f003 ffbd 	bl	8006310 <HAL_I2C_Mem_Write>
 8002396:	4603      	mov	r3, r0
 8002398:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	4619      	mov	r1, r3
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f805 	bl	80023b4 <I2Cx_Error>
  }
  return status;
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2Cx_Error>:
=======
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08a      	sub	sp, #40	; 0x28
 80039e2:	af04      	add	r7, sp, #16
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	461a      	mov	r2, r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	72fb      	strb	r3, [r7, #11]
 80039f0:	460b      	mov	r3, r1
 80039f2:	813b      	strh	r3, [r7, #8]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	b299      	uxth	r1, r3
 8003a00:	88f8      	ldrh	r0, [r7, #6]
 8003a02:	893a      	ldrh	r2, [r7, #8]
 8003a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a08:	9302      	str	r3, [sp, #8]
 8003a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	4603      	mov	r3, r0
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f004 f8a7 	bl	8007b68 <HAL_I2C_Mem_Write>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003a24:	7afb      	ldrb	r3, [r7, #11]
 8003a26:	4619      	mov	r1, r3
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f805 	bl	8003a38 <I2Cx_Error>
  }
  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <I2Cx_Error>:
>>>>>>> Stashed changes
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
<<<<<<< Updated upstream
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f003 ff75 	bl	80062b0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff5e 	bl	8002288 <I2Cx_Init>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <TS_IO_Init>:
=======
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f004 f85f 	bl	8007b08 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff5e 	bl	800390c <I2Cx_Init>
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <TS_IO_Init>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
<<<<<<< Updated upstream
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TS_IO_Init+0x10>)
 80023da:	f7ff ff55 	bl	8002288 <I2Cx_Init>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000037c 	.word	0x2000037c

080023e8 <TS_IO_Write>:
=======
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <TS_IO_Init+0x10>)
 8003a5e:	f7ff ff55 	bl	800390c <I2Cx_Init>
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200013a4 	.word	0x200013a4

08003a6c <TS_IO_Write>:
>>>>>>> Stashed changes
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
<<<<<<< Updated upstream
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
 80023f2:	460b      	mov	r3, r1
 80023f4:	71bb      	strb	r3, [r7, #6]
 80023f6:	4613      	mov	r3, r2
 80023f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	79f9      	ldrb	r1, [r7, #7]
 8002400:	2301      	movs	r3, #1
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	1d7b      	adds	r3, r7, #5
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <TS_IO_Write+0x30>)
 800240c:	f7ff ffa5 	bl	800235a <I2Cx_WriteMultiple>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000037c 	.word	0x2000037c

0800241c <TS_IO_Read>:
=======
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
 8003a76:	460b      	mov	r3, r1
 8003a78:	71bb      	strb	r3, [r7, #6]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003a7e:	79bb      	ldrb	r3, [r7, #6]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	79f9      	ldrb	r1, [r7, #7]
 8003a84:	2301      	movs	r3, #1
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	1d7b      	adds	r3, r7, #5
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	4803      	ldr	r0, [pc, #12]	; (8003a9c <TS_IO_Write+0x30>)
 8003a90:	f7ff ffa5 	bl	80039de <I2Cx_WriteMultiple>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200013a4 	.word	0x200013a4

08003aa0 <TS_IO_Read>:
>>>>>>> Stashed changes
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
<<<<<<< Updated upstream
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	71fb      	strb	r3, [r7, #7]
 8002428:	4613      	mov	r3, r2
 800242a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	b29a      	uxth	r2, r3
 8002434:	79f9      	ldrb	r1, [r7, #7]
 8002436:	2301      	movs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f107 030f 	add.w	r3, r7, #15
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <TS_IO_Read+0x38>)
 8002444:	f7ff ff5c 	bl	8002300 <I2Cx_ReadMultiple>

  return read_value;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000037c 	.word	0x2000037c

08002458 <TS_IO_Delay>:
=======
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460a      	mov	r2, r1
 8003aaa:	71fb      	strb	r3, [r7, #7]
 8003aac:	4613      	mov	r3, r2
 8003aae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003ab4:	79bb      	ldrb	r3, [r7, #6]
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	79f9      	ldrb	r1, [r7, #7]
 8003aba:	2301      	movs	r3, #1
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	f107 030f 	add.w	r3, r7, #15
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4804      	ldr	r0, [pc, #16]	; (8003ad8 <TS_IO_Read+0x38>)
 8003ac8:	f7ff ff5c 	bl	8003984 <I2Cx_ReadMultiple>

  return read_value;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200013a4 	.word	0x200013a4

08003adc <TS_IO_Delay>:
>>>>>>> Stashed changes
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f002 f999 	bl	8004798 <HAL_Delay>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <BSP_LCD_Init>:
=======
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f002 fa6b 	bl	8005fc0 <HAL_Delay>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <BSP_LCD_Init>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
<<<<<<< Updated upstream
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
=======
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
<<<<<<< Updated upstream
 8002474:	4b31      	ldr	r3, [pc, #196]	; (800253c <BSP_LCD_Init+0xcc>)
 8002476:	2228      	movs	r2, #40	; 0x28
 8002478:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <BSP_LCD_Init+0xcc>)
 800247c:	2209      	movs	r2, #9
 800247e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <BSP_LCD_Init+0xcc>)
 8002482:	2235      	movs	r2, #53	; 0x35
 8002484:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <BSP_LCD_Init+0xcc>)
 8002488:	220b      	movs	r2, #11
 800248a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <BSP_LCD_Init+0xcc>)
 800248e:	f240 121b 	movw	r2, #283	; 0x11b
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <BSP_LCD_Init+0xcc>)
 8002496:	f240 2215 	movw	r2, #533	; 0x215
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <BSP_LCD_Init+0xcc>)
 800249e:	f240 121d 	movw	r2, #285	; 0x11d
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <BSP_LCD_Init+0xcc>)
 80024a6:	f240 2235 	movw	r2, #565	; 0x235
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80024ac:	2100      	movs	r1, #0
 80024ae:	4823      	ldr	r0, [pc, #140]	; (800253c <BSP_LCD_Init+0xcc>)
 80024b0:	f000 fdd0 	bl	8003054 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <BSP_LCD_Init+0xcc>)
 80024b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024ba:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <BSP_LCD_Init+0xcc>)
 80024be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80024c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <BSP_LCD_Init+0xcc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <BSP_LCD_Init+0xcc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <BSP_LCD_Init+0xcc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <BSP_LCD_Init+0xcc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <BSP_LCD_Init+0xcc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <BSP_LCD_Init+0xcc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <BSP_LCD_Init+0xcc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <BSP_LCD_Init+0xcc>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <BSP_LCD_Init+0xd0>)
 80024f8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80024fa:	4810      	ldr	r0, [pc, #64]	; (800253c <BSP_LCD_Init+0xcc>)
 80024fc:	f004 fdfe 	bl	80070fc <HAL_LTDC_GetState>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002506:	2100      	movs	r1, #0
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <BSP_LCD_Init+0xcc>)
 800250a:	f000 fcc9 	bl	8002ea0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800250e:	480b      	ldr	r0, [pc, #44]	; (800253c <BSP_LCD_Init+0xcc>)
 8002510:	f004 fbee 	bl	8006cf0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002514:	2201      	movs	r2, #1
 8002516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251a:	480a      	ldr	r0, [pc, #40]	; (8002544 <BSP_LCD_Init+0xd4>)
 800251c:	f003 fe1e 	bl	800615c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	2108      	movs	r1, #8
 8002524:	4808      	ldr	r0, [pc, #32]	; (8002548 <BSP_LCD_Init+0xd8>)
 8002526:	f003 fe19 	bl	800615c <HAL_GPIO_WritePin>
=======
 8003af8:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003afa:	2228      	movs	r2, #40	; 0x28
 8003afc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b00:	2209      	movs	r2, #9
 8003b02:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b06:	2235      	movs	r2, #53	; 0x35
 8003b08:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b0c:	220b      	movs	r2, #11
 8003b0e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b12:	f240 121b 	movw	r2, #283	; 0x11b
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b1a:	f240 2215 	movw	r2, #533	; 0x215
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b22:	f240 121d 	movw	r2, #285	; 0x11d
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b2a:	f240 2235 	movw	r2, #565	; 0x235
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003b30:	2100      	movs	r1, #0
 8003b32:	4823      	ldr	r0, [pc, #140]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b34:	f000 fe9a 	bl	800486c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b3e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003b40:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b42:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003b46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <BSP_LCD_Init+0xd0>)
 8003b7c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003b7e:	4810      	ldr	r0, [pc, #64]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b80:	f004 feb2 	bl	80088e8 <HAL_LTDC_GetState>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b8e:	f000 fd93 	bl	80046b8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003b92:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <BSP_LCD_Init+0xcc>)
 8003b94:	f004 fcd8 	bl	8008548 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b9e:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <BSP_LCD_Init+0xd4>)
 8003ba0:	f003 fef0 	bl	8007984 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	2108      	movs	r1, #8
 8003ba8:	4808      	ldr	r0, [pc, #32]	; (8003bcc <BSP_LCD_Init+0xd8>)
 8003baa:	f003 feeb 	bl	8007984 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
<<<<<<< Updated upstream
 800252a:	f000 feb3 	bl	8003294 <BSP_SDRAM_Init>
=======
 8003bae:	f000 ff7d 	bl	8004aac <BSP_SDRAM_Init>
>>>>>>> Stashed changes
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
<<<<<<< Updated upstream
 800252e:	4807      	ldr	r0, [pc, #28]	; (800254c <BSP_LCD_Init+0xdc>)
 8002530:	f000 f8ea 	bl	8002708 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20008c7c 	.word	0x20008c7c
 8002540:	40016800 	.word	0x40016800
 8002544:	40022000 	.word	0x40022000
 8002548:	40022800 	.word	0x40022800
 800254c:	20000028 	.word	0x20000028

08002550 <BSP_LCD_GetXSize>:
=======
 8003bb2:	4807      	ldr	r0, [pc, #28]	; (8003bd0 <BSP_LCD_Init+0xdc>)
 8003bb4:	f000 f8d8 	bl	8003d68 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20009cb0 	.word	0x20009cb0
 8003bc4:	40016800 	.word	0x40016800
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	40022800 	.word	0x40022800
 8003bd0:	2000101c 	.word	0x2000101c

08003bd4 <BSP_LCD_GetXSize>:
>>>>>>> Stashed changes
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
<<<<<<< Updated upstream
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <BSP_LCD_GetXSize+0x20>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <BSP_LCD_GetXSize+0x24>)
 800255a:	2134      	movs	r1, #52	; 0x34
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3360      	adds	r3, #96	; 0x60
 8002564:	681b      	ldr	r3, [r3, #0]
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000408 	.word	0x20000408
 8002574:	20008c7c 	.word	0x20008c7c

08002578 <BSP_LCD_GetYSize>:
=======
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <BSP_LCD_GetXSize+0x20>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a06      	ldr	r2, [pc, #24]	; (8003bf8 <BSP_LCD_GetXSize+0x24>)
 8003bde:	2134      	movs	r1, #52	; 0x34
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3360      	adds	r3, #96	; 0x60
 8003be8:	681b      	ldr	r3, [r3, #0]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20001430 	.word	0x20001430
 8003bf8:	20009cb0 	.word	0x20009cb0

08003bfc <BSP_LCD_GetYSize>:
>>>>>>> Stashed changes
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
<<<<<<< Updated upstream
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <BSP_LCD_GetYSize+0x20>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a06      	ldr	r2, [pc, #24]	; (800259c <BSP_LCD_GetYSize+0x24>)
 8002582:	2134      	movs	r1, #52	; 0x34
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3364      	adds	r3, #100	; 0x64
 800258c:	681b      	ldr	r3, [r3, #0]
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20000408 	.word	0x20000408
 800259c:	20008c7c 	.word	0x20008c7c

080025a0 <BSP_LCD_LayerDefaultInit>:
=======
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <BSP_LCD_GetYSize+0x20>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <BSP_LCD_GetYSize+0x24>)
 8003c06:	2134      	movs	r1, #52	; 0x34
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3364      	adds	r3, #100	; 0x64
 8003c10:	681b      	ldr	r3, [r3, #0]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20001430 	.word	0x20001430
 8003c20:	20009cb0 	.word	0x20009cb0

08003c24 <BSP_LCD_LayerDefaultInit>:
>>>>>>> Stashed changes
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
<<<<<<< Updated upstream
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	80fb      	strh	r3, [r7, #6]
=======
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b090      	sub	sp, #64	; 0x40
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
<<<<<<< Updated upstream
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80025b0:	f7ff ffce 	bl	8002550 <BSP_LCD_GetXSize>
 80025b4:	4603      	mov	r3, r0
 80025b6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80025bc:	f7ff ffdc 	bl	8002578 <BSP_LCD_GetYSize>
 80025c0:	4603      	mov	r3, r0
 80025c2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80025cc:	23ff      	movs	r3, #255	; 0xff
 80025ce:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80025e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80025ec:	2307      	movs	r3, #7
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80025f0:	f7ff ffae 	bl	8002550 <BSP_LCD_GetXSize>
 80025f4:	4603      	mov	r3, r0
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80025f8:	f7ff ffbe 	bl	8002578 <BSP_LCD_GetYSize>
 80025fc:	4603      	mov	r3, r0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4619      	mov	r1, r3
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <BSP_LCD_LayerDefaultInit+0xb4>)
 800260a:	f004 fd03 	bl	8007014 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800260e:	88fa      	ldrh	r2, [r7, #6]
 8002610:	4911      	ldr	r1, [pc, #68]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3304      	adds	r3, #4
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	490c      	ldr	r1, [pc, #48]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3308      	adds	r3, #8
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002636:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	4907      	ldr	r1, [pc, #28]	; (8002658 <BSP_LCD_LayerDefaultInit+0xb8>)
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800264a:	601a      	str	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	3740      	adds	r7, #64	; 0x40
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20008c7c 	.word	0x20008c7c
 8002658:	2000040c 	.word	0x2000040c
 800265c:	20000028 	.word	0x20000028

08002660 <BSP_LCD_SelectLayer>:
=======
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003c34:	f7ff ffce 	bl	8003bd4 <BSP_LCD_GetXSize>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003c40:	f7ff ffdc 	bl	8003bfc <BSP_LCD_GetYSize>
 8003c44:	4603      	mov	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003c50:	23ff      	movs	r3, #255	; 0xff
 8003c52:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003c6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003c70:	2307      	movs	r3, #7
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003c74:	f7ff ffae 	bl	8003bd4 <BSP_LCD_GetXSize>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003c7c:	f7ff ffbe 	bl	8003bfc <BSP_LCD_GetYSize>
 8003c80:	4603      	mov	r3, r0
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4812      	ldr	r0, [pc, #72]	; (8003cd8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003c8e:	f004 fded 	bl	800886c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	4911      	ldr	r1, [pc, #68]	; (8003cdc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003ca8:	88fa      	ldrh	r2, [r7, #6]
 8003caa:	490c      	ldr	r1, [pc, #48]	; (8003cdc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003cba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	4907      	ldr	r1, [pc, #28]	; (8003cdc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3740      	adds	r7, #64	; 0x40
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20009cb0 	.word	0x20009cb0
 8003cdc:	20001434 	.word	0x20001434
 8003ce0:	2000101c 	.word	0x2000101c

08003ce4 <BSP_LCD_SelectLayer>:
>>>>>>> Stashed changes
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
<<<<<<< Updated upstream
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <BSP_LCD_SelectLayer+0x1c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
} 
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000408 	.word	0x20000408

08002680 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4619      	mov	r1, r3
 8002692:	4803      	ldr	r0, [pc, #12]	; (80026a0 <BSP_LCD_SetTransparency+0x20>)
 8002694:	f004 fcfc 	bl	8007090 <HAL_LTDC_SetAlpha>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20008c7c 	.word	0x20008c7c

080026a4 <BSP_LCD_SetTextColor>:
=======
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <BSP_LCD_SelectLayer+0x1c>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6013      	str	r3, [r2, #0]
} 
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20001430 	.word	0x20001430

08003d04 <BSP_LCD_SetTextColor>:
>>>>>>> Stashed changes
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
<<<<<<< Updated upstream
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <BSP_LCD_SetTextColor+0x28>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <BSP_LCD_SetTextColor+0x2c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	601a      	str	r2, [r3, #0]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000408 	.word	0x20000408
 80026d0:	2000040c 	.word	0x2000040c

080026d4 <BSP_LCD_SetBackColor>:
=======
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <BSP_LCD_SetTextColor+0x28>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4907      	ldr	r1, [pc, #28]	; (8003d30 <BSP_LCD_SetTextColor+0x2c>)
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20001430 	.word	0x20001430
 8003d30:	20001434 	.word	0x20001434

08003d34 <BSP_LCD_SetBackColor>:
>>>>>>> Stashed changes
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
<<<<<<< Updated upstream
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <BSP_LCD_SetBackColor+0x2c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4908      	ldr	r1, [pc, #32]	; (8002704 <BSP_LCD_SetBackColor+0x30>)
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3304      	adds	r3, #4
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000408 	.word	0x20000408
 8002704:	2000040c 	.word	0x2000040c

08002708 <BSP_LCD_SetFont>:
=======
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <BSP_LCD_SetBackColor+0x2c>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4908      	ldr	r1, [pc, #32]	; (8003d64 <BSP_LCD_SetBackColor+0x30>)
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	601a      	str	r2, [r3, #0]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20001430 	.word	0x20001430
 8003d64:	20001434 	.word	0x20001434

08003d68 <BSP_LCD_SetFont>:
>>>>>>> Stashed changes
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
<<<<<<< Updated upstream
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <BSP_LCD_SetFont+0x2c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4908      	ldr	r1, [pc, #32]	; (8002738 <BSP_LCD_SetFont+0x30>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3308      	adds	r3, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000408 	.word	0x20000408
 8002738:	2000040c 	.word	0x2000040c

0800273c <BSP_LCD_GetFont>:
=======
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <BSP_LCD_SetFont+0x2c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4908      	ldr	r1, [pc, #32]	; (8003d98 <BSP_LCD_SetFont+0x30>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3308      	adds	r3, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20001430 	.word	0x20001430
 8003d98:	20001434 	.word	0x20001434

08003d9c <BSP_LCD_GetFont>:
>>>>>>> Stashed changes
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
<<<<<<< Updated upstream
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <BSP_LCD_GetFont+0x24>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <BSP_LCD_GetFont+0x28>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3308      	adds	r3, #8
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000408 	.word	0x20000408
 8002764:	2000040c 	.word	0x2000040c

08002768 <BSP_LCD_Clear>:
=======
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <BSP_LCD_GetFont+0x24>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4907      	ldr	r1, [pc, #28]	; (8003dc4 <BSP_LCD_GetFont+0x28>)
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3308      	adds	r3, #8
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20001430 	.word	0x20001430
 8003dc4:	20001434 	.word	0x20001434

08003dc8 <BSP_LCD_Clear>:
>>>>>>> Stashed changes
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
<<<<<<< Updated upstream
 8002768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af02      	add	r7, sp, #8
 800276e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <BSP_LCD_Clear+0x48>)
 8002772:	681c      	ldr	r4, [r3, #0]
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <BSP_LCD_Clear+0x48>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <BSP_LCD_Clear+0x4c>)
 800277a:	2134      	movs	r1, #52	; 0x34
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461d      	mov	r5, r3
 8002788:	f7ff fee2 	bl	8002550 <BSP_LCD_GetXSize>
 800278c:	4606      	mov	r6, r0
 800278e:	f7ff fef3 	bl	8002578 <BSP_LCD_GetYSize>
 8002792:	4602      	mov	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	4632      	mov	r2, r6
 80027a0:	4629      	mov	r1, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f000 fd2a 	bl	80031fc <LL_FillBuffer>
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b0:	20000408 	.word	0x20000408
 80027b4:	20008c7c 	.word	0x20008c7c

080027b8 <BSP_LCD_DisplayChar>:
=======
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <BSP_LCD_Clear+0x48>)
 8003dd2:	681c      	ldr	r4, [r3, #0]
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <BSP_LCD_Clear+0x48>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <BSP_LCD_Clear+0x4c>)
 8003dda:	2134      	movs	r1, #52	; 0x34
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461d      	mov	r5, r3
 8003de8:	f7ff fef4 	bl	8003bd4 <BSP_LCD_GetXSize>
 8003dec:	4606      	mov	r6, r0
 8003dee:	f7ff ff05 	bl	8003bfc <BSP_LCD_GetYSize>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	4632      	mov	r2, r6
 8003e00:	4629      	mov	r1, r5
 8003e02:	4620      	mov	r0, r4
 8003e04:	f000 fe06 	bl	8004a14 <LL_FillBuffer>
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e10:	20001430 	.word	0x20001430
 8003e14:	20009cb0 	.word	0x20009cb0

08003e18 <BSP_LCD_DisplayChar>:
>>>>>>> Stashed changes
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
<<<<<<< Updated upstream
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
 80027c2:	460b      	mov	r3, r1
 80027c4:	80bb      	strh	r3, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <BSP_LCD_DisplayChar+0x80>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	491b      	ldr	r1, [pc, #108]	; (800283c <BSP_LCD_DisplayChar+0x84>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3308      	adds	r3, #8
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <BSP_LCD_DisplayChar+0x80>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4c14      	ldr	r4, [pc, #80]	; (800283c <BSP_LCD_DisplayChar+0x84>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4423      	add	r3, r4
 80027f6:	3308      	adds	r3, #8
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027fc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <BSP_LCD_DisplayChar+0x80>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4c0d      	ldr	r4, [pc, #52]	; (800283c <BSP_LCD_DisplayChar+0x84>)
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4423      	add	r3, r4
 8002810:	3308      	adds	r3, #8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	889b      	ldrh	r3, [r3, #4]
 8002816:	3307      	adds	r3, #7
 8002818:	2b00      	cmp	r3, #0
 800281a:	da00      	bge.n	800281e <BSP_LCD_DisplayChar+0x66>
 800281c:	3307      	adds	r3, #7
 800281e:	10db      	asrs	r3, r3, #3
 8002820:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002824:	18ca      	adds	r2, r1, r3
 8002826:	88b9      	ldrh	r1, [r7, #4]
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fc2e 	bl	800308c <DrawChar>
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	20000408 	.word	0x20000408
 800283c:	2000040c 	.word	0x2000040c

08002840 <BSP_LCD_DisplayStringAt>:
=======
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
 8003e22:	460b      	mov	r3, r1
 8003e24:	80bb      	strh	r3, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <BSP_LCD_DisplayChar+0x80>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	491b      	ldr	r1, [pc, #108]	; (8003e9c <BSP_LCD_DisplayChar+0x84>)
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <BSP_LCD_DisplayChar+0x80>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4c14      	ldr	r4, [pc, #80]	; (8003e9c <BSP_LCD_DisplayChar+0x84>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4423      	add	r3, r4
 8003e56:	3308      	adds	r3, #8
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003e5c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <BSP_LCD_DisplayChar+0x80>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4c0d      	ldr	r4, [pc, #52]	; (8003e9c <BSP_LCD_DisplayChar+0x84>)
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4423      	add	r3, r4
 8003e70:	3308      	adds	r3, #8
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	889b      	ldrh	r3, [r3, #4]
 8003e76:	3307      	adds	r3, #7
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da00      	bge.n	8003e7e <BSP_LCD_DisplayChar+0x66>
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	10db      	asrs	r3, r3, #3
 8003e80:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003e84:	18ca      	adds	r2, r1, r3
 8003e86:	88b9      	ldrh	r1, [r7, #4]
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fd0a 	bl	80048a4 <DrawChar>
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}
 8003e98:	20001430 	.word	0x20001430
 8003e9c:	20001434 	.word	0x20001434

08003ea0 <BSP_LCD_DisplayStringAt>:
>>>>>>> Stashed changes
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
<<<<<<< Updated upstream
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	461a      	mov	r2, r3
 800284a:	4603      	mov	r3, r0
 800284c:	81fb      	strh	r3, [r7, #14]
 800284e:	460b      	mov	r3, r1
 8002850:	81bb      	strh	r3, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002856:	2301      	movs	r3, #1
 8002858:	83fb      	strh	r3, [r7, #30]
 800285a:	2300      	movs	r3, #0
 800285c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800286a:	e002      	b.n	8002872 <BSP_LCD_DisplayStringAt+0x32>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3301      	adds	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f6      	bne.n	800286c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800287e:	f7ff fe67 	bl	8002550 <BSP_LCD_GetXSize>
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	494f      	ldr	r1, [pc, #316]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3308      	adds	r3, #8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	889b      	ldrh	r3, [r3, #4]
 8002898:	fbb0 f3f3 	udiv	r3, r0, r3
 800289c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d01c      	beq.n	80028de <BSP_LCD_DisplayStringAt+0x9e>
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d017      	beq.n	80028d8 <BSP_LCD_DisplayStringAt+0x98>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d12e      	bne.n	800290a <BSP_LCD_DisplayStringAt+0xca>
=======
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60ba      	str	r2, [r7, #8]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	81fb      	strh	r3, [r7, #14]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	81bb      	strh	r3, [r7, #12]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	83fb      	strh	r3, [r7, #30]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003eca:	e002      	b.n	8003ed2 <BSP_LCD_DisplayStringAt+0x32>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	617a      	str	r2, [r7, #20]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f6      	bne.n	8003ecc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003ede:	f7ff fe79 	bl	8003bd4 <BSP_LCD_GetXSize>
 8003ee2:	4b4f      	ldr	r3, [pc, #316]	; (8004020 <BSP_LCD_DisplayStringAt+0x180>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	494f      	ldr	r1, [pc, #316]	; (8004024 <BSP_LCD_DisplayStringAt+0x184>)
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	889b      	ldrh	r3, [r3, #4]
 8003ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efc:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d01c      	beq.n	8003f3e <BSP_LCD_DisplayStringAt+0x9e>
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d017      	beq.n	8003f38 <BSP_LCD_DisplayStringAt+0x98>
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d12e      	bne.n	8003f6a <BSP_LCD_DisplayStringAt+0xca>
>>>>>>> Stashed changes
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
<<<<<<< Updated upstream
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad1      	subs	r1, r2, r3
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4843      	ldr	r0, [pc, #268]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	3308      	adds	r3, #8
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	889b      	ldrh	r3, [r3, #4]
 80028c8:	fb03 f301 	mul.w	r3, r3, r1
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	89fb      	ldrh	r3, [r7, #14]
 80028d2:	4413      	add	r3, r2
 80028d4:	83fb      	strh	r3, [r7, #30]
      break;
 80028d6:	e01b      	b.n	8002910 <BSP_LCD_DisplayStringAt+0xd0>
=======
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	1ad1      	subs	r1, r2, r3
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <BSP_LCD_DisplayStringAt+0x180>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	4843      	ldr	r0, [pc, #268]	; (8004024 <BSP_LCD_DisplayStringAt+0x184>)
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4403      	add	r3, r0
 8003f22:	3308      	adds	r3, #8
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	889b      	ldrh	r3, [r3, #4]
 8003f28:	fb03 f301 	mul.w	r3, r3, r1
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	4413      	add	r3, r2
 8003f34:	83fb      	strh	r3, [r7, #30]
      break;
 8003f36:	e01b      	b.n	8003f70 <BSP_LCD_DisplayStringAt+0xd0>
>>>>>>> Stashed changes
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
<<<<<<< Updated upstream
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	83fb      	strh	r3, [r7, #30]
      break;
 80028dc:	e018      	b.n	8002910 <BSP_LCD_DisplayStringAt+0xd0>
=======
 8003f38:	89fb      	ldrh	r3, [r7, #14]
 8003f3a:	83fb      	strh	r3, [r7, #30]
      break;
 8003f3c:	e018      	b.n	8003f70 <BSP_LCD_DisplayStringAt+0xd0>
>>>>>>> Stashed changes
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
<<<<<<< Updated upstream
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	b299      	uxth	r1, r3
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4836      	ldr	r0, [pc, #216]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4403      	add	r3, r0
 80028f6:	3308      	adds	r3, #8
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	889b      	ldrh	r3, [r3, #4]
 80028fc:	fb11 f303 	smulbb	r3, r1, r3
 8002900:	b29a      	uxth	r2, r3
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	83fb      	strh	r3, [r7, #30]
      break;
 8002908:	e002      	b.n	8002910 <BSP_LCD_DisplayStringAt+0xd0>
=======
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	b299      	uxth	r1, r3
 8003f46:	4b36      	ldr	r3, [pc, #216]	; (8004020 <BSP_LCD_DisplayStringAt+0x180>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4836      	ldr	r0, [pc, #216]	; (8004024 <BSP_LCD_DisplayStringAt+0x184>)
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4403      	add	r3, r0
 8003f56:	3308      	adds	r3, #8
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	889b      	ldrh	r3, [r3, #4]
 8003f5c:	fb11 f303 	smulbb	r3, r1, r3
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	89fb      	ldrh	r3, [r7, #14]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	83fb      	strh	r3, [r7, #30]
      break;
 8003f68:	e002      	b.n	8003f70 <BSP_LCD_DisplayStringAt+0xd0>
>>>>>>> Stashed changes
    }    
  default:
    {
      ref_column = Xpos;
<<<<<<< Updated upstream
 800290a:	89fb      	ldrh	r3, [r7, #14]
 800290c:	83fb      	strh	r3, [r7, #30]
      break;
 800290e:	bf00      	nop
=======
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	83fb      	strh	r3, [r7, #30]
      break;
 8003f6e:	bf00      	nop
>>>>>>> Stashed changes
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
<<<<<<< Updated upstream
 8002910:	8bfb      	ldrh	r3, [r7, #30]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <BSP_LCD_DisplayStringAt+0xde>
 8002916:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da1d      	bge.n	800295a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	83fb      	strh	r3, [r7, #30]
=======
 8003f70:	8bfb      	ldrh	r3, [r7, #30]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <BSP_LCD_DisplayStringAt+0xde>
 8003f76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da1d      	bge.n	8003fba <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	83fb      	strh	r3, [r7, #30]
>>>>>>> Stashed changes
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
<<<<<<< Updated upstream
 8002922:	e01a      	b.n	800295a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	89b9      	ldrh	r1, [r7, #12]
 800292a:	8bfb      	ldrh	r3, [r7, #30]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff43 	bl	80027b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4923      	ldr	r1, [pc, #140]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	3308      	adds	r3, #8
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	889a      	ldrh	r2, [r3, #4]
 8002948:	8bfb      	ldrh	r3, [r7, #30]
 800294a:	4413      	add	r3, r2
 800294c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
    i++;
 8002954:	8bbb      	ldrh	r3, [r7, #28]
 8002956:	3301      	adds	r3, #1
 8002958:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2dc      	uxtb	r4, r3
 8002968:	f7ff fdf2 	bl	8002550 <BSP_LCD_GetXSize>
 800296c:	4605      	mov	r5, r0
 800296e:	8bb9      	ldrh	r1, [r7, #28]
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4813      	ldr	r0, [pc, #76]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4403      	add	r3, r0
 8002980:	3308      	adds	r3, #8
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	889b      	ldrh	r3, [r3, #4]
 8002986:	fb03 f301 	mul.w	r3, r3, r1
 800298a:	1aeb      	subs	r3, r5, r3
 800298c:	b299      	uxth	r1, r3
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <BSP_LCD_DisplayStringAt+0x180>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	480c      	ldr	r0, [pc, #48]	; (80029c4 <BSP_LCD_DisplayStringAt+0x184>)
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4403      	add	r3, r0
 800299e:	3308      	adds	r3, #8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	4299      	cmp	r1, r3
 80029a6:	bf2c      	ite	cs
 80029a8:	2301      	movcs	r3, #1
 80029aa:	2300      	movcc	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4023      	ands	r3, r4
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1b6      	bne.n	8002924 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80029b6:	bf00      	nop
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000408 	.word	0x20000408
 80029c4:	2000040c 	.word	0x2000040c

080029c8 <BSP_LCD_DisplayStringAtLine>:
=======
 8003f82:	e01a      	b.n	8003fba <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	89b9      	ldrh	r1, [r7, #12]
 8003f8a:	8bfb      	ldrh	r3, [r7, #30]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff43 	bl	8003e18 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003f92:	4b23      	ldr	r3, [pc, #140]	; (8004020 <BSP_LCD_DisplayStringAt+0x180>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4923      	ldr	r1, [pc, #140]	; (8004024 <BSP_LCD_DisplayStringAt+0x184>)
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	889a      	ldrh	r2, [r3, #4]
 8003fa8:	8bfb      	ldrh	r3, [r7, #30]
 8003faa:	4413      	add	r3, r2
 8003fac:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
    i++;
 8003fb4:	8bbb      	ldrh	r3, [r7, #28]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2dc      	uxtb	r4, r3
 8003fc8:	f7ff fe04 	bl	8003bd4 <BSP_LCD_GetXSize>
 8003fcc:	4605      	mov	r5, r0
 8003fce:	8bb9      	ldrh	r1, [r7, #28]
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <BSP_LCD_DisplayStringAt+0x180>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4813      	ldr	r0, [pc, #76]	; (8004024 <BSP_LCD_DisplayStringAt+0x184>)
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4403      	add	r3, r0
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	889b      	ldrh	r3, [r3, #4]
 8003fe6:	fb03 f301 	mul.w	r3, r3, r1
 8003fea:	1aeb      	subs	r3, r5, r3
 8003fec:	b299      	uxth	r1, r3
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <BSP_LCD_DisplayStringAt+0x180>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	480c      	ldr	r0, [pc, #48]	; (8004024 <BSP_LCD_DisplayStringAt+0x184>)
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4403      	add	r3, r0
 8003ffe:	3308      	adds	r3, #8
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	889b      	ldrh	r3, [r3, #4]
 8004004:	4299      	cmp	r1, r3
 8004006:	bf2c      	ite	cs
 8004008:	2301      	movcs	r3, #1
 800400a:	2300      	movcc	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4023      	ands	r3, r4
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1b6      	bne.n	8003f84 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8004016:	bf00      	nop
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bdb0      	pop	{r4, r5, r7, pc}
 800401e:	bf00      	nop
 8004020:	20001430 	.word	0x20001430
 8004024:	20001434 	.word	0x20001434

08004028 <BSP_LCD_DisplayStringAtLine>:
>>>>>>> Stashed changes
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
<<<<<<< Updated upstream
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80029d4:	f7ff feb2 	bl	800273c <BSP_LCD_GetFont>
 80029d8:	4603      	mov	r3, r0
 80029da:	88db      	ldrh	r3, [r3, #6]
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	fb12 f303 	smulbb	r3, r2, r3
 80029e2:	b299      	uxth	r1, r3
 80029e4:	2303      	movs	r3, #3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff ff29 	bl	8002840 <BSP_LCD_DisplayStringAt>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <BSP_LCD_DrawHLine>:
=======
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	6039      	str	r1, [r7, #0]
 8004032:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004034:	f7ff feb2 	bl	8003d9c <BSP_LCD_GetFont>
 8004038:	4603      	mov	r3, r0
 800403a:	88db      	ldrh	r3, [r3, #6]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	fb12 f303 	smulbb	r3, r2, r3
 8004042:	b299      	uxth	r1, r3
 8004044:	2303      	movs	r3, #3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	2000      	movs	r0, #0
 800404a:	f7ff ff29 	bl	8003ea0 <BSP_LCD_DisplayStringAt>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <BSP_LCD_DrawHLine>:
>>>>>>> Stashed changes
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
<<<<<<< Updated upstream
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
 8002a02:	460b      	mov	r3, r1
 8002a04:	80bb      	strh	r3, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <BSP_LCD_DrawHLine+0xb4>)
 8002a14:	2134      	movs	r1, #52	; 0x34
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3348      	adds	r3, #72	; 0x48
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d114      	bne.n	8002a4e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <BSP_LCD_DrawHLine+0xb4>)
 8002a2a:	2134      	movs	r1, #52	; 0x34
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	681c      	ldr	r4, [r3, #0]
 8002a36:	f7ff fd8b 	bl	8002550 <BSP_LCD_GetXSize>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	88bb      	ldrh	r3, [r7, #4]
 8002a3e:	fb03 f202 	mul.w	r2, r3, r2
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4423      	add	r3, r4
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e013      	b.n	8002a76 <BSP_LCD_DrawHLine+0x7e>
=======
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	4603      	mov	r3, r0
 8004060:	80fb      	strh	r3, [r7, #6]
 8004062:	460b      	mov	r3, r1
 8004064:	80bb      	strh	r3, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <BSP_LCD_DrawHLine+0xb0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a26      	ldr	r2, [pc, #152]	; (800410c <BSP_LCD_DrawHLine+0xb4>)
 8004074:	2134      	movs	r1, #52	; 0x34
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3348      	adds	r3, #72	; 0x48
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d114      	bne.n	80040ae <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004084:	4b20      	ldr	r3, [pc, #128]	; (8004108 <BSP_LCD_DrawHLine+0xb0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a20      	ldr	r2, [pc, #128]	; (800410c <BSP_LCD_DrawHLine+0xb4>)
 800408a:	2134      	movs	r1, #52	; 0x34
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	335c      	adds	r3, #92	; 0x5c
 8004094:	681c      	ldr	r4, [r3, #0]
 8004096:	f7ff fd9d 	bl	8003bd4 <BSP_LCD_GetXSize>
 800409a:	4602      	mov	r2, r0
 800409c:	88bb      	ldrh	r3, [r7, #4]
 800409e:	fb03 f202 	mul.w	r2, r3, r2
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	4413      	add	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4423      	add	r3, r4
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e013      	b.n	80040d6 <BSP_LCD_DrawHLine+0x7e>
>>>>>>> Stashed changes
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
<<<<<<< Updated upstream
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a16      	ldr	r2, [pc, #88]	; (8002aac <BSP_LCD_DrawHLine+0xb4>)
 8002a54:	2134      	movs	r1, #52	; 0x34
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	335c      	adds	r3, #92	; 0x5c
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f7ff fd76 	bl	8002550 <BSP_LCD_GetXSize>
 8002a64:	4602      	mov	r2, r0
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	fb03 f202 	mul.w	r2, r3, r2
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4423      	add	r3, r4
 8002a74:	60fb      	str	r3, [r7, #12]
=======
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <BSP_LCD_DrawHLine+0xb0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <BSP_LCD_DrawHLine+0xb4>)
 80040b4:	2134      	movs	r1, #52	; 0x34
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	335c      	adds	r3, #92	; 0x5c
 80040be:	681c      	ldr	r4, [r3, #0]
 80040c0:	f7ff fd88 	bl	8003bd4 <BSP_LCD_GetXSize>
 80040c4:	4602      	mov	r2, r0
 80040c6:	88bb      	ldrh	r3, [r7, #4]
 80040c8:	fb03 f202 	mul.w	r2, r3, r2
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4423      	add	r3, r4
 80040d4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
<<<<<<< Updated upstream
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	68fc      	ldr	r4, [r7, #12]
 8002a7c:	887d      	ldrh	r5, [r7, #2]
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <BSP_LCD_DrawHLine+0xb0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	490b      	ldr	r1, [pc, #44]	; (8002ab0 <BSP_LCD_DrawHLine+0xb8>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2301      	movs	r3, #1
 8002a98:	462a      	mov	r2, r5
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f000 fbae 	bl	80031fc <LL_FillBuffer>
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa8:	20000408 	.word	0x20000408
 8002aac:	20008c7c 	.word	0x20008c7c
 8002ab0:	2000040c 	.word	0x2000040c

08002ab4 <BSP_LCD_DrawCircle>:
=======
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <BSP_LCD_DrawHLine+0xb0>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	68fc      	ldr	r4, [r7, #12]
 80040dc:	887d      	ldrh	r5, [r7, #2]
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <BSP_LCD_DrawHLine+0xb0>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	490b      	ldr	r1, [pc, #44]	; (8004110 <BSP_LCD_DrawHLine+0xb8>)
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2301      	movs	r3, #1
 80040f8:	462a      	mov	r2, r5
 80040fa:	4621      	mov	r1, r4
 80040fc:	f000 fc8a 	bl	8004a14 <LL_FillBuffer>
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bdb0      	pop	{r4, r5, r7, pc}
 8004108:	20001430 	.word	0x20001430
 800410c:	20009cb0 	.word	0x20009cb0
 8004110:	20001434 	.word	0x20001434

08004114 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004116:	b087      	sub	sp, #28
 8004118:	af02      	add	r7, sp, #8
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
 800411e:	460b      	mov	r3, r1
 8004120:	80bb      	strh	r3, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800412a:	4b28      	ldr	r3, [pc, #160]	; (80041cc <BSP_LCD_DrawVLine+0xb8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <BSP_LCD_DrawVLine+0xbc>)
 8004130:	2134      	movs	r1, #52	; 0x34
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3348      	adds	r3, #72	; 0x48
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d114      	bne.n	800416a <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004140:	4b22      	ldr	r3, [pc, #136]	; (80041cc <BSP_LCD_DrawVLine+0xb8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <BSP_LCD_DrawVLine+0xbc>)
 8004146:	2134      	movs	r1, #52	; 0x34
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	335c      	adds	r3, #92	; 0x5c
 8004150:	681c      	ldr	r4, [r3, #0]
 8004152:	f7ff fd3f 	bl	8003bd4 <BSP_LCD_GetXSize>
 8004156:	4602      	mov	r2, r0
 8004158:	88bb      	ldrh	r3, [r7, #4]
 800415a:	fb03 f202 	mul.w	r2, r3, r2
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4413      	add	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4423      	add	r3, r4
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e013      	b.n	8004192 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <BSP_LCD_DrawVLine+0xb8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <BSP_LCD_DrawVLine+0xbc>)
 8004170:	2134      	movs	r1, #52	; 0x34
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	335c      	adds	r3, #92	; 0x5c
 800417a:	681c      	ldr	r4, [r3, #0]
 800417c:	f7ff fd2a 	bl	8003bd4 <BSP_LCD_GetXSize>
 8004180:	4602      	mov	r2, r0
 8004182:	88bb      	ldrh	r3, [r7, #4]
 8004184:	fb03 f202 	mul.w	r2, r3, r2
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4423      	add	r3, r4
 8004190:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8004192:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <BSP_LCD_DrawVLine+0xb8>)
 8004194:	681c      	ldr	r4, [r3, #0]
 8004196:	68fd      	ldr	r5, [r7, #12]
 8004198:	887e      	ldrh	r6, [r7, #2]
 800419a:	f7ff fd1b 	bl	8003bd4 <BSP_LCD_GetXSize>
 800419e:	4603      	mov	r3, r0
 80041a0:	1e59      	subs	r1, r3, #1
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <BSP_LCD_DrawVLine+0xb8>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	480b      	ldr	r0, [pc, #44]	; (80041d4 <BSP_LCD_DrawVLine+0xc0>)
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4403      	add	r3, r0
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	9100      	str	r1, [sp, #0]
 80041b8:	4633      	mov	r3, r6
 80041ba:	2201      	movs	r2, #1
 80041bc:	4629      	mov	r1, r5
 80041be:	4620      	mov	r0, r4
 80041c0:	f000 fc28 	bl	8004a14 <LL_FillBuffer>
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041cc:	20001430 	.word	0x20001430
 80041d0:	20009cb0 	.word	0x20009cb0
 80041d4:	20001434 	.word	0x20001434

080041d8 <BSP_LCD_DrawCircle>:
>>>>>>> Stashed changes
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
<<<<<<< Updated upstream
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	80bb      	strh	r3, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	807b      	strh	r3, [r7, #2]
=======
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
 80041e2:	460b      	mov	r3, r1
 80041e4:	80bb      	strh	r3, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
<<<<<<< Updated upstream
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	f1c3 0303 	rsb	r3, r3, #3
 8002ace:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002ad8:	e0cf      	b.n	8002c7a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b298      	uxth	r0, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	88ba      	ldrh	r2, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	b29c      	uxth	r4, r3
 8002aee:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4967      	ldr	r1, [pc, #412]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4621      	mov	r1, r4
 8002b04:	f000 f8c6 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b298      	uxth	r0, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	88ba      	ldrh	r2, [r7, #4]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	b29c      	uxth	r4, r3
 8002b1c:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	495b      	ldr	r1, [pc, #364]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4621      	mov	r1, r4
 8002b32:	f000 f8af 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b298      	uxth	r0, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	88ba      	ldrh	r2, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	b29c      	uxth	r4, r3
 8002b4a:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4950      	ldr	r1, [pc, #320]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4621      	mov	r1, r4
 8002b60:	f000 f898 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	b298      	uxth	r0, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	88ba      	ldrh	r2, [r7, #4]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29c      	uxth	r4, r3
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4944      	ldr	r1, [pc, #272]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	f000 f881 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4413      	add	r3, r2
 8002b9a:	b298      	uxth	r0, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	88bb      	ldrh	r3, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b29c      	uxth	r4, r3
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4939      	ldr	r1, [pc, #228]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4621      	mov	r1, r4
 8002bbc:	f000 f86a 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b298      	uxth	r0, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	88bb      	ldrh	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	492d      	ldr	r1, [pc, #180]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4621      	mov	r1, r4
 8002bea:	f000 f853 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b298      	uxth	r0, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	b29c      	uxth	r4, r3
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4922      	ldr	r1, [pc, #136]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4621      	mov	r1, r4
 8002c18:	f000 f83c 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b298      	uxth	r0, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	88bb      	ldrh	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29c      	uxth	r4, r3
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <BSP_LCD_DrawCircle+0x1d8>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4916      	ldr	r1, [pc, #88]	; (8002c90 <BSP_LCD_DrawCircle+0x1dc>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4621      	mov	r1, r4
 8002c46:	f000 f825 	bl	8002c94 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da06      	bge.n	8002c5e <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	009a      	lsls	r2, r3, #2
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4413      	add	r3, r2
 8002c58:	3306      	adds	r3, #6
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <BSP_LCD_DrawCircle+0x1c0>
=======
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	f1c3 0303 	rsb	r3, r3, #3
 80041f2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80041fc:	e0cf      	b.n	800439e <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	b29a      	uxth	r2, r3
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4413      	add	r3, r2
 8004206:	b298      	uxth	r0, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	b29b      	uxth	r3, r3
 800420c:	88ba      	ldrh	r2, [r7, #4]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	b29c      	uxth	r4, r3
 8004212:	4b67      	ldr	r3, [pc, #412]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4967      	ldr	r1, [pc, #412]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4621      	mov	r1, r4
 8004228:	f000 f8c6 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	b29b      	uxth	r3, r3
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b298      	uxth	r0, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	b29b      	uxth	r3, r3
 800423a:	88ba      	ldrh	r2, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	b29c      	uxth	r4, r3
 8004240:	4b5b      	ldr	r3, [pc, #364]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	495b      	ldr	r1, [pc, #364]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	4621      	mov	r1, r4
 8004256:	f000 f8af 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	b29a      	uxth	r2, r3
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	4413      	add	r3, r2
 8004262:	b298      	uxth	r0, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	b29b      	uxth	r3, r3
 8004268:	88ba      	ldrh	r2, [r7, #4]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b29c      	uxth	r4, r3
 800426e:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4950      	ldr	r1, [pc, #320]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 8004274:	4613      	mov	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	4621      	mov	r1, r4
 8004284:	f000 f898 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	b29b      	uxth	r3, r3
 800428c:	88fa      	ldrh	r2, [r7, #6]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	b298      	uxth	r0, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	b29b      	uxth	r3, r3
 8004296:	88ba      	ldrh	r2, [r7, #4]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b29c      	uxth	r4, r3
 800429c:	4b44      	ldr	r3, [pc, #272]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4944      	ldr	r1, [pc, #272]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	4621      	mov	r1, r4
 80042b2:	f000 f881 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	4413      	add	r3, r2
 80042be:	b298      	uxth	r0, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	88bb      	ldrh	r3, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	b29c      	uxth	r4, r3
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4939      	ldr	r1, [pc, #228]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4621      	mov	r1, r4
 80042e0:	f000 f86a 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	b298      	uxth	r0, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	88bb      	ldrh	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	b29c      	uxth	r4, r3
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	492d      	ldr	r1, [pc, #180]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	4621      	mov	r1, r4
 800430e:	f000 f853 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	b29a      	uxth	r2, r3
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4413      	add	r3, r2
 800431a:	b298      	uxth	r0, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	b29a      	uxth	r2, r3
 8004320:	88bb      	ldrh	r3, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	b29c      	uxth	r4, r3
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4922      	ldr	r1, [pc, #136]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4621      	mov	r1, r4
 800433c:	f000 f83c 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	b29b      	uxth	r3, r3
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	b298      	uxth	r0, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	b29a      	uxth	r2, r3
 800434e:	88bb      	ldrh	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	b29c      	uxth	r4, r3
 8004354:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <BSP_LCD_DrawCircle+0x1d8>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <BSP_LCD_DrawCircle+0x1dc>)
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4621      	mov	r1, r4
 800436a:	f000 f825 	bl	80043b8 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b00      	cmp	r3, #0
 8004372:	da06      	bge.n	8004382 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4413      	add	r3, r2
 800437c:	3306      	adds	r3, #6
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e00a      	b.n	8004398 <BSP_LCD_DrawCircle+0x1c0>
>>>>>>> Stashed changes
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
<<<<<<< Updated upstream
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4413      	add	r3, r2
 8002c6a:	330a      	adds	r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]
      current_y--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	3301      	adds	r3, #1
 8002c78:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	f67f af2b 	bls.w	8002ada <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	20000408 	.word	0x20000408
 8002c90:	2000040c 	.word	0x2000040c

08002c94 <BSP_LCD_DrawPixel>:
=======
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	009a      	lsls	r2, r3, #2
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	330a      	adds	r3, #10
 8004390:	617b      	str	r3, [r7, #20]
      current_y--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3301      	adds	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	f67f af2b 	bls.w	80041fe <BSP_LCD_DrawCircle+0x26>
  } 
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}
 80043b0:	20001430 	.word	0x20001430
 80043b4:	20001434 	.word	0x20001434

080043b8 <BSP_LCD_DrawPixel>:
>>>>>>> Stashed changes
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
<<<<<<< Updated upstream
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	603a      	str	r2, [r7, #0]
 8002c9e:	80fb      	strh	r3, [r7, #6]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <BSP_LCD_DrawPixel+0x88>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <BSP_LCD_DrawPixel+0x8c>)
 8002caa:	2134      	movs	r1, #52	; 0x34
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3348      	adds	r3, #72	; 0x48
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d116      	bne.n	8002ce8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <BSP_LCD_DrawPixel+0x88>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <BSP_LCD_DrawPixel+0x8c>)
 8002cc0:	2134      	movs	r1, #52	; 0x34
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	335c      	adds	r3, #92	; 0x5c
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	88bd      	ldrh	r5, [r7, #4]
 8002cce:	f7ff fc3f 	bl	8002550 <BSP_LCD_GetXSize>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	fb03 f205 	mul.w	r2, r3, r5
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	4413      	add	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4423      	add	r3, r4
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	801a      	strh	r2, [r3, #0]
=======
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	603a      	str	r2, [r7, #0]
 80043c2:	80fb      	strh	r3, [r7, #6]
 80043c4:	460b      	mov	r3, r1
 80043c6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <BSP_LCD_DrawPixel+0x88>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <BSP_LCD_DrawPixel+0x8c>)
 80043ce:	2134      	movs	r1, #52	; 0x34
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3348      	adds	r3, #72	; 0x48
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d116      	bne.n	800440c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <BSP_LCD_DrawPixel+0x88>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <BSP_LCD_DrawPixel+0x8c>)
 80043e4:	2134      	movs	r1, #52	; 0x34
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	335c      	adds	r3, #92	; 0x5c
 80043ee:	681c      	ldr	r4, [r3, #0]
 80043f0:	88bd      	ldrh	r5, [r7, #4]
 80043f2:	f7ff fbef 	bl	8003bd4 <BSP_LCD_GetXSize>
 80043f6:	4603      	mov	r3, r0
 80043f8:	fb03 f205 	mul.w	r2, r3, r5
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	4413      	add	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4423      	add	r3, r4
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
<<<<<<< Updated upstream
 8002ce6:	e015      	b.n	8002d14 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <BSP_LCD_DrawPixel+0x88>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <BSP_LCD_DrawPixel+0x8c>)
 8002cee:	2134      	movs	r1, #52	; 0x34
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	681c      	ldr	r4, [r3, #0]
 8002cfa:	88bd      	ldrh	r5, [r7, #4]
 8002cfc:	f7ff fc28 	bl	8002550 <BSP_LCD_GetXSize>
 8002d00:	4603      	mov	r3, r0
 8002d02:	fb03 f205 	mul.w	r2, r3, r5
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4423      	add	r3, r4
 8002d0e:	461a      	mov	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1c:	20000408 	.word	0x20000408
 8002d20:	20008c7c 	.word	0x20008c7c

08002d24 <BSP_LCD_FillCircle>:
=======
 800440a:	e015      	b.n	8004438 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <BSP_LCD_DrawPixel+0x88>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <BSP_LCD_DrawPixel+0x8c>)
 8004412:	2134      	movs	r1, #52	; 0x34
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	335c      	adds	r3, #92	; 0x5c
 800441c:	681c      	ldr	r4, [r3, #0]
 800441e:	88bd      	ldrh	r5, [r7, #4]
 8004420:	f7ff fbd8 	bl	8003bd4 <BSP_LCD_GetXSize>
 8004424:	4603      	mov	r3, r0
 8004426:	fb03 f205 	mul.w	r2, r3, r5
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4423      	add	r3, r4
 8004432:	461a      	mov	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bdb0      	pop	{r4, r5, r7, pc}
 8004440:	20001430 	.word	0x20001430
 8004444:	20009cb0 	.word	0x20009cb0

08004448 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af02      	add	r7, sp, #8
 8004450:	4604      	mov	r4, r0
 8004452:	4608      	mov	r0, r1
 8004454:	4611      	mov	r1, r2
 8004456:	461a      	mov	r2, r3
 8004458:	4623      	mov	r3, r4
 800445a:	80fb      	strh	r3, [r7, #6]
 800445c:	4603      	mov	r3, r0
 800445e:	80bb      	strh	r3, [r7, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	807b      	strh	r3, [r7, #2]
 8004464:	4613      	mov	r3, r2
 8004466:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <BSP_LCD_FillRect+0xe8>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4930      	ldr	r1, [pc, #192]	; (8004534 <BSP_LCD_FillRect+0xec>)
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fc40 	bl	8003d04 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004484:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <BSP_LCD_FillRect+0xe8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a2b      	ldr	r2, [pc, #172]	; (8004538 <BSP_LCD_FillRect+0xf0>)
 800448a:	2134      	movs	r1, #52	; 0x34
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	3348      	adds	r3, #72	; 0x48
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d114      	bne.n	80044c4 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800449a:	4b25      	ldr	r3, [pc, #148]	; (8004530 <BSP_LCD_FillRect+0xe8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a26      	ldr	r2, [pc, #152]	; (8004538 <BSP_LCD_FillRect+0xf0>)
 80044a0:	2134      	movs	r1, #52	; 0x34
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	335c      	adds	r3, #92	; 0x5c
 80044aa:	681c      	ldr	r4, [r3, #0]
 80044ac:	f7ff fb92 	bl	8003bd4 <BSP_LCD_GetXSize>
 80044b0:	4602      	mov	r2, r0
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	fb03 f202 	mul.w	r2, r3, r2
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	4413      	add	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4423      	add	r3, r4
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e013      	b.n	80044ec <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80044c4:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <BSP_LCD_FillRect+0xe8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <BSP_LCD_FillRect+0xf0>)
 80044ca:	2134      	movs	r1, #52	; 0x34
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	335c      	adds	r3, #92	; 0x5c
 80044d4:	681c      	ldr	r4, [r3, #0]
 80044d6:	f7ff fb7d 	bl	8003bd4 <BSP_LCD_GetXSize>
 80044da:	4602      	mov	r2, r0
 80044dc:	88bb      	ldrh	r3, [r7, #4]
 80044de:	fb03 f202 	mul.w	r2, r3, r2
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4423      	add	r3, r4
 80044ea:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <BSP_LCD_FillRect+0xe8>)
 80044ee:	681c      	ldr	r4, [r3, #0]
 80044f0:	68fd      	ldr	r5, [r7, #12]
 80044f2:	887e      	ldrh	r6, [r7, #2]
 80044f4:	f8b7 8000 	ldrh.w	r8, [r7]
 80044f8:	f7ff fb6c 	bl	8003bd4 <BSP_LCD_GetXSize>
 80044fc:	4602      	mov	r2, r0
 80044fe:	887b      	ldrh	r3, [r7, #2]
 8004500:	1ad1      	subs	r1, r2, r3
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <BSP_LCD_FillRect+0xe8>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	480b      	ldr	r0, [pc, #44]	; (8004534 <BSP_LCD_FillRect+0xec>)
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4403      	add	r3, r0
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	9100      	str	r1, [sp, #0]
 8004518:	4643      	mov	r3, r8
 800451a:	4632      	mov	r2, r6
 800451c:	4629      	mov	r1, r5
 800451e:	4620      	mov	r0, r4
 8004520:	f000 fa78 	bl	8004a14 <LL_FillBuffer>
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800452e:	bf00      	nop
 8004530:	20001430 	.word	0x20001430
 8004534:	20001434 	.word	0x20001434
 8004538:	20009cb0 	.word	0x20009cb0

0800453c <BSP_LCD_FillCircle>:
>>>>>>> Stashed changes
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
<<<<<<< Updated upstream
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	80bb      	strh	r3, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	807b      	strh	r3, [r7, #2]
=======
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	80fb      	strh	r3, [r7, #6]
 8004546:	460b      	mov	r3, r1
 8004548:	80bb      	strh	r3, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
<<<<<<< Updated upstream
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	f1c3 0303 	rsb	r3, r3, #3
 8002d3e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <BSP_LCD_FillCircle+0x138>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4944      	ldr	r1, [pc, #272]	; (8002e60 <BSP_LCD_FillCircle+0x13c>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fca2 	bl	80026a4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002d60:	e061      	b.n	8002e26 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d021      	beq.n	8002dac <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b298      	uxth	r0, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff fe37 	bl	80029f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b298      	uxth	r0, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	88ba      	ldrh	r2, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b299      	uxth	r1, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7ff fe26 	bl	80029f8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d021      	beq.n	8002df6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	b298      	uxth	r0, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	88ba      	ldrh	r2, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b299      	uxth	r1, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7ff fe12 	bl	80029f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	b298      	uxth	r0, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	88bb      	ldrh	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	b299      	uxth	r1, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	f7ff fe01 	bl	80029f8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da06      	bge.n	8002e0a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	009a      	lsls	r2, r3, #2
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4413      	add	r3, r2
 8002e04:	3306      	adds	r3, #6
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <BSP_LCD_FillCircle+0xfc>
=======
 800454e:	887b      	ldrh	r3, [r7, #2]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	f1c3 0303 	rsb	r3, r3, #3
 8004556:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004560:	4b44      	ldr	r3, [pc, #272]	; (8004674 <BSP_LCD_FillCircle+0x138>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4944      	ldr	r1, [pc, #272]	; (8004678 <BSP_LCD_FillCircle+0x13c>)
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fbc6 	bl	8003d04 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004578:	e061      	b.n	800463e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d021      	beq.n	80045c4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	b29b      	uxth	r3, r3
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	b298      	uxth	r0, r3
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	b29a      	uxth	r2, r3
 800458e:	88bb      	ldrh	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	b299      	uxth	r1, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	b29b      	uxth	r3, r3
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	f7ff fd5b 	bl	8004058 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	b298      	uxth	r0, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	88ba      	ldrh	r2, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	b299      	uxth	r1, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	f7ff fd4a 	bl	8004058 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d021      	beq.n	800460e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	b298      	uxth	r0, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	88ba      	ldrh	r2, [r7, #4]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	b299      	uxth	r1, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7ff fd36 	bl	8004058 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	b298      	uxth	r0, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	88bb      	ldrh	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	b299      	uxth	r1, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	b29b      	uxth	r3, r3
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	f7ff fd25 	bl	8004058 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da06      	bge.n	8004622 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4413      	add	r3, r2
 800461c:	3306      	adds	r3, #6
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e00a      	b.n	8004638 <BSP_LCD_FillCircle+0xfc>
>>>>>>> Stashed changes
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
<<<<<<< Updated upstream
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	330a      	adds	r3, #10
 8002e18:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	3301      	adds	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d999      	bls.n	8002d62 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <BSP_LCD_FillCircle+0x138>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	490b      	ldr	r1, [pc, #44]	; (8002e60 <BSP_LCD_FillCircle+0x13c>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fc2f 	bl	80026a4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	88b9      	ldrh	r1, [r7, #4]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fe31 	bl	8002ab4 <BSP_LCD_DrawCircle>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000408 	.word	0x20000408
 8002e60:	2000040c 	.word	0x2000040c

08002e64 <BSP_LCD_DisplayOn>:
=======
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	009a      	lsls	r2, r3, #2
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4413      	add	r3, r2
 800462e:	330a      	adds	r3, #10
 8004630:	617b      	str	r3, [r7, #20]
      current_y--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3b01      	subs	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3301      	adds	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	429a      	cmp	r2, r3
 8004644:	d999      	bls.n	800457a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <BSP_LCD_FillCircle+0x138>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	490b      	ldr	r1, [pc, #44]	; (8004678 <BSP_LCD_FillCircle+0x13c>)
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fb53 	bl	8003d04 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	88b9      	ldrh	r1, [r7, #4]
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fdb7 	bl	80041d8 <BSP_LCD_DrawCircle>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20001430 	.word	0x20001430
 8004678:	20001434 	.word	0x20001434

0800467c <BSP_LCD_DisplayOn>:
>>>>>>> Stashed changes
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
<<<<<<< Updated upstream
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <BSP_LCD_DisplayOn+0x30>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <BSP_LCD_DisplayOn+0x30>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <BSP_LCD_DisplayOn+0x34>)
 8002e80:	f003 f96c 	bl	800615c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002e84:	2201      	movs	r2, #1
 8002e86:	2108      	movs	r1, #8
 8002e88:	4804      	ldr	r0, [pc, #16]	; (8002e9c <BSP_LCD_DisplayOn+0x38>)
 8002e8a:	f003 f967 	bl	800615c <HAL_GPIO_WritePin>
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20008c7c 	.word	0x20008c7c
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022800 	.word	0x40022800

08002ea0 <BSP_LCD_MspInit>:
=======
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <BSP_LCD_DisplayOn+0x30>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <BSP_LCD_DisplayOn+0x30>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004690:	2201      	movs	r2, #1
 8004692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004696:	4806      	ldr	r0, [pc, #24]	; (80046b0 <BSP_LCD_DisplayOn+0x34>)
 8004698:	f003 f974 	bl	8007984 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800469c:	2201      	movs	r2, #1
 800469e:	2108      	movs	r1, #8
 80046a0:	4804      	ldr	r0, [pc, #16]	; (80046b4 <BSP_LCD_DisplayOn+0x38>)
 80046a2:	f003 f96f 	bl	8007984 <HAL_GPIO_WritePin>
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20009cb0 	.word	0x20009cb0
 80046b0:	40022000 	.word	0x40022000
 80046b4:	40022800 	.word	0x40022800

080046b8 <BSP_LCD_MspInit>:
>>>>>>> Stashed changes
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
<<<<<<< Updated upstream
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b090      	sub	sp, #64	; 0x40
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
=======
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b090      	sub	sp, #64	; 0x40
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
<<<<<<< Updated upstream
 8002eaa:	4b64      	ldr	r3, [pc, #400]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a63      	ldr	r2, [pc, #396]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002eb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b61      	ldr	r3, [pc, #388]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ec2:	4b5e      	ldr	r3, [pc, #376]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a5d      	ldr	r2, [pc, #372]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ec8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	623b      	str	r3, [r7, #32]
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef2:	4b52      	ldr	r3, [pc, #328]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a51      	ldr	r2, [pc, #324]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b4f      	ldr	r3, [pc, #316]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a4b      	ldr	r2, [pc, #300]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b49      	ldr	r3, [pc, #292]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a45      	ldr	r2, [pc, #276]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f3a:	4b40      	ldr	r3, [pc, #256]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a39      	ldr	r2, [pc, #228]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <BSP_LCD_MspInit+0x19c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
=======
 80046c2:	4b64      	ldr	r3, [pc, #400]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a63      	ldr	r2, [pc, #396]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b61      	ldr	r3, [pc, #388]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80046da:	4b5e      	ldr	r3, [pc, #376]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a5d      	ldr	r2, [pc, #372]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b5b      	ldr	r3, [pc, #364]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046f2:	4b58      	ldr	r3, [pc, #352]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a57      	ldr	r2, [pc, #348]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 80046f8:	f043 0310 	orr.w	r3, r3, #16
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b55      	ldr	r3, [pc, #340]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800470a:	4b52      	ldr	r3, [pc, #328]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	4a51      	ldr	r2, [pc, #324]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004714:	6313      	str	r3, [r2, #48]	; 0x30
 8004716:	4b4f      	ldr	r3, [pc, #316]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004722:	4b4c      	ldr	r3, [pc, #304]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b49      	ldr	r3, [pc, #292]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800473a:	4b46      	ldr	r3, [pc, #280]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a45      	ldr	r2, [pc, #276]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b43      	ldr	r3, [pc, #268]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004752:	4b40      	ldr	r3, [pc, #256]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a3f      	ldr	r2, [pc, #252]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004758:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b3d      	ldr	r3, [pc, #244]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800476a:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a39      	ldr	r2, [pc, #228]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004782:	4b34      	ldr	r3, [pc, #208]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4a33      	ldr	r2, [pc, #204]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478c:	6313      	str	r3, [r2, #48]	; 0x30
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <BSP_LCD_MspInit+0x19c>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
<<<<<<< Updated upstream
 8002f82:	2310      	movs	r3, #16
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f92:	230e      	movs	r3, #14
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4828      	ldr	r0, [pc, #160]	; (8003040 <BSP_LCD_MspInit+0x1a0>)
 8002f9e:	f002 fe11 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002fac:	2309      	movs	r3, #9
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <BSP_LCD_MspInit+0x1a4>)
 8002fb8:	f002 fe04 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002fbc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fc6:	230e      	movs	r3, #14
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481d      	ldr	r0, [pc, #116]	; (8003048 <BSP_LCD_MspInit+0x1a8>)
 8002fd2:	f002 fdf7 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002fd6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800479a:	2310      	movs	r3, #16
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800479e:	2302      	movs	r3, #2
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80047a6:	2302      	movs	r3, #2
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80047aa:	230e      	movs	r3, #14
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80047ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	4828      	ldr	r0, [pc, #160]	; (8004858 <BSP_LCD_MspInit+0x1a0>)
 80047b6:	f002 fe19 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80047ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047c0:	2302      	movs	r3, #2
 80047c2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80047c4:	2309      	movs	r3, #9
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80047c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047cc:	4619      	mov	r1, r3
 80047ce:	4823      	ldr	r0, [pc, #140]	; (800485c <BSP_LCD_MspInit+0x1a4>)
 80047d0:	f002 fe0c 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80047d4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80047de:	230e      	movs	r3, #14
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80047e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047e6:	4619      	mov	r1, r3
 80047e8:	481d      	ldr	r0, [pc, #116]	; (8004860 <BSP_LCD_MspInit+0x1a8>)
 80047ea:	f002 fdff 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80047ee:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
<<<<<<< Updated upstream
 8002fdc:	2302      	movs	r3, #2
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fe0:	230e      	movs	r3, #14
 8002fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4818      	ldr	r0, [pc, #96]	; (800304c <BSP_LCD_MspInit+0x1ac>)
 8002fec:	f002 fdea 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002ff0:	23f7      	movs	r3, #247	; 0xf7
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ff8:	230e      	movs	r3, #14
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003000:	4619      	mov	r1, r3
 8003002:	4813      	ldr	r0, [pc, #76]	; (8003050 <BSP_LCD_MspInit+0x1b0>)
 8003004:	f002 fdde 	bl	8005bc4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800300e:	2301      	movs	r3, #1
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003016:	4619      	mov	r1, r3
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <BSP_LCD_MspInit+0x1a8>)
 800301a:	f002 fdd3 	bl	8005bc4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800301e:	2308      	movs	r3, #8
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003022:	2301      	movs	r3, #1
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302a:	4619      	mov	r1, r3
 800302c:	4808      	ldr	r0, [pc, #32]	; (8003050 <BSP_LCD_MspInit+0x1b0>)
 800302e:	f002 fdc9 	bl	8005bc4 <HAL_GPIO_Init>
}
 8003032:	bf00      	nop
 8003034:	3740      	adds	r7, #64	; 0x40
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40021000 	.word	0x40021000
 8003044:	40021800 	.word	0x40021800
 8003048:	40022000 	.word	0x40022000
 800304c:	40022400 	.word	0x40022400
 8003050:	40022800 	.word	0x40022800

08003054 <BSP_LCD_ClockConfig>:
=======
 80047f4:	2302      	movs	r3, #2
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80047f8:	230e      	movs	r3, #14
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80047fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004800:	4619      	mov	r1, r3
 8004802:	4818      	ldr	r0, [pc, #96]	; (8004864 <BSP_LCD_MspInit+0x1ac>)
 8004804:	f002 fdf2 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004808:	23f7      	movs	r3, #247	; 0xf7
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004810:	230e      	movs	r3, #14
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004818:	4619      	mov	r1, r3
 800481a:	4813      	ldr	r0, [pc, #76]	; (8004868 <BSP_LCD_MspInit+0x1b0>)
 800481c:	f002 fde6 	bl	80073ec <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004826:	2301      	movs	r3, #1
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800482a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800482e:	4619      	mov	r1, r3
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <BSP_LCD_MspInit+0x1a8>)
 8004832:	f002 fddb 	bl	80073ec <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004836:	2308      	movs	r3, #8
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800483a:	2301      	movs	r3, #1
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800483e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004842:	4619      	mov	r1, r3
 8004844:	4808      	ldr	r0, [pc, #32]	; (8004868 <BSP_LCD_MspInit+0x1b0>)
 8004846:	f002 fdd1 	bl	80073ec <HAL_GPIO_Init>
}
 800484a:	bf00      	nop
 800484c:	3740      	adds	r7, #64	; 0x40
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	40021000 	.word	0x40021000
 800485c:	40021800 	.word	0x40021800
 8004860:	40022000 	.word	0x40022000
 8004864:	40022400 	.word	0x40022400
 8004868:	40022800 	.word	0x40022800

0800486c <BSP_LCD_ClockConfig>:
>>>>>>> Stashed changes
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
<<<<<<< Updated upstream
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
=======
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
<<<<<<< Updated upstream
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 8003060:	2208      	movs	r2, #8
 8003062:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 8003066:	22c0      	movs	r2, #192	; 0xc0
 8003068:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 800306c:	2205      	movs	r2, #5
 800306e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 8003072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003078:	4803      	ldr	r0, [pc, #12]	; (8003088 <BSP_LCD_ClockConfig+0x34>)
 800307a:	f004 feef 	bl	8007e5c <HAL_RCCEx_PeriphCLKConfig>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000424 	.word	0x20000424

0800308c <DrawChar>:
=======
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <BSP_LCD_ClockConfig+0x34>)
 8004878:	2208      	movs	r2, #8
 800487a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <BSP_LCD_ClockConfig+0x34>)
 800487e:	22c0      	movs	r2, #192	; 0xc0
 8004880:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <BSP_LCD_ClockConfig+0x34>)
 8004884:	2205      	movs	r2, #5
 8004886:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <BSP_LCD_ClockConfig+0x34>)
 800488a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004890:	4803      	ldr	r0, [pc, #12]	; (80048a0 <BSP_LCD_ClockConfig+0x34>)
 8004892:	f004 fed9 	bl	8009648 <HAL_RCCEx_PeriphCLKConfig>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	2000144c 	.word	0x2000144c

080048a4 <DrawChar>:
>>>>>>> Stashed changes
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
<<<<<<< Updated upstream
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	603a      	str	r2, [r7, #0]
 8003096:	80fb      	strh	r3, [r7, #6]
 8003098:	460b      	mov	r3, r1
 800309a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
=======
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	603a      	str	r2, [r7, #0]
 80048ae:	80fb      	strh	r3, [r7, #6]
 80048b0:	460b      	mov	r3, r1
 80048b2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
<<<<<<< Updated upstream
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <DrawChar+0x168>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4953      	ldr	r1, [pc, #332]	; (80031f8 <DrawChar+0x16c>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3308      	adds	r3, #8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	88db      	ldrh	r3, [r3, #6]
 80030ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80030bc:	4b4d      	ldr	r3, [pc, #308]	; (80031f4 <DrawChar+0x168>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <DrawChar+0x16c>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3308      	adds	r3, #8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	889b      	ldrh	r3, [r3, #4]
 80030d2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80030d4:	8a3b      	ldrh	r3, [r7, #16]
 80030d6:	3307      	adds	r3, #7
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da00      	bge.n	80030de <DrawChar+0x52>
 80030dc:	3307      	adds	r3, #7
 80030de:	10db      	asrs	r3, r3, #3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8a3b      	ldrh	r3, [r7, #16]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e076      	b.n	80031e2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80030f4:	8a3b      	ldrh	r3, [r7, #16]
 80030f6:	3307      	adds	r3, #7
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da00      	bge.n	80030fe <DrawChar+0x72>
 80030fc:	3307      	adds	r3, #7
 80030fe:	10db      	asrs	r3, r3, #3
 8003100:	461a      	mov	r2, r3
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fb03 f302 	mul.w	r3, r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	4413      	add	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800310e:	8a3b      	ldrh	r3, [r7, #16]
 8003110:	3307      	adds	r3, #7
 8003112:	2b00      	cmp	r3, #0
 8003114:	da00      	bge.n	8003118 <DrawChar+0x8c>
 8003116:	3307      	adds	r3, #7
 8003118:	10db      	asrs	r3, r3, #3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d002      	beq.n	8003124 <DrawChar+0x98>
 800311e:	2b02      	cmp	r3, #2
 8003120:	d004      	beq.n	800312c <DrawChar+0xa0>
 8003122:	e00c      	b.n	800313e <DrawChar+0xb2>
=======
 80048bc:	4b53      	ldr	r3, [pc, #332]	; (8004a0c <DrawChar+0x168>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4953      	ldr	r1, [pc, #332]	; (8004a10 <DrawChar+0x16c>)
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3308      	adds	r3, #8
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	88db      	ldrh	r3, [r3, #6]
 80048d2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80048d4:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <DrawChar+0x168>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	494d      	ldr	r1, [pc, #308]	; (8004a10 <DrawChar+0x16c>)
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3308      	adds	r3, #8
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	889b      	ldrh	r3, [r3, #4]
 80048ea:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80048ec:	8a3b      	ldrh	r3, [r7, #16]
 80048ee:	3307      	adds	r3, #7
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	da00      	bge.n	80048f6 <DrawChar+0x52>
 80048f4:	3307      	adds	r3, #7
 80048f6:	10db      	asrs	r3, r3, #3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	8a3b      	ldrh	r3, [r7, #16]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	e076      	b.n	80049fa <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800490c:	8a3b      	ldrh	r3, [r7, #16]
 800490e:	3307      	adds	r3, #7
 8004910:	2b00      	cmp	r3, #0
 8004912:	da00      	bge.n	8004916 <DrawChar+0x72>
 8004914:	3307      	adds	r3, #7
 8004916:	10db      	asrs	r3, r3, #3
 8004918:	461a      	mov	r2, r3
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fb03 f302 	mul.w	r3, r3, r2
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	4413      	add	r3, r2
 8004924:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004926:	8a3b      	ldrh	r3, [r7, #16]
 8004928:	3307      	adds	r3, #7
 800492a:	2b00      	cmp	r3, #0
 800492c:	da00      	bge.n	8004930 <DrawChar+0x8c>
 800492e:	3307      	adds	r3, #7
 8004930:	10db      	asrs	r3, r3, #3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d002      	beq.n	800493c <DrawChar+0x98>
 8004936:	2b02      	cmp	r3, #2
 8004938:	d004      	beq.n	8004944 <DrawChar+0xa0>
 800493a:	e00c      	b.n	8004956 <DrawChar+0xb2>
>>>>>>> Stashed changes
    {
      
    case 1:
      line =  pchar[0];      
<<<<<<< Updated upstream
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]
      break;
 800312a:	e016      	b.n	800315a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	3201      	adds	r2, #1
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
      break;
 800313c:	e00d      	b.n	800315a <DrawChar+0xce>
=======
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	617b      	str	r3, [r7, #20]
      break;
 8004942:	e016      	b.n	8004972 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	3201      	adds	r2, #1
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
      break;
 8004954:	e00d      	b.n	8004972 <DrawChar+0xce>
>>>>>>> Stashed changes
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
<<<<<<< Updated upstream
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	041a      	lsls	r2, r3, #16
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4313      	orrs	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	3202      	adds	r2, #2
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
      break;
 8003158:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e036      	b.n	80031ce <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003160:	8a3a      	ldrh	r2, [r7, #16]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	1ad2      	subs	r2, r2, r3
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	4413      	add	r3, r2
 800316a:	3b01      	subs	r3, #1
 800316c:	2201      	movs	r2, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	461a      	mov	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	b29a      	uxth	r2, r3
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4413      	add	r3, r2
 8003184:	b298      	uxth	r0, r3
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <DrawChar+0x168>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	491b      	ldr	r1, [pc, #108]	; (80031f8 <DrawChar+0x16c>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	4619      	mov	r1, r3
 800319c:	f7ff fd7a 	bl	8002c94 <BSP_LCD_DrawPixel>
 80031a0:	e012      	b.n	80031c8 <DrawChar+0x13c>
=======
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	041a      	lsls	r2, r3, #16
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4313      	orrs	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	3202      	adds	r2, #2
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
      break;
 8004970:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e036      	b.n	80049e6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004978:	8a3a      	ldrh	r2, [r7, #16]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad2      	subs	r2, r2, r3
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	4413      	add	r3, r2
 8004982:	3b01      	subs	r3, #1
 8004984:	2201      	movs	r2, #1
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	461a      	mov	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d012      	beq.n	80049ba <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	b29a      	uxth	r2, r3
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	4413      	add	r3, r2
 800499c:	b298      	uxth	r0, r3
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <DrawChar+0x168>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	491b      	ldr	r1, [pc, #108]	; (8004a10 <DrawChar+0x16c>)
 80049a4:	4613      	mov	r3, r2
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	4619      	mov	r1, r3
 80049b4:	f7ff fd00 	bl	80043b8 <BSP_LCD_DrawPixel>
 80049b8:	e012      	b.n	80049e0 <DrawChar+0x13c>
>>>>>>> Stashed changes
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
<<<<<<< Updated upstream
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	4413      	add	r3, r2
 80031aa:	b298      	uxth	r0, r3
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <DrawChar+0x168>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4911      	ldr	r1, [pc, #68]	; (80031f8 <DrawChar+0x16c>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3304      	adds	r3, #4
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	88bb      	ldrh	r3, [r7, #4]
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7ff fd66 	bl	8002c94 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	3301      	adds	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	8a3b      	ldrh	r3, [r7, #16]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3c4      	bcc.n	8003160 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80031d6:	88bb      	ldrh	r3, [r7, #4]
 80031d8:	3301      	adds	r3, #1
 80031da:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3301      	adds	r3, #1
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	8a7b      	ldrh	r3, [r7, #18]
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d384      	bcc.n	80030f4 <DrawChar+0x68>
  }
}
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000408 	.word	0x20000408
 80031f8:	2000040c 	.word	0x2000040c

080031fc <LL_FillBuffer>:
=======
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	b29a      	uxth	r2, r3
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	4413      	add	r3, r2
 80049c2:	b298      	uxth	r0, r3
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <DrawChar+0x168>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4911      	ldr	r1, [pc, #68]	; (8004a10 <DrawChar+0x16c>)
 80049ca:	4613      	mov	r3, r2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3304      	adds	r3, #4
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	88bb      	ldrh	r3, [r7, #4]
 80049da:	4619      	mov	r1, r3
 80049dc:	f7ff fcec 	bl	80043b8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	3301      	adds	r3, #1
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	8a3b      	ldrh	r3, [r7, #16]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d3c4      	bcc.n	8004978 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80049ee:	88bb      	ldrh	r3, [r7, #4]
 80049f0:	3301      	adds	r3, #1
 80049f2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	8a7b      	ldrh	r3, [r7, #18]
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d384      	bcc.n	800490c <DrawChar+0x68>
  }
}
 8004a02:	bf00      	nop
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20001430 	.word	0x20001430
 8004a10:	20001434 	.word	0x20001434

08004a14 <LL_FillBuffer>:
>>>>>>> Stashed changes
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
<<<<<<< Updated upstream
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <LL_FillBuffer+0x88>)
 800320c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003210:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <LL_FillBuffer+0x8c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1d      	ldr	r2, [pc, #116]	; (800328c <LL_FillBuffer+0x90>)
 8003218:	2134      	movs	r1, #52	; 0x34
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	3348      	adds	r3, #72	; 0x48
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d103      	bne.n	8003230 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <LL_FillBuffer+0x88>)
 800322a:	2202      	movs	r2, #2
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	e002      	b.n	8003236 <LL_FillBuffer+0x3a>
=======
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004a28:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <LL_FillBuffer+0x8c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <LL_FillBuffer+0x90>)
 8004a30:	2134      	movs	r1, #52	; 0x34
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	3348      	adds	r3, #72	; 0x48
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d103      	bne.n	8004a48 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a42:	2202      	movs	r2, #2
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	e002      	b.n	8004a4e <LL_FillBuffer+0x3a>
>>>>>>> Stashed changes
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
<<<<<<< Updated upstream
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <LL_FillBuffer+0x88>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003236:	4a13      	ldr	r2, [pc, #76]	; (8003284 <LL_FillBuffer+0x88>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <LL_FillBuffer+0x88>)
 800323e:	4a14      	ldr	r2, [pc, #80]	; (8003290 <LL_FillBuffer+0x94>)
 8003240:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <LL_FillBuffer+0x88>)
 8003244:	f002 fa32 	bl	80056ac <HAL_DMA2D_Init>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d115      	bne.n	800327a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <LL_FillBuffer+0x88>)
 8003252:	f002 fb89 	bl	8005968 <HAL_DMA2D_ConfigLayer>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <LL_FillBuffer+0x88>)
 8003268:	f002 fa6a 	bl	8005740 <HAL_DMA2D_Start>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003272:	210a      	movs	r1, #10
 8003274:	4803      	ldr	r0, [pc, #12]	; (8003284 <LL_FillBuffer+0x88>)
 8003276:	f002 fa8e 	bl	8005796 <HAL_DMA2D_PollForTransfer>
=======
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a56:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <LL_FillBuffer+0x94>)
 8004a58:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004a5a:	4810      	ldr	r0, [pc, #64]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a5c:	f002 fa3a 	bl	8006ed4 <HAL_DMA2D_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d115      	bne.n	8004a92 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	480c      	ldr	r0, [pc, #48]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a6a:	f002 fb91 	bl	8007190 <HAL_DMA2D_ConfigLayer>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10e      	bne.n	8004a92 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	4807      	ldr	r0, [pc, #28]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a80:	f002 fa72 	bl	8006f68 <HAL_DMA2D_Start>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004a8a:	210a      	movs	r1, #10
 8004a8c:	4803      	ldr	r0, [pc, #12]	; (8004a9c <LL_FillBuffer+0x88>)
 8004a8e:	f002 fa96 	bl	8006fbe <HAL_DMA2D_PollForTransfer>
>>>>>>> Stashed changes
      }
    }
  } 
}
<<<<<<< Updated upstream
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200003c8 	.word	0x200003c8
 8003288:	20000408 	.word	0x20000408
 800328c:	20008c7c 	.word	0x20008c7c
 8003290:	4002b000 	.word	0x4002b000

08003294 <BSP_SDRAM_Init>:
=======
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200013f0 	.word	0x200013f0
 8004aa0:	20001430 	.word	0x20001430
 8004aa4:	20009cb0 	.word	0x20009cb0
 8004aa8:	4002b000 	.word	0x4002b000

08004aac <BSP_SDRAM_Init>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
<<<<<<< Updated upstream
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <BSP_SDRAM_Init+0xac>)
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <BSP_SDRAM_Init+0xb0>)
 800329c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800329e:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80032a4:	4b28      	ldr	r3, [pc, #160]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032a6:	2207      	movs	r2, #7
 80032a8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032ac:	2204      	movs	r2, #4
 80032ae:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032b2:	2207      	movs	r2, #7
 80032b4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032b8:	2202      	movs	r2, #2
 80032ba:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032be:	2202      	movs	r2, #2
 80032c0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 80032c4:	2202      	movs	r2, #2
 80032c6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032d6:	2204      	movs	r2, #4
 80032d8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80032da:	4b19      	ldr	r3, [pc, #100]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032dc:	2210      	movs	r2, #16
 80032de:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ec:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032fa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <BSP_SDRAM_Init+0xac>)
 80032fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <BSP_SDRAM_Init+0xac>)
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004ab0:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004ab2:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <BSP_SDRAM_Init+0xb0>)
 8004ab4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ab8:	2202      	movs	r2, #2
 8004aba:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004abe:	2207      	movs	r2, #7
 8004ac0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004ac2:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004ac8:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004aca:	2207      	movs	r2, #7
 8004acc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004ad4:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004ada:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004adc:	2202      	movs	r2, #2
 8004ade:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004aee:	2204      	movs	r2, #4
 8004af0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004af2:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004af4:	2210      	movs	r2, #16
 8004af6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004afa:	2240      	movs	r2, #64	; 0x40
 8004afc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b04:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b12:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
<<<<<<< Updated upstream
 800330a:	2100      	movs	r1, #0
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <BSP_SDRAM_Init+0xac>)
 800330e:	f000 f87f 	bl	8003410 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003312:	490d      	ldr	r1, [pc, #52]	; (8003348 <BSP_SDRAM_Init+0xb4>)
 8003314:	480a      	ldr	r0, [pc, #40]	; (8003340 <BSP_SDRAM_Init+0xac>)
 8003316:	f005 fd51 	bl	8008dbc <HAL_SDRAM_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <BSP_SDRAM_Init+0xb8>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e002      	b.n	800332e <BSP_SDRAM_Init+0x9a>
=======
 8004b22:	2100      	movs	r1, #0
 8004b24:	480c      	ldr	r0, [pc, #48]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b26:	f000 f87f 	bl	8004c28 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004b2a:	490d      	ldr	r1, [pc, #52]	; (8004b60 <BSP_SDRAM_Init+0xb4>)
 8004b2c:	480a      	ldr	r0, [pc, #40]	; (8004b58 <BSP_SDRAM_Init+0xac>)
 8004b2e:	f005 fd3b 	bl	800a5a8 <HAL_SDRAM_Init>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <BSP_SDRAM_Init+0xb8>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <BSP_SDRAM_Init+0x9a>
>>>>>>> Stashed changes
  }
  else
  {
    sdramstatus = SDRAM_OK;
<<<<<<< Updated upstream
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <BSP_SDRAM_Init+0xb8>)
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
=======
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <BSP_SDRAM_Init+0xb8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
<<<<<<< Updated upstream
 800332e:	f240 6003 	movw	r0, #1539	; 0x603
 8003332:	f000 f80d 	bl	8003350 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <BSP_SDRAM_Init+0xb8>)
 8003338:	781b      	ldrb	r3, [r3, #0]
}
 800333a:	4618      	mov	r0, r3
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20008d24 	.word	0x20008d24
 8003344:	a0000140 	.word	0xa0000140
 8003348:	200004a8 	.word	0x200004a8
 800334c:	20000030 	.word	0x20000030

08003350 <BSP_SDRAM_Initialization_sequence>:
=======
 8004b46:	f240 6003 	movw	r0, #1539	; 0x603
 8004b4a:	f000 f80d 	bl	8004b68 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <BSP_SDRAM_Init+0xb8>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20009d58 	.word	0x20009d58
 8004b5c:	a0000140 	.word	0xa0000140
 8004b60:	200014d0 	.word	0x200014d0
 8004b64:	2000102c 	.word	0x2000102c

08004b68 <BSP_SDRAM_Initialization_sequence>:
>>>>>>> Stashed changes
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
<<<<<<< Updated upstream
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003362:	4b29      	ldr	r3, [pc, #164]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003364:	2210      	movs	r2, #16
 8003366:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800336a:	2201      	movs	r2, #1
 800336c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003378:	4923      	ldr	r1, [pc, #140]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337a:	4824      	ldr	r0, [pc, #144]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800337c:	f005 fd52 	bl	8008e24 <HAL_SDRAM_SendCommand>
=======
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b80:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b90:	4923      	ldr	r1, [pc, #140]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b92:	4824      	ldr	r0, [pc, #144]	; (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b94:	f005 fd3c 	bl	800a610 <HAL_SDRAM_SendCommand>
>>>>>>> Stashed changes

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
<<<<<<< Updated upstream
 8003380:	2001      	movs	r0, #1
 8003382:	f001 fa09 	bl	8004798 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003388:	2202      	movs	r2, #2
 800338a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338e:	2210      	movs	r2, #16
 8003390:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003394:	2201      	movs	r2, #1
 8003396:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800339e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a2:	4919      	ldr	r1, [pc, #100]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a4:	4819      	ldr	r0, [pc, #100]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033a6:	f005 fd3d 	bl	8008e24 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ac:	2203      	movs	r2, #3
 80033ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b2:	2210      	movs	r2, #16
 80033b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b8:	2208      	movs	r2, #8
 80033ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c6:	4910      	ldr	r1, [pc, #64]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c8:	4810      	ldr	r0, [pc, #64]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033ca:	f005 fd2b 	bl	8008e24 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80033ce:	f44f 7308 	mov.w	r3, #544	; 0x220
 80033d2:	60fb      	str	r3, [r7, #12]
=======
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f001 fa11 	bl	8005fc0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bac:	2201      	movs	r2, #1
 8004bae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bba:	4919      	ldr	r1, [pc, #100]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bbc:	4819      	ldr	r0, [pc, #100]	; (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004bbe:	f005 fd27 	bl	800a610 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004bc2:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bca:	2210      	movs	r2, #16
 8004bcc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bde:	4910      	ldr	r1, [pc, #64]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004be0:	4810      	ldr	r0, [pc, #64]	; (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004be2:	f005 fd15 	bl	800a610 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004be6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004bea:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
<<<<<<< Updated upstream
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033d6:	2204      	movs	r2, #4
 80033d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033dc:	2210      	movs	r2, #16
 80033de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	4905      	ldr	r1, [pc, #20]	; (8003408 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f2:	4806      	ldr	r0, [pc, #24]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033f4:	f005 fd16 	bl	8008e24 <HAL_SDRAM_SendCommand>
=======
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bee:	2204      	movs	r2, #4
 8004bf0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c02:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c08:	4905      	ldr	r1, [pc, #20]	; (8004c20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c0a:	4806      	ldr	r0, [pc, #24]	; (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c0c:	f005 fd00 	bl	800a610 <HAL_SDRAM_SendCommand>
>>>>>>> Stashed changes
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
<<<<<<< Updated upstream
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033fc:	f005 fd3d 	bl	8008e7a <HAL_SDRAM_ProgramRefreshRate>
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200004c4 	.word	0x200004c4
 800340c:	20008d24 	.word	0x20008d24

08003410 <BSP_SDRAM_MspInit>:
=======
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4804      	ldr	r0, [pc, #16]	; (8004c24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c14:	f005 fd27 	bl	800a666 <HAL_SDRAM_ProgramRefreshRate>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	200014ec 	.word	0x200014ec
 8004c24:	20009d58 	.word	0x20009d58

08004c28 <BSP_SDRAM_MspInit>:
>>>>>>> Stashed changes
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
<<<<<<< Updated upstream
 8003410:	b580      	push	{r7, lr}
 8003412:	b090      	sub	sp, #64	; 0x40
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
=======
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b090      	sub	sp, #64	; 0x40
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
<<<<<<< Updated upstream
 800341a:	4b70      	ldr	r3, [pc, #448]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	4a6f      	ldr	r2, [pc, #444]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6393      	str	r3, [r2, #56]	; 0x38
 8003426:	4b6d      	ldr	r3, [pc, #436]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003432:	4b6a      	ldr	r3, [pc, #424]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a69      	ldr	r2, [pc, #420]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800344a:	4b64      	ldr	r3, [pc, #400]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a63      	ldr	r2, [pc, #396]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b61      	ldr	r3, [pc, #388]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003462:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a5d      	ldr	r2, [pc, #372]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b5b      	ldr	r3, [pc, #364]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800347a:	4b58      	ldr	r3, [pc, #352]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a57      	ldr	r2, [pc, #348]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b55      	ldr	r3, [pc, #340]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003492:	4b52      	ldr	r3, [pc, #328]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a51      	ldr	r2, [pc, #324]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 8003498:	f043 0320 	orr.w	r3, r3, #32
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034aa:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a4b      	ldr	r2, [pc, #300]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b49      	ldr	r3, [pc, #292]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034c2:	4b46      	ldr	r3, [pc, #280]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a45      	ldr	r2, [pc, #276]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <BSP_SDRAM_MspInit+0x1cc>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034de:	2301      	movs	r3, #1
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80034e2:	2302      	movs	r3, #2
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80034e6:	230c      	movs	r3, #12
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80034ea:	2308      	movs	r3, #8
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80034ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	483a      	ldr	r0, [pc, #232]	; (80035e0 <BSP_SDRAM_MspInit+0x1d0>)
 80034f6:	f002 fb65 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80034fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003504:	4619      	mov	r1, r3
 8003506:	4837      	ldr	r0, [pc, #220]	; (80035e4 <BSP_SDRAM_MspInit+0x1d4>)
 8003508:	f002 fb5c 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800350c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003516:	4619      	mov	r1, r3
 8003518:	4833      	ldr	r0, [pc, #204]	; (80035e8 <BSP_SDRAM_MspInit+0x1d8>)
 800351a:	f002 fb53 	bl	8005bc4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800351e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003528:	4619      	mov	r1, r3
 800352a:	4830      	ldr	r0, [pc, #192]	; (80035ec <BSP_SDRAM_MspInit+0x1dc>)
 800352c:	f002 fb4a 	bl	8005bc4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003530:	f248 1333 	movw	r3, #33075	; 0x8133
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800353a:	4619      	mov	r1, r3
 800353c:	482c      	ldr	r0, [pc, #176]	; (80035f0 <BSP_SDRAM_MspInit+0x1e0>)
 800353e:	f002 fb41 	bl	8005bc4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003542:	2328      	movs	r3, #40	; 0x28
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800354a:	4619      	mov	r1, r3
 800354c:	4829      	ldr	r0, [pc, #164]	; (80035f4 <BSP_SDRAM_MspInit+0x1e4>)
 800354e:	f002 fb39 	bl	8005bc4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003574:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003578:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800357c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003580:	2200      	movs	r2, #0
 8003582:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800358a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 800358e:	2200      	movs	r2, #0
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 8003594:	2203      	movs	r2, #3
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 800359a:	2200      	movs	r2, #0
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <BSP_SDRAM_MspInit+0x1ec>)
 80035a8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80035b6:	4810      	ldr	r0, [pc, #64]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035b8:	f001 ff48 	bl	800544c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80035bc:	480e      	ldr	r0, [pc, #56]	; (80035f8 <BSP_SDRAM_MspInit+0x1e8>)
 80035be:	f001 fe97 	bl	80052f0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	210f      	movs	r1, #15
 80035c6:	2038      	movs	r0, #56	; 0x38
 80035c8:	f001 fd9a 	bl	8005100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80035cc:	2038      	movs	r0, #56	; 0x38
 80035ce:	f001 fdb3 	bl	8005138 <HAL_NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3740      	adds	r7, #64	; 0x40
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	200004d4 	.word	0x200004d4
 80035fc:	40026410 	.word	0x40026410

08003600 <BSP_TS_Init>:
=======
 8004c32:	4b70      	ldr	r3, [pc, #448]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4a6f      	ldr	r2, [pc, #444]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	6393      	str	r3, [r2, #56]	; 0x38
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	4a69      	ldr	r2, [pc, #420]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c54:	6313      	str	r3, [r2, #48]	; 0x30
 8004c56:	4b67      	ldr	r3, [pc, #412]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c62:	4b64      	ldr	r3, [pc, #400]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4a63      	ldr	r2, [pc, #396]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6e:	4b61      	ldr	r3, [pc, #388]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c7a:	4b5e      	ldr	r3, [pc, #376]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a5d      	ldr	r2, [pc, #372]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b5b      	ldr	r3, [pc, #364]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c92:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4a57      	ldr	r2, [pc, #348]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004c98:	f043 0310 	orr.w	r3, r3, #16
 8004c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9e:	4b55      	ldr	r3, [pc, #340]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004caa:	4b52      	ldr	r3, [pc, #328]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	4a51      	ldr	r2, [pc, #324]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cb0:	f043 0320 	orr.w	r3, r3, #32
 8004cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb6:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	4a4b      	ldr	r2, [pc, #300]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cce:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4a45      	ldr	r2, [pc, #276]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <BSP_SDRAM_MspInit+0x1cc>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004cfe:	230c      	movs	r3, #12
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004d02:	2308      	movs	r3, #8
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	483a      	ldr	r0, [pc, #232]	; (8004df8 <BSP_SDRAM_MspInit+0x1d0>)
 8004d0e:	f002 fb6d 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004d12:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4837      	ldr	r0, [pc, #220]	; (8004dfc <BSP_SDRAM_MspInit+0x1d4>)
 8004d20:	f002 fb64 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004d24:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4833      	ldr	r0, [pc, #204]	; (8004e00 <BSP_SDRAM_MspInit+0x1d8>)
 8004d32:	f002 fb5b 	bl	80073ec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004d36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d40:	4619      	mov	r1, r3
 8004d42:	4830      	ldr	r0, [pc, #192]	; (8004e04 <BSP_SDRAM_MspInit+0x1dc>)
 8004d44:	f002 fb52 	bl	80073ec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004d48:	f248 1333 	movw	r3, #33075	; 0x8133
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d52:	4619      	mov	r1, r3
 8004d54:	482c      	ldr	r0, [pc, #176]	; (8004e08 <BSP_SDRAM_MspInit+0x1e0>)
 8004d56:	f002 fb49 	bl	80073ec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004d5a:	2328      	movs	r3, #40	; 0x28
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d62:	4619      	mov	r1, r3
 8004d64:	4829      	ldr	r0, [pc, #164]	; (8004e0c <BSP_SDRAM_MspInit+0x1e4>)
 8004d66:	f002 fb41 	bl	80073ec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004d6a:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004d70:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004d76:	4b26      	ldr	r3, [pc, #152]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d84:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d8c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d94:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004d9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004dac:	2203      	movs	r2, #3
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <BSP_SDRAM_MspInit+0x1ec>)
 8004dc0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc8:	4a11      	ldr	r2, [pc, #68]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004dce:	4810      	ldr	r0, [pc, #64]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004dd0:	f001 ff50 	bl	8006c74 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004dd4:	480e      	ldr	r0, [pc, #56]	; (8004e10 <BSP_SDRAM_MspInit+0x1e8>)
 8004dd6:	f001 fe9f 	bl	8006b18 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	210f      	movs	r1, #15
 8004dde:	2038      	movs	r0, #56	; 0x38
 8004de0:	f001 fda2 	bl	8006928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004de4:	2038      	movs	r0, #56	; 0x38
 8004de6:	f001 fdbb 	bl	8006960 <HAL_NVIC_EnableIRQ>
}
 8004dea:	bf00      	nop
 8004dec:	3740      	adds	r7, #64	; 0x40
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40020800 	.word	0x40020800
 8004dfc:	40020c00 	.word	0x40020c00
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40021400 	.word	0x40021400
 8004e08:	40021800 	.word	0x40021800
 8004e0c:	40021c00 	.word	0x40021c00
 8004e10:	200014fc 	.word	0x200014fc
 8004e14:	40026410 	.word	0x40026410

08004e18 <BSP_TS_Init>:
>>>>>>> Stashed changes
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
<<<<<<< Updated upstream
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	460a      	mov	r2, r1
 800360a:	80fb      	strh	r3, [r7, #6]
 800360c:	4613      	mov	r3, r2
 800360e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <BSP_TS_Init+0x68>)
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800361a:	4a14      	ldr	r2, [pc, #80]	; (800366c <BSP_TS_Init+0x6c>)
 800361c:	88bb      	ldrh	r3, [r7, #4]
 800361e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <BSP_TS_Init+0x70>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2070      	movs	r0, #112	; 0x70
 8003626:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <BSP_TS_Init+0x70>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2070      	movs	r0, #112	; 0x70
 800362e:	4798      	blx	r3
 8003630:	4603      	mov	r3, r0
 8003632:	2b51      	cmp	r3, #81	; 0x51
 8003634:	d111      	bne.n	800365a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <BSP_TS_Init+0x74>)
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <BSP_TS_Init+0x70>)
 800363a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <BSP_TS_Init+0x78>)
 800363e:	2270      	movs	r2, #112	; 0x70
 8003640:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <BSP_TS_Init+0x7c>)
 8003644:	2208      	movs	r2, #8
 8003646:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <BSP_TS_Init+0x74>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <BSP_TS_Init+0x78>)
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	b292      	uxth	r2, r2
 8003654:	4610      	mov	r0, r2
 8003656:	4798      	blx	r3
 8003658:	e001      	b.n	800365e <BSP_TS_Init+0x5e>
=======
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460a      	mov	r2, r1
 8004e22:	80fb      	strh	r3, [r7, #6]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <BSP_TS_Init+0x68>)
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004e32:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <BSP_TS_Init+0x6c>)
 8004e34:	88bb      	ldrh	r3, [r7, #4]
 8004e36:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <BSP_TS_Init+0x70>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2070      	movs	r0, #112	; 0x70
 8004e3e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <BSP_TS_Init+0x70>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2070      	movs	r0, #112	; 0x70
 8004e46:	4798      	blx	r3
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b51      	cmp	r3, #81	; 0x51
 8004e4c:	d111      	bne.n	8004e72 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <BSP_TS_Init+0x74>)
 8004e50:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <BSP_TS_Init+0x70>)
 8004e52:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <BSP_TS_Init+0x78>)
 8004e56:	2270      	movs	r2, #112	; 0x70
 8004e58:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <BSP_TS_Init+0x7c>)
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <BSP_TS_Init+0x74>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <BSP_TS_Init+0x78>)
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
 8004e70:	e001      	b.n	8004e76 <BSP_TS_Init+0x5e>
>>>>>>> Stashed changes
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
<<<<<<< Updated upstream
 800365a:	2303      	movs	r3, #3
 800365c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000538 	.word	0x20000538
 800366c:	2000053a 	.word	0x2000053a
 8003670:	20000000 	.word	0x20000000
 8003674:	20000534 	.word	0x20000534
 8003678:	2000053d 	.word	0x2000053d
 800367c:	2000053c 	.word	0x2000053c

08003680 <BSP_TS_GetState>:
=======
 8004e72:	2303      	movs	r3, #3
 8004e74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20001560 	.word	0x20001560
 8004e84:	20001562 	.word	0x20001562
 8004e88:	20000000 	.word	0x20000000
 8004e8c:	2000155c 	.word	0x2000155c
 8004e90:	20001565 	.word	0x20001565
 8004e94:	20001564 	.word	0x20001564

08004e98 <BSP_TS_GetState>:
>>>>>>> Stashed changes
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
<<<<<<< Updated upstream
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b097      	sub	sp, #92	; 0x5c
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
=======
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b097      	sub	sp, #92	; 0x5c
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
>>>>>>> Stashed changes
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
<<<<<<< Updated upstream
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
=======
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
<<<<<<< Updated upstream
 800369a:	4b97      	ldr	r3, [pc, #604]	; (80038f8 <BSP_TS_GetState+0x278>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	4a96      	ldr	r2, [pc, #600]	; (80038fc <BSP_TS_GetState+0x27c>)
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	b292      	uxth	r2, r2
 80036a6:	4610      	mov	r0, r2
 80036a8:	4798      	blx	r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 81a8 	beq.w	8003a0c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80036bc:	2300      	movs	r3, #0
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c0:	e197      	b.n	80039f2 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <BSP_TS_GetState+0x278>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	4a8c      	ldr	r2, [pc, #560]	; (80038fc <BSP_TS_GetState+0x27c>)
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	b290      	uxth	r0, r2
 80036ce:	f107 0120 	add.w	r1, r7, #32
 80036d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d4:	0052      	lsls	r2, r2, #1
 80036d6:	188c      	adds	r4, r1, r2
 80036d8:	f107 0114 	add.w	r1, r7, #20
 80036dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036de:	0052      	lsls	r2, r2, #1
 80036e0:	440a      	add	r2, r1
 80036e2:	4621      	mov	r1, r4
 80036e4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80036e6:	4b86      	ldr	r3, [pc, #536]	; (8003900 <BSP_TS_GetState+0x280>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11b      	bne.n	8003726 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80036ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036f6:	4413      	add	r3, r2
 80036f8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80036fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003704:	440b      	add	r3, r1
 8003706:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800370a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003712:	4413      	add	r3, r2
 8003714:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003720:	440b      	add	r3, r1
 8003722:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <BSP_TS_GetState+0x280>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800373a:	4413      	add	r3, r2
 800373c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003740:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003744:	b29a      	uxth	r2, r3
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800374e:	440b      	add	r3, r1
 8003750:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003754:	4b6a      	ldr	r3, [pc, #424]	; (8003900 <BSP_TS_GetState+0x280>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003768:	4413      	add	r3, r2
 800376a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800376e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003772:	b29a      	uxth	r2, r3
 8003774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800377c:	440b      	add	r3, r1
 800377e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003782:	4b5f      	ldr	r3, [pc, #380]	; (8003900 <BSP_TS_GetState+0x280>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01b      	beq.n	80037c6 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800378e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003796:	4413      	add	r3, r2
 8003798:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037a4:	440b      	add	r3, r1
 80037a6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80037aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037b2:	4413      	add	r3, r2
 80037b4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80037b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037c0:	440b      	add	r3, r1
 80037c2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037ce:	4413      	add	r3, r2
 80037d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80037d4:	4619      	mov	r1, r3
 80037d6:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <BSP_TS_GetState+0x284>)
 80037d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	4299      	cmp	r1, r3
 80037e0:	d90e      	bls.n	8003800 <BSP_TS_GetState+0x180>
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037ea:	4413      	add	r3, r2
 80037ec:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80037f0:	4944      	ldr	r1, [pc, #272]	; (8003904 <BSP_TS_GetState+0x284>)
 80037f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	e00d      	b.n	800381c <BSP_TS_GetState+0x19c>
 8003800:	4a40      	ldr	r2, [pc, #256]	; (8003904 <BSP_TS_GetState+0x284>)
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	b29a      	uxth	r2, r3
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003812:	440b      	add	r3, r1
 8003814:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003828:	4413      	add	r3, r2
 800382a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800382e:	4619      	mov	r1, r3
 8003830:	4a35      	ldr	r2, [pc, #212]	; (8003908 <BSP_TS_GetState+0x288>)
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	4299      	cmp	r1, r3
 800383a:	d90e      	bls.n	800385a <BSP_TS_GetState+0x1da>
 800383c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003844:	4413      	add	r3, r2
 8003846:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800384a:	492f      	ldr	r1, [pc, #188]	; (8003908 <BSP_TS_GetState+0x288>)
 800384c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003852:	b29b      	uxth	r3, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	e00d      	b.n	8003876 <BSP_TS_GetState+0x1f6>
 800385a:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <BSP_TS_GetState+0x288>)
 800385c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	b29a      	uxth	r2, r3
 8003864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800386c:	440b      	add	r3, r1
 800386e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b29b      	uxth	r3, r3
 8003876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800387a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800387e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003882:	4413      	add	r3, r2
 8003884:	2b05      	cmp	r3, #5
 8003886:	dd17      	ble.n	80038b8 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003890:	4413      	add	r3, r2
 8003892:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003896:	4619      	mov	r1, r3
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <BSP_TS_GetState+0x284>)
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038a8:	4413      	add	r3, r2
 80038aa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4a15      	ldr	r2, [pc, #84]	; (8003908 <BSP_TS_GetState+0x288>)
 80038b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <BSP_TS_GetState+0x27c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b70      	cmp	r3, #112	; 0x70
 80038be:	d125      	bne.n	800390c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80038c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038c8:	4413      	add	r3, r2
 80038ca:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	460a      	mov	r2, r1
 80038d8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80038da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038e2:	4413      	add	r3, r2
 80038e4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ec:	3304      	adds	r3, #4
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	460a      	mov	r2, r1
 80038f4:	809a      	strh	r2, [r3, #4]
 80038f6:	e02c      	b.n	8003952 <BSP_TS_GetState+0x2d2>
 80038f8:	20000534 	.word	0x20000534
 80038fc:	2000053d 	.word	0x2000053d
 8003900:	2000053c 	.word	0x2000053c
 8003904:	20000540 	.word	0x20000540
 8003908:	20000554 	.word	0x20000554
=======
 8004eb2:	4b97      	ldr	r3, [pc, #604]	; (8005110 <BSP_TS_GetState+0x278>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	4a96      	ldr	r2, [pc, #600]	; (8005114 <BSP_TS_GetState+0x27c>)
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4798      	blx	r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 81a8 	beq.w	8005224 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed8:	e197      	b.n	800520a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004eda:	4b8d      	ldr	r3, [pc, #564]	; (8005110 <BSP_TS_GetState+0x278>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4a8c      	ldr	r2, [pc, #560]	; (8005114 <BSP_TS_GetState+0x27c>)
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	b290      	uxth	r0, r2
 8004ee6:	f107 0120 	add.w	r1, r7, #32
 8004eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eec:	0052      	lsls	r2, r2, #1
 8004eee:	188c      	adds	r4, r1, r2
 8004ef0:	f107 0114 	add.w	r1, r7, #20
 8004ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ef6:	0052      	lsls	r2, r2, #1
 8004ef8:	440a      	add	r2, r1
 8004efa:	4621      	mov	r1, r4
 8004efc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004efe:	4b86      	ldr	r3, [pc, #536]	; (8005118 <BSP_TS_GetState+0x280>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d11b      	bne.n	8004f3e <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f0e:	4413      	add	r3, r2
 8004f10:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f38:	440b      	add	r3, r1
 8004f3a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <BSP_TS_GetState+0x280>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d010      	beq.n	8004f6c <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f52:	4413      	add	r3, r2
 8004f54:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004f58:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f66:	440b      	add	r3, r1
 8004f68:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <BSP_TS_GetState+0x280>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d010      	beq.n	8004f9a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004f80:	4413      	add	r3, r2
 8004f82:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004f86:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004f94:	440b      	add	r3, r1
 8004f96:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <BSP_TS_GetState+0x280>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004fae:	4413      	add	r3, r2
 8004fb0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004fbc:	440b      	add	r3, r1
 8004fbe:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004fca:	4413      	add	r3, r2
 8004fcc:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004fd8:	440b      	add	r3, r1
 8004fda:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004fec:	4619      	mov	r1, r3
 8004fee:	4a4b      	ldr	r2, [pc, #300]	; (800511c <BSP_TS_GetState+0x284>)
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	d90e      	bls.n	8005018 <BSP_TS_GetState+0x180>
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005002:	4413      	add	r3, r2
 8005004:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8005008:	4944      	ldr	r1, [pc, #272]	; (800511c <BSP_TS_GetState+0x284>)
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005010:	b29b      	uxth	r3, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	b29b      	uxth	r3, r3
 8005016:	e00d      	b.n	8005034 <BSP_TS_GetState+0x19c>
 8005018:	4a40      	ldr	r2, [pc, #256]	; (800511c <BSP_TS_GetState+0x284>)
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005020:	b29a      	uxth	r2, r3
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800502a:	440b      	add	r3, r1
 800502c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	b29b      	uxth	r3, r3
 8005034:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005040:	4413      	add	r3, r2
 8005042:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005046:	4619      	mov	r1, r3
 8005048:	4a35      	ldr	r2, [pc, #212]	; (8005120 <BSP_TS_GetState+0x288>)
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005050:	4299      	cmp	r1, r3
 8005052:	d90e      	bls.n	8005072 <BSP_TS_GetState+0x1da>
 8005054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800505c:	4413      	add	r3, r2
 800505e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005062:	492f      	ldr	r1, [pc, #188]	; (8005120 <BSP_TS_GetState+0x288>)
 8005064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005066:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800506a:	b29b      	uxth	r3, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	e00d      	b.n	800508e <BSP_TS_GetState+0x1f6>
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <BSP_TS_GetState+0x288>)
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507a:	b29a      	uxth	r2, r3
 800507c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005084:	440b      	add	r3, r1
 8005086:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	b29b      	uxth	r3, r3
 800508e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005092:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005096:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800509a:	4413      	add	r3, r2
 800509c:	2b05      	cmp	r3, #5
 800509e:	dd17      	ble.n	80050d0 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80050a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80050a8:	4413      	add	r3, r2
 80050aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4a1a      	ldr	r2, [pc, #104]	; (800511c <BSP_TS_GetState+0x284>)
 80050b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80050b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80050c0:	4413      	add	r3, r2
 80050c2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80050c6:	4619      	mov	r1, r3
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <BSP_TS_GetState+0x288>)
 80050ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80050d0:	4b10      	ldr	r3, [pc, #64]	; (8005114 <BSP_TS_GetState+0x27c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d125      	bne.n	8005124 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80050d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80050e0:	4413      	add	r3, r2
 80050e2:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	460a      	mov	r2, r1
 80050f0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80050f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80050fa:	4413      	add	r3, r2
 80050fc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005104:	3304      	adds	r3, #4
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	460a      	mov	r2, r1
 800510c:	809a      	strh	r2, [r3, #4]
 800510e:	e02c      	b.n	800516a <BSP_TS_GetState+0x2d2>
 8005110:	2000155c 	.word	0x2000155c
 8005114:	20001565 	.word	0x20001565
 8005118:	20001564 	.word	0x20001564
 800511c:	20001568 	.word	0x20001568
 8005120:	2000157c 	.word	0x2000157c
>>>>>>> Stashed changes
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
<<<<<<< Updated upstream
 800390c:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <BSP_TS_GetState+0x398>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	4a42      	ldr	r2, [pc, #264]	; (8003a1c <BSP_TS_GetState+0x39c>)
 8003914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391a:	fb03 f301 	mul.w	r3, r3, r1
 800391e:	0b1b      	lsrs	r3, r3, #12
 8003920:	b299      	uxth	r1, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	460a      	mov	r2, r1
 800392c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800392e:	4b3c      	ldr	r3, [pc, #240]	; (8003a20 <BSP_TS_GetState+0x3a0>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <BSP_TS_GetState+0x3a4>)
 8003936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	fb03 f301 	mul.w	r3, r3, r1
 8003940:	0b1b      	lsrs	r3, r3, #12
 8003942:	b299      	uxth	r1, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003948:	3304      	adds	r3, #4
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	460a      	mov	r2, r1
 8003950:	809a      	strh	r2, [r3, #4]
=======
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <BSP_TS_GetState+0x398>)
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	4a42      	ldr	r2, [pc, #264]	; (8005234 <BSP_TS_GetState+0x39c>)
 800512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	fb03 f301 	mul.w	r3, r3, r1
 8005136:	0b1b      	lsrs	r3, r3, #12
 8005138:	b299      	uxth	r1, r3
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	460a      	mov	r2, r1
 8005144:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005146:	4b3c      	ldr	r3, [pc, #240]	; (8005238 <BSP_TS_GetState+0x3a0>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	4a3b      	ldr	r2, [pc, #236]	; (800523c <BSP_TS_GetState+0x3a4>)
 800514e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005154:	fb03 f301 	mul.w	r3, r3, r1
 8005158:	0b1b      	lsrs	r3, r3, #12
 800515a:	b299      	uxth	r1, r3
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005160:	3304      	adds	r3, #4
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	460a      	mov	r2, r1
 8005168:	809a      	strh	r2, [r3, #4]
>>>>>>> Stashed changes
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
<<<<<<< Updated upstream
 8003952:	4b35      	ldr	r3, [pc, #212]	; (8003a28 <BSP_TS_GetState+0x3a8>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b298      	uxth	r0, r3
 8003958:	f107 010c 	add.w	r1, r7, #12
 800395c:	f107 0210 	add.w	r2, r7, #16
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	460b      	mov	r3, r1
 8003968:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800396a:	f7fd f81f 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003976:	4413      	add	r3, r2
 8003978:	3316      	adds	r3, #22
 800397a:	460a      	mov	r2, r1
 800397c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	b2d9      	uxtb	r1, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003986:	4413      	add	r3, r2
 8003988:	3320      	adds	r3, #32
 800398a:	460a      	mov	r2, r1
 800398c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d827      	bhi.n	80039e4 <BSP_TS_GetState+0x364>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <BSP_TS_GetState+0x31c>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039bb 	.word	0x080039bb
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d7 	.word	0x080039d7
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b0:	4413      	add	r3, r2
 80039b2:	331b      	adds	r3, #27
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
          break;
 80039b8:	e018      	b.n	80039ec <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039be:	4413      	add	r3, r2
 80039c0:	331b      	adds	r3, #27
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]
          break;
 80039c6:	e011      	b.n	80039ec <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039cc:	4413      	add	r3, r2
 80039ce:	331b      	adds	r3, #27
 80039d0:	2203      	movs	r2, #3
 80039d2:	701a      	strb	r2, [r3, #0]
          break;
 80039d4:	e00a      	b.n	80039ec <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039da:	4413      	add	r3, r2
 80039dc:	331b      	adds	r3, #27
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
          break;
 80039e2:	e003      	b.n	80039ec <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80039ea:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	3301      	adds	r3, #1
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f4ff ae61 	bcc.w	80036c2 <BSP_TS_GetState+0x42>
=======
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <BSP_TS_GetState+0x3a8>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b298      	uxth	r0, r3
 8005170:	f107 010c 	add.w	r1, r7, #12
 8005174:	f107 0210 	add.w	r2, r7, #16
 8005178:	f107 0308 	add.w	r3, r7, #8
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	460b      	mov	r3, r1
 8005180:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005182:	f7fb fc13 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	b2d9      	uxtb	r1, r3
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	4413      	add	r3, r2
 8005190:	3316      	adds	r3, #22
 8005192:	460a      	mov	r2, r1
 8005194:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	b2d9      	uxtb	r1, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519e:	4413      	add	r3, r2
 80051a0:	3320      	adds	r3, #32
 80051a2:	460a      	mov	r2, r1
 80051a4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d827      	bhi.n	80051fc <BSP_TS_GetState+0x364>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <BSP_TS_GetState+0x31c>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d3 	.word	0x080051d3
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051ef 	.word	0x080051ef
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c8:	4413      	add	r3, r2
 80051ca:	331b      	adds	r3, #27
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
          break;
 80051d0:	e018      	b.n	8005204 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d6:	4413      	add	r3, r2
 80051d8:	331b      	adds	r3, #27
 80051da:	2202      	movs	r2, #2
 80051dc:	701a      	strb	r2, [r3, #0]
          break;
 80051de:	e011      	b.n	8005204 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e4:	4413      	add	r3, r2
 80051e6:	331b      	adds	r3, #27
 80051e8:	2203      	movs	r2, #3
 80051ea:	701a      	strb	r2, [r3, #0]
          break;
 80051ec:	e00a      	b.n	8005204 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f2:	4413      	add	r3, r2
 80051f4:	331b      	adds	r3, #27
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
          break;
 80051fa:	e003      	b.n	8005204 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005202:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005206:	3301      	adds	r3, #1
 8005208:	64bb      	str	r3, [r7, #72]	; 0x48
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005212:	4293      	cmp	r3, r2
 8005214:	f4ff ae61 	bcc.w	8004eda <BSP_TS_GetState+0x42>
>>>>>>> Stashed changes

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
<<<<<<< Updated upstream
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f813 	bl	8003a2c <BSP_TS_Get_GestureId>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
=======
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f813 	bl	8005244 <BSP_TS_Get_GestureId>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
>>>>>>> Stashed changes
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
<<<<<<< Updated upstream
 8003a0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3754      	adds	r7, #84	; 0x54
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}
 8003a18:	20000538 	.word	0x20000538
 8003a1c:	20000540 	.word	0x20000540
 8003a20:	2000053a 	.word	0x2000053a
 8003a24:	20000554 	.word	0x20000554
 8003a28:	2000053d 	.word	0x2000053d

08003a2c <BSP_TS_Get_GestureId>:
=======
 8005224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005228:	4618      	mov	r0, r3
 800522a:	3754      	adds	r7, #84	; 0x54
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}
 8005230:	20001560 	.word	0x20001560
 8005234:	20001568 	.word	0x20001568
 8005238:	20001562 	.word	0x20001562
 800523c:	2000157c 	.word	0x2000157c
 8005240:	20001565 	.word	0x20001565

08005244 <BSP_TS_Get_GestureId>:
>>>>>>> Stashed changes
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
<<<<<<< Updated upstream
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <BSP_TS_Get_GestureId+0x90>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f107 0208 	add.w	r2, r7, #8
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc ff96 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b18      	cmp	r3, #24
 8003a52:	d01b      	beq.n	8003a8c <BSP_TS_Get_GestureId+0x60>
 8003a54:	2b18      	cmp	r3, #24
 8003a56:	d806      	bhi.n	8003a66 <BSP_TS_Get_GestureId+0x3a>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d00f      	beq.n	8003a7c <BSP_TS_Get_GestureId+0x50>
 8003a5c:	2b14      	cmp	r3, #20
 8003a5e:	d011      	beq.n	8003a84 <BSP_TS_Get_GestureId+0x58>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <BSP_TS_Get_GestureId+0x48>
 8003a64:	e022      	b.n	8003aac <BSP_TS_Get_GestureId+0x80>
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d018      	beq.n	8003a9c <BSP_TS_Get_GestureId+0x70>
 8003a6a:	2b49      	cmp	r3, #73	; 0x49
 8003a6c:	d01a      	beq.n	8003aa4 <BSP_TS_Get_GestureId+0x78>
 8003a6e:	2b1c      	cmp	r3, #28
 8003a70:	d010      	beq.n	8003a94 <BSP_TS_Get_GestureId+0x68>
 8003a72:	e01b      	b.n	8003aac <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a7a:	e01a      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a82:	e016      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a8a:	e012      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a92:	e00e      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003a9a:	e00a      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003aa2:	e006      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2206      	movs	r2, #6
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003aaa:	e002      	b.n	8003ab2 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	2000053d 	.word	0x2000053d

08003ac0 <HAL_MspInit>:
=======
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005254:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <BSP_TS_Get_GestureId+0x90>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f107 0208 	add.w	r2, r7, #8
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f7fb fb8a 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b18      	cmp	r3, #24
 800526a:	d01b      	beq.n	80052a4 <BSP_TS_Get_GestureId+0x60>
 800526c:	2b18      	cmp	r3, #24
 800526e:	d806      	bhi.n	800527e <BSP_TS_Get_GestureId+0x3a>
 8005270:	2b10      	cmp	r3, #16
 8005272:	d00f      	beq.n	8005294 <BSP_TS_Get_GestureId+0x50>
 8005274:	2b14      	cmp	r3, #20
 8005276:	d011      	beq.n	800529c <BSP_TS_Get_GestureId+0x58>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <BSP_TS_Get_GestureId+0x48>
 800527c:	e022      	b.n	80052c4 <BSP_TS_Get_GestureId+0x80>
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d018      	beq.n	80052b4 <BSP_TS_Get_GestureId+0x70>
 8005282:	2b49      	cmp	r3, #73	; 0x49
 8005284:	d01a      	beq.n	80052bc <BSP_TS_Get_GestureId+0x78>
 8005286:	2b1c      	cmp	r3, #28
 8005288:	d010      	beq.n	80052ac <BSP_TS_Get_GestureId+0x68>
 800528a:	e01b      	b.n	80052c4 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005292:	e01a      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800529a:	e016      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80052a2:	e012      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2203      	movs	r2, #3
 80052a8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80052aa:	e00e      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2204      	movs	r2, #4
 80052b0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80052b2:	e00a      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2205      	movs	r2, #5
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80052ba:	e006      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2206      	movs	r2, #6
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80052c2:	e002      	b.n	80052ca <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
      break;
 80052c8:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20001565 	.word	0x20001565

080052d8 <HAL_MspInit>:
>>>>>>> Stashed changes
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
=======
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_MspInit+0x4c>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <HAL_MspInit+0x4c>)
 8003ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_MspInit+0x4c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
=======
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_MspInit+0x4c>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	4a10      	ldr	r2, [pc, #64]	; (8005324 <HAL_MspInit+0x4c>)
 80052e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_MspInit+0x4c>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_MspInit+0x4c>)
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_MspInit+0x4c>)
 80052fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005300:	6453      	str	r3, [r2, #68]	; 0x44
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_MspInit+0x4c>)
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< Updated upstream
 8003af6:	2200      	movs	r2, #0
 8003af8:	210f      	movs	r1, #15
 8003afa:	f06f 0001 	mvn.w	r0, #1
 8003afe:	f001 faff 	bl	8005100 <HAL_NVIC_SetPriority>
=======
 800530e:	2200      	movs	r2, #0
 8005310:	210f      	movs	r1, #15
 8005312:	f06f 0001 	mvn.w	r0, #1
 8005316:	f001 fb07 	bl	8006928 <HAL_NVIC_SetPriority>
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_ADC_MspInit>:
=======
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800

08005328 <HAL_ADC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_ADC_MspInit+0xc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d124      	bne.n	8003b7c <HAL_ADC_MspInit+0x6c>
=======
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005330:	f107 031c 	add.w	r3, r7, #28
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	60da      	str	r2, [r3, #12]
 800533e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <HAL_ADC_MspInit+0xc8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d124      	bne.n	8005394 <HAL_ADC_MspInit+0x6c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< Updated upstream
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	697b      	ldr	r3, [r7, #20]
=======
 800534a:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005354:	6453      	str	r3, [r2, #68]	; 0x44
 8005356:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 8005368:	f043 0301 	orr.w	r3, r3, #1
 800536c:	6313      	str	r3, [r2, #48]	; 0x30
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< Updated upstream
 8003b62:	2301      	movs	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b66:	2303      	movs	r3, #3
 8003b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6e:	f107 031c 	add.w	r3, r7, #28
 8003b72:	4619      	mov	r1, r3
 8003b74:	481a      	ldr	r0, [pc, #104]	; (8003be0 <HAL_ADC_MspInit+0xd0>)
 8003b76:	f002 f825 	bl	8005bc4 <HAL_GPIO_Init>
=======
 800537a:	2301      	movs	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800537e:	2303      	movs	r3, #3
 8005380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005386:	f107 031c 	add.w	r3, r7, #28
 800538a:	4619      	mov	r1, r3
 800538c:	481a      	ldr	r0, [pc, #104]	; (80053f8 <HAL_ADC_MspInit+0xd0>)
 800538e:	f002 f82d 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8003b7a:	e029      	b.n	8003bd0 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_ADC_MspInit+0xd4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d124      	bne.n	8003bd0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b90:	6453      	str	r3, [r2, #68]	; 0x44
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003ba4:	f043 0320 	orr.w	r3, r3, #32
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_ADC_MspInit+0xcc>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003bb6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4807      	ldr	r0, [pc, #28]	; (8003be8 <HAL_ADC_MspInit+0xd8>)
 8003bcc:	f001 fffa 	bl	8005bc4 <HAL_GPIO_Init>
}
 8003bd0:	bf00      	nop
 8003bd2:	3730      	adds	r7, #48	; 0x30
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40012000 	.word	0x40012000
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40012200 	.word	0x40012200
 8003be8:	40021400 	.word	0x40021400

08003bec <HAL_DAC_MspInit>:
=======
 8005392:	e029      	b.n	80053e8 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a18      	ldr	r2, [pc, #96]	; (80053fc <HAL_ADC_MspInit+0xd4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d124      	bne.n	80053e8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 80053a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053a8:	6453      	str	r3, [r2, #68]	; 0x44
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053b6:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a0e      	ldr	r2, [pc, #56]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 80053bc:	f043 0320 	orr.w	r3, r3, #32
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_ADC_MspInit+0xcc>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80053ce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80053d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053d4:	2303      	movs	r3, #3
 80053d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053dc:	f107 031c 	add.w	r3, r7, #28
 80053e0:	4619      	mov	r1, r3
 80053e2:	4807      	ldr	r0, [pc, #28]	; (8005400 <HAL_ADC_MspInit+0xd8>)
 80053e4:	f002 f802 	bl	80073ec <HAL_GPIO_Init>
}
 80053e8:	bf00      	nop
 80053ea:	3730      	adds	r7, #48	; 0x30
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40012000 	.word	0x40012000
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40012200 	.word	0x40012200
 8005400:	40021400 	.word	0x40021400

08005404 <HAL_DAC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
<<<<<<< Updated upstream
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_DAC_MspInit+0x84>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d12b      	bne.n	8003c66 <HAL_DAC_MspInit+0x7a>
=======
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540c:	f107 0314 	add.w	r3, r7, #20
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_DAC_MspInit+0x84>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d12b      	bne.n	800547e <HAL_DAC_MspInit+0x7a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
<<<<<<< Updated upstream
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_DAC_MspInit+0x88>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
=======
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_DAC_MspInit+0x88>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_DAC_MspInit+0x88>)
 800542c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005430:	6413      	str	r3, [r2, #64]	; 0x40
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_DAC_MspInit+0x88>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_DAC_MspInit+0x88>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <HAL_DAC_MspInit+0x88>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <HAL_DAC_MspInit+0x88>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< Updated upstream
 8003c3e:	2310      	movs	r3, #16
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c42:	2303      	movs	r3, #3
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0314 	add.w	r3, r7, #20
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4809      	ldr	r0, [pc, #36]	; (8003c78 <HAL_DAC_MspInit+0x8c>)
 8003c52:	f001 ffb7 	bl	8005bc4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2036      	movs	r0, #54	; 0x36
 8003c5c:	f001 fa50 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c60:	2036      	movs	r0, #54	; 0x36
 8003c62:	f001 fa69 	bl	8005138 <HAL_NVIC_EnableIRQ>
=======
 8005456:	2310      	movs	r3, #16
 8005458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800545a:	2303      	movs	r3, #3
 800545c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005462:	f107 0314 	add.w	r3, r7, #20
 8005466:	4619      	mov	r1, r3
 8005468:	4809      	ldr	r0, [pc, #36]	; (8005490 <HAL_DAC_MspInit+0x8c>)
 800546a:	f001 ffbf 	bl	80073ec <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800546e:	2200      	movs	r2, #0
 8005470:	2100      	movs	r1, #0
 8005472:	2036      	movs	r0, #54	; 0x36
 8005474:	f001 fa58 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005478:	2036      	movs	r0, #54	; 0x36
 800547a:	f001 fa71 	bl	8006960 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40007400 	.word	0x40007400
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40020000 	.word	0x40020000

08003c7c <HAL_DMA2D_MspInit>:
=======
 800547e:	bf00      	nop
 8005480:	3728      	adds	r7, #40	; 0x28
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40007400 	.word	0x40007400
 800548c:	40023800 	.word	0x40023800
 8005490:	40020000 	.word	0x40020000

08005494 <HAL_DMA2D_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
<<<<<<< Updated upstream
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_DMA2D_MspInit+0x38>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_DMA2D_MspInit+0x2a>
=======
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <HAL_DMA2D_MspInit+0x38>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10b      	bne.n	80054be <HAL_DMA2D_MspInit+0x2a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
<<<<<<< Updated upstream
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_DMA2D_MspInit+0x3c>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_DMA2D_MspInit+0x3c>)
 8003c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_DMA2D_MspInit+0x3c>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
=======
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <HAL_DMA2D_MspInit+0x3c>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <HAL_DMA2D_MspInit+0x3c>)
 80054ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054b0:	6313      	str	r3, [r2, #48]	; 0x30
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <HAL_DMA2D_MspInit+0x3c>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	4002b000 	.word	0x4002b000
 8003cb8:	40023800 	.word	0x40023800

08003cbc <HAL_I2C_MspInit>:
=======
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	4002b000 	.word	0x4002b000
 80054d0:	40023800 	.word	0x40023800

080054d4 <HAL_I2C_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< Updated upstream
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	; 0x30
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	f107 031c 	add.w	r3, r7, #28
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <HAL_I2C_MspInit+0xdc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d129      	bne.n	8003d32 <HAL_I2C_MspInit+0x76>
=======
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08c      	sub	sp, #48	; 0x30
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054dc:	f107 031c 	add.w	r3, r7, #28
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <HAL_I2C_MspInit+0xdc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d129      	bne.n	800554a <HAL_I2C_MspInit+0x76>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< Updated upstream
 8003cde:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
=======
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a2e      	ldr	r2, [pc, #184]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	69bb      	ldr	r3, [r7, #24]
>>>>>>> Stashed changes
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
<<<<<<< Updated upstream
 8003cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cfc:	2312      	movs	r3, #18
 8003cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d00:	2301      	movs	r3, #1
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0c:	f107 031c 	add.w	r3, r7, #28
 8003d10:	4619      	mov	r1, r3
 8003d12:	4823      	ldr	r0, [pc, #140]	; (8003da0 <HAL_I2C_MspInit+0xe4>)
 8003d14:	f001 ff56 	bl	8005bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d18:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d22:	6413      	str	r3, [r2, #64]	; 0x40
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697b      	ldr	r3, [r7, #20]
=======
 800550e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005514:	2312      	movs	r3, #18
 8005516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005518:	2301      	movs	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551c:	2300      	movs	r3, #0
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005520:	2304      	movs	r3, #4
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	f107 031c 	add.w	r3, r7, #28
 8005528:	4619      	mov	r1, r3
 800552a:	4823      	ldr	r0, [pc, #140]	; (80055b8 <HAL_I2C_MspInit+0xe4>)
 800552c:	f001 ff5e 	bl	80073ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005530:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800553a:	6413      	str	r3, [r2, #64]	; 0x40
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8003d30:	e02d      	b.n	8003d8e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_I2C_MspInit+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d128      	bne.n	8003d8e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	6313      	str	r3, [r2, #48]	; 0x30
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003d54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d5a:	2312      	movs	r3, #18
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d62:	2303      	movs	r3, #3
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d66:	2304      	movs	r3, #4
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d6a:	f107 031c 	add.w	r3, r7, #28
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480d      	ldr	r0, [pc, #52]	; (8003da8 <HAL_I2C_MspInit+0xec>)
 8003d72:	f001 ff27 	bl	8005bc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_I2C_MspInit+0xe0>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	3730      	adds	r7, #48	; 0x30
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40005400 	.word	0x40005400
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40005c00 	.word	0x40005c00
 8003da8:	40021c00 	.word	0x40021c00

08003dac <HAL_I2C_MspDeInit>:
=======
 8005548:	e02d      	b.n	80055a6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <HAL_I2C_MspInit+0xe8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d128      	bne.n	80055a6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 800555a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800556c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005572:	2312      	movs	r3, #18
 8005574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005576:	2301      	movs	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557a:	2303      	movs	r3, #3
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800557e:	2304      	movs	r3, #4
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005582:	f107 031c 	add.w	r3, r7, #28
 8005586:	4619      	mov	r1, r3
 8005588:	480d      	ldr	r0, [pc, #52]	; (80055c0 <HAL_I2C_MspInit+0xec>)
 800558a:	f001 ff2f 	bl	80073ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 8005594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <HAL_I2C_MspInit+0xe0>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
}
 80055a6:	bf00      	nop
 80055a8:	3730      	adds	r7, #48	; 0x30
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40005400 	.word	0x40005400
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40005c00 	.word	0x40005c00
 80055c0:	40021c00 	.word	0x40021c00

080055c4 <HAL_I2C_MspDeInit>:
>>>>>>> Stashed changes
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< Updated upstream
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_I2C_MspDeInit+0x64>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d110      	bne.n	8003de0 <HAL_I2C_MspDeInit+0x34>
=======
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <HAL_I2C_MspDeInit+0x64>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d110      	bne.n	80055f8 <HAL_I2C_MspDeInit+0x34>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
<<<<<<< Updated upstream
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003dc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <HAL_I2C_MspDeInit+0x68>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	4a14      	ldr	r2, [pc, #80]	; (800562c <HAL_I2C_MspDeInit+0x68>)
 80055dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055e0:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
<<<<<<< Updated upstream
 8003dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dce:	4812      	ldr	r0, [pc, #72]	; (8003e18 <HAL_I2C_MspDeInit+0x6c>)
 8003dd0:	f002 f8a2 	bl	8005f18 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dd8:	480f      	ldr	r0, [pc, #60]	; (8003e18 <HAL_I2C_MspDeInit+0x6c>)
 8003dda:	f002 f89d 	bl	8005f18 <HAL_GPIO_DeInit>
=======
 80055e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055e6:	4812      	ldr	r0, [pc, #72]	; (8005630 <HAL_I2C_MspDeInit+0x6c>)
 80055e8:	f002 f8aa 	bl	8007740 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80055ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f0:	480f      	ldr	r0, [pc, #60]	; (8005630 <HAL_I2C_MspDeInit+0x6c>)
 80055f2:	f002 f8a5 	bl	8007740 <HAL_GPIO_DeInit>
>>>>>>> Stashed changes
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
<<<<<<< Updated upstream
 8003dde:	e013      	b.n	8003e08 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_I2C_MspDeInit+0x70>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_I2C_MspDeInit+0x68>)
 8003df0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	4809      	ldr	r0, [pc, #36]	; (8003e20 <HAL_I2C_MspDeInit+0x74>)
 8003dfa:	f002 f88d 	bl	8005f18 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e02:	4807      	ldr	r0, [pc, #28]	; (8003e20 <HAL_I2C_MspDeInit+0x74>)
 8003e04:	f002 f888 	bl	8005f18 <HAL_GPIO_DeInit>
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40005400 	.word	0x40005400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40005c00 	.word	0x40005c00
 8003e20:	40021c00 	.word	0x40021c00

08003e24 <HAL_LTDC_MspInit>:
=======
 80055f6:	e013      	b.n	8005620 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <HAL_I2C_MspDeInit+0x70>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10e      	bne.n	8005620 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_I2C_MspDeInit+0x68>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	4a09      	ldr	r2, [pc, #36]	; (800562c <HAL_I2C_MspDeInit+0x68>)
 8005608:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800560c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	4809      	ldr	r0, [pc, #36]	; (8005638 <HAL_I2C_MspDeInit+0x74>)
 8005612:	f002 f895 	bl	8007740 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561a:	4807      	ldr	r0, [pc, #28]	; (8005638 <HAL_I2C_MspDeInit+0x74>)
 800561c:	f002 f890 	bl	8007740 <HAL_GPIO_DeInit>
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40005400 	.word	0x40005400
 800562c:	40023800 	.word	0x40023800
 8005630:	40020400 	.word	0x40020400
 8005634:	40005c00 	.word	0x40005c00
 8005638:	40021c00 	.word	0x40021c00

0800563c <HAL_LTDC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
<<<<<<< Updated upstream
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	; 0x38
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a55      	ldr	r2, [pc, #340]	; (8003f98 <HAL_LTDC_MspInit+0x174>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f040 80a3 	bne.w	8003f8e <HAL_LTDC_MspInit+0x16a>
=======
 800563c:	b580      	push	{r7, lr}
 800563e:	b08e      	sub	sp, #56	; 0x38
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a55      	ldr	r2, [pc, #340]	; (80057b0 <HAL_LTDC_MspInit+0x174>)
 800565a:	4293      	cmp	r3, r2
 800565c:	f040 80a3 	bne.w	80057a6 <HAL_LTDC_MspInit+0x16a>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
<<<<<<< Updated upstream
 8003e48:	4b54      	ldr	r3, [pc, #336]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	4a53      	ldr	r2, [pc, #332]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e52:	6453      	str	r3, [r2, #68]	; 0x44
 8003e54:	4b51      	ldr	r3, [pc, #324]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e60:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a4d      	ldr	r2, [pc, #308]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e66:	f043 0310 	orr.w	r3, r3, #16
 8003e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003e78:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4a47      	ldr	r2, [pc, #284]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9c:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ea8:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4a35      	ldr	r2, [pc, #212]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ecc:	4b33      	ldr	r3, [pc, #204]	; (8003f9c <HAL_LTDC_MspInit+0x178>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
=======
 8005660:	4b54      	ldr	r3, [pc, #336]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	4a53      	ldr	r2, [pc, #332]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 8005666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800566a:	6453      	str	r3, [r2, #68]	; 0x44
 800566c:	4b51      	ldr	r3, [pc, #324]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005678:	4b4e      	ldr	r3, [pc, #312]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	4a4d      	ldr	r2, [pc, #308]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 800567e:	f043 0310 	orr.w	r3, r3, #16
 8005682:	6313      	str	r3, [r2, #48]	; 0x30
 8005684:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005690:	4b48      	ldr	r3, [pc, #288]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4a47      	ldr	r2, [pc, #284]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 8005696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800569a:	6313      	str	r3, [r2, #48]	; 0x30
 800569c:	4b45      	ldr	r3, [pc, #276]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80056a8:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	4a41      	ldr	r2, [pc, #260]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056b2:	6313      	str	r3, [r2, #48]	; 0x30
 80056b4:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056c0:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	4a3b      	ldr	r2, [pc, #236]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ca:	6313      	str	r3, [r2, #48]	; 0x30
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80056d8:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	4a35      	ldr	r2, [pc, #212]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e2:	6313      	str	r3, [r2, #48]	; 0x30
 80056e4:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <HAL_LTDC_MspInit+0x178>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
<<<<<<< Updated upstream
 8003ed8:	2310      	movs	r3, #16
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ee8:	230e      	movs	r3, #14
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	482b      	ldr	r0, [pc, #172]	; (8003fa0 <HAL_LTDC_MspInit+0x17c>)
 8003ef4:	f001 fe66 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003ef8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80056f0:	2310      	movs	r3, #16
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f4:	2302      	movs	r3, #2
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056fc:	2300      	movs	r3, #0
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005700:	230e      	movs	r3, #14
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005708:	4619      	mov	r1, r3
 800570a:	482b      	ldr	r0, [pc, #172]	; (80057b8 <HAL_LTDC_MspInit+0x17c>)
 800570c:	f001 fe6e 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005710:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
<<<<<<< Updated upstream
 8003efe:	2302      	movs	r3, #2
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f06:	2300      	movs	r3, #0
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f0a:	230e      	movs	r3, #14
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f12:	4619      	mov	r1, r3
 8003f14:	4823      	ldr	r0, [pc, #140]	; (8003fa4 <HAL_LTDC_MspInit+0x180>)
 8003f16:	f001 fe55 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003f1a:	23f7      	movs	r3, #247	; 0xf7
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f26:	2300      	movs	r3, #0
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f2a:	230e      	movs	r3, #14
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f32:	4619      	mov	r1, r3
 8003f34:	481c      	ldr	r0, [pc, #112]	; (8003fa8 <HAL_LTDC_MspInit+0x184>)
 8003f36:	f001 fe45 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f40:	2302      	movs	r3, #2
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003f4c:	2309      	movs	r3, #9
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f54:	4619      	mov	r1, r3
 8003f56:	4815      	ldr	r0, [pc, #84]	; (8003fac <HAL_LTDC_MspInit+0x188>)
 8003f58:	f001 fe34 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003f5c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	2302      	movs	r3, #2
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f6e:	230e      	movs	r3, #14
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f76:	4619      	mov	r1, r3
 8003f78:	480d      	ldr	r0, [pc, #52]	; (8003fb0 <HAL_LTDC_MspInit+0x18c>)
 8003f7a:	f001 fe23 	bl	8005bc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2105      	movs	r1, #5
 8003f82:	2058      	movs	r0, #88	; 0x58
 8003f84:	f001 f8bc 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003f88:	2058      	movs	r0, #88	; 0x58
 8003f8a:	f001 f8d5 	bl	8005138 <HAL_NVIC_EnableIRQ>
=======
 8005716:	2302      	movs	r3, #2
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571a:	2300      	movs	r3, #0
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571e:	2300      	movs	r3, #0
 8005720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005722:	230e      	movs	r3, #14
 8005724:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572a:	4619      	mov	r1, r3
 800572c:	4823      	ldr	r0, [pc, #140]	; (80057bc <HAL_LTDC_MspInit+0x180>)
 800572e:	f001 fe5d 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005732:	23f7      	movs	r3, #247	; 0xf7
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005736:	2302      	movs	r3, #2
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573a:	2300      	movs	r3, #0
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573e:	2300      	movs	r3, #0
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005742:	230e      	movs	r3, #14
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574a:	4619      	mov	r1, r3
 800574c:	481c      	ldr	r0, [pc, #112]	; (80057c0 <HAL_LTDC_MspInit+0x184>)
 800574e:	f001 fe4d 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005758:	2302      	movs	r3, #2
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575c:	2300      	movs	r3, #0
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005760:	2300      	movs	r3, #0
 8005762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005764:	2309      	movs	r3, #9
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576c:	4619      	mov	r1, r3
 800576e:	4815      	ldr	r0, [pc, #84]	; (80057c4 <HAL_LTDC_MspInit+0x188>)
 8005770:	f001 fe3c 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005774:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577a:	2302      	movs	r3, #2
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005782:	2300      	movs	r3, #0
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005786:	230e      	movs	r3, #14
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800578a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578e:	4619      	mov	r1, r3
 8005790:	480d      	ldr	r0, [pc, #52]	; (80057c8 <HAL_LTDC_MspInit+0x18c>)
 8005792:	f001 fe2b 	bl	80073ec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8005796:	2200      	movs	r2, #0
 8005798:	2105      	movs	r1, #5
 800579a:	2058      	movs	r0, #88	; 0x58
 800579c:	f001 f8c4 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80057a0:	2058      	movs	r0, #88	; 0x58
 80057a2:	f001 f8dd 	bl	8006960 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8003f8e:	bf00      	nop
 8003f90:	3738      	adds	r7, #56	; 0x38
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40016800 	.word	0x40016800
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40022400 	.word	0x40022400
 8003fa8:	40022800 	.word	0x40022800
 8003fac:	40021800 	.word	0x40021800
 8003fb0:	40022000 	.word	0x40022000

08003fb4 <HAL_RTC_MspInit>:
=======
 80057a6:	bf00      	nop
 80057a8:	3738      	adds	r7, #56	; 0x38
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40016800 	.word	0x40016800
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40022400 	.word	0x40022400
 80057c0:	40022800 	.word	0x40022800
 80057c4:	40021800 	.word	0x40021800
 80057c8:	40022000 	.word	0x40022000

080057cc <HAL_RTC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
<<<<<<< Updated upstream
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <HAL_RTC_MspInit+0x2c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RTC_MspInit+0x1e>
=======
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <HAL_RTC_MspInit+0x2c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d105      	bne.n	80057ea <HAL_RTC_MspInit+0x1e>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
<<<<<<< Updated upstream
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_RTC_MspInit+0x30>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <HAL_RTC_MspInit+0x30>)
 8003fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
=======
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <HAL_RTC_MspInit+0x30>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a06      	ldr	r2, [pc, #24]	; (80057fc <HAL_RTC_MspInit+0x30>)
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
>>>>>>> Stashed changes
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40002800 	.word	0x40002800
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <HAL_SPI_MspInit>:
=======
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40002800 	.word	0x40002800
 80057fc:	40023800 	.word	0x40023800

08005800 <HAL_SPI_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< Updated upstream
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <HAL_SPI_MspInit+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d154      	bne.n	80040b4 <HAL_SPI_MspInit+0xcc>
=======
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <HAL_SPI_MspInit+0xd4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d154      	bne.n	80058cc <HAL_SPI_MspInit+0xcc>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
<<<<<<< Updated upstream
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_SPI_MspInit+0xd8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
=======
 8005822:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582c:	6413      	str	r3, [r2, #64]	; 0x40
 800582e:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800583a:	4b27      	ldr	r3, [pc, #156]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005844:	6313      	str	r3, [r2, #48]	; 0x30
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005852:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <HAL_SPI_MspInit+0xd8>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
<<<<<<< Updated upstream
 8004052:	2302      	movs	r3, #2
 8004054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004056:	2302      	movs	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004062:	2305      	movs	r3, #5
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	4619      	mov	r1, r3
 800406c:	4815      	ldr	r0, [pc, #84]	; (80040c4 <HAL_SPI_MspInit+0xdc>)
 800406e:	f001 fda9 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004082:	2305      	movs	r3, #5
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	480d      	ldr	r0, [pc, #52]	; (80040c4 <HAL_SPI_MspInit+0xdc>)
 800408e:	f001 fd99 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a0:	2303      	movs	r3, #3
 80040a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040a4:	2305      	movs	r3, #5
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	4619      	mov	r1, r3
 80040ae:	4806      	ldr	r0, [pc, #24]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 80040b0:	f001 fd88 	bl	8005bc4 <HAL_GPIO_Init>
=======
 800586a:	2302      	movs	r3, #2
 800586c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586e:	2302      	movs	r3, #2
 8005870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005876:	2300      	movs	r3, #0
 8005878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800587a:	2305      	movs	r3, #5
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800587e:	f107 0314 	add.w	r3, r7, #20
 8005882:	4619      	mov	r1, r3
 8005884:	4815      	ldr	r0, [pc, #84]	; (80058dc <HAL_SPI_MspInit+0xdc>)
 8005886:	f001 fdb1 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800588a:	2301      	movs	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588e:	2302      	movs	r3, #2
 8005890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005896:	2303      	movs	r3, #3
 8005898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800589a:	2305      	movs	r3, #5
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	4619      	mov	r1, r3
 80058a4:	480d      	ldr	r0, [pc, #52]	; (80058dc <HAL_SPI_MspInit+0xdc>)
 80058a6:	f001 fda1 	bl	80073ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80058aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80058ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b8:	2303      	movs	r3, #3
 80058ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058bc:	2305      	movs	r3, #5
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	4619      	mov	r1, r3
 80058c6:	4806      	ldr	r0, [pc, #24]	; (80058e0 <HAL_SPI_MspInit+0xe0>)
 80058c8:	f001 fd90 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 80040b4:	bf00      	nop
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40003800 	.word	0x40003800
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40022000 	.word	0x40022000
 80040c8:	40020400 	.word	0x40020400

080040cc <HAL_TIM_Base_MspInit>:
=======
 80058cc:	bf00      	nop
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40003800 	.word	0x40003800
 80058d8:	40023800 	.word	0x40023800
 80058dc:	40022000 	.word	0x40022000
 80058e0:	40020400 	.word	0x40020400

080058e4 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	; (8004194 <HAL_TIM_Base_MspInit+0xc8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x2c>
=======
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	; 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <HAL_TIM_Base_MspInit+0xc8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10c      	bne.n	8005910 <HAL_TIM_Base_MspInit+0x2c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a2d      	ldr	r2, [pc, #180]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
=======
 80058f6:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	4a2d      	ldr	r2, [pc, #180]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6453      	str	r3, [r2, #68]	; 0x44
 8005902:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 80040f6:	e046      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d10c      	bne.n	800411c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a24      	ldr	r2, [pc, #144]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	69bb      	ldr	r3, [r7, #24]
}
 800411a:	e034      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1e      	ldr	r2, [pc, #120]	; (800419c <HAL_TIM_Base_MspInit+0xd0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
}
 800413e:	e022      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_TIM_Base_MspInit+0xd4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10c      	bne.n	8004164 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	693b      	ldr	r3, [r7, #16]
}
 8004162:	e010      	b.n	8004186 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <HAL_TIM_Base_MspInit+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10b      	bne.n	8004186 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6453      	str	r3, [r2, #68]	; 0x44
 800417a:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_TIM_Base_MspInit+0xcc>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40023800 	.word	0x40023800
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40010400 	.word	0x40010400

080041a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_TIM_MspPostInit+0xa8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d11c      	bne.n	8004204 <HAL_TIM_MspPostInit+0x5c>
=======
 800590e:	e046      	b.n	800599e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d10c      	bne.n	8005934 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800591a:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6413      	str	r3, [r2, #64]	; 0x40
 8005926:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	69bb      	ldr	r3, [r7, #24]
}
 8005932:	e034      	b.n	800599e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <HAL_TIM_Base_MspInit+0xd0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800593e:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	6413      	str	r3, [r2, #64]	; 0x40
 800594a:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697b      	ldr	r3, [r7, #20]
}
 8005956:	e022      	b.n	800599e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <HAL_TIM_Base_MspInit+0xd4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005962:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005968:	f043 0308 	orr.w	r3, r3, #8
 800596c:	6413      	str	r3, [r2, #64]	; 0x40
 800596e:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]
}
 800597a:	e010      	b.n	800599e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0e      	ldr	r2, [pc, #56]	; (80059bc <HAL_TIM_Base_MspInit+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10b      	bne.n	800599e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 800598c:	f043 0302 	orr.w	r3, r3, #2
 8005990:	6453      	str	r3, [r2, #68]	; 0x44
 8005992:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <HAL_TIM_Base_MspInit+0xcc>)
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
}
 800599e:	bf00      	nop
 80059a0:	3724      	adds	r7, #36	; 0x24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40010400 	.word	0x40010400

080059c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08a      	sub	sp, #40	; 0x28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c8:	f107 0314 	add.w	r3, r7, #20
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	609a      	str	r2, [r3, #8]
 80059d4:	60da      	str	r2, [r3, #12]
 80059d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_TIM_MspPostInit+0xa8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d11c      	bne.n	8005a1c <HAL_TIM_MspPostInit+0x5c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< Updated upstream
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a21      	ldr	r2, [pc, #132]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
=======
 80059e2:	4b22      	ldr	r3, [pc, #136]	; (8005a6c <HAL_TIM_MspPostInit+0xac>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_TIM_MspPostInit+0xac>)
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6313      	str	r3, [r2, #48]	; 0x30
 80059ee:	4b1f      	ldr	r3, [pc, #124]	; (8005a6c <HAL_TIM_MspPostInit+0xac>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< Updated upstream
 80041e2:	2310      	movs	r3, #16
 80041e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e6:	2302      	movs	r3, #2
 80041e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041f2:	2302      	movs	r3, #2
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4619      	mov	r1, r3
 80041fc:	4816      	ldr	r0, [pc, #88]	; (8004258 <HAL_TIM_MspPostInit+0xb0>)
 80041fe:	f001 fce1 	bl	8005bc4 <HAL_GPIO_Init>
=======
 80059fa:	2310      	movs	r3, #16
 80059fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fe:	2302      	movs	r3, #2
 8005a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a06:	2300      	movs	r3, #0
 8005a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	4619      	mov	r1, r3
 8005a14:	4816      	ldr	r0, [pc, #88]	; (8005a70 <HAL_TIM_MspPostInit+0xb0>)
 8005a16:	f001 fce9 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8004202:	e020      	b.n	8004246 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <HAL_TIM_MspPostInit+0xb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d11b      	bne.n	8004246 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a10      	ldr	r2, [pc, #64]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_TIM_MspPostInit+0xac>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004226:	2304      	movs	r3, #4
 8004228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004236:	2303      	movs	r3, #3
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800423a:	f107 0314 	add.w	r3, r7, #20
 800423e:	4619      	mov	r1, r3
 8004240:	4807      	ldr	r0, [pc, #28]	; (8004260 <HAL_TIM_MspPostInit+0xb8>)
 8004242:	f001 fcbf 	bl	8005bc4 <HAL_GPIO_Init>
}
 8004246:	bf00      	nop
 8004248:	3728      	adds	r7, #40	; 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40000400 	.word	0x40000400
 8004254:	40023800 	.word	0x40023800
 8004258:	40020400 	.word	0x40020400
 800425c:	40010400 	.word	0x40010400
 8004260:	40022000 	.word	0x40022000

08004264 <HAL_UART_MspInit>:
=======
 8005a1a:	e020      	b.n	8005a5e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a14      	ldr	r2, [pc, #80]	; (8005a74 <HAL_TIM_MspPostInit+0xb4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d11b      	bne.n	8005a5e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005a26:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_TIM_MspPostInit+0xac>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <HAL_TIM_MspPostInit+0xac>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6313      	str	r3, [r2, #48]	; 0x30
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <HAL_TIM_MspPostInit+0xac>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005a3e:	2304      	movs	r3, #4
 8005a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a42:	2302      	movs	r3, #2
 8005a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005a52:	f107 0314 	add.w	r3, r7, #20
 8005a56:	4619      	mov	r1, r3
 8005a58:	4807      	ldr	r0, [pc, #28]	; (8005a78 <HAL_TIM_MspPostInit+0xb8>)
 8005a5a:	f001 fcc7 	bl	80073ec <HAL_GPIO_Init>
}
 8005a5e:	bf00      	nop
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40020400 	.word	0x40020400
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40022000 	.word	0x40022000

08005a7c <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	; 0x38
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	60da      	str	r2, [r3, #12]
 800427a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <HAL_UART_MspInit+0x17c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d128      	bne.n	80042d8 <HAL_UART_MspInit+0x74>
=======
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	; 0x38
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a57      	ldr	r2, [pc, #348]	; (8005bf8 <HAL_UART_MspInit+0x17c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d128      	bne.n	8005af0 <HAL_UART_MspInit+0x74>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
<<<<<<< Updated upstream
 8004286:	4b57      	ldr	r3, [pc, #348]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_UART_MspInit+0x180>)
 800428c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	4b54      	ldr	r3, [pc, #336]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800429e:	4b51      	ldr	r3, [pc, #324]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	4a50      	ldr	r2, [pc, #320]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042a4:	f043 0320 	orr.w	r3, r3, #32
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	69fb      	ldr	r3, [r7, #28]
=======
 8005a9e:	4b57      	ldr	r3, [pc, #348]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4a56      	ldr	r2, [pc, #344]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aaa:	4b54      	ldr	r3, [pc, #336]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ab2:	623b      	str	r3, [r7, #32]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ab6:	4b51      	ldr	r3, [pc, #324]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	4a50      	ldr	r2, [pc, #320]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005abc:	f043 0320 	orr.w	r3, r3, #32
 8005ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac2:	4b4e      	ldr	r3, [pc, #312]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
<<<<<<< Updated upstream
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80042c6:	2308      	movs	r3, #8
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ce:	4619      	mov	r1, r3
 80042d0:	4845      	ldr	r0, [pc, #276]	; (80043e8 <HAL_UART_MspInit+0x184>)
 80042d2:	f001 fc77 	bl	8005bc4 <HAL_GPIO_Init>
=======
 8005ace:	23c0      	movs	r3, #192	; 0xc0
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2303      	movs	r3, #3
 8005adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005ade:	2308      	movs	r3, #8
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4845      	ldr	r0, [pc, #276]	; (8005c00 <HAL_UART_MspInit+0x184>)
 8005aea:	f001 fc7f 	bl	80073ec <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 80042d6:	e07f      	b.n	80043d8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a43      	ldr	r2, [pc, #268]	; (80043ec <HAL_UART_MspInit+0x188>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d14d      	bne.n	800437e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	4a3f      	ldr	r2, [pc, #252]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042e8:	f043 0310 	orr.w	r3, r3, #16
 80042ec:	6453      	str	r3, [r2, #68]	; 0x44
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004300:	f043 0302 	orr.w	r3, r3, #2
 8004304:	6313      	str	r3, [r2, #48]	; 0x30
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432e:	2302      	movs	r3, #2
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004332:	2300      	movs	r3, #0
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004336:	2300      	movs	r3, #0
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800433a:	2307      	movs	r3, #7
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800433e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004342:	4619      	mov	r1, r3
 8004344:	482a      	ldr	r0, [pc, #168]	; (80043f0 <HAL_UART_MspInit+0x18c>)
 8004346:	f001 fc3d 	bl	8005bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800434a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800435c:	2307      	movs	r3, #7
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004364:	4619      	mov	r1, r3
 8004366:	4823      	ldr	r0, [pc, #140]	; (80043f4 <HAL_UART_MspInit+0x190>)
 8004368:	f001 fc2c 	bl	8005bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2105      	movs	r1, #5
 8004370:	2025      	movs	r0, #37	; 0x25
 8004372:	f000 fec5 	bl	8005100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004376:	2025      	movs	r0, #37	; 0x25
 8004378:	f000 fede 	bl	8005138 <HAL_NVIC_EnableIRQ>
}
 800437c:	e02c      	b.n	80043d8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_UART_MspInit+0x194>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d127      	bne.n	80043d8 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004388:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_UART_MspInit+0x180>)
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_UART_MspInit+0x180>)
 800438e:	f043 0320 	orr.w	r3, r3, #32
 8004392:	6453      	str	r3, [r2, #68]	; 0x44
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <HAL_UART_MspInit+0x180>)
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a0:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	4a0f      	ldr	r2, [pc, #60]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6313      	str	r3, [r2, #48]	; 0x30
 80043ac:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <HAL_UART_MspInit+0x180>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80043b8:	23c0      	movs	r3, #192	; 0xc0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043bc:	2302      	movs	r3, #2
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c4:	2303      	movs	r3, #3
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043c8:	2308      	movs	r3, #8
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d0:	4619      	mov	r1, r3
 80043d2:	480a      	ldr	r0, [pc, #40]	; (80043fc <HAL_UART_MspInit+0x198>)
 80043d4:	f001 fbf6 	bl	8005bc4 <HAL_GPIO_Init>
}
 80043d8:	bf00      	nop
 80043da:	3738      	adds	r7, #56	; 0x38
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40007800 	.word	0x40007800
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40021400 	.word	0x40021400
 80043ec:	40011000 	.word	0x40011000
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020000 	.word	0x40020000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	40020800 	.word	0x40020800

08004400 <HAL_FMC_MspInit>:
=======
 8005aee:	e07f      	b.n	8005bf0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a43      	ldr	r2, [pc, #268]	; (8005c04 <HAL_UART_MspInit+0x188>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d14d      	bne.n	8005b96 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005afa:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	4a3f      	ldr	r2, [pc, #252]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b00:	f043 0310 	orr.w	r3, r3, #16
 8005b04:	6453      	str	r3, [r2, #68]	; 0x44
 8005b06:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b12:	4b3a      	ldr	r3, [pc, #232]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	4a39      	ldr	r2, [pc, #228]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b18:	f043 0302 	orr.w	r3, r3, #2
 8005b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1e:	4b37      	ldr	r3, [pc, #220]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2a:	4b34      	ldr	r3, [pc, #208]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	4a33      	ldr	r2, [pc, #204]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	6313      	str	r3, [r2, #48]	; 0x30
 8005b36:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005b42:	2380      	movs	r3, #128	; 0x80
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b46:	2302      	movs	r3, #2
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b52:	2307      	movs	r3, #7
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	482a      	ldr	r0, [pc, #168]	; (8005c08 <HAL_UART_MspInit+0x18c>)
 8005b5e:	f001 fc45 	bl	80073ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b70:	2300      	movs	r3, #0
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b74:	2307      	movs	r3, #7
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4823      	ldr	r0, [pc, #140]	; (8005c0c <HAL_UART_MspInit+0x190>)
 8005b80:	f001 fc34 	bl	80073ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b84:	2200      	movs	r2, #0
 8005b86:	2105      	movs	r1, #5
 8005b88:	2025      	movs	r0, #37	; 0x25
 8005b8a:	f000 fecd 	bl	8006928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b8e:	2025      	movs	r0, #37	; 0x25
 8005b90:	f000 fee6 	bl	8006960 <HAL_NVIC_EnableIRQ>
}
 8005b94:	e02c      	b.n	8005bf0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_UART_MspInit+0x194>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d127      	bne.n	8005bf0 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005ba6:	f043 0320 	orr.w	r3, r3, #32
 8005baa:	6453      	str	r3, [r2, #68]	; 0x44
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	4a0f      	ldr	r2, [pc, #60]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005bbe:	f043 0304 	orr.w	r3, r3, #4
 8005bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <HAL_UART_MspInit+0x180>)
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005bd0:	23c0      	movs	r3, #192	; 0xc0
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005be0:	2308      	movs	r3, #8
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be8:	4619      	mov	r1, r3
 8005bea:	480a      	ldr	r0, [pc, #40]	; (8005c14 <HAL_UART_MspInit+0x198>)
 8005bec:	f001 fbfe 	bl	80073ec <HAL_GPIO_Init>
}
 8005bf0:	bf00      	nop
 8005bf2:	3738      	adds	r7, #56	; 0x38
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40007800 	.word	0x40007800
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	40021400 	.word	0x40021400
 8005c04:	40011000 	.word	0x40011000
 8005c08:	40020400 	.word	0x40020400
 8005c0c:	40020000 	.word	0x40020000
 8005c10:	40011400 	.word	0x40011400
 8005c14:	40020800 	.word	0x40020800

08005c18 <HAL_FMC_MspInit>:
>>>>>>> Stashed changes

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
<<<<<<< Updated upstream
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
=======
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
<<<<<<< Updated upstream
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_FMC_MspInit+0x100>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d16d      	bne.n	80044f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800441c:	4b38      	ldr	r3, [pc, #224]	; (8004500 <HAL_FMC_MspInit+0x100>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <HAL_FMC_MspInit+0x104>)
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	4a37      	ldr	r2, [pc, #220]	; (8004504 <HAL_FMC_MspInit+0x104>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6393      	str	r3, [r2, #56]	; 0x38
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_FMC_MspInit+0x104>)
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
=======
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005c2c:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_FMC_MspInit+0x100>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d16d      	bne.n	8005d10 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005c34:	4b38      	ldr	r3, [pc, #224]	; (8005d18 <HAL_FMC_MspInit+0x100>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c3a:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <HAL_FMC_MspInit+0x104>)
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <HAL_FMC_MspInit+0x104>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6393      	str	r3, [r2, #56]	; 0x38
 8005c46:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <HAL_FMC_MspInit+0x104>)
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
<<<<<<< Updated upstream
 800443a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800443e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004440:	2302      	movs	r3, #2
 8004442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004448:	2303      	movs	r3, #3
 800444a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800444c:	230c      	movs	r3, #12
 800444e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	4619      	mov	r1, r3
 8004454:	482c      	ldr	r0, [pc, #176]	; (8004508 <HAL_FMC_MspInit+0x108>)
 8004456:	f001 fbb5 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800445a:	f248 1333 	movw	r3, #33075	; 0x8133
 800445e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004460:	2302      	movs	r3, #2
 8004462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004468:	2303      	movs	r3, #3
 800446a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800446c:	230c      	movs	r3, #12
 800446e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4825      	ldr	r0, [pc, #148]	; (800450c <HAL_FMC_MspInit+0x10c>)
 8004476:	f001 fba5 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800447a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800447e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004480:	2302      	movs	r3, #2
 8004482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004488:	2303      	movs	r3, #3
 800448a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800448c:	230c      	movs	r3, #12
 800448e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	4619      	mov	r1, r3
 8004494:	481e      	ldr	r0, [pc, #120]	; (8004510 <HAL_FMC_MspInit+0x110>)
 8004496:	f001 fb95 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800449a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800449e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044ac:	230c      	movs	r3, #12
 80044ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	4817      	ldr	r0, [pc, #92]	; (8004514 <HAL_FMC_MspInit+0x114>)
 80044b6:	f001 fb85 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80044ba:	2328      	movs	r3, #40	; 0x28
 80044bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c6:	2303      	movs	r3, #3
 80044c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044ca:	230c      	movs	r3, #12
 80044cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4811      	ldr	r0, [pc, #68]	; (8004518 <HAL_FMC_MspInit+0x118>)
 80044d4:	f001 fb76 	bl	8005bc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044d8:	2308      	movs	r3, #8
 80044da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e4:	2303      	movs	r3, #3
 80044e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044e8:	230c      	movs	r3, #12
 80044ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	480a      	ldr	r0, [pc, #40]	; (800451c <HAL_FMC_MspInit+0x11c>)
 80044f2:	f001 fb67 	bl	8005bc4 <HAL_GPIO_Init>
 80044f6:	e000      	b.n	80044fa <HAL_FMC_MspInit+0xfa>
    return;
 80044f8:	bf00      	nop
=======
 8005c52:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005c56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c60:	2303      	movs	r3, #3
 8005c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c64:	230c      	movs	r3, #12
 8005c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	482c      	ldr	r0, [pc, #176]	; (8005d20 <HAL_FMC_MspInit+0x108>)
 8005c6e:	f001 fbbd 	bl	80073ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8005c72:	f248 1333 	movw	r3, #33075	; 0x8133
 8005c76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c80:	2303      	movs	r3, #3
 8005c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005c84:	230c      	movs	r3, #12
 8005c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4825      	ldr	r0, [pc, #148]	; (8005d24 <HAL_FMC_MspInit+0x10c>)
 8005c8e:	f001 fbad 	bl	80073ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8005c92:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005c96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ca8:	1d3b      	adds	r3, r7, #4
 8005caa:	4619      	mov	r1, r3
 8005cac:	481e      	ldr	r0, [pc, #120]	; (8005d28 <HAL_FMC_MspInit+0x110>)
 8005cae:	f001 fb9d 	bl	80073ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005cb2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005cb6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4817      	ldr	r0, [pc, #92]	; (8005d2c <HAL_FMC_MspInit+0x114>)
 8005cce:	f001 fb8d 	bl	80073ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8005cd2:	2328      	movs	r3, #40	; 0x28
 8005cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4811      	ldr	r0, [pc, #68]	; (8005d30 <HAL_FMC_MspInit+0x118>)
 8005cec:	f001 fb7e 	bl	80073ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005d00:	230c      	movs	r3, #12
 8005d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	480a      	ldr	r0, [pc, #40]	; (8005d34 <HAL_FMC_MspInit+0x11c>)
 8005d0a:	f001 fb6f 	bl	80073ec <HAL_GPIO_Init>
 8005d0e:	e000      	b.n	8005d12 <HAL_FMC_MspInit+0xfa>
    return;
 8005d10:	bf00      	nop
>>>>>>> Stashed changes

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
<<<<<<< Updated upstream
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000568 	.word	0x20000568
 8004504:	40023800 	.word	0x40023800
 8004508:	40021000 	.word	0x40021000
 800450c:	40021800 	.word	0x40021800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021400 	.word	0x40021400
 8004518:	40021c00 	.word	0x40021c00
 800451c:	40020800 	.word	0x40020800

08004520 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
=======
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20001590 	.word	0x20001590
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40021000 	.word	0x40021000
 8005d24:	40021800 	.word	0x40021800
 8005d28:	40020c00 	.word	0x40020c00
 8005d2c:	40021400 	.word	0x40021400
 8005d30:	40021c00 	.word	0x40021c00
 8005d34:	40020800 	.word	0x40020800

08005d38 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
<<<<<<< Updated upstream
 8004528:	f7ff ff6a 	bl	8004400 <HAL_FMC_MspInit>
=======
 8005d40:	f7ff ff6a 	bl	8005c18 <HAL_FMC_MspInit>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
<<<<<<< Updated upstream
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_InitTick>:
=======
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_InitTick>:
>>>>>>> Stashed changes
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004544:	2200      	movs	r2, #0
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	2036      	movs	r0, #54	; 0x36
 800454a:	f000 fdd9 	bl	8005100 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800454e:	2036      	movs	r0, #54	; 0x36
 8004550:	f000 fdf2 	bl	8005138 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004554:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <HAL_InitTick+0xa0>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <HAL_InitTick+0xa0>)
 800455a:	f043 0310 	orr.w	r3, r3, #16
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
 8004560:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <HAL_InitTick+0xa0>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800456c:	f107 0210 	add.w	r2, r7, #16
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f003 fc3e 	bl	8007df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800457c:	f003 fc14 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 8004580:	4603      	mov	r3, r0
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <HAL_InitTick+0xa4>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	0c9b      	lsrs	r3, r3, #18
 8004590:	3b01      	subs	r3, #1
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_InitTick+0xa8>)
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <HAL_InitTick+0xac>)
 8004598:	601a      	str	r2, [r3, #0]
=======
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	; 0x30
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	2036      	movs	r0, #54	; 0x36
 8005d62:	f000 fde1 	bl	8006928 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d66:	2036      	movs	r0, #54	; 0x36
 8005d68:	f000 fdfa 	bl	8006960 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005d6c:	4b1f      	ldr	r3, [pc, #124]	; (8005dec <HAL_InitTick+0xa0>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <HAL_InitTick+0xa0>)
 8005d72:	f043 0310 	orr.w	r3, r3, #16
 8005d76:	6413      	str	r3, [r2, #64]	; 0x40
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <HAL_InitTick+0xa0>)
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d84:	f107 0210 	add.w	r2, r7, #16
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f003 fc28 	bl	80095e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005d94:	f003 fbfe 	bl	8009594 <HAL_RCC_GetPCLK1Freq>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <HAL_InitTick+0xa4>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0c9b      	lsrs	r3, r3, #18
 8005da8:	3b01      	subs	r3, #1
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005dac:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <HAL_InitTick+0xa8>)
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <HAL_InitTick+0xac>)
 8005db0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< Updated upstream
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <HAL_InitTick+0xa8>)
 800459c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80045a2:	4a0e      	ldr	r2, [pc, #56]	; (80045dc <HAL_InitTick+0xa8>)
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_InitTick+0xa8>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_InitTick+0xa8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80045b4:	4809      	ldr	r0, [pc, #36]	; (80045dc <HAL_InitTick+0xa8>)
 80045b6:	f004 fd12 	bl	8008fde <HAL_TIM_Base_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80045c0:	4806      	ldr	r0, [pc, #24]	; (80045dc <HAL_InitTick+0xa8>)
 80045c2:	f004 fd37 	bl	8009034 <HAL_TIM_Base_Start_IT>
 80045c6:	4603      	mov	r3, r0
 80045c8:	e000      	b.n	80045cc <HAL_InitTick+0x98>
=======
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <HAL_InitTick+0xa8>)
 8005db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005db8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005dba:	4a0e      	ldr	r2, [pc, #56]	; (8005df4 <HAL_InitTick+0xa8>)
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <HAL_InitTick+0xa8>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_InitTick+0xa8>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005dcc:	4809      	ldr	r0, [pc, #36]	; (8005df4 <HAL_InitTick+0xa8>)
 8005dce:	f004 fcfc 	bl	800a7ca <HAL_TIM_Base_Init>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005dd8:	4806      	ldr	r0, [pc, #24]	; (8005df4 <HAL_InitTick+0xa8>)
 8005dda:	f004 fd21 	bl	800a820 <HAL_TIM_Base_Start_IT>
 8005dde:	4603      	mov	r3, r0
 8005de0:	e000      	b.n	8005de4 <HAL_InitTick+0x98>
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< Updated upstream
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3730      	adds	r7, #48	; 0x30
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	431bde83 	.word	0x431bde83
 80045dc:	20008d58 	.word	0x20008d58
 80045e0:	40001000 	.word	0x40001000

080045e4 <NMI_Handler>:
=======
 8005de2:	2301      	movs	r3, #1
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3730      	adds	r7, #48	; 0x30
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40023800 	.word	0x40023800
 8005df0:	431bde83 	.word	0x431bde83
 8005df4:	20009d8c 	.word	0x20009d8c
 8005df8:	40001000 	.word	0x40001000

08005dfc <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
=======
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 80045e8:	e7fe      	b.n	80045e8 <NMI_Handler+0x4>

080045ea <HardFault_Handler>:
=======
 8005e00:	e7fe      	b.n	8005e00 <NMI_Handler+0x4>

08005e02 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
=======
 8005e02:	b480      	push	{r7}
 8005e04:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80045ee:	e7fe      	b.n	80045ee <HardFault_Handler+0x4>

080045f0 <MemManage_Handler>:
=======
 8005e06:	e7fe      	b.n	8005e06 <HardFault_Handler+0x4>

08005e08 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
=======
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80045f4:	e7fe      	b.n	80045f4 <MemManage_Handler+0x4>

080045f6 <BusFault_Handler>:
=======
 8005e0c:	e7fe      	b.n	8005e0c <MemManage_Handler+0x4>

08005e0e <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
=======
 8005e0e:	b480      	push	{r7}
 8005e10:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 80045fa:	e7fe      	b.n	80045fa <BusFault_Handler+0x4>

080045fc <UsageFault_Handler>:
=======
 8005e12:	e7fe      	b.n	8005e12 <BusFault_Handler+0x4>

08005e14 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
=======
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8004600:	e7fe      	b.n	8004600 <UsageFault_Handler+0x4>

08004602 <DebugMon_Handler>:
=======
 8005e18:	e7fe      	b.n	8005e18 <UsageFault_Handler+0x4>

08005e1a <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
=======
 8005e1a:	b480      	push	{r7}
 8005e1c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USART1_IRQHandler>:
=======
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005e2c:	2080      	movs	r0, #128	; 0x80
 8005e2e:	f001 fdc3 	bl	80079b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <USART1_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< Updated upstream
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
=======
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< Updated upstream
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <USART1_IRQHandler+0x10>)
 8004616:	f005 ff93 	bl	800a540 <HAL_UART_IRQHandler>
=======
 8005e3c:	4802      	ldr	r0, [pc, #8]	; (8005e48 <USART1_IRQHandler+0x10>)
 8005e3e:	f005 fee3 	bl	800bc08 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< Updated upstream
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20008a44 	.word	0x20008a44

08004624 <TIM6_DAC_IRQHandler>:
=======
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20009a70 	.word	0x20009a70

08005e4c <TIM6_DAC_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< Updated upstream
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
=======
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
<<<<<<< Updated upstream
 8004628:	4803      	ldr	r0, [pc, #12]	; (8004638 <TIM6_DAC_IRQHandler+0x14>)
 800462a:	f000 fdb5 	bl	8005198 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800462e:	4803      	ldr	r0, [pc, #12]	; (800463c <TIM6_DAC_IRQHandler+0x18>)
 8004630:	f004 fd5f 	bl	80090f2 <HAL_TIM_IRQHandler>
=======
 8005e50:	4803      	ldr	r0, [pc, #12]	; (8005e60 <TIM6_DAC_IRQHandler+0x14>)
 8005e52:	f000 fdb5 	bl	80069c0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8005e56:	4803      	ldr	r0, [pc, #12]	; (8005e64 <TIM6_DAC_IRQHandler+0x18>)
 8005e58:	f004 fd41 	bl	800a8de <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< Updated upstream
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20008ac4 	.word	0x20008ac4
 800463c:	20008d58 	.word	0x20008d58

08004640 <LTDC_IRQHandler>:
=======
 8005e5c:	bf00      	nop
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20009af0 	.word	0x20009af0
 8005e64:	20009d8c 	.word	0x20009d8c

08005e68 <LTDC_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
<<<<<<< Updated upstream
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
=======
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
<<<<<<< Updated upstream
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <LTDC_IRQHandler+0x10>)
 8004646:	f002 fc23 	bl	8006e90 <HAL_LTDC_IRQHandler>
=======
 8005e6c:	4802      	ldr	r0, [pc, #8]	; (8005e78 <LTDC_IRQHandler+0x10>)
 8005e6e:	f002 fc3b 	bl	80086e8 <HAL_LTDC_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
<<<<<<< Updated upstream
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000890c 	.word	0x2000890c

08004654 <_sbrk>:
=======
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20009938 	.word	0x20009938

08005e7c <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
=======
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <_sbrk+0x5c>)
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <_sbrk+0x60>)
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
=======
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <_sbrk+0x5c>)
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <_sbrk+0x60>)
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <_sbrk+0x64>)
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <_sbrk+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
=======
 8005e90:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <_sbrk+0x64>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <_sbrk+0x64>)
 8005e9a:	4a12      	ldr	r2, [pc, #72]	; (8005ee4 <_sbrk+0x68>)
 8005e9c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <_sbrk+0x64>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d207      	bcs.n	8004694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004684:	f009 f8fe 	bl	800d884 <__errno>
 8004688:	4602      	mov	r2, r0
 800468a:	230c      	movs	r3, #12
 800468c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e009      	b.n	80046a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <_sbrk+0x64>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <_sbrk+0x64>)
 80046a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20050000 	.word	0x20050000
 80046b4:	00000400 	.word	0x00000400
 80046b8:	2000056c 	.word	0x2000056c
 80046bc:	20008da0 	.word	0x20008da0

080046c0 <SystemInit>:
=======
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <_sbrk+0x64>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d207      	bcs.n	8005ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005eac:	f009 f9a2 	bl	800f1f4 <__errno>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	e009      	b.n	8005ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ebc:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <_sbrk+0x64>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <_sbrk+0x64>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <_sbrk+0x64>)
 8005ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ece:	68fb      	ldr	r3, [r7, #12]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20050000 	.word	0x20050000
 8005edc:	00000400 	.word	0x00000400
 8005ee0:	20001594 	.word	0x20001594
 8005ee4:	20009dd8 	.word	0x20009dd8

08005ee8 <SystemInit>:
>>>>>>> Stashed changes
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <SystemInit+0x28>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <SystemInit+0x28>)
 80046cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005eec:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <SystemInit+0x28>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <SystemInit+0x28>)
 8005ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< Updated upstream
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <SystemInit+0x28>)
 80046d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046da:	609a      	str	r2, [r3, #8]
#endif
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <Reset_Handler>:
=======
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <SystemInit+0x28>)
 8005efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f02:	609a      	str	r2, [r3, #8]
#endif
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000ed00 	.word	0xe000ed00

08005f14 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< Updated upstream
 80046ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004724 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046f2:	e003      	b.n	80046fc <LoopCopyDataInit>

080046f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046fa:	3104      	adds	r1, #4

080046fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004700:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004702:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004704:	d3f6      	bcc.n	80046f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004706:	4a0b      	ldr	r2, [pc, #44]	; (8004734 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004708:	e002      	b.n	8004710 <LoopFillZerobss>

0800470a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800470a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800470c:	f842 3b04 	str.w	r3, [r2], #4

08004710 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004712:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004714:	d3f9      	bcc.n	800470a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004716:	f7ff ffd3 	bl	80046c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800471a:	f009 f8b9 	bl	800d890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800471e:	f7fc fa1d 	bl	8000b5c <main>
  bx  lr    
 8004722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004724:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004728:	0800fcec 	.word	0x0800fcec
  ldr  r0, =_sdata
 800472c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004730:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8004734:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8004738:	20008da0 	.word	0x20008da0

0800473c <ADC_IRQHandler>:
=======
 8005f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f1a:	e003      	b.n	8005f24 <LoopCopyDataInit>

08005f1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f22:	3104      	adds	r1, #4

08005f24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f24:	480b      	ldr	r0, [pc, #44]	; (8005f54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f2c:	d3f6      	bcc.n	8005f1c <CopyDataInit>
  ldr  r2, =_sbss
 8005f2e:	4a0b      	ldr	r2, [pc, #44]	; (8005f5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f30:	e002      	b.n	8005f38 <LoopFillZerobss>

08005f32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f34:	f842 3b04 	str.w	r3, [r2], #4

08005f38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f38:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f3c:	d3f9      	bcc.n	8005f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f3e:	f7ff ffd3 	bl	8005ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f42:	f009 f95d 	bl	800f200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f46:	f7fa fe09 	bl	8000b5c <main>
  bx  lr    
 8005f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f4c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005f50:	08011bf8 	.word	0x08011bf8
  ldr  r0, =_sdata
 8005f54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f58:	200010a4 	.word	0x200010a4
  ldr  r2, =_sbss
 8005f5c:	200010a4 	.word	0x200010a4
  ldr  r3, = _ebss
 8005f60:	20009dd4 	.word	0x20009dd4

08005f64 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 800473c:	e7fe      	b.n	800473c <ADC_IRQHandler>

0800473e <HAL_Init>:
=======
 8005f64:	e7fe      	b.n	8005f64 <ADC_IRQHandler>

08005f66 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 800473e:	b580      	push	{r7, lr}
 8004740:	af00      	add	r7, sp, #0
=======
 8005f66:	b580      	push	{r7, lr}
 8005f68:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8004742:	2003      	movs	r0, #3
 8004744:	f000 fcd1 	bl	80050ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004748:	2000      	movs	r0, #0
 800474a:	f7ff fef3 	bl	8004534 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800474e:	f7ff f9b7 	bl	8003ac0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_IncTick>:
=======
 8005f6a:	2003      	movs	r0, #3
 8005f6c:	f000 fcd1 	bl	8006912 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f70:	2000      	movs	r0, #0
 8005f72:	f7ff feeb 	bl	8005d4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005f76:	f7ff f9af 	bl	80052d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_IncTick+0x20>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_IncTick+0x24>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4413      	add	r3, r2
 8004768:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_IncTick+0x24>)
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	2000003c 	.word	0x2000003c
 800477c:	20008d98 	.word	0x20008d98

08004780 <HAL_GetTick>:
=======
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_IncTick+0x20>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_IncTick+0x24>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <HAL_IncTick+0x24>)
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20001038 	.word	0x20001038
 8005fa4:	20009dcc 	.word	0x20009dcc

08005fa8 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return uwTick;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_GetTick+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20008d98 	.word	0x20008d98

08004798 <HAL_Delay>:
=======
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return uwTick;
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <HAL_GetTick+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20009dcc 	.word	0x20009dcc

08005fc0 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a0:	f7ff ffee 	bl	8004780 <HAL_GetTick>
 80047a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d005      	beq.n	80047be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_Delay+0x40>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047be:	bf00      	nop
 80047c0:	f7ff ffde 	bl	8004780 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d8f7      	bhi.n	80047c0 <HAL_Delay+0x28>
  {
  }
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	2000003c 	.word	0x2000003c

080047dc <HAL_ADC_Init>:
=======
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fc8:	f7ff ffee 	bl	8005fa8 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d005      	beq.n	8005fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_Delay+0x40>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fe6:	bf00      	nop
 8005fe8:	f7ff ffde 	bl	8005fa8 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d8f7      	bhi.n	8005fe8 <HAL_Delay+0x28>
  {
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20001038 	.word	0x20001038

08006004 <HAL_ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e031      	b.n	8004856 <HAL_ADC_Init+0x7a>
=======
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e031      	b.n	800607e <HAL_ADC_Init+0x7a>
>>>>>>> Stashed changes
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< Updated upstream
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_ADC_Init+0x32>
=======
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_ADC_Init+0x32>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< Updated upstream
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff f988 	bl	8003b10 <HAL_ADC_MspInit>
=======
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff f980 	bl	8005328 <HAL_ADC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< Updated upstream
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d116      	bne.n	8004848 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <HAL_ADC_Init+0x84>)
 8004820:	4013      	ands	r3, r2
 8004822:	f043 0202 	orr.w	r2, r3, #2
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	d116      	bne.n	8006070 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006046:	4b10      	ldr	r3, [pc, #64]	; (8006088 <HAL_ADC_Init+0x84>)
 8006048:	4013      	ands	r3, r2
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< Updated upstream
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fab6 	bl	8004d9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
 8004846:	e001      	b.n	800484c <HAL_ADC_Init+0x70>
=======
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fab6 	bl	80065c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
 800606e:	e001      	b.n	8006074 <HAL_ADC_Init+0x70>
>>>>>>> Stashed changes
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< Updated upstream
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
=======
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	ffffeefd 	.word	0xffffeefd

08004864 <HAL_ADC_Start>:
=======
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	ffffeefd 	.word	0xffffeefd

0800608c <HAL_ADC_Start>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
=======
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_ADC_Start+0x1a>
 800487a:	2302      	movs	r3, #2
 800487c:	e0a0      	b.n	80049c0 <HAL_ADC_Start+0x15c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_ADC_Start+0x1a>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0a0      	b.n	80061e8 <HAL_ADC_Start+0x15c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< Updated upstream
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d018      	beq.n	80048c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	609a      	str	r2, [r3, #8]
=======
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d018      	beq.n	80060ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
<<<<<<< Updated upstream
 80048a4:	4b49      	ldr	r3, [pc, #292]	; (80049cc <HAL_ADC_Start+0x168>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a49      	ldr	r2, [pc, #292]	; (80049d0 <HAL_ADC_Start+0x16c>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0c9a      	lsrs	r2, r3, #18
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80048b8:	e002      	b.n	80048c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f9      	bne.n	80048ba <HAL_ADC_Start+0x56>
=======
 80060cc:	4b49      	ldr	r3, [pc, #292]	; (80061f4 <HAL_ADC_Start+0x168>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a49      	ldr	r2, [pc, #292]	; (80061f8 <HAL_ADC_Start+0x16c>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0c9a      	lsrs	r2, r3, #18
 80060d8:	4613      	mov	r3, r2
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80060e0:	e002      	b.n	80060e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f9      	bne.n	80060e2 <HAL_ADC_Start+0x56>
>>>>>>> Stashed changes
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< Updated upstream
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d174      	bne.n	80049be <HAL_ADC_Start+0x15a>
=======
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d174      	bne.n	80061e6 <HAL_ADC_Start+0x15a>
>>>>>>> Stashed changes
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< Updated upstream
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d8:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_ADC_Start+0x170>)
 80048da:	4013      	ands	r3, r2
 80048dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006100:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <HAL_ADC_Start+0x170>)
 8006102:	4013      	ands	r3, r2
 8006104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< Updated upstream
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006122:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< Updated upstream
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d106      	bne.n	800491e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	f023 0206 	bic.w	r2, r3, #6
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	645a      	str	r2, [r3, #68]	; 0x44
 800491c:	e002      	b.n	8004924 <HAL_ADC_Start+0xc0>
=======
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d106      	bne.n	8006146 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f023 0206 	bic.w	r2, r3, #6
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
 8006144:	e002      	b.n	800614c <HAL_ADC_Start+0xc0>
>>>>>>> Stashed changes
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< Updated upstream
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004934:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004936:	4b28      	ldr	r3, [pc, #160]	; (80049d8 <HAL_ADC_Start+0x174>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10f      	bne.n	8004962 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d136      	bne.n	80049be <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e02d      	b.n	80049be <HAL_ADC_Start+0x15a>
=======
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800615c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800615e:	4b28      	ldr	r3, [pc, #160]	; (8006200 <HAL_ADC_Start+0x174>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d136      	bne.n	80061e6 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	e02d      	b.n	80061e6 <HAL_ADC_Start+0x15a>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< Updated upstream
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_ADC_Start+0x178>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10e      	bne.n	800498a <HAL_ADC_Start+0x126>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004988:	609a      	str	r2, [r3, #8]
=======
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <HAL_ADC_Start+0x178>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10e      	bne.n	80061b2 <HAL_ADC_Start+0x126>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d107      	bne.n	80061b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061b0:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
<<<<<<< Updated upstream
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <HAL_ADC_Start+0x174>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d113      	bne.n	80049be <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <HAL_ADC_Start+0x17c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10e      	bne.n	80049be <HAL_ADC_Start+0x15a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d107      	bne.n	80049be <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049bc:	609a      	str	r2, [r3, #8]
=======
 80061b2:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_ADC_Start+0x174>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d113      	bne.n	80061e6 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a11      	ldr	r2, [pc, #68]	; (8006208 <HAL_ADC_Start+0x17c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10e      	bne.n	80061e6 <HAL_ADC_Start+0x15a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061e4:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000034 	.word	0x20000034
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	fffff8fe 	.word	0xfffff8fe
 80049d8:	40012300 	.word	0x40012300
 80049dc:	40012000 	.word	0x40012000
 80049e0:	40012200 	.word	0x40012200

080049e4 <HAL_ADC_PollForConversion>:
=======
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20001030 	.word	0x20001030
 80061f8:	431bde83 	.word	0x431bde83
 80061fc:	fffff8fe 	.word	0xfffff8fe
 8006200:	40012300 	.word	0x40012300
 8006204:	40012000 	.word	0x40012000
 8006208:	40012200 	.word	0x40012200

0800620c <HAL_ADC_PollForConversion>:
>>>>>>> Stashed changes
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
<<<<<<< Updated upstream
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
=======
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
<<<<<<< Updated upstream
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d113      	bne.n	8004a2a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d10b      	bne.n	8004a2a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e05c      	b.n	8004ae4 <HAL_ADC_PollForConversion+0x100>
=======
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d113      	bne.n	8006252 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006238:	d10b      	bne.n	8006252 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e05c      	b.n	800630c <HAL_ADC_PollForConversion+0x100>
>>>>>>> Stashed changes
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004a2a:	f7ff fea9 	bl	8004780 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a30:	e01a      	b.n	8004a68 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d016      	beq.n	8004a68 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_ADC_PollForConversion+0x6c>
 8004a40:	f7ff fe9e 	bl	8004780 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d20b      	bcs.n	8004a68 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0204 	orr.w	r2, r3, #4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e03d      	b.n	8004ae4 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d1dd      	bne.n	8004a32 <HAL_ADC_PollForConversion+0x4e>
=======
 8006252:	f7ff fea9 	bl	8005fa8 <HAL_GetTick>
 8006256:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006258:	e01a      	b.n	8006290 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d016      	beq.n	8006290 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_ADC_PollForConversion+0x6c>
 8006268:	f7ff fe9e 	bl	8005fa8 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d20b      	bcs.n	8006290 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f043 0204 	orr.w	r2, r3, #4
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e03d      	b.n	800630c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b02      	cmp	r3, #2
 800629c:	d1dd      	bne.n	800625a <HAL_ADC_PollForConversion+0x4e>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< Updated upstream
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f06f 0212 	mvn.w	r2, #18
 8004a7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0212 	mvn.w	r2, #18
 80062a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< Updated upstream
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d123      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11f      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d111      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d123      	bne.n	800630a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11f      	bne.n	800630a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d111      	bne.n	800630a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d105      	bne.n	800630a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
<<<<<<< Updated upstream
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_ADC_GetValue>:
=======
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_ADC_GetValue>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
<<<<<<< Updated upstream
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_ADC_ConfigChannel>:
=======
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< Updated upstream
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
=======
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e12a      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x272>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d93a      	bls.n	8004baa <HAL_ADC_ConfigChannel+0xa2>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3c:	d035      	beq.n	8004baa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68d9      	ldr	r1, [r3, #12]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	3b1e      	subs	r3, #30
 8004b54:	2207      	movs	r2, #7
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	400a      	ands	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a87      	ldr	r2, [pc, #540]	; (8004d88 <HAL_ADC_ConfigChannel+0x280>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10a      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68d9      	ldr	r1, [r3, #12]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	061a      	lsls	r2, r3, #24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b82:	e035      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0xe8>
=======
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_ADC_ConfigChannel+0x1c>
 8006348:	2302      	movs	r3, #2
 800634a:	e12a      	b.n	80065a2 <HAL_ADC_ConfigChannel+0x272>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b09      	cmp	r3, #9
 800635a:	d93a      	bls.n	80063d2 <HAL_ADC_ConfigChannel+0xa2>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006364:	d035      	beq.n	80063d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68d9      	ldr	r1, [r3, #12]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	4613      	mov	r3, r2
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	4413      	add	r3, r2
 800637a:	3b1e      	subs	r3, #30
 800637c:	2207      	movs	r2, #7
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	43da      	mvns	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	400a      	ands	r2, r1
 800638a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a87      	ldr	r2, [pc, #540]	; (80065b0 <HAL_ADC_ConfigChannel+0x280>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d10a      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68d9      	ldr	r1, [r3, #12]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	061a      	lsls	r2, r3, #24
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063aa:	e035      	b.n	8006418 <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< Updated upstream
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	4618      	mov	r0, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4403      	add	r3, r0
 8004b9c:	3b1e      	subs	r3, #30
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ba8:	e022      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0xe8>
=======
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68d9      	ldr	r1, [r3, #12]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4618      	mov	r0, r3
 80063be:	4603      	mov	r3, r0
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4403      	add	r3, r0
 80063c4:	3b1e      	subs	r3, #30
 80063c6:	409a      	lsls	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063d0:	e022      	b.n	8006418 <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> Stashed changes
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< Updated upstream
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6919      	ldr	r1, [r3, #16]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4613      	mov	r3, r2
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	4413      	add	r3, r2
 8004bbe:	2207      	movs	r2, #7
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	400a      	ands	r2, r1
 8004bcc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6919      	ldr	r1, [r3, #16]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	4618      	mov	r0, r3
 8004be0:	4603      	mov	r3, r0
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4403      	add	r3, r0
 8004be6:	409a      	lsls	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	611a      	str	r2, [r3, #16]
=======
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6919      	ldr	r1, [r3, #16]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	461a      	mov	r2, r3
 80063e0:	4613      	mov	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	2207      	movs	r2, #7
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43da      	mvns	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	400a      	ands	r2, r1
 80063f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6919      	ldr	r1, [r3, #16]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	4618      	mov	r0, r3
 8006408:	4603      	mov	r3, r0
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	4403      	add	r3, r0
 800640e:	409a      	lsls	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
<<<<<<< Updated upstream
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b06      	cmp	r3, #6
 8004bf6:	d824      	bhi.n	8004c42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	3b05      	subs	r3, #5
 8004c0a:	221f      	movs	r2, #31
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43da      	mvns	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	400a      	ands	r2, r1
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	4618      	mov	r0, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	3b05      	subs	r3, #5
 8004c34:	fa00 f203 	lsl.w	r2, r0, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c40:	e04c      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d824      	bhi.n	8004c94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	3b23      	subs	r3, #35	; 0x23
 8004c5c:	221f      	movs	r2, #31
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43da      	mvns	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	400a      	ands	r2, r1
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4618      	mov	r0, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	3b23      	subs	r3, #35	; 0x23
 8004c86:	fa00 f203 	lsl.w	r2, r0, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
 8004c92:	e023      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x1d4>
=======
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b06      	cmp	r3, #6
 800641e:	d824      	bhi.n	800646a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	3b05      	subs	r3, #5
 8006432:	221f      	movs	r2, #31
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43da      	mvns	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	400a      	ands	r2, r1
 8006440:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	4618      	mov	r0, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	3b05      	subs	r3, #5
 800645c:	fa00 f203 	lsl.w	r2, r0, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	635a      	str	r2, [r3, #52]	; 0x34
 8006468:	e04c      	b.n	8006504 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b0c      	cmp	r3, #12
 8006470:	d824      	bhi.n	80064bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	3b23      	subs	r3, #35	; 0x23
 8006484:	221f      	movs	r2, #31
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43da      	mvns	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	400a      	ands	r2, r1
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	4618      	mov	r0, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	3b23      	subs	r3, #35	; 0x23
 80064ae:	fa00 f203 	lsl.w	r2, r0, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
 80064ba:	e023      	b.n	8006504 <HAL_ADC_ConfigChannel+0x1d4>
>>>>>>> Stashed changes
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< Updated upstream
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b41      	subs	r3, #65	; 0x41
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43da      	mvns	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	3b41      	subs	r3, #65	; 0x41
 8004cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	3b41      	subs	r3, #65	; 0x41
 80064ce:	221f      	movs	r2, #31
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	43da      	mvns	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	400a      	ands	r2, r1
 80064dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4618      	mov	r0, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	3b41      	subs	r3, #65	; 0x41
 80064f8:	fa00 f203 	lsl.w	r2, r0, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
<<<<<<< Updated upstream
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <HAL_ADC_ConfigChannel+0x284>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10a      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x1f4>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cee:	d105      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004cf6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004cfa:	6053      	str	r3, [r2, #4]
=======
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <HAL_ADC_ConfigChannel+0x284>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10a      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x1f4>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006516:	d105      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006518:	4b27      	ldr	r3, [pc, #156]	; (80065b8 <HAL_ADC_ConfigChannel+0x288>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a26      	ldr	r2, [pc, #152]	; (80065b8 <HAL_ADC_ConfigChannel+0x288>)
 800651e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006522:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
<<<<<<< Updated upstream
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <HAL_ADC_ConfigChannel+0x284>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d109      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x212>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b12      	cmp	r3, #18
 8004d0c:	d105      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d18:	6053      	str	r3, [r2, #4]
=======
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <HAL_ADC_ConfigChannel+0x284>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d109      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x212>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b12      	cmp	r3, #18
 8006534:	d105      	bne.n	8006542 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006536:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_ADC_ConfigChannel+0x288>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_ADC_ConfigChannel+0x288>)
 800653c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006540:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< Updated upstream
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_ADC_ConfigChannel+0x284>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d125      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x268>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <HAL_ADC_ConfigChannel+0x280>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <HAL_ADC_ConfigChannel+0x22e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b11      	cmp	r3, #17
 8004d34:	d11c      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_ADC_ConfigChannel+0x288>)
 8004d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a10      	ldr	r2, [pc, #64]	; (8004d88 <HAL_ADC_ConfigChannel+0x280>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d111      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x268>
=======
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1b      	ldr	r2, [pc, #108]	; (80065b4 <HAL_ADC_ConfigChannel+0x284>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d125      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x268>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <HAL_ADC_ConfigChannel+0x280>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <HAL_ADC_ConfigChannel+0x22e>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b11      	cmp	r3, #17
 800655c:	d11c      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800655e:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_ADC_ConfigChannel+0x288>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <HAL_ADC_ConfigChannel+0x288>)
 8006564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006568:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <HAL_ADC_ConfigChannel+0x280>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d111      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x268>
>>>>>>> Stashed changes
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
<<<<<<< Updated upstream
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_ADC_ConfigChannel+0x28c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <HAL_ADC_ConfigChannel+0x290>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0c9a      	lsrs	r2, r3, #18
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d62:	e002      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f9      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x25c>
=======
 8006574:	4b11      	ldr	r3, [pc, #68]	; (80065bc <HAL_ADC_ConfigChannel+0x28c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <HAL_ADC_ConfigChannel+0x290>)
 800657a:	fba2 2303 	umull	r2, r3, r2, r3
 800657e:	0c9a      	lsrs	r2, r3, #18
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800658a:	e002      	b.n	8006592 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3b01      	subs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f9      	bne.n	800658c <HAL_ADC_ConfigChannel+0x25c>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	10000012 	.word	0x10000012
 8004d8c:	40012000 	.word	0x40012000
 8004d90:	40012300 	.word	0x40012300
 8004d94:	20000034 	.word	0x20000034
 8004d98:	431bde83 	.word	0x431bde83

08004d9c <ADC_Init>:
=======
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	10000012 	.word	0x10000012
 80065b4:	40012000 	.word	0x40012000
 80065b8:	40012300 	.word	0x40012300
 80065bc:	20001030 	.word	0x20001030
 80065c0:	431bde83 	.word	0x431bde83

080065c4 <ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004da4:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <ADC_Init+0x1ec>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a77      	ldr	r2, [pc, #476]	; (8004f88 <ADC_Init+0x1ec>)
 8004daa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004dae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004db0:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <ADC_Init+0x1ec>)
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4973      	ldr	r1, [pc, #460]	; (8004f88 <ADC_Init+0x1ec>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	021a      	lsls	r2, r3, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
=======
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80065cc:	4b78      	ldr	r3, [pc, #480]	; (80067b0 <ADC_Init+0x1ec>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a77      	ldr	r2, [pc, #476]	; (80067b0 <ADC_Init+0x1ec>)
 80065d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80065d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80065d8:	4b75      	ldr	r3, [pc, #468]	; (80067b0 <ADC_Init+0x1ec>)
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4973      	ldr	r1, [pc, #460]	; (80067b0 <ADC_Init+0x1ec>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	021a      	lsls	r2, r3, #8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6899      	ldr	r1, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< Updated upstream
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	4a58      	ldr	r2, [pc, #352]	; (8004f8c <ADC_Init+0x1f0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	e00f      	b.n	8004e96 <ADC_Init+0xfa>
=======
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	4a58      	ldr	r2, [pc, #352]	; (80067b4 <ADC_Init+0x1f0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006666:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6899      	ldr	r1, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6899      	ldr	r1, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	e00f      	b.n	80066be <ADC_Init+0xfa>
>>>>>>> Stashed changes
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< Updated upstream
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e94:	609a      	str	r2, [r3, #8]
=======
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066bc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< Updated upstream
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0202 	bic.w	r2, r2, #2
 8004ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	005a      	lsls	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01b      	beq.n	8004efc <ADC_Init+0x160>
=======
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0202 	bic.w	r2, r2, #2
 80066cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6899      	ldr	r1, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	005a      	lsls	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01b      	beq.n	8006724 <ADC_Init+0x160>
>>>>>>> Stashed changes
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< Updated upstream
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	035a      	lsls	r2, r3, #13
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e007      	b.n	8004f0c <ADC_Init+0x170>
=======
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800670a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6859      	ldr	r1, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	3b01      	subs	r3, #1
 8006718:	035a      	lsls	r2, r3, #13
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	e007      	b.n	8006734 <ADC_Init+0x170>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< Updated upstream
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f0a:	605a      	str	r2, [r3, #4]
=======
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006732:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< Updated upstream
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	051a      	lsls	r2, r3, #20
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f4e:	025a      	lsls	r2, r3, #9
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	029a      	lsls	r2, r3, #10
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	40012300 	.word	0x40012300
 8004f8c:	0f000001 	.word	0x0f000001

08004f90 <__NVIC_SetPriorityGrouping>:
=======
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	3b01      	subs	r3, #1
 8006750:	051a      	lsls	r2, r3, #20
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6899      	ldr	r1, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006776:	025a      	lsls	r2, r3, #9
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	029a      	lsls	r2, r3, #10
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	40012300 	.word	0x40012300
 80067b4:	0f000001 	.word	0x0f000001

080067b8 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fac:	4013      	ands	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fbe:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	60d3      	str	r3, [r2, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000ed00 	.word	0xe000ed00
 8004fd4:	05fa0000 	.word	0x05fa0000

08004fd8 <__NVIC_GetPriorityGrouping>:
=======
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067c8:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <__NVIC_SetPriorityGrouping+0x40>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067d4:	4013      	ands	r3, r2
 80067d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <__NVIC_SetPriorityGrouping+0x44>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067e6:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <__NVIC_SetPriorityGrouping+0x40>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	60d3      	str	r3, [r2, #12]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	e000ed00 	.word	0xe000ed00
 80067fc:	05fa0000 	.word	0x05fa0000

08006800 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	f003 0307 	and.w	r3, r3, #7
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <__NVIC_EnableIRQ>:
=======
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <__NVIC_GetPriorityGrouping+0x18>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 0307 	and.w	r3, r3, #7
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	e000ed00 	.word	0xe000ed00

0800681c <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	2b00      	cmp	r3, #0
 8005004:	db0b      	blt.n	800501e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	f003 021f 	and.w	r2, r3, #31
 800500c:	4907      	ldr	r1, [pc, #28]	; (800502c <__NVIC_EnableIRQ+0x38>)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2001      	movs	r0, #1
 8005016:	fa00 f202 	lsl.w	r2, r0, r2
 800501a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	e000e100 	.word	0xe000e100

08005030 <__NVIC_SetPriority>:
=======
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	2b00      	cmp	r3, #0
 800682c:	db0b      	blt.n	8006846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	f003 021f 	and.w	r2, r3, #31
 8006834:	4907      	ldr	r1, [pc, #28]	; (8006854 <__NVIC_EnableIRQ+0x38>)
 8006836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	2001      	movs	r0, #1
 800683e:	fa00 f202 	lsl.w	r2, r0, r2
 8006842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000e100 	.word	0xe000e100

08006858 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db0a      	blt.n	800505a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	490c      	ldr	r1, [pc, #48]	; (800507c <__NVIC_SetPriority+0x4c>)
 800504a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504e:	0112      	lsls	r2, r2, #4
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	440b      	add	r3, r1
 8005054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db0a      	blt.n	8006882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	490c      	ldr	r1, [pc, #48]	; (80068a4 <__NVIC_SetPriority+0x4c>)
 8006872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006876:	0112      	lsls	r2, r2, #4
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	440b      	add	r3, r1
 800687c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8005058:	e00a      	b.n	8005070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4908      	ldr	r1, [pc, #32]	; (8005080 <__NVIC_SetPriority+0x50>)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	3b04      	subs	r3, #4
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	440b      	add	r3, r1
 800506e:	761a      	strb	r2, [r3, #24]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	e000e100 	.word	0xe000e100
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <NVIC_EncodePriority>:
=======
 8006880:	e00a      	b.n	8006898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	4908      	ldr	r1, [pc, #32]	; (80068a8 <__NVIC_SetPriority+0x50>)
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	3b04      	subs	r3, #4
 8006890:	0112      	lsls	r2, r2, #4
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	440b      	add	r3, r1
 8006896:	761a      	strb	r2, [r3, #24]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	e000e100 	.word	0xe000e100
 80068a8:	e000ed00 	.word	0xe000ed00

080068ac <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8005084:	b480      	push	{r7}
 8005086:	b089      	sub	sp, #36	; 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	61fb      	str	r3, [r7, #28]
=======
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f1c3 0307 	rsb	r3, r3, #7
 800509e:	2b04      	cmp	r3, #4
 80050a0:	bf28      	it	cs
 80050a2:	2304      	movcs	r3, #4
 80050a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3304      	adds	r3, #4
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d902      	bls.n	80050b4 <NVIC_EncodePriority+0x30>
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	3b03      	subs	r3, #3
 80050b2:	e000      	b.n	80050b6 <NVIC_EncodePriority+0x32>
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b8:	f04f 32ff 	mov.w	r2, #4294967295
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43da      	mvns	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	401a      	ands	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050cc:	f04f 31ff 	mov.w	r1, #4294967295
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	43d9      	mvns	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050dc:	4313      	orrs	r3, r2
         );
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3724      	adds	r7, #36	; 0x24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_NVIC_SetPriorityGrouping>:
=======
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f1c3 0307 	rsb	r3, r3, #7
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	bf28      	it	cs
 80068ca:	2304      	movcs	r3, #4
 80068cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3304      	adds	r3, #4
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d902      	bls.n	80068dc <NVIC_EncodePriority+0x30>
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	3b03      	subs	r3, #3
 80068da:	e000      	b.n	80068de <NVIC_EncodePriority+0x32>
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43da      	mvns	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	401a      	ands	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068f4:	f04f 31ff 	mov.w	r1, #4294967295
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	fa01 f303 	lsl.w	r3, r1, r3
 80068fe:	43d9      	mvns	r1, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	4313      	orrs	r3, r2
         );
}
 8006906:	4618      	mov	r0, r3
 8006908:	3724      	adds	r7, #36	; 0x24
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
=======
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff4c 	bl	8004f90 <__NVIC_SetPriorityGrouping>
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_NVIC_SetPriority>:
=======
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ff4c 	bl	80067b8 <__NVIC_SetPriorityGrouping>
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
=======
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8005112:	f7ff ff61 	bl	8004fd8 <__NVIC_GetPriorityGrouping>
 8005116:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f7ff ffb1 	bl	8005084 <NVIC_EncodePriority>
 8005122:	4602      	mov	r2, r0
 8005124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ff80 	bl	8005030 <__NVIC_SetPriority>
}
 8005130:	bf00      	nop
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_NVIC_EnableIRQ>:
=======
 800693a:	f7ff ff61 	bl	8006800 <__NVIC_GetPriorityGrouping>
 800693e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	6978      	ldr	r0, [r7, #20]
 8006946:	f7ff ffb1 	bl	80068ac <NVIC_EncodePriority>
 800694a:	4602      	mov	r2, r0
 800694c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff ff80 	bl	8006858 <__NVIC_SetPriority>
}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
=======
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff54 	bl	8004ff4 <__NVIC_EnableIRQ>
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_DAC_Init>:
=======
 800696a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff ff54 	bl	800681c <__NVIC_EnableIRQ>
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_DAC_Init>:
>>>>>>> Stashed changes
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
<<<<<<< Updated upstream
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e014      	b.n	8005190 <HAL_DAC_Init+0x3c>
=======
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e014      	b.n	80069b8 <HAL_DAC_Init+0x3c>
>>>>>>> Stashed changes
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< Updated upstream
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_DAC_Init+0x28>
=======
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <HAL_DAC_Init+0x28>
>>>>>>> Stashed changes
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
<<<<<<< Updated upstream
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	715a      	strb	r2, [r3, #5]
=======
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	715a      	strb	r2, [r3, #5]
>>>>>>> Stashed changes
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
<<<<<<< Updated upstream
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fe fd38 	bl	8003bec <HAL_DAC_MspInit>
=======
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fe fd30 	bl	8005404 <HAL_DAC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< Updated upstream
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DAC_IRQHandler>:
=======
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_DAC_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
<<<<<<< Updated upstream
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ae:	d118      	bne.n	80051e2 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2204      	movs	r2, #4
 80051b4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051da:	601a      	str	r2, [r3, #0]
=======
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d6:	d118      	bne.n	8006a0a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2204      	movs	r2, #4
 80069dc:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a02:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
<<<<<<< Updated upstream
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f825 	bl	800522c <HAL_DAC_DMAUnderrunCallbackCh1>
=======
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f825 	bl	8006a54 <HAL_DAC_DMAUnderrunCallbackCh1>
>>>>>>> Stashed changes
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
<<<<<<< Updated upstream
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f0:	d118      	bne.n	8005224 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f043 0202 	orr.w	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800520c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
=======
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a18:	d118      	bne.n	8006a4c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f043 0202 	orr.w	r2, r3, #2
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006a34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a44:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
<<<<<<< Updated upstream
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f85b 	bl	80052da <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_DAC_DMAUnderrunCallbackCh1>:
=======
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f85b 	bl	8006b02 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_DAC_DMAUnderrunCallbackCh1>:
>>>>>>> Stashed changes
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
=======
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_DAC_ConfigChannel>:
=======
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_DAC_ConfigChannel>:
>>>>>>> Stashed changes
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
<<<<<<< Updated upstream
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
=======
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< Updated upstream
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_DAC_ConfigChannel+0x20>
 800525c:	2302      	movs	r3, #2
 800525e:	e036      	b.n	80052ce <HAL_DAC_ConfigChannel+0x8e>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2202      	movs	r2, #2
 800526a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005274:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4013      	ands	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
=======
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	795b      	ldrb	r3, [r3, #5]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_DAC_ConfigChannel+0x20>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e036      	b.n	8006af6 <HAL_DAC_ConfigChannel+0x8e>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2202      	movs	r2, #2
 8006a92:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006a9c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
<<<<<<< Updated upstream
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	22c0      	movs	r2, #192	; 0xc0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	400a      	ands	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_DACEx_DMAUnderrunCallbackCh2>:
=======
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	22c0      	movs	r2, #192	; 0xc0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	400a      	ands	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <HAL_DACEx_DMAUnderrunCallbackCh2>:
>>>>>>> Stashed changes
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
=======
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_DMA_Init>:
=======
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7ff fa40 	bl	8004780 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]
=======
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b24:	f7ff fa40 	bl	8005fa8 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e099      	b.n	8005440 <HAL_DMA_Init+0x150>
=======
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e099      	b.n	8006c68 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< Updated upstream
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532c:	e00f      	b.n	800534e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532e:	f7ff fa27 	bl	8004780 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b05      	cmp	r3, #5
 800533a:	d908      	bls.n	800534e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e078      	b.n	8005440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e8      	bne.n	800532e <HAL_DMA_Init+0x3e>
=======
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b54:	e00f      	b.n	8006b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b56:	f7ff fa27 	bl	8005fa8 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b05      	cmp	r3, #5
 8006b62:	d908      	bls.n	8006b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e078      	b.n	8006c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e8      	bne.n	8006b56 <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <HAL_DMA_Init+0x158>)
 8005368:	4013      	ands	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
=======
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4b38      	ldr	r3, [pc, #224]	; (8006c70 <HAL_DMA_Init+0x158>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800537a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	4313      	orrs	r3, r2
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
=======
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d107      	bne.n	8006be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d117      	bne.n	8005412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
=======
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d117      	bne.n	8006c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00e      	beq.n	8005412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8df 	bl	80055b8 <DMA_CheckFifoParam>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800540e:	2301      	movs	r3, #1
 8005410:	e016      	b.n	8005440 <HAL_DMA_Init+0x150>
=======
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00e      	beq.n	8006c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f8df 	bl	8006de0 <DMA_CheckFifoParam>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2240      	movs	r2, #64	; 0x40
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c36:	2301      	movs	r3, #1
 8006c38:	e016      	b.n	8006c68 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	615a      	str	r2, [r3, #20]
=======
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f896 	bl	800554c <DMA_CalcBaseAndBitshift>
 8005420:	4603      	mov	r3, r0
 8005422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005428:	223f      	movs	r2, #63	; 0x3f
 800542a:	409a      	lsls	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	f010803f 	.word	0xf010803f

0800544c <HAL_DMA_DeInit>:
=======
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f896 	bl	8006d74 <DMA_CalcBaseAndBitshift>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c50:	223f      	movs	r2, #63	; 0x3f
 8006c52:	409a      	lsls	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	f010803f 	.word	0xf010803f

08006c74 <HAL_DMA_DeInit>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
=======
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e050      	b.n	8005500 <HAL_DMA_DeInit+0xb4>
=======
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e050      	b.n	8006d28 <HAL_DMA_DeInit+0xb4>
>>>>>>> Stashed changes
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
<<<<<<< Updated upstream
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d101      	bne.n	800546e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
 800546c:	e048      	b.n	8005500 <HAL_DMA_DeInit+0xb4>
=======
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d101      	bne.n	8006c96 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e048      	b.n	8006d28 <HAL_DMA_DeInit+0xb4>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2221      	movs	r2, #33	; 0x21
 80054ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f84c 	bl	800554c <DMA_CalcBaseAndBitshift>
 80054b4:	4603      	mov	r3, r0
 80054b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	223f      	movs	r2, #63	; 0x3f
 80054be:	409a      	lsls	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_DMA_Abort_IT>:
=======
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2221      	movs	r2, #33	; 0x21
 8006cd4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f84c 	bl	8006d74 <DMA_CalcBaseAndBitshift>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	223f      	movs	r2, #63	; 0x3f
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d004      	beq.n	8005526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e00c      	b.n	8005540 <HAL_DMA_Abort_IT+0x38>
=======
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d004      	beq.n	8006d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e00c      	b.n	8006d68 <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< Updated upstream
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2205      	movs	r2, #5
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <DMA_CalcBaseAndBitshift>:
=======
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2205      	movs	r2, #5
 8006d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	3b10      	subs	r3, #16
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <DMA_CalcBaseAndBitshift+0x60>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
=======
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	3b10      	subs	r3, #16
 8006d84:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <DMA_CalcBaseAndBitshift+0x60>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8005566:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <DMA_CalcBaseAndBitshift+0x64>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d908      	bls.n	800558c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005582:	4013      	ands	r3, r2
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	659a      	str	r2, [r3, #88]	; 0x58
 800558a:	e006      	b.n	800559a <DMA_CalcBaseAndBitshift+0x4e>
=======
 8006d8e:	4a12      	ldr	r2, [pc, #72]	; (8006dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d908      	bls.n	8006db4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <DMA_CalcBaseAndBitshift+0x68>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	659a      	str	r2, [r3, #88]	; 0x58
 8006db2:	e006      	b.n	8006dc2 <DMA_CalcBaseAndBitshift+0x4e>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005594:	4013      	ands	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	aaaaaaab 	.word	0xaaaaaaab
 80055b0:	0800fca0 	.word	0x0800fca0
 80055b4:	fffffc00 	.word	0xfffffc00

080055b8 <DMA_CheckFifoParam>:
=======
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <DMA_CalcBaseAndBitshift+0x68>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	aaaaaaab 	.word	0xaaaaaaab
 8006dd8:	08011bac 	.word	0x08011bac
 8006ddc:	fffffc00 	.word	0xfffffc00

08006de0 <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d11f      	bne.n	8005612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d855      	bhi.n	8005684 <DMA_CheckFifoParam+0xcc>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <DMA_CheckFifoParam+0x28>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005603 	.word	0x08005603
 80055e8:	080055f1 	.word	0x080055f1
 80055ec:	08005685 	.word	0x08005685
=======
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11f      	bne.n	8006e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d855      	bhi.n	8006eac <DMA_CheckFifoParam+0xcc>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <DMA_CheckFifoParam+0x28>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e19 	.word	0x08006e19
 8006e0c:	08006e2b 	.word	0x08006e2b
 8006e10:	08006e19 	.word	0x08006e19
 8006e14:	08006ead 	.word	0x08006ead
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d045      	beq.n	8005688 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005600:	e042      	b.n	8005688 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800560a:	d13f      	bne.n	800568c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005610:	e03c      	b.n	800568c <DMA_CheckFifoParam+0xd4>
=======
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d045      	beq.n	8006eb0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e28:	e042      	b.n	8006eb0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e32:	d13f      	bne.n	8006eb4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e38:	e03c      	b.n	8006eb4 <DMA_CheckFifoParam+0xd4>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561a:	d121      	bne.n	8005660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d836      	bhi.n	8005690 <DMA_CheckFifoParam+0xd8>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <DMA_CheckFifoParam+0x70>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005639 	.word	0x08005639
 800562c:	0800563f 	.word	0x0800563f
 8005630:	08005639 	.word	0x08005639
 8005634:	08005651 	.word	0x08005651
=======
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e42:	d121      	bne.n	8006e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d836      	bhi.n	8006eb8 <DMA_CheckFifoParam+0xd8>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <DMA_CheckFifoParam+0x70>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e67 	.word	0x08006e67
 8006e58:	08006e61 	.word	0x08006e61
 8006e5c:	08006e79 	.word	0x08006e79
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
      break;
 800563c:	e02f      	b.n	800569e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d024      	beq.n	8005694 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564e:	e021      	b.n	8005694 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005658:	d11e      	bne.n	8005698 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800565e:	e01b      	b.n	8005698 <DMA_CheckFifoParam+0xe0>
=======
 8006e60:	2301      	movs	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
      break;
 8006e64:	e02f      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d024      	beq.n	8006ebc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e76:	e021      	b.n	8006ebc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e80:	d11e      	bne.n	8006ec0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e86:	e01b      	b.n	8006ec0 <DMA_CheckFifoParam+0xe0>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <DMA_CheckFifoParam+0xb4>
 8005666:	2b03      	cmp	r3, #3
 8005668:	d003      	beq.n	8005672 <DMA_CheckFifoParam+0xba>
=======
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d902      	bls.n	8006e94 <DMA_CheckFifoParam+0xb4>
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d003      	beq.n	8006e9a <DMA_CheckFifoParam+0xba>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 800566a:	e018      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	e015      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      break;
 8005682:	e00b      	b.n	800569c <DMA_CheckFifoParam+0xe4>
      break;
 8005684:	bf00      	nop
 8005686:	e00a      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005688:	bf00      	nop
 800568a:	e008      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 800568c:	bf00      	nop
 800568e:	e006      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005690:	bf00      	nop
 8005692:	e004      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005694:	bf00      	nop
 8005696:	e002      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;   
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 800569c:	bf00      	nop
=======
 8006e92:	e018      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      break;
 8006e98:	e015      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00e      	beq.n	8006ec4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eaa:	e00b      	b.n	8006ec4 <DMA_CheckFifoParam+0xe4>
      break;
 8006eac:	bf00      	nop
 8006eae:	e00a      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e008      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e006      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e004      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e002      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      break;   
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8006ec4:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_DMA2D_Init>:
=======
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_DMA2D_Init>:
>>>>>>> Stashed changes
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
<<<<<<< Updated upstream
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e039      	b.n	8005732 <HAL_DMA2D_Init+0x86>
=======
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e039      	b.n	8006f5a <HAL_DMA2D_Init+0x86>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
<<<<<<< Updated upstream
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fe fad2 	bl	8003c7c <HAL_DMA2D_MspInit>
=======
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fe faca 	bl	8005494 <HAL_DMA2D_MspInit>
>>>>>>> Stashed changes
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
<<<<<<< Updated upstream
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fc:	f023 0107 	bic.w	r1, r3, #7
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_DMA2D_Init+0x90>)
 8005714:	4013      	ands	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68d1      	ldr	r1, [r2, #12]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	430b      	orrs	r3, r1
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f24:	f023 0107 	bic.w	r1, r3, #7
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <HAL_DMA2D_Init+0x90>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68d1      	ldr	r1, [r2, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
<<<<<<< Updated upstream
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	ffffc000 	.word	0xffffc000

08005740 <HAL_DMA2D_Start>:
=======
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	ffffc000 	.word	0xffffc000

08006f68 <HAL_DMA2D_Start>:
>>>>>>> Stashed changes
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
<<<<<<< Updated upstream
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
=======
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
<<<<<<< Updated upstream
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_DMA2D_Start+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e018      	b.n	800578e <HAL_DMA2D_Start+0x4e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f988 	bl	8005a8c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_DMA2D_PollForTransfer>:
=======
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_DMA2D_Start+0x1c>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e018      	b.n	8006fb6 <HAL_DMA2D_Start+0x4e>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f988 	bl	80072b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_DMA2D_PollForTransfer>:
>>>>>>> Stashed changes
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d056      	beq.n	8005860 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80057b2:	f7fe ffe5 	bl	8004780 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80057b8:	e04b      	b.n	8005852 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d023      	beq.n	8005814 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2221      	movs	r2, #33	; 0x21
 80057fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0a5      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d01a      	beq.n	8005852 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800581c:	f7fe ffb0 	bl	8004780 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <HAL_DMA2D_PollForTransfer+0x9c>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e086      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ac      	beq.n	80057ba <HAL_DMA2D_PollForTransfer+0x24>
=======
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d056      	beq.n	8007088 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006fda:	f7fe ffe5 	bl	8005fa8 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006fe0:	e04b      	b.n	800707a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d023      	beq.n	800703c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	f043 0202 	orr.w	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	f043 0201 	orr.w	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2221      	movs	r2, #33	; 0x21
 8007026:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2204      	movs	r2, #4
 800702c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0a5      	b.n	8007188 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d01a      	beq.n	800707a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8007044:	f7fe ffb0 	bl	8005fa8 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <HAL_DMA2D_PollForTransfer+0x9c>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10f      	bne.n	800707a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	f043 0220 	orr.w	r2, r3, #32
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2203      	movs	r2, #3
 800706a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e086      	b.n	8007188 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0ac      	beq.n	8006fe2 <HAL_DMA2D_PollForTransfer+0x24>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
<<<<<<< Updated upstream
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d061      	beq.n	8005946 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005882:	f7fe ff7d 	bl	8004780 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005888:	e056      	b.n	8005938 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02e      	beq.n	80058fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2229      	movs	r2, #41	; 0x29
 80058e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2204      	movs	r2, #4
 80058ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e032      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d01a      	beq.n	8005938 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005902:	f7fe ff3d 	bl	8004780 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <HAL_DMA2D_PollForTransfer+0x182>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e013      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0a1      	beq.n	800588a <HAL_DMA2D_PollForTransfer+0xf4>
=======
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d061      	beq.n	800716e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80070aa:	f7fe ff7d 	bl	8005fa8 <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80070b0:	e056      	b.n	8007160 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d02e      	beq.n	8007122 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	f043 0204 	orr.w	r2, r3, #4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	f043 0202 	orr.w	r2, r3, #2
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	f043 0201 	orr.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2229      	movs	r2, #41	; 0x29
 800710c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2204      	movs	r2, #4
 8007112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e032      	b.n	8007188 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d01a      	beq.n	8007160 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800712a:	f7fe ff3d 	bl	8005fa8 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <HAL_DMA2D_PollForTransfer+0x182>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007144:	f043 0220 	orr.w	r2, r3, #32
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2203      	movs	r2, #3
 8007150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e013      	b.n	8007188 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0a1      	beq.n	80070b2 <HAL_DMA2D_PollForTransfer+0xf4>
>>>>>>> Stashed changes
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
<<<<<<< Updated upstream
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2212      	movs	r2, #18
 800594c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_DMA2D_ConfigLayer>:
=======
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2212      	movs	r2, #18
 8007174:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_DMA2D_ConfigLayer>:
>>>>>>> Stashed changes
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
<<<<<<< Updated upstream
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
=======
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
<<<<<<< Updated upstream
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
=======
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
>>>>>>> Stashed changes
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
<<<<<<< Updated upstream
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_DMA2D_ConfigLayer+0x20>
 8005984:	2302      	movs	r3, #2
 8005986:	e079      	b.n	8005a7c <HAL_DMA2D_ConfigLayer+0x114>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3318      	adds	r3, #24
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
=======
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_DMA2D_ConfigLayer+0x20>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e079      	b.n	80072a4 <HAL_DMA2D_ConfigLayer+0x114>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	3318      	adds	r3, #24
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
<<<<<<< Updated upstream
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80059b2:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <HAL_DMA2D_ConfigLayer+0x120>)
 80059b4:	60fb      	str	r3, [r7, #12]
=======
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80071da:	4b35      	ldr	r3, [pc, #212]	; (80072b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80071dc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
<<<<<<< Updated upstream
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b0a      	cmp	r3, #10
 80059bc:	d003      	beq.n	80059c6 <HAL_DMA2D_ConfigLayer+0x5e>
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d107      	bne.n	80059d6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e005      	b.n	80059e2 <HAL_DMA2D_ConfigLayer+0x7a>
=======
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	2b0a      	cmp	r3, #10
 80071e4:	d003      	beq.n	80071ee <HAL_DMA2D_ConfigLayer+0x5e>
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d107      	bne.n	80071fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e005      	b.n	800720a <HAL_DMA2D_ConfigLayer+0x7a>
>>>>>>> Stashed changes
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
<<<<<<< Updated upstream
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
=======
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	061b      	lsls	r3, r3, #24
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
<<<<<<< Updated upstream
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d120      	bne.n	8005a2a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	43db      	mvns	r3, r3
 80059f2:	ea02 0103 	and.w	r1, r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b0a      	cmp	r3, #10
 8005a10:	d003      	beq.n	8005a1a <HAL_DMA2D_ConfigLayer+0xb2>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d127      	bne.n	8005a6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
 8005a28:	e01f      	b.n	8005a6a <HAL_DMA2D_ConfigLayer+0x102>
=======
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d120      	bne.n	8007252 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	43db      	mvns	r3, r3
 800721a:	ea02 0103 	and.w	r1, r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	430a      	orrs	r2, r1
 8007226:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b0a      	cmp	r3, #10
 8007238:	d003      	beq.n	8007242 <HAL_DMA2D_ConfigLayer+0xb2>
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b09      	cmp	r3, #9
 8007240:	d127      	bne.n	8007292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
 8007250:	e01f      	b.n	8007292 <HAL_DMA2D_ConfigLayer+0x102>
>>>>>>> Stashed changes
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
<<<<<<< Updated upstream
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	ea02 0103 	and.w	r1, r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b0a      	cmp	r3, #10
 8005a52:	d003      	beq.n	8005a5c <HAL_DMA2D_ConfigLayer+0xf4>
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d106      	bne.n	8005a6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a68:	621a      	str	r2, [r3, #32]
=======
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69da      	ldr	r2, [r3, #28]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	43db      	mvns	r3, r3
 800725c:	ea02 0103 	and.w	r1, r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	430a      	orrs	r2, r1
 8007268:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2b0a      	cmp	r3, #10
 800727a:	d003      	beq.n	8007284 <HAL_DMA2D_ConfigLayer+0xf4>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b09      	cmp	r3, #9
 8007282:	d106      	bne.n	8007292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007290:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
<<<<<<< Updated upstream
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	ff03000f 	.word	0xff03000f

08005a8c <DMA2D_SetConfig>:
=======
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	ff03000f 	.word	0xff03000f

080072b4 <DMA2D_SetConfig>:
>>>>>>> Stashed changes
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
<<<<<<< Updated upstream
 8005a8c:	b480      	push	{r7}
 8005a8e:	b08b      	sub	sp, #44	; 0x2c
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
=======
 80072b4:	b480      	push	{r7}
 80072b6:	b08b      	sub	sp, #44	; 0x2c
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
<<<<<<< Updated upstream
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	041a      	lsls	r2, r3, #16
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ac4:	d174      	bne.n	8005bb0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005acc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005adc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	e053      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d106      	bne.n	8005b14 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e048      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d111      	bne.n	8005b40 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	0cdb      	lsrs	r3, r3, #19
 8005b20:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	0a9b      	lsrs	r3, r3, #10
 8005b26:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	02db      	lsls	r3, r3, #11
 8005b36:	4313      	orrs	r3, r2
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3e:	e032      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d117      	bne.n	8005b78 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	0fdb      	lsrs	r3, r3, #31
 8005b4c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	0cdb      	lsrs	r3, r3, #19
 8005b52:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	0adb      	lsrs	r3, r3, #11
 8005b58:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	029b      	lsls	r3, r3, #10
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	03db      	lsls	r3, r3, #15
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
 8005b76:	e016      	b.n	8005ba6 <DMA2D_SetConfig+0x11a>
=======
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	041a      	lsls	r2, r3, #16
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	431a      	orrs	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072ec:	d174      	bne.n	80073d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80072f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007304:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d108      	bne.n	8007326 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	431a      	orrs	r2, r3
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	4313      	orrs	r3, r2
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
 8007324:	e053      	b.n	80073ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d106      	bne.n	800733c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4313      	orrs	r3, r2
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
 800733a:	e048      	b.n	80073ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d111      	bne.n	8007368 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	0cdb      	lsrs	r3, r3, #19
 8007348:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	0a9b      	lsrs	r3, r3, #10
 800734e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	08db      	lsrs	r3, r3, #3
 8007354:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	02db      	lsls	r3, r3, #11
 800735e:	4313      	orrs	r3, r2
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
 8007366:	e032      	b.n	80073ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b03      	cmp	r3, #3
 800736e:	d117      	bne.n	80073a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	0fdb      	lsrs	r3, r3, #31
 8007374:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	0cdb      	lsrs	r3, r3, #19
 800737a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	0adb      	lsrs	r3, r3, #11
 8007380:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	029b      	lsls	r3, r3, #10
 8007390:	431a      	orrs	r2, r3
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	03db      	lsls	r3, r3, #15
 8007396:	4313      	orrs	r3, r2
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
 800739e:	e016      	b.n	80073ce <DMA2D_SetConfig+0x11a>
>>>>>>> Stashed changes
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
<<<<<<< Updated upstream
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	0f1b      	lsrs	r3, r3, #28
 8005b7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	0d1b      	lsrs	r3, r3, #20
 8005b82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	0b1b      	lsrs	r3, r3, #12
 8005b88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
=======
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	0f1b      	lsrs	r3, r3, #28
 80073a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	0d1b      	lsrs	r3, r3, #20
 80073aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	0b1b      	lsrs	r3, r3, #12
 80073b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	091b      	lsrs	r3, r3, #4
 80073b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	011a      	lsls	r2, r3, #4
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	431a      	orrs	r2, r3
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	031b      	lsls	r3, r3, #12
 80073c6:	4313      	orrs	r3, r2
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
<<<<<<< Updated upstream
 8005bae:	e003      	b.n	8005bb8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	372c      	adds	r7, #44	; 0x2c
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_GPIO_Init>:
=======
 80073d6:	e003      	b.n	80073e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	60da      	str	r2, [r3, #12]
}
 80073e0:	bf00      	nop
 80073e2:	372c      	adds	r7, #44	; 0x2c
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
=======
 80073ec:	b480      	push	{r7}
 80073ee:	b089      	sub	sp, #36	; 0x24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007402:	2300      	movs	r3, #0
 8007404:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	e175      	b.n	8005ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005be4:	2201      	movs	r2, #1
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	f040 8164 	bne.w	8005eca <HAL_GPIO_Init+0x306>
=======
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	e175      	b.n	80076f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800740c:	2201      	movs	r2, #1
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4013      	ands	r3, r2
 800741e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	429a      	cmp	r2, r3
 8007426:	f040 8164 	bne.w	80076f2 <HAL_GPIO_Init+0x306>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< Updated upstream
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d00b      	beq.n	8005c22 <HAL_GPIO_Init+0x5e>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d007      	beq.n	8005c22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c16:	2b11      	cmp	r3, #17
 8005c18:	d003      	beq.n	8005c22 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b12      	cmp	r3, #18
 8005c20:	d130      	bne.n	8005c84 <HAL_GPIO_Init+0xc0>
=======
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d00b      	beq.n	800744a <HAL_GPIO_Init+0x5e>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d007      	beq.n	800744a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800743e:	2b11      	cmp	r3, #17
 8007440:	d003      	beq.n	800744a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b12      	cmp	r3, #18
 8007448:	d130      	bne.n	80074ac <HAL_GPIO_Init+0xc0>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c58:	2201      	movs	r2, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 0201 	and.w	r2, r3, #1
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	605a      	str	r2, [r3, #4]
=======
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	2203      	movs	r2, #3
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43db      	mvns	r3, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4313      	orrs	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007480:	2201      	movs	r2, #1
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	43db      	mvns	r3, r3
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	4013      	ands	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	f003 0201 	and.w	r2, r3, #1
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	2203      	movs	r2, #3
 8005c90:	fa02 f303 	lsl.w	r3, r2, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d003      	beq.n	8005cc4 <HAL_GPIO_Init+0x100>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b12      	cmp	r3, #18
 8005cc2:	d123      	bne.n	8005d0c <HAL_GPIO_Init+0x148>
=======
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	2203      	movs	r2, #3
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	43db      	mvns	r3, r3
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4013      	ands	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d003      	beq.n	80074ec <HAL_GPIO_Init+0x100>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b12      	cmp	r3, #18
 80074ea:	d123      	bne.n	8007534 <HAL_GPIO_Init+0x148>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
<<<<<<< Updated upstream
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	08da      	lsrs	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3208      	adds	r2, #8
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	220f      	movs	r2, #15
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	08da      	lsrs	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3208      	adds	r2, #8
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	08da      	lsrs	r2, r3, #3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3208      	adds	r2, #8
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	220f      	movs	r2, #15
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	43db      	mvns	r3, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4013      	ands	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	fa02 f303 	lsl.w	r3, r2, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4313      	orrs	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	08da      	lsrs	r2, r3, #3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3208      	adds	r2, #8
 800752e:	69b9      	ldr	r1, [r7, #24]
 8007530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	2203      	movs	r2, #3
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 0203 	and.w	r2, r3, #3
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	601a      	str	r2, [r3, #0]
=======
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	2203      	movs	r2, #3
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	43db      	mvns	r3, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4013      	ands	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f003 0203 	and.w	r2, r3, #3
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	4313      	orrs	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< Updated upstream
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80be 	beq.w	8005eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4e:	4b65      	ldr	r3, [pc, #404]	; (8005ee4 <HAL_GPIO_Init+0x320>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	4a64      	ldr	r2, [pc, #400]	; (8005ee4 <HAL_GPIO_Init+0x320>)
 8005d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d58:	6453      	str	r3, [r2, #68]	; 0x44
 8005d5a:	4b62      	ldr	r3, [pc, #392]	; (8005ee4 <HAL_GPIO_Init+0x320>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005d66:	4a60      	ldr	r2, [pc, #384]	; (8005ee8 <HAL_GPIO_Init+0x324>)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	220f      	movs	r2, #15
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a57      	ldr	r2, [pc, #348]	; (8005eec <HAL_GPIO_Init+0x328>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d037      	beq.n	8005e02 <HAL_GPIO_Init+0x23e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a56      	ldr	r2, [pc, #344]	; (8005ef0 <HAL_GPIO_Init+0x32c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_GPIO_Init+0x23a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a55      	ldr	r2, [pc, #340]	; (8005ef4 <HAL_GPIO_Init+0x330>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02b      	beq.n	8005dfa <HAL_GPIO_Init+0x236>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a54      	ldr	r2, [pc, #336]	; (8005ef8 <HAL_GPIO_Init+0x334>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d025      	beq.n	8005df6 <HAL_GPIO_Init+0x232>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a53      	ldr	r2, [pc, #332]	; (8005efc <HAL_GPIO_Init+0x338>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01f      	beq.n	8005df2 <HAL_GPIO_Init+0x22e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a52      	ldr	r2, [pc, #328]	; (8005f00 <HAL_GPIO_Init+0x33c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d019      	beq.n	8005dee <HAL_GPIO_Init+0x22a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a51      	ldr	r2, [pc, #324]	; (8005f04 <HAL_GPIO_Init+0x340>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_GPIO_Init+0x226>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a50      	ldr	r2, [pc, #320]	; (8005f08 <HAL_GPIO_Init+0x344>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00d      	beq.n	8005de6 <HAL_GPIO_Init+0x222>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a4f      	ldr	r2, [pc, #316]	; (8005f0c <HAL_GPIO_Init+0x348>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <HAL_GPIO_Init+0x21e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a4e      	ldr	r2, [pc, #312]	; (8005f10 <HAL_GPIO_Init+0x34c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_GPIO_Init+0x21a>
 8005dda:	2309      	movs	r3, #9
 8005ddc:	e012      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dde:	230a      	movs	r3, #10
 8005de0:	e010      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005de2:	2308      	movs	r3, #8
 8005de4:	e00e      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005de6:	2307      	movs	r3, #7
 8005de8:	e00c      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dea:	2306      	movs	r3, #6
 8005dec:	e00a      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dee:	2305      	movs	r3, #5
 8005df0:	e008      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005df2:	2304      	movs	r3, #4
 8005df4:	e006      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005df6:	2303      	movs	r3, #3
 8005df8:	e004      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e002      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_GPIO_Init+0x240>
 8005e02:	2300      	movs	r3, #0
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	f002 0203 	and.w	r2, r2, #3
 8005e0a:	0092      	lsls	r2, r2, #2
 8005e0c:	4093      	lsls	r3, r2
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005e14:	4934      	ldr	r1, [pc, #208]	; (8005ee8 <HAL_GPIO_Init+0x324>)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e22:	4b3c      	ldr	r3, [pc, #240]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e46:	4a33      	ldr	r2, [pc, #204]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	43db      	mvns	r3, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e70:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <HAL_GPIO_Init+0x350>)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b0f      	cmp	r3, #15
 8005ed4:	f67f ae86 	bls.w	8005be4 <HAL_GPIO_Init+0x20>
=======
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80be 	beq.w	80076f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007576:	4b65      	ldr	r3, [pc, #404]	; (800770c <HAL_GPIO_Init+0x320>)
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	4a64      	ldr	r2, [pc, #400]	; (800770c <HAL_GPIO_Init+0x320>)
 800757c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007580:	6453      	str	r3, [r2, #68]	; 0x44
 8007582:	4b62      	ldr	r3, [pc, #392]	; (800770c <HAL_GPIO_Init+0x320>)
 8007584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800758e:	4a60      	ldr	r2, [pc, #384]	; (8007710 <HAL_GPIO_Init+0x324>)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	3302      	adds	r3, #2
 8007596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800759a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	220f      	movs	r2, #15
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	43db      	mvns	r3, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4013      	ands	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a57      	ldr	r2, [pc, #348]	; (8007714 <HAL_GPIO_Init+0x328>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d037      	beq.n	800762a <HAL_GPIO_Init+0x23e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a56      	ldr	r2, [pc, #344]	; (8007718 <HAL_GPIO_Init+0x32c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d031      	beq.n	8007626 <HAL_GPIO_Init+0x23a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a55      	ldr	r2, [pc, #340]	; (800771c <HAL_GPIO_Init+0x330>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02b      	beq.n	8007622 <HAL_GPIO_Init+0x236>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a54      	ldr	r2, [pc, #336]	; (8007720 <HAL_GPIO_Init+0x334>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d025      	beq.n	800761e <HAL_GPIO_Init+0x232>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a53      	ldr	r2, [pc, #332]	; (8007724 <HAL_GPIO_Init+0x338>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01f      	beq.n	800761a <HAL_GPIO_Init+0x22e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a52      	ldr	r2, [pc, #328]	; (8007728 <HAL_GPIO_Init+0x33c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d019      	beq.n	8007616 <HAL_GPIO_Init+0x22a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a51      	ldr	r2, [pc, #324]	; (800772c <HAL_GPIO_Init+0x340>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_GPIO_Init+0x226>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a50      	ldr	r2, [pc, #320]	; (8007730 <HAL_GPIO_Init+0x344>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00d      	beq.n	800760e <HAL_GPIO_Init+0x222>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a4f      	ldr	r2, [pc, #316]	; (8007734 <HAL_GPIO_Init+0x348>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <HAL_GPIO_Init+0x21e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a4e      	ldr	r2, [pc, #312]	; (8007738 <HAL_GPIO_Init+0x34c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <HAL_GPIO_Init+0x21a>
 8007602:	2309      	movs	r3, #9
 8007604:	e012      	b.n	800762c <HAL_GPIO_Init+0x240>
 8007606:	230a      	movs	r3, #10
 8007608:	e010      	b.n	800762c <HAL_GPIO_Init+0x240>
 800760a:	2308      	movs	r3, #8
 800760c:	e00e      	b.n	800762c <HAL_GPIO_Init+0x240>
 800760e:	2307      	movs	r3, #7
 8007610:	e00c      	b.n	800762c <HAL_GPIO_Init+0x240>
 8007612:	2306      	movs	r3, #6
 8007614:	e00a      	b.n	800762c <HAL_GPIO_Init+0x240>
 8007616:	2305      	movs	r3, #5
 8007618:	e008      	b.n	800762c <HAL_GPIO_Init+0x240>
 800761a:	2304      	movs	r3, #4
 800761c:	e006      	b.n	800762c <HAL_GPIO_Init+0x240>
 800761e:	2303      	movs	r3, #3
 8007620:	e004      	b.n	800762c <HAL_GPIO_Init+0x240>
 8007622:	2302      	movs	r3, #2
 8007624:	e002      	b.n	800762c <HAL_GPIO_Init+0x240>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <HAL_GPIO_Init+0x240>
 800762a:	2300      	movs	r3, #0
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	f002 0203 	and.w	r2, r2, #3
 8007632:	0092      	lsls	r2, r2, #2
 8007634:	4093      	lsls	r3, r2
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	4313      	orrs	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800763c:	4934      	ldr	r1, [pc, #208]	; (8007710 <HAL_GPIO_Init+0x324>)
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	089b      	lsrs	r3, r3, #2
 8007642:	3302      	adds	r3, #2
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800764a:	4b3c      	ldr	r3, [pc, #240]	; (800773c <HAL_GPIO_Init+0x350>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	43db      	mvns	r3, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800766e:	4a33      	ldr	r2, [pc, #204]	; (800773c <HAL_GPIO_Init+0x350>)
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007674:	4b31      	ldr	r3, [pc, #196]	; (800773c <HAL_GPIO_Init+0x350>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	43db      	mvns	r3, r3
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	4013      	ands	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <HAL_GPIO_Init+0x350>)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800769e:	4b27      	ldr	r3, [pc, #156]	; (800773c <HAL_GPIO_Init+0x350>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076c2:	4a1e      	ldr	r2, [pc, #120]	; (800773c <HAL_GPIO_Init+0x350>)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076c8:	4b1c      	ldr	r3, [pc, #112]	; (800773c <HAL_GPIO_Init+0x350>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	43db      	mvns	r3, r3
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	4013      	ands	r3, r2
 80076d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076ec:	4a13      	ldr	r2, [pc, #76]	; (800773c <HAL_GPIO_Init+0x350>)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3301      	adds	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b0f      	cmp	r3, #15
 80076fc:	f67f ae86 	bls.w	800740c <HAL_GPIO_Init+0x20>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8005ed8:	bf00      	nop
 8005eda:	3724      	adds	r7, #36	; 0x24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40013800 	.word	0x40013800
 8005eec:	40020000 	.word	0x40020000
 8005ef0:	40020400 	.word	0x40020400
 8005ef4:	40020800 	.word	0x40020800
 8005ef8:	40020c00 	.word	0x40020c00
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40021400 	.word	0x40021400
 8005f04:	40021800 	.word	0x40021800
 8005f08:	40021c00 	.word	0x40021c00
 8005f0c:	40022000 	.word	0x40022000
 8005f10:	40022400 	.word	0x40022400
 8005f14:	40013c00 	.word	0x40013c00

08005f18 <HAL_GPIO_DeInit>:
=======
 8007700:	bf00      	nop
 8007702:	3724      	adds	r7, #36	; 0x24
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	40023800 	.word	0x40023800
 8007710:	40013800 	.word	0x40013800
 8007714:	40020000 	.word	0x40020000
 8007718:	40020400 	.word	0x40020400
 800771c:	40020800 	.word	0x40020800
 8007720:	40020c00 	.word	0x40020c00
 8007724:	40021000 	.word	0x40021000
 8007728:	40021400 	.word	0x40021400
 800772c:	40021800 	.word	0x40021800
 8007730:	40021c00 	.word	0x40021c00
 8007734:	40022000 	.word	0x40022000
 8007738:	40022400 	.word	0x40022400
 800773c:	40013c00 	.word	0x40013c00

08007740 <HAL_GPIO_DeInit>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
=======
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e0d9      	b.n	80060e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f34:	2201      	movs	r2, #1
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f040 80c9 	bne.w	80060e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005f50:	4a6a      	ldr	r2, [pc, #424]	; (80060fc <HAL_GPIO_DeInit+0x1e4>)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	3302      	adds	r3, #2
 8005f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a62      	ldr	r2, [pc, #392]	; (8006100 <HAL_GPIO_DeInit+0x1e8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d037      	beq.n	8005fea <HAL_GPIO_DeInit+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a61      	ldr	r2, [pc, #388]	; (8006104 <HAL_GPIO_DeInit+0x1ec>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <HAL_GPIO_DeInit+0xce>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a60      	ldr	r2, [pc, #384]	; (8006108 <HAL_GPIO_DeInit+0x1f0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02b      	beq.n	8005fe2 <HAL_GPIO_DeInit+0xca>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a5f      	ldr	r2, [pc, #380]	; (800610c <HAL_GPIO_DeInit+0x1f4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d025      	beq.n	8005fde <HAL_GPIO_DeInit+0xc6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a5e      	ldr	r2, [pc, #376]	; (8006110 <HAL_GPIO_DeInit+0x1f8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01f      	beq.n	8005fda <HAL_GPIO_DeInit+0xc2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a5d      	ldr	r2, [pc, #372]	; (8006114 <HAL_GPIO_DeInit+0x1fc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d019      	beq.n	8005fd6 <HAL_GPIO_DeInit+0xbe>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a5c      	ldr	r2, [pc, #368]	; (8006118 <HAL_GPIO_DeInit+0x200>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_GPIO_DeInit+0xba>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a5b      	ldr	r2, [pc, #364]	; (800611c <HAL_GPIO_DeInit+0x204>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00d      	beq.n	8005fce <HAL_GPIO_DeInit+0xb6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a5a      	ldr	r2, [pc, #360]	; (8006120 <HAL_GPIO_DeInit+0x208>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <HAL_GPIO_DeInit+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a59      	ldr	r2, [pc, #356]	; (8006124 <HAL_GPIO_DeInit+0x20c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d101      	bne.n	8005fc6 <HAL_GPIO_DeInit+0xae>
 8005fc2:	2309      	movs	r3, #9
 8005fc4:	e012      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e010      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	e00e      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fce:	2307      	movs	r3, #7
 8005fd0:	e00c      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fd2:	2306      	movs	r3, #6
 8005fd4:	e00a      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fd6:	2305      	movs	r3, #5
 8005fd8:	e008      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	e006      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e004      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e002      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <HAL_GPIO_DeInit+0xd4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	f002 0203 	and.w	r2, r2, #3
 8005ff2:	0092      	lsls	r2, r2, #2
 8005ff4:	4093      	lsls	r3, r2
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d132      	bne.n	8006062 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ffc:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	43db      	mvns	r3, r3
 8006004:	4948      	ldr	r1, [pc, #288]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006006:	4013      	ands	r3, r2
 8006008:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800600a:	4b47      	ldr	r3, [pc, #284]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	43db      	mvns	r3, r3
 8006012:	4945      	ldr	r1, [pc, #276]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006014:	4013      	ands	r3, r2
 8006016:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006018:	4b43      	ldr	r3, [pc, #268]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	43db      	mvns	r3, r3
 8006020:	4941      	ldr	r1, [pc, #260]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006022:	4013      	ands	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006026:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	43db      	mvns	r3, r3
 800602e:	493e      	ldr	r1, [pc, #248]	; (8006128 <HAL_GPIO_DeInit+0x210>)
 8006030:	4013      	ands	r3, r2
 8006032:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	220f      	movs	r2, #15
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006044:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <HAL_GPIO_DeInit+0x1e4>)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	3302      	adds	r3, #2
 800604c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	43da      	mvns	r2, r3
 8006054:	4829      	ldr	r0, [pc, #164]	; (80060fc <HAL_GPIO_DeInit+0x1e4>)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	089b      	lsrs	r3, r3, #2
 800605a:	400a      	ands	r2, r1
 800605c:	3302      	adds	r3, #2
 800605e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
=======
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e0d9      	b.n	8007910 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800775c:	2201      	movs	r2, #1
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4013      	ands	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	429a      	cmp	r2, r3
 8007774:	f040 80c9 	bne.w	800790a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007778:	4a6a      	ldr	r2, [pc, #424]	; (8007924 <HAL_GPIO_DeInit+0x1e4>)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	089b      	lsrs	r3, r3, #2
 800777e:	3302      	adds	r3, #2
 8007780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007784:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	220f      	movs	r2, #15
 8007790:	fa02 f303 	lsl.w	r3, r2, r3
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	4013      	ands	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a62      	ldr	r2, [pc, #392]	; (8007928 <HAL_GPIO_DeInit+0x1e8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d037      	beq.n	8007812 <HAL_GPIO_DeInit+0xd2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a61      	ldr	r2, [pc, #388]	; (800792c <HAL_GPIO_DeInit+0x1ec>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d031      	beq.n	800780e <HAL_GPIO_DeInit+0xce>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a60      	ldr	r2, [pc, #384]	; (8007930 <HAL_GPIO_DeInit+0x1f0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d02b      	beq.n	800780a <HAL_GPIO_DeInit+0xca>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a5f      	ldr	r2, [pc, #380]	; (8007934 <HAL_GPIO_DeInit+0x1f4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d025      	beq.n	8007806 <HAL_GPIO_DeInit+0xc6>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a5e      	ldr	r2, [pc, #376]	; (8007938 <HAL_GPIO_DeInit+0x1f8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01f      	beq.n	8007802 <HAL_GPIO_DeInit+0xc2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a5d      	ldr	r2, [pc, #372]	; (800793c <HAL_GPIO_DeInit+0x1fc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d019      	beq.n	80077fe <HAL_GPIO_DeInit+0xbe>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a5c      	ldr	r2, [pc, #368]	; (8007940 <HAL_GPIO_DeInit+0x200>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <HAL_GPIO_DeInit+0xba>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a5b      	ldr	r2, [pc, #364]	; (8007944 <HAL_GPIO_DeInit+0x204>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00d      	beq.n	80077f6 <HAL_GPIO_DeInit+0xb6>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a5a      	ldr	r2, [pc, #360]	; (8007948 <HAL_GPIO_DeInit+0x208>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d007      	beq.n	80077f2 <HAL_GPIO_DeInit+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a59      	ldr	r2, [pc, #356]	; (800794c <HAL_GPIO_DeInit+0x20c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d101      	bne.n	80077ee <HAL_GPIO_DeInit+0xae>
 80077ea:	2309      	movs	r3, #9
 80077ec:	e012      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 80077ee:	230a      	movs	r3, #10
 80077f0:	e010      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 80077f2:	2308      	movs	r3, #8
 80077f4:	e00e      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 80077f6:	2307      	movs	r3, #7
 80077f8:	e00c      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 80077fa:	2306      	movs	r3, #6
 80077fc:	e00a      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 80077fe:	2305      	movs	r3, #5
 8007800:	e008      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 8007802:	2304      	movs	r3, #4
 8007804:	e006      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 8007806:	2303      	movs	r3, #3
 8007808:	e004      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 800780a:	2302      	movs	r3, #2
 800780c:	e002      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <HAL_GPIO_DeInit+0xd4>
 8007812:	2300      	movs	r3, #0
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	f002 0203 	and.w	r2, r2, #3
 800781a:	0092      	lsls	r2, r2, #2
 800781c:	4093      	lsls	r3, r2
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d132      	bne.n	800788a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007824:	4b4a      	ldr	r3, [pc, #296]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	43db      	mvns	r3, r3
 800782c:	4948      	ldr	r1, [pc, #288]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 800782e:	4013      	ands	r3, r2
 8007830:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007832:	4b47      	ldr	r3, [pc, #284]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	43db      	mvns	r3, r3
 800783a:	4945      	ldr	r1, [pc, #276]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 800783c:	4013      	ands	r3, r2
 800783e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007840:	4b43      	ldr	r3, [pc, #268]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	43db      	mvns	r3, r3
 8007848:	4941      	ldr	r1, [pc, #260]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 800784a:	4013      	ands	r3, r2
 800784c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800784e:	4b40      	ldr	r3, [pc, #256]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	43db      	mvns	r3, r3
 8007856:	493e      	ldr	r1, [pc, #248]	; (8007950 <HAL_GPIO_DeInit+0x210>)
 8007858:	4013      	ands	r3, r2
 800785a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	220f      	movs	r2, #15
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800786c:	4a2d      	ldr	r2, [pc, #180]	; (8007924 <HAL_GPIO_DeInit+0x1e4>)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	089b      	lsrs	r3, r3, #2
 8007872:	3302      	adds	r3, #2
 8007874:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	43da      	mvns	r2, r3
 800787c:	4829      	ldr	r0, [pc, #164]	; (8007924 <HAL_GPIO_DeInit+0x1e4>)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	089b      	lsrs	r3, r3, #2
 8007882:	400a      	ands	r2, r1
 8007884:	3302      	adds	r3, #2
 8007886:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
>>>>>>> Stashed changes
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
<<<<<<< Updated upstream
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	2103      	movs	r1, #3
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	08da      	lsrs	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3208      	adds	r2, #8
 8006080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	220f      	movs	r2, #15
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	43db      	mvns	r3, r3
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	08d2      	lsrs	r2, r2, #3
 8006098:	4019      	ands	r1, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3208      	adds	r2, #8
 800609e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2103      	movs	r1, #3
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	2101      	movs	r1, #1
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	401a      	ands	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	2103      	movs	r1, #3
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	401a      	ands	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	3301      	adds	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	f67f af22 	bls.w	8005f34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40013800 	.word	0x40013800
 8006100:	40020000 	.word	0x40020000
 8006104:	40020400 	.word	0x40020400
 8006108:	40020800 	.word	0x40020800
 800610c:	40020c00 	.word	0x40020c00
 8006110:	40021000 	.word	0x40021000
 8006114:	40021400 	.word	0x40021400
 8006118:	40021800 	.word	0x40021800
 800611c:	40021c00 	.word	0x40021c00
 8006120:	40022000 	.word	0x40022000
 8006124:	40022400 	.word	0x40022400
 8006128:	40013c00 	.word	0x40013c00

0800612c <HAL_GPIO_ReadPin>:
=======
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	2103      	movs	r1, #3
 8007894:	fa01 f303 	lsl.w	r3, r1, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	401a      	ands	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	08da      	lsrs	r2, r3, #3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3208      	adds	r2, #8
 80078a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	220f      	movs	r2, #15
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	43db      	mvns	r3, r3
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	08d2      	lsrs	r2, r2, #3
 80078c0:	4019      	ands	r1, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3208      	adds	r2, #8
 80078c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	2103      	movs	r1, #3
 80078d4:	fa01 f303 	lsl.w	r3, r1, r3
 80078d8:	43db      	mvns	r3, r3
 80078da:	401a      	ands	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	2101      	movs	r1, #1
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ec:	43db      	mvns	r3, r3
 80078ee:	401a      	ands	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	005b      	lsls	r3, r3, #1
 80078fc:	2103      	movs	r1, #3
 80078fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007902:	43db      	mvns	r3, r3
 8007904:	401a      	ands	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	3301      	adds	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b0f      	cmp	r3, #15
 8007914:	f67f af22 	bls.w	800775c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	40013800 	.word	0x40013800
 8007928:	40020000 	.word	0x40020000
 800792c:	40020400 	.word	0x40020400
 8007930:	40020800 	.word	0x40020800
 8007934:	40020c00 	.word	0x40020c00
 8007938:	40021000 	.word	0x40021000
 800793c:	40021400 	.word	0x40021400
 8007940:	40021800 	.word	0x40021800
 8007944:	40021c00 	.word	0x40021c00
 8007948:	40022000 	.word	0x40022000
 800794c:	40022400 	.word	0x40022400
 8007950:	40013c00 	.word	0x40013c00

08007954 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
=======
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	887b      	ldrh	r3, [r7, #2]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
 8006148:	e001      	b.n	800614e <HAL_GPIO_ReadPin+0x22>
=======
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	887b      	ldrh	r3, [r7, #2]
 8007966:	4013      	ands	r3, r2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
 8007970:	e001      	b.n	8007976 <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_GPIO_WritePin>:
=======
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
 8006168:	4613      	mov	r3, r2
 800616a:	707b      	strb	r3, [r7, #1]
=======
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	807b      	strh	r3, [r7, #2]
 8007990:	4613      	mov	r3, r2
 8007992:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 800616c:	787b      	ldrb	r3, [r7, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006172:	887a      	ldrh	r2, [r7, #2]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]
=======
 8007994:	787b      	ldrb	r3, [r7, #1]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800799a:	887a      	ldrh	r2, [r7, #2]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
<<<<<<< Updated upstream
 8006178:	e003      	b.n	8006182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800617a:	887b      	ldrh	r3, [r7, #2]
 800617c:	041a      	lsls	r2, r3, #16
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	619a      	str	r2, [r3, #24]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_I2C_Init>:
=======
 80079a0:	e003      	b.n	80079aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80079a2:	887b      	ldrh	r3, [r7, #2]
 80079a4:	041a      	lsls	r2, r3, #16
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	619a      	str	r2, [r3, #24]
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80079c2:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079c4:	695a      	ldr	r2, [r3, #20]
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d006      	beq.n	80079dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079ce:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fa fb5e 	bl	8002098 <HAL_GPIO_EXTI_Callback>
  }
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40013c00 	.word	0x40013c00

080079e8 <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e07f      	b.n	80062a2 <HAL_I2C_Init+0x112>
=======
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e07f      	b.n	8007afa <HAL_I2C_Init+0x112>
>>>>>>> Stashed changes
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fd fd80 	bl	8003cbc <HAL_I2C_MspInit>
=======
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fd fd60 	bl	80054d4 <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
=======
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2224      	movs	r2, #36	; 0x24
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0201 	bic.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
<<<<<<< Updated upstream
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061e0:	611a      	str	r2, [r3, #16]
=======
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a38:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
<<<<<<< Updated upstream
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	e006      	b.n	8006218 <HAL_I2C_Init+0x88>
=======
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d107      	bne.n	8007a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a5e:	609a      	str	r2, [r3, #8]
 8007a60:	e006      	b.n	8007a70 <HAL_I2C_Init+0x88>
>>>>>>> Stashed changes
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
<<<<<<< Updated upstream
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006216:	609a      	str	r2, [r3, #8]
=======
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a6e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
<<<<<<< Updated upstream
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d104      	bne.n	800622a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <HAL_I2C_Init+0x11c>)
 8006236:	430b      	orrs	r3, r1
 8006238:	6053      	str	r3, [r2, #4]
=======
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d104      	bne.n	8007a82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6859      	ldr	r1, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <HAL_I2C_Init+0x11c>)
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
<<<<<<< Updated upstream
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	ea42 0103 	orr.w	r1, r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	021a      	lsls	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	60da      	str	r2, [r3, #12]
=======
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	ea42 0103 	orr.w	r1, r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	021a      	lsls	r2, r3, #8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
<<<<<<< Updated upstream
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	02008000 	.word	0x02008000

080062b0 <HAL_I2C_DeInit>:
=======
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69d9      	ldr	r1, [r3, #28]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1a      	ldr	r2, [r3, #32]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0201 	orr.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	02008000 	.word	0x02008000

08007b08 <HAL_I2C_DeInit>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e021      	b.n	8006306 <HAL_I2C_DeInit+0x56>
=======
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e021      	b.n	8007b5e <HAL_I2C_DeInit+0x56>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	; 0x24
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
=======
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2224      	movs	r2, #36	; 0x24
 8007b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0201 	bic.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
<<<<<<< Updated upstream
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fd fd66 	bl	8003dac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_I2C_Mem_Write>:
=======
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fd fd46 	bl	80055c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_I2C_Mem_Write>:
>>>>>>> Stashed changes
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4603      	mov	r3, r0
 8006320:	817b      	strh	r3, [r7, #10]
 8006322:	460b      	mov	r3, r1
 8006324:	813b      	strh	r3, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
=======
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	817b      	strh	r3, [r7, #10]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	813b      	strh	r3, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b20      	cmp	r3, #32
 8006334:	f040 80f9 	bne.w	800652a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_I2C_Mem_Write+0x34>
 800633e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800634a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0ed      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
=======
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	f040 80f9 	bne.w	8007d82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_I2C_Mem_Write+0x34>
 8007b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d105      	bne.n	8007ba8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0ed      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_I2C_Mem_Write+0x4e>
 800635a:	2302      	movs	r3, #2
 800635c:	e0e6      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006366:	f7fe fa0b 	bl	8004780 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2319      	movs	r3, #25
 8006372:	2201      	movs	r2, #1
 8006374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fad1 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0d1      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2221      	movs	r2, #33	; 0x21
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2240      	movs	r2, #64	; 0x40
 8006394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063b0:	88f8      	ldrh	r0, [r7, #6]
 80063b2:	893a      	ldrh	r2, [r7, #8]
 80063b4:	8979      	ldrh	r1, [r7, #10]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4603      	mov	r3, r0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f9e1 	bl	8006788 <I2C_RequestMemoryWrite>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0a9      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
=======
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_I2C_Mem_Write+0x4e>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e0e6      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bbe:	f7fe f9f3 	bl	8005fa8 <HAL_GetTick>
 8007bc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	2319      	movs	r3, #25
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fad1 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0d1      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2221      	movs	r2, #33	; 0x21
 8007be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2240      	movs	r2, #64	; 0x40
 8007bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c08:	88f8      	ldrh	r0, [r7, #6]
 8007c0a:	893a      	ldrh	r2, [r7, #8]
 8007c0c:	8979      	ldrh	r1, [r7, #10]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4603      	mov	r3, r0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f9e1 	bl	8007fe0 <I2C_RequestMemoryWrite>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0a9      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	d90e      	bls.n	8006400 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	8979      	ldrh	r1, [r7, #10]
 80063f0:	2300      	movs	r3, #0
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fbb3 	bl	8006b64 <I2C_TransferConfig>
 80063fe:	e00f      	b.n	8006420 <HAL_I2C_Mem_Write+0x110>
=======
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2bff      	cmp	r3, #255	; 0xff
 8007c38:	d90e      	bls.n	8007c58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	22ff      	movs	r2, #255	; 0xff
 8007c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	8979      	ldrh	r1, [r7, #10]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fbb3 	bl	80083bc <I2C_TransferConfig>
 8007c56:	e00f      	b.n	8007c78 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640e:	b2da      	uxtb	r2, r3
 8006410:	8979      	ldrh	r1, [r7, #10]
 8006412:	2300      	movs	r3, #0
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fba2 	bl	8006b64 <I2C_TransferConfig>
=======
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	8979      	ldrh	r1, [r7, #10]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fba2 	bl	80083bc <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fabb 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e07b      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
=======
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fabb 	bl	80081f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e07b      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
<<<<<<< Updated upstream
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d034      	beq.n	80064d8 <HAL_I2C_Mem_Write+0x1c8>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d130      	bne.n	80064d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	2200      	movs	r2, #0
 800647e:	2180      	movs	r1, #128	; 0x80
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fa4d 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e04d      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006494:	b29b      	uxth	r3, r3
 8006496:	2bff      	cmp	r3, #255	; 0xff
 8006498:	d90e      	bls.n	80064b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	8979      	ldrh	r1, [r7, #10]
 80064a8:	2300      	movs	r3, #0
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fb57 	bl	8006b64 <I2C_TransferConfig>
 80064b6:	e00f      	b.n	80064d8 <HAL_I2C_Mem_Write+0x1c8>
=======
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d034      	beq.n	8007d30 <HAL_I2C_Mem_Write+0x1c8>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d130      	bne.n	8007d30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fa4d 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e04d      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2bff      	cmp	r3, #255	; 0xff
 8007cf0:	d90e      	bls.n	8007d10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	8979      	ldrh	r1, [r7, #10]
 8007d00:	2300      	movs	r3, #0
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fb57 	bl	80083bc <I2C_TransferConfig>
 8007d0e:	e00f      	b.n	8007d30 <HAL_I2C_Mem_Write+0x1c8>
>>>>>>> Stashed changes
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	8979      	ldrh	r1, [r7, #10]
 80064ca:	2300      	movs	r3, #0
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fb46 	bl	8006b64 <I2C_TransferConfig>
=======
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	8979      	ldrh	r1, [r7, #10]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fb46 	bl	80083bc <I2C_TransferConfig>
>>>>>>> Stashed changes
        }
      }

    }
    while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d19e      	bne.n	8006420 <HAL_I2C_Mem_Write+0x110>
=======
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d19e      	bne.n	8007c78 <HAL_I2C_Mem_Write+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa9a 	bl	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e01a      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
=======
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fa9a 	bl	8008278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e01a      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2220      	movs	r2, #32
 80064fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6859      	ldr	r1, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <HAL_I2C_Mem_Write+0x224>)
 800650a:	400b      	ands	r3, r1
 800650c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	e000      	b.n	800652c <HAL_I2C_Mem_Write+0x21c>
=======
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2220      	movs	r2, #32
 8007d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6859      	ldr	r1, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <HAL_I2C_Mem_Write+0x224>)
 8007d62:	400b      	ands	r3, r1
 8007d64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e000      	b.n	8007d84 <HAL_I2C_Mem_Write+0x21c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800652a:	2302      	movs	r3, #2
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	fe00e800 	.word	0xfe00e800

08006538 <HAL_I2C_Mem_Read>:
=======
 8007d82:	2302      	movs	r3, #2
  }
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3718      	adds	r7, #24
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	fe00e800 	.word	0xfe00e800

08007d90 <HAL_I2C_Mem_Read>:
>>>>>>> Stashed changes
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4603      	mov	r3, r0
 8006548:	817b      	strh	r3, [r7, #10]
 800654a:	460b      	mov	r3, r1
 800654c:	813b      	strh	r3, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
=======
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	817b      	strh	r3, [r7, #10]
 8007da2:	460b      	mov	r3, r1
 8007da4:	813b      	strh	r3, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b20      	cmp	r3, #32
 800655c:	f040 80fd 	bne.w	800675a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_I2C_Mem_Read+0x34>
 8006566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0f1      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
=======
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	f040 80fd 	bne.w	8007fb2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_I2C_Mem_Read+0x34>
 8007dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0f1      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< Updated upstream
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_I2C_Mem_Read+0x4e>
 8006582:	2302      	movs	r3, #2
 8006584:	e0ea      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800658e:	f7fe f8f7 	bl	8004780 <HAL_GetTick>
 8006592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2319      	movs	r3, #25
 800659a:	2201      	movs	r2, #1
 800659c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f9bd 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e0d5      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2222      	movs	r2, #34	; 0x22
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a3a      	ldr	r2, [r7, #32]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065d8:	88f8      	ldrh	r0, [r7, #6]
 80065da:	893a      	ldrh	r2, [r7, #8]
 80065dc:	8979      	ldrh	r1, [r7, #10]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	4603      	mov	r3, r0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f921 	bl	8006830 <I2C_RequestMemoryRead>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e0ad      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
=======
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_I2C_Mem_Read+0x4e>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0ea      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007de6:	f7fe f8df 	bl	8005fa8 <HAL_GetTick>
 8007dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	2319      	movs	r3, #25
 8007df2:	2201      	movs	r2, #1
 8007df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f9bd 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0d5      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2222      	movs	r2, #34	; 0x22
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2240      	movs	r2, #64	; 0x40
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a3a      	ldr	r2, [r7, #32]
 8007e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e30:	88f8      	ldrh	r0, [r7, #6]
 8007e32:	893a      	ldrh	r2, [r7, #8]
 8007e34:	8979      	ldrh	r1, [r7, #10]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4603      	mov	r3, r0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f921 	bl	8008088 <I2C_RequestMemoryRead>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0ad      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
<<<<<<< Updated upstream
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29b      	uxth	r3, r3
 8006606:	2bff      	cmp	r3, #255	; 0xff
 8006608:	d90e      	bls.n	8006628 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	22ff      	movs	r2, #255	; 0xff
 800660e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006614:	b2da      	uxtb	r2, r3
 8006616:	8979      	ldrh	r1, [r7, #10]
 8006618:	4b52      	ldr	r3, [pc, #328]	; (8006764 <HAL_I2C_Mem_Read+0x22c>)
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fa9f 	bl	8006b64 <I2C_TransferConfig>
 8006626:	e00f      	b.n	8006648 <HAL_I2C_Mem_Read+0x110>
=======
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2bff      	cmp	r3, #255	; 0xff
 8007e60:	d90e      	bls.n	8007e80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	8979      	ldrh	r1, [r7, #10]
 8007e70:	4b52      	ldr	r3, [pc, #328]	; (8007fbc <HAL_I2C_Mem_Read+0x22c>)
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fa9f 	bl	80083bc <I2C_TransferConfig>
 8007e7e:	e00f      	b.n	8007ea0 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006636:	b2da      	uxtb	r2, r3
 8006638:	8979      	ldrh	r1, [r7, #10]
 800663a:	4b4a      	ldr	r3, [pc, #296]	; (8006764 <HAL_I2C_Mem_Read+0x22c>)
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fa8e 	bl	8006b64 <I2C_TransferConfig>
=======
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	8979      	ldrh	r1, [r7, #10]
 8007e92:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <HAL_I2C_Mem_Read+0x22c>)
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fa8e 	bl	80083bc <I2C_TransferConfig>
>>>>>>> Stashed changes
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	2200      	movs	r2, #0
 8006650:	2104      	movs	r1, #4
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f964 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e07c      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
=======
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2104      	movs	r1, #4
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f964 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e07c      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
<<<<<<< Updated upstream
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d034      	beq.n	8006708 <HAL_I2C_Mem_Read+0x1d0>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d130      	bne.n	8006708 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	2200      	movs	r2, #0
 80066ae:	2180      	movs	r1, #128	; 0x80
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f935 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e04d      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2bff      	cmp	r3, #255	; 0xff
 80066c8:	d90e      	bls.n	80066e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	8979      	ldrh	r1, [r7, #10]
 80066d8:	2300      	movs	r3, #0
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fa3f 	bl	8006b64 <I2C_TransferConfig>
 80066e6:	e00f      	b.n	8006708 <HAL_I2C_Mem_Read+0x1d0>
=======
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d034      	beq.n	8007f60 <HAL_I2C_Mem_Read+0x1d0>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d130      	bne.n	8007f60 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	2200      	movs	r2, #0
 8007f06:	2180      	movs	r1, #128	; 0x80
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f935 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e04d      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2bff      	cmp	r3, #255	; 0xff
 8007f20:	d90e      	bls.n	8007f40 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	8979      	ldrh	r1, [r7, #10]
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fa3f 	bl	80083bc <I2C_TransferConfig>
 8007f3e:	e00f      	b.n	8007f60 <HAL_I2C_Mem_Read+0x1d0>
>>>>>>> Stashed changes
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
<<<<<<< Updated upstream
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	8979      	ldrh	r1, [r7, #10]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fa2e 	bl	8006b64 <I2C_TransferConfig>
=======
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	8979      	ldrh	r1, [r7, #10]
 8007f52:	2300      	movs	r3, #0
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 fa2e 	bl	80083bc <I2C_TransferConfig>
>>>>>>> Stashed changes
        }
      }
    }
    while (hi2c->XferCount > 0U);
<<<<<<< Updated upstream
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d19a      	bne.n	8006648 <HAL_I2C_Mem_Read+0x110>
=======
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d19a      	bne.n	8007ea0 <HAL_I2C_Mem_Read+0x110>
>>>>>>> Stashed changes

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f982 	bl	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e01a      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
=======
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 f982 	bl	8008278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e01a      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
<<<<<<< Updated upstream
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2220      	movs	r2, #32
 800672c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6859      	ldr	r1, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_I2C_Mem_Read+0x230>)
 800673a:	400b      	ands	r3, r1
 800673c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <HAL_I2C_Mem_Read+0x224>
=======
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2220      	movs	r2, #32
 8007f84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6859      	ldr	r1, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_I2C_Mem_Read+0x230>)
 8007f92:	400b      	ands	r3, r1
 8007f94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e000      	b.n	8007fb4 <HAL_I2C_Mem_Read+0x224>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	80002400 	.word	0x80002400
 8006768:	fe00e800 	.word	0xfe00e800

0800676c <HAL_I2C_GetState>:
=======
 8007fb2:	2302      	movs	r3, #2
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	80002400 	.word	0x80002400
 8007fc0:	fe00e800 	.word	0xfe00e800

08007fc4 <HAL_I2C_GetState>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677a:	b2db      	uxtb	r3, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <I2C_RequestMemoryWrite>:
=======
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd2:	b2db      	uxtb	r3, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <I2C_RequestMemoryWrite>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4603      	mov	r3, r0
 8006798:	817b      	strh	r3, [r7, #10]
 800679a:	460b      	mov	r3, r1
 800679c:	813b      	strh	r3, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	8979      	ldrh	r1, [r7, #10]
 80067a8:	4b20      	ldr	r3, [pc, #128]	; (800682c <I2C_RequestMemoryWrite+0xa4>)
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f9d7 	bl	8006b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 f8f0 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e02c      	b.n	8006824 <I2C_RequestMemoryWrite+0x9c>
=======
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4611      	mov	r1, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	817b      	strh	r3, [r7, #10]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	813b      	strh	r3, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	8979      	ldrh	r1, [r7, #10]
 8008000:	4b20      	ldr	r3, [pc, #128]	; (8008084 <I2C_RequestMemoryWrite+0xa4>)
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f9d7 	bl	80083bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	69b9      	ldr	r1, [r7, #24]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f8f0 	bl	80081f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e02c      	b.n	800807c <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d105      	bne.n	80067dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067d0:	893b      	ldrh	r3, [r7, #8]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	629a      	str	r2, [r3, #40]	; 0x28
 80067da:	e015      	b.n	8006808 <I2C_RequestMemoryWrite+0x80>
=======
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008028:	893b      	ldrh	r3, [r7, #8]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
 8008032:	e015      	b.n	8008060 <I2C_RequestMemoryWrite+0x80>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	0a1b      	lsrs	r3, r3, #8
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	69b9      	ldr	r1, [r7, #24]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f8d6 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e012      	b.n	8006824 <I2C_RequestMemoryWrite+0x9c>
=======
 8008034:	893b      	ldrh	r3, [r7, #8]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	b29b      	uxth	r3, r3
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	69b9      	ldr	r1, [r7, #24]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 f8d6 	bl	80081f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e012      	b.n	800807c <I2C_RequestMemoryWrite+0x9c>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8008056:	893b      	ldrh	r3, [r7, #8]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2200      	movs	r2, #0
 8006810:	2180      	movs	r1, #128	; 0x80
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f884 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	80002000 	.word	0x80002000

08006830 <I2C_RequestMemoryRead>:
=======
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2200      	movs	r2, #0
 8008068:	2180      	movs	r1, #128	; 0x80
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f884 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	80002000 	.word	0x80002000

08008088 <I2C_RequestMemoryRead>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	8979      	ldrh	r1, [r7, #10]
 8006850:	4b20      	ldr	r3, [pc, #128]	; (80068d4 <I2C_RequestMemoryRead+0xa4>)
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f984 	bl	8006b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f89d 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e02c      	b.n	80068ca <I2C_RequestMemoryRead+0x9a>
=======
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4603      	mov	r3, r0
 8008098:	817b      	strh	r3, [r7, #10]
 800809a:	460b      	mov	r3, r1
 800809c:	813b      	strh	r3, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	8979      	ldrh	r1, [r7, #10]
 80080a8:	4b20      	ldr	r3, [pc, #128]	; (800812c <I2C_RequestMemoryRead+0xa4>)
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	2300      	movs	r3, #0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f984 	bl	80083bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f89d 	bl	80081f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e02c      	b.n	8008122 <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< Updated upstream
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d105      	bne.n	8006882 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006876:	893b      	ldrh	r3, [r7, #8]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
 8006880:	e015      	b.n	80068ae <I2C_RequestMemoryRead+0x7e>
=======
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d105      	bne.n	80080da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080ce:	893b      	ldrh	r3, [r7, #8]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28
 80080d8:	e015      	b.n	8008106 <I2C_RequestMemoryRead+0x7e>
>>>>>>> Stashed changes
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< Updated upstream
 8006882:	893b      	ldrh	r3, [r7, #8]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	b29b      	uxth	r3, r3
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	69b9      	ldr	r1, [r7, #24]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f883 	bl	80069a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e012      	b.n	80068ca <I2C_RequestMemoryRead+0x9a>
=======
 80080da:	893b      	ldrh	r3, [r7, #8]
 80080dc:	0a1b      	lsrs	r3, r3, #8
 80080de:	b29b      	uxth	r3, r3
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e8:	69fa      	ldr	r2, [r7, #28]
 80080ea:	69b9      	ldr	r1, [r7, #24]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f883 	bl	80081f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e012      	b.n	8008122 <I2C_RequestMemoryRead+0x9a>
>>>>>>> Stashed changes
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< Updated upstream
 80068a4:	893b      	ldrh	r3, [r7, #8]
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80080fc:	893b      	ldrh	r3, [r7, #8]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2200      	movs	r2, #0
 80068b6:	2140      	movs	r1, #64	; 0x40
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f831 	bl	8006920 <I2C_WaitOnFlagUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	80002000 	.word	0x80002000

080068d8 <I2C_Flush_TXDR>:
=======
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2200      	movs	r2, #0
 800810e:	2140      	movs	r1, #64	; 0x40
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f831 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	80002000 	.word	0x80002000

08008130 <I2C_Flush_TXDR>:
>>>>>>> Stashed changes
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d103      	bne.n	80068f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b02      	cmp	r3, #2
 8008144:	d103      	bne.n	800814e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< Updated upstream
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d007      	beq.n	8006914 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	619a      	str	r2, [r3, #24]
  }
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <I2C_WaitOnFlagUntilTimeout>:
=======
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b01      	cmp	r3, #1
 800815a:	d007      	beq.n	800816c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	619a      	str	r2, [r3, #24]
  }
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006930:	e022      	b.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d01e      	beq.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fd ff21 	bl	8004780 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e00f      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	d0cd      	beq.n	8006932 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008188:	e022      	b.n	80081d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d01e      	beq.n	80081d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008192:	f7fd ff09 	bl	8005fa8 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d302      	bcc.n	80081a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d113      	bne.n	80081d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e00f      	b.n	80081f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4013      	ands	r3, r2
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	bf0c      	ite	eq
 80081e0:	2301      	moveq	r3, #1
 80081e2:	2300      	movne	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	461a      	mov	r2, r3
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d0cd      	beq.n	800818a <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <I2C_WaitOnTXISFlagUntilTimeout>:
=======
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <I2C_WaitOnTXISFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069ac:	e02c      	b.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f870 	bl	8006a98 <I2C_IsAcknowledgeFailed>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e02a      	b.n	8006a18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
=======
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008204:	e02c      	b.n	8008260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 f870 	bl	80082f0 <I2C_IsAcknowledgeFailed>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e02a      	b.n	8008270 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< Updated upstream
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d01e      	beq.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fd fed9 	bl	8004780 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d113      	bne.n	8006a08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e007      	b.n	8006a18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d1cb      	bne.n	80069ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
=======
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d01e      	beq.n	8008260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008222:	f7fd fec1 	bl	8005fa8 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	429a      	cmp	r2, r3
 8008230:	d302      	bcc.n	8008238 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d113      	bne.n	8008260 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823c:	f043 0220 	orr.w	r2, r3, #32
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e007      	b.n	8008270 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b02      	cmp	r3, #2
 800826c:	d1cb      	bne.n	8008206 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
=======
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <I2C_WaitOnSTOPFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2c:	e028      	b.n	8006a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f830 	bl	8006a98 <I2C_IsAcknowledgeFailed>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e026      	b.n	8006a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
=======
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008284:	e028      	b.n	80082d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f830 	bl	80082f0 <I2C_IsAcknowledgeFailed>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e026      	b.n	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
>>>>>>> Stashed changes
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< Updated upstream
 8006a42:	f7fd fe9d 	bl	8004780 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d302      	bcc.n	8006a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d113      	bne.n	8006a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	f043 0220 	orr.w	r2, r3, #32
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e007      	b.n	8006a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d1cf      	bne.n	8006a2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <I2C_IsAcknowledgeFailed>:
=======
 800829a:	f7fd fe85 	bl	8005fa8 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d302      	bcc.n	80082b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d113      	bne.n	80082d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	f043 0220 	orr.w	r2, r3, #32
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e007      	b.n	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d1cf      	bne.n	8008286 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <I2C_IsAcknowledgeFailed>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d151      	bne.n	8006b56 <I2C_IsAcknowledgeFailed+0xbe>
=======
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f003 0310 	and.w	r3, r3, #16
 8008306:	2b10      	cmp	r3, #16
 8008308:	d151      	bne.n	80083ae <I2C_IsAcknowledgeFailed+0xbe>
>>>>>>> Stashed changes
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
<<<<<<< Updated upstream
 8006ab2:	e022      	b.n	8006afa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d01e      	beq.n	8006afa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abc:	f7fd fe60 	bl	8004780 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d302      	bcc.n	8006ad2 <I2C_IsAcknowledgeFailed+0x3a>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d113      	bne.n	8006afa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e02e      	b.n	8006b58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d1d5      	bne.n	8006ab4 <I2C_IsAcknowledgeFailed+0x1c>
=======
 800830a:	e022      	b.n	8008352 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d01e      	beq.n	8008352 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008314:	f7fd fe48 	bl	8005fa8 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	429a      	cmp	r2, r3
 8008322:	d302      	bcc.n	800832a <I2C_IsAcknowledgeFailed+0x3a>
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d113      	bne.n	8008352 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	f043 0220 	orr.w	r2, r3, #32
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e02e      	b.n	80083b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b20      	cmp	r3, #32
 800835e:	d1d5      	bne.n	800830c <I2C_IsAcknowledgeFailed+0x1c>
>>>>>>> Stashed changes
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< Updated upstream
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2220      	movs	r2, #32
 8006b16:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fedd 	bl	80068d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <I2C_IsAcknowledgeFailed+0xc8>)
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f043 0204 	orr.w	r2, r3, #4
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	fe00e800 	.word	0xfe00e800

08006b64 <I2C_TransferConfig>:
=======
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2210      	movs	r2, #16
 8008366:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2220      	movs	r2, #32
 800836e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff fedd 	bl	8008130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6859      	ldr	r1, [r3, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8008382:	400b      	ands	r3, r1
 8008384:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	f043 0204 	orr.w	r2, r3, #4
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	fe00e800 	.word	0xfe00e800

080083bc <I2C_TransferConfig>:
>>>>>>> Stashed changes
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
<<<<<<< Updated upstream
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	817b      	strh	r3, [r7, #10]
 8006b72:	4613      	mov	r3, r2
 8006b74:	727b      	strb	r3, [r7, #9]
=======
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	817b      	strh	r3, [r7, #10]
 80083ca:	4613      	mov	r3, r2
 80083cc:	727b      	strb	r3, [r7, #9]
>>>>>>> Stashed changes
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
<<<<<<< Updated upstream
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	0d5b      	lsrs	r3, r3, #21
 8006b80:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b84:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <I2C_TransferConfig+0x58>)
 8006b86:	430b      	orrs	r3, r1
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	ea02 0103 	and.w	r1, r2, r3
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b94:	7a7b      	ldrb	r3, [r7, #9]
 8006b96:	041b      	lsls	r3, r3, #16
 8006b98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	03ff63ff 	.word	0x03ff63ff

08006bc0 <HAL_I2CEx_ConfigAnalogFilter>:
=======
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	0d5b      	lsrs	r3, r3, #21
 80083d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80083dc:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <I2C_TransferConfig+0x58>)
 80083de:	430b      	orrs	r3, r1
 80083e0:	43db      	mvns	r3, r3
 80083e2:	ea02 0103 	and.w	r1, r2, r3
 80083e6:	897b      	ldrh	r3, [r7, #10]
 80083e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80083ec:	7a7b      	ldrb	r3, [r7, #9]
 80083ee:	041b      	lsls	r3, r3, #16
 80083f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	431a      	orrs	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	03ff63ff 	.word	0x03ff63ff

08008418 <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< Updated upstream
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
=======
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d138      	bne.n	8006c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e032      	b.n	8006c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2224      	movs	r2, #36	; 0x24
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
=======
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b20      	cmp	r3, #32
 800842c:	d138      	bne.n	80084a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008438:	2302      	movs	r3, #2
 800843a:	e032      	b.n	80084a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2224      	movs	r2, #36	; 0x24
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800846a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f042 0201 	orr.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	e000      	b.n	80084a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 80084a0:	2302      	movs	r3, #2
  }
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< Updated upstream
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
=======
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d139      	bne.n	8006ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e033      	b.n	8006ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0201 	bic.w	r2, r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e000      	b.n	8006ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
=======
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d139      	bne.n	8008538 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e033      	b.n	800853a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	; 0x24
 80084de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008500:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8006ce0:	2302      	movs	r3, #2
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_LTDC_Init>:
=======
 8008538:	2302      	movs	r3, #2
  }
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_LTDC_Init>:
>>>>>>> Stashed changes
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
<<<<<<< Updated upstream
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
=======
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
<<<<<<< Updated upstream
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e0bf      	b.n	8006e82 <HAL_LTDC_Init+0x192>
=======
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e0bf      	b.n	80086da <HAL_LTDC_Init+0x192>
>>>>>>> Stashed changes
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
<<<<<<< Updated upstream
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fd f884 	bl	8003e24 <HAL_LTDC_MspInit>
=======
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fd f864 	bl	800563c <HAL_LTDC_MspInit>
>>>>>>> Stashed changes
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
<<<<<<< Updated upstream
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006d32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6899      	ldr	r1, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b4a      	ldr	r3, [pc, #296]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006d64:	400b      	ands	r3, r1
 8006d66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68d9      	ldr	r1, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006d92:	400b      	ands	r3, r1
 8006d94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1a      	ldr	r2, [r3, #32]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6919      	ldr	r1, [r3, #16]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4b33      	ldr	r3, [pc, #204]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006dc0:	400b      	ands	r3, r1
 8006dc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6919      	ldr	r1, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6959      	ldr	r1, [r3, #20]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <HAL_LTDC_Init+0x19c>)
 8006dee:	400b      	ands	r3, r1
 8006df0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0206 	orr.w	r2, r2, #6
 8006e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	f000f800 	.word	0xf000f800

08006e90 <HAL_LTDC_IRQHandler>:
=======
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800858a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6999      	ldr	r1, [r3, #24]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6899      	ldr	r1, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4b4a      	ldr	r3, [pc, #296]	; (80086e4 <HAL_LTDC_Init+0x19c>)
 80085bc:	400b      	ands	r3, r1
 80085be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	041b      	lsls	r3, r3, #16
 80085c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6899      	ldr	r1, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699a      	ldr	r2, [r3, #24]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68d9      	ldr	r1, [r3, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	4b3e      	ldr	r3, [pc, #248]	; (80086e4 <HAL_LTDC_Init+0x19c>)
 80085ea:	400b      	ands	r3, r1
 80085ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	041b      	lsls	r3, r3, #16
 80085f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68d9      	ldr	r1, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1a      	ldr	r2, [r3, #32]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	430a      	orrs	r2, r1
 800860a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6919      	ldr	r1, [r3, #16]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b33      	ldr	r3, [pc, #204]	; (80086e4 <HAL_LTDC_Init+0x19c>)
 8008618:	400b      	ands	r3, r1
 800861a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	041b      	lsls	r3, r3, #16
 8008622:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6919      	ldr	r1, [r3, #16]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6959      	ldr	r1, [r3, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <HAL_LTDC_Init+0x19c>)
 8008646:	400b      	ands	r3, r1
 8008648:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6959      	ldr	r1, [r3, #20]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	430a      	orrs	r2, r1
 8008666:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800866e:	021b      	lsls	r3, r3, #8
 8008670:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008678:	041b      	lsls	r3, r3, #16
 800867a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800868a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800869e:	431a      	orrs	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	430a      	orrs	r2, r1
 80086a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0206 	orr.w	r2, r2, #6
 80086b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0201 	orr.w	r2, r2, #1
 80086c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	f000f800 	.word	0xf000f800

080086e8 <HAL_LTDC_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
<<<<<<< Updated upstream
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d023      	beq.n	8006efa <HAL_LTDC_IRQHandler+0x6a>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01e      	beq.n	8006efa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0204 	bic.w	r2, r2, #4
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006eda:	f043 0201 	orr.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
=======
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	d023      	beq.n	8008752 <HAL_LTDC_IRQHandler+0x6a>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01e      	beq.n	8008752 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0204 	bic.w	r2, r2, #4
 8008722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2204      	movs	r2, #4
 800872a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008732:	f043 0201 	orr.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2204      	movs	r2, #4
 8008740:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
>>>>>>> Stashed changes
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
<<<<<<< Updated upstream
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f86f 	bl	8006fd8 <HAL_LTDC_ErrorCallback>
=======
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f86f 	bl	8008830 <HAL_LTDC_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
<<<<<<< Updated upstream
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d023      	beq.n	8006f4c <HAL_LTDC_IRQHandler+0xbc>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01e      	beq.n	8006f4c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0202 	bic.w	r2, r2, #2
 8006f1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2202      	movs	r2, #2
 8006f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f2c:	f043 0202 	orr.w	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
=======
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d023      	beq.n	80087a4 <HAL_LTDC_IRQHandler+0xbc>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d01e      	beq.n	80087a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0202 	bic.w	r2, r2, #2
 8008774:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2202      	movs	r2, #2
 800877c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008784:	f043 0202 	orr.w	r2, r3, #2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2204      	movs	r2, #4
 8008792:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
>>>>>>> Stashed changes
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
<<<<<<< Updated upstream
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f846 	bl	8006fd8 <HAL_LTDC_ErrorCallback>
=======
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f846 	bl	8008830 <HAL_LTDC_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
<<<<<<< Updated upstream
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01b      	beq.n	8006f8e <HAL_LTDC_IRQHandler+0xfe>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d016      	beq.n	8006f8e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
=======
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d01b      	beq.n	80087e6 <HAL_LTDC_IRQHandler+0xfe>
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d016      	beq.n	80087e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2201      	movs	r2, #1
 80087ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
>>>>>>> Stashed changes
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
<<<<<<< Updated upstream
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f82f 	bl	8006fec <HAL_LTDC_LineEventCallback>
=======
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f82f 	bl	8008844 <HAL_LTDC_LineEventCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
<<<<<<< Updated upstream
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01b      	beq.n	8006fd0 <HAL_LTDC_IRQHandler+0x140>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d016      	beq.n	8006fd0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0208 	bic.w	r2, r2, #8
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
=======
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <HAL_LTDC_IRQHandler+0x140>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d016      	beq.n	8008828 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0208 	bic.w	r2, r2, #8
 8008808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2208      	movs	r2, #8
 8008810:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
>>>>>>> Stashed changes
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
<<<<<<< Updated upstream
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f818 	bl	8007000 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_LTDC_ErrorCallback>:
=======
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f818 	bl	8008858 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008828:	bf00      	nop
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_LTDC_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
<<<<<<< Updated upstream
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
=======
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_LTDC_LineEventCallback>:
=======
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_LTDC_LineEventCallback>:
>>>>>>> Stashed changes
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
<<<<<<< Updated upstream
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
=======
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_LTDC_ReloadEventCallback>:
=======
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_LTDC_ReloadEventCallback>:
>>>>>>> Stashed changes
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
<<<<<<< Updated upstream
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
=======
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_LTDC_ConfigLayer>:
=======
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_LTDC_ConfigLayer>:
>>>>>>> Stashed changes
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
<<<<<<< Updated upstream
 8007014:	b5b0      	push	{r4, r5, r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
=======
 800886c:	b5b0      	push	{r4, r5, r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
<<<<<<< Updated upstream
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_LTDC_ConfigLayer+0x1a>
 800702a:	2302      	movs	r3, #2
 800702c:	e02c      	b.n	8007088 <HAL_LTDC_ConfigLayer+0x74>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2134      	movs	r1, #52	; 0x34
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4614      	mov	r4, r2
 8007052:	461d      	mov	r5, r3
 8007054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800705a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800705e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f855 	bl	8007118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bdb0      	pop	{r4, r5, r7, pc}

08007090 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_LTDC_SetAlpha+0x1a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e024      	b.n	80070f4 <HAL_LTDC_SetAlpha+0x64>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2202      	movs	r2, #2
 80070b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2234      	movs	r2, #52	; 0x34
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	3338      	adds	r3, #56	; 0x38
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6979      	ldr	r1, [r7, #20]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f81f 	bl	8007118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_LTDC_GetState>:
=======
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_LTDC_ConfigLayer+0x1a>
 8008882:	2302      	movs	r3, #2
 8008884:	e02c      	b.n	80088e0 <HAL_LTDC_ConfigLayer+0x74>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2134      	movs	r1, #52	; 0x34
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	4614      	mov	r4, r2
 80088aa:	461d      	mov	r5, r3
 80088ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 f81f 	bl	8008904 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2201      	movs	r2, #1
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bdb0      	pop	{r4, r5, r7, pc}

080088e8 <HAL_LTDC_GetState>:
>>>>>>> Stashed changes
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
<<<<<<< Updated upstream
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800710a:	b2db      	uxtb	r3, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <LTDC_SetConfig>:
=======
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80088f6:	b2db      	uxtb	r3, r3
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <LTDC_SetConfig>:
>>>>>>> Stashed changes
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
<<<<<<< Updated upstream
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
=======
 8008904:	b480      	push	{r7}
 8008906:	b089      	sub	sp, #36	; 0x24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
<<<<<<< Updated upstream
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007134:	4413      	add	r3, r2
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	01db      	lsls	r3, r3, #7
 8007144:	4413      	add	r3, r2
 8007146:	3384      	adds	r3, #132	; 0x84
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	4611      	mov	r1, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	01d2      	lsls	r2, r2, #7
 8007154:	440a      	add	r2, r1
 8007156:	3284      	adds	r2, #132	; 0x84
 8007158:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800715c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800716e:	4413      	add	r3, r2
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	01db      	lsls	r3, r3, #7
 800717c:	440b      	add	r3, r1
 800717e:	3384      	adds	r3, #132	; 0x84
 8007180:	4619      	mov	r1, r3
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4313      	orrs	r3, r2
 8007186:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007196:	4413      	add	r3, r2
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	01db      	lsls	r3, r3, #7
 80071a6:	4413      	add	r3, r2
 80071a8:	3384      	adds	r3, #132	; 0x84
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	4611      	mov	r1, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	01d2      	lsls	r2, r2, #7
 80071b6:	440a      	add	r2, r1
 80071b8:	3284      	adds	r2, #132	; 0x84
 80071ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80071be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ce:	4413      	add	r3, r2
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	01db      	lsls	r3, r3, #7
 80071dc:	440b      	add	r3, r1
 80071de:	3384      	adds	r3, #132	; 0x84
 80071e0:	4619      	mov	r1, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	01db      	lsls	r3, r3, #7
 80071f2:	4413      	add	r3, r2
 80071f4:	3384      	adds	r3, #132	; 0x84
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	4611      	mov	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	01d2      	lsls	r2, r2, #7
 8007202:	440a      	add	r2, r1
 8007204:	3284      	adds	r2, #132	; 0x84
 8007206:	f023 0307 	bic.w	r3, r3, #7
 800720a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	461a      	mov	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	01db      	lsls	r3, r3, #7
 8007216:	4413      	add	r3, r2
 8007218:	3384      	adds	r3, #132	; 0x84
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	061b      	lsls	r3, r3, #24
 800723c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	4413      	add	r3, r2
 800724a:	3384      	adds	r3, #132	; 0x84
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	01db      	lsls	r3, r3, #7
 8007258:	4413      	add	r3, r2
 800725a:	3384      	adds	r3, #132	; 0x84
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007268:	461a      	mov	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	431a      	orrs	r2, r3
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	431a      	orrs	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4619      	mov	r1, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	01db      	lsls	r3, r3, #7
 800727c:	440b      	add	r3, r1
 800727e:	3384      	adds	r3, #132	; 0x84
 8007280:	4619      	mov	r1, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	01db      	lsls	r3, r3, #7
 8007292:	4413      	add	r3, r2
 8007294:	3384      	adds	r3, #132	; 0x84
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	4611      	mov	r1, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	01d2      	lsls	r2, r2, #7
 80072a2:	440a      	add	r2, r1
 80072a4:	3284      	adds	r2, #132	; 0x84
 80072a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80072aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	461a      	mov	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	01db      	lsls	r3, r3, #7
 80072b6:	4413      	add	r3, r2
 80072b8:	3384      	adds	r3, #132	; 0x84
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	01db      	lsls	r3, r3, #7
 80072cc:	4413      	add	r3, r2
 80072ce:	3384      	adds	r3, #132	; 0x84
 80072d0:	69da      	ldr	r2, [r3, #28]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4619      	mov	r1, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	01db      	lsls	r3, r3, #7
 80072dc:	440b      	add	r3, r1
 80072de:	3384      	adds	r3, #132	; 0x84
 80072e0:	4619      	mov	r1, r3
 80072e2:	4b58      	ldr	r3, [pc, #352]	; (8007444 <LTDC_SetConfig+0x32c>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	6809      	ldr	r1, [r1, #0]
 80072f4:	4608      	mov	r0, r1
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	01c9      	lsls	r1, r1, #7
 80072fa:	4401      	add	r1, r0
 80072fc:	3184      	adds	r1, #132	; 0x84
 80072fe:	4313      	orrs	r3, r2
 8007300:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	01db      	lsls	r3, r3, #7
 800730c:	4413      	add	r3, r2
 800730e:	3384      	adds	r3, #132	; 0x84
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	01db      	lsls	r3, r3, #7
 800731c:	4413      	add	r3, r2
 800731e:	3384      	adds	r3, #132	; 0x84
 8007320:	461a      	mov	r2, r3
 8007322:	2300      	movs	r3, #0
 8007324:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	01db      	lsls	r3, r3, #7
 8007330:	4413      	add	r3, r2
 8007332:	3384      	adds	r3, #132	; 0x84
 8007334:	461a      	mov	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d102      	bne.n	800734a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007344:	2304      	movs	r3, #4
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	e01b      	b.n	8007382 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d102      	bne.n	8007358 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007352:	2303      	movs	r3, #3
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	e014      	b.n	8007382 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b04      	cmp	r3, #4
 800735e:	d00b      	beq.n	8007378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007364:	2b02      	cmp	r3, #2
 8007366:	d007      	beq.n	8007378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800736c:	2b03      	cmp	r3, #3
 800736e:	d003      	beq.n	8007378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007374:	2b07      	cmp	r3, #7
 8007376:	d102      	bne.n	800737e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007378:	2302      	movs	r3, #2
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e001      	b.n	8007382 <LTDC_SetConfig+0x26a>
=======
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008920:	4413      	add	r3, r2
 8008922:	041b      	lsls	r3, r3, #16
 8008924:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	01db      	lsls	r3, r3, #7
 8008930:	4413      	add	r3, r2
 8008932:	3384      	adds	r3, #132	; 0x84
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	4611      	mov	r1, r2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	01d2      	lsls	r2, r2, #7
 8008940:	440a      	add	r2, r1
 8008942:	3284      	adds	r2, #132	; 0x84
 8008944:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008948:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800895a:	4413      	add	r3, r2
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	01db      	lsls	r3, r3, #7
 8008968:	440b      	add	r3, r1
 800896a:	3384      	adds	r3, #132	; 0x84
 800896c:	4619      	mov	r1, r3
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4313      	orrs	r3, r2
 8008972:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008982:	4413      	add	r3, r2
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	01db      	lsls	r3, r3, #7
 8008992:	4413      	add	r3, r2
 8008994:	3384      	adds	r3, #132	; 0x84
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	6812      	ldr	r2, [r2, #0]
 800899c:	4611      	mov	r1, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	01d2      	lsls	r2, r2, #7
 80089a2:	440a      	add	r2, r1
 80089a4:	3284      	adds	r2, #132	; 0x84
 80089a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80089aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089ba:	4413      	add	r3, r2
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	01db      	lsls	r3, r3, #7
 80089c8:	440b      	add	r3, r1
 80089ca:	3384      	adds	r3, #132	; 0x84
 80089cc:	4619      	mov	r1, r3
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	01db      	lsls	r3, r3, #7
 80089de:	4413      	add	r3, r2
 80089e0:	3384      	adds	r3, #132	; 0x84
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	4611      	mov	r1, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	01d2      	lsls	r2, r2, #7
 80089ee:	440a      	add	r2, r1
 80089f0:	3284      	adds	r2, #132	; 0x84
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	461a      	mov	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	01db      	lsls	r3, r3, #7
 8008a02:	4413      	add	r3, r2
 8008a04:	3384      	adds	r3, #132	; 0x84
 8008a06:	461a      	mov	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a1e:	041b      	lsls	r3, r3, #16
 8008a20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	061b      	lsls	r3, r3, #24
 8008a28:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	01db      	lsls	r3, r3, #7
 8008a34:	4413      	add	r3, r2
 8008a36:	3384      	adds	r3, #132	; 0x84
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	01db      	lsls	r3, r3, #7
 8008a44:	4413      	add	r3, r2
 8008a46:	3384      	adds	r3, #132	; 0x84
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a54:	461a      	mov	r2, r3
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4619      	mov	r1, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	01db      	lsls	r3, r3, #7
 8008a68:	440b      	add	r3, r1
 8008a6a:	3384      	adds	r3, #132	; 0x84
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	01db      	lsls	r3, r3, #7
 8008a7e:	4413      	add	r3, r2
 8008a80:	3384      	adds	r3, #132	; 0x84
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	01d2      	lsls	r2, r2, #7
 8008a8e:	440a      	add	r2, r1
 8008a90:	3284      	adds	r2, #132	; 0x84
 8008a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	01db      	lsls	r3, r3, #7
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3384      	adds	r3, #132	; 0x84
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	01db      	lsls	r3, r3, #7
 8008ab8:	4413      	add	r3, r2
 8008aba:	3384      	adds	r3, #132	; 0x84
 8008abc:	69da      	ldr	r2, [r3, #28]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	01db      	lsls	r3, r3, #7
 8008ac8:	440b      	add	r3, r1
 8008aca:	3384      	adds	r3, #132	; 0x84
 8008acc:	4619      	mov	r1, r3
 8008ace:	4b58      	ldr	r3, [pc, #352]	; (8008c30 <LTDC_SetConfig+0x32c>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	69da      	ldr	r2, [r3, #28]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	68f9      	ldr	r1, [r7, #12]
 8008ade:	6809      	ldr	r1, [r1, #0]
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	01c9      	lsls	r1, r1, #7
 8008ae6:	4401      	add	r1, r0
 8008ae8:	3184      	adds	r1, #132	; 0x84
 8008aea:	4313      	orrs	r3, r2
 8008aec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	01db      	lsls	r3, r3, #7
 8008af8:	4413      	add	r3, r2
 8008afa:	3384      	adds	r3, #132	; 0x84
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	01db      	lsls	r3, r3, #7
 8008b08:	4413      	add	r3, r2
 8008b0a:	3384      	adds	r3, #132	; 0x84
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2300      	movs	r3, #0
 8008b10:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	01db      	lsls	r3, r3, #7
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3384      	adds	r3, #132	; 0x84
 8008b20:	461a      	mov	r2, r3
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d102      	bne.n	8008b36 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008b30:	2304      	movs	r3, #4
 8008b32:	61fb      	str	r3, [r7, #28]
 8008b34:	e01b      	b.n	8008b6e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d102      	bne.n	8008b44 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	61fb      	str	r3, [r7, #28]
 8008b42:	e014      	b.n	8008b6e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d00b      	beq.n	8008b64 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d007      	beq.n	8008b64 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d003      	beq.n	8008b64 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008b60:	2b07      	cmp	r3, #7
 8008b62:	d102      	bne.n	8008b6a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008b64:	2302      	movs	r3, #2
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	e001      	b.n	8008b6e <LTDC_SetConfig+0x26a>
>>>>>>> Stashed changes
  }
  else
  {
    tmp = 1U;
<<<<<<< Updated upstream
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
=======
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
<<<<<<< Updated upstream
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	4413      	add	r3, r2
 800738e:	3384      	adds	r3, #132	; 0x84
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	4611      	mov	r1, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	01d2      	lsls	r2, r2, #7
 800739c:	440a      	add	r2, r1
 800739e:	3284      	adds	r2, #132	; 0x84
 80073a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80073a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	041a      	lsls	r2, r3, #16
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6859      	ldr	r1, [r3, #4]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1acb      	subs	r3, r1, r3
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	fb01 f303 	mul.w	r3, r1, r3
 80073c2:	3303      	adds	r3, #3
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6809      	ldr	r1, [r1, #0]
 80073c8:	4608      	mov	r0, r1
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	01c9      	lsls	r1, r1, #7
 80073ce:	4401      	add	r1, r0
 80073d0:	3184      	adds	r1, #132	; 0x84
 80073d2:	4313      	orrs	r3, r2
 80073d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	01db      	lsls	r3, r3, #7
 80073e0:	4413      	add	r3, r2
 80073e2:	3384      	adds	r3, #132	; 0x84
 80073e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	01db      	lsls	r3, r3, #7
 80073f0:	440b      	add	r3, r1
 80073f2:	3384      	adds	r3, #132	; 0x84
 80073f4:	4619      	mov	r1, r3
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <LTDC_SetConfig+0x330>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	01db      	lsls	r3, r3, #7
 8007406:	4413      	add	r3, r2
 8007408:	3384      	adds	r3, #132	; 0x84
 800740a:	461a      	mov	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	4413      	add	r3, r2
 800741e:	3384      	adds	r3, #132	; 0x84
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	4611      	mov	r1, r2
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	01d2      	lsls	r2, r2, #7
 800742c:	440a      	add	r2, r1
 800742e:	3284      	adds	r2, #132	; 0x84
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	6013      	str	r3, [r2, #0]
}
 8007436:	bf00      	nop
 8007438:	3724      	adds	r7, #36	; 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	fffff8f8 	.word	0xfffff8f8
 8007448:	fffff800 	.word	0xfffff800

0800744c <HAL_PWR_EnableBkUpAccess>:
=======
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	01db      	lsls	r3, r3, #7
 8008b78:	4413      	add	r3, r2
 8008b7a:	3384      	adds	r3, #132	; 0x84
 8008b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	4611      	mov	r1, r2
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	01d2      	lsls	r2, r2, #7
 8008b88:	440a      	add	r2, r1
 8008b8a:	3284      	adds	r2, #132	; 0x84
 8008b8c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008b90:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	fb02 f303 	mul.w	r3, r2, r3
 8008b9c:	041a      	lsls	r2, r3, #16
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6859      	ldr	r1, [r3, #4]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	1acb      	subs	r3, r1, r3
 8008ba8:	69f9      	ldr	r1, [r7, #28]
 8008baa:	fb01 f303 	mul.w	r3, r1, r3
 8008bae:	3303      	adds	r3, #3
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	6809      	ldr	r1, [r1, #0]
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	01c9      	lsls	r1, r1, #7
 8008bba:	4401      	add	r1, r0
 8008bbc:	3184      	adds	r1, #132	; 0x84
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	01db      	lsls	r3, r3, #7
 8008bcc:	4413      	add	r3, r2
 8008bce:	3384      	adds	r3, #132	; 0x84
 8008bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	01db      	lsls	r3, r3, #7
 8008bdc:	440b      	add	r3, r1
 8008bde:	3384      	adds	r3, #132	; 0x84
 8008be0:	4619      	mov	r1, r3
 8008be2:	4b14      	ldr	r3, [pc, #80]	; (8008c34 <LTDC_SetConfig+0x330>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	01db      	lsls	r3, r3, #7
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3384      	adds	r3, #132	; 0x84
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	01db      	lsls	r3, r3, #7
 8008c08:	4413      	add	r3, r2
 8008c0a:	3384      	adds	r3, #132	; 0x84
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	4611      	mov	r1, r2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	01d2      	lsls	r2, r2, #7
 8008c18:	440a      	add	r2, r1
 8008c1a:	3284      	adds	r2, #132	; 0x84
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	6013      	str	r3, [r2, #0]
}
 8008c22:	bf00      	nop
 8008c24:	3724      	adds	r7, #36	; 0x24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	fffff8f8 	.word	0xfffff8f8
 8008c34:	fffff800 	.word	0xfffff800

08008c38 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> Stashed changes
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< Updated upstream
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a04      	ldr	r2, [pc, #16]	; (8007468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745a:	6013      	str	r3, [r2, #0]
}
 800745c:	bf00      	nop
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	40007000 	.word	0x40007000

0800746c <HAL_PWREx_EnableOverDrive>:
=======
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a04      	ldr	r2, [pc, #16]	; (8008c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c46:	6013      	str	r3, [r2, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40007000 	.word	0x40007000

08008c58 <HAL_PWREx_EnableOverDrive>:
>>>>>>> Stashed changes
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< Updated upstream
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007476:	4b23      	ldr	r3, [pc, #140]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	4a22      	ldr	r2, [pc, #136]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 800747c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007480:	6413      	str	r3, [r2, #64]	; 0x40
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800748e:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800749a:	f7fd f971 	bl	8004780 <HAL_GetTick>
 800749e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074a0:	e009      	b.n	80074b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074a2:	f7fd f96d 	bl	8004780 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b0:	d901      	bls.n	80074b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e022      	b.n	80074fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c2:	d1ee      	bne.n	80074a2 <HAL_PWREx_EnableOverDrive+0x36>
=======
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c62:	4b23      	ldr	r3, [pc, #140]	; (8008cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	4a22      	ldr	r2, [pc, #136]	; (8008cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c6e:	4b20      	ldr	r3, [pc, #128]	; (8008cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008c7a:	4b1e      	ldr	r3, [pc, #120]	; (8008cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a1d      	ldr	r2, [pc, #116]	; (8008cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c86:	f7fd f98f 	bl	8005fa8 <HAL_GetTick>
 8008c8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c8c:	e009      	b.n	8008ca2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c8e:	f7fd f98b 	bl	8005fa8 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c9c:	d901      	bls.n	8008ca2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e022      	b.n	8008ce8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cae:	d1ee      	bne.n	8008c8e <HAL_PWREx_EnableOverDrive+0x36>
>>>>>>> Stashed changes
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< Updated upstream
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074d0:	f7fd f956 	bl	8004780 <HAL_GetTick>
 80074d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074d6:	e009      	b.n	80074ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074d8:	f7fd f952 	bl	8004780 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074e6:	d901      	bls.n	80074ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e007      	b.n	80074fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f8:	d1ee      	bne.n	80074d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40023800 	.word	0x40023800
 8007508:	40007000 	.word	0x40007000

0800750c <HAL_RCC_OscConfig>:
=======
 8008cb0:	4b10      	ldr	r3, [pc, #64]	; (8008cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a0f      	ldr	r2, [pc, #60]	; (8008cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cbc:	f7fd f974 	bl	8005fa8 <HAL_GetTick>
 8008cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cc2:	e009      	b.n	8008cd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cc4:	f7fd f970 	bl	8005fa8 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cd2:	d901      	bls.n	8008cd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e007      	b.n	8008ce8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ce4:	d1ee      	bne.n	8008cc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	40007000 	.word	0x40007000

08008cf8 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e291      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
=======
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008d00:	2300      	movs	r3, #0
 8008d02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e291      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8087 	beq.w	800763e <HAL_RCC_OscConfig+0x132>
=======
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8087 	beq.w	8008e2a <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< Updated upstream
 8007530:	4b96      	ldr	r3, [pc, #600]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 030c 	and.w	r3, r3, #12
 8007538:	2b04      	cmp	r3, #4
 800753a:	d00c      	beq.n	8007556 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800753c:	4b93      	ldr	r3, [pc, #588]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 030c 	and.w	r3, r3, #12
 8007544:	2b08      	cmp	r3, #8
 8007546:	d112      	bne.n	800756e <HAL_RCC_OscConfig+0x62>
 8007548:	4b90      	ldr	r3, [pc, #576]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007554:	d10b      	bne.n	800756e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007556:	4b8d      	ldr	r3, [pc, #564]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d06c      	beq.n	800763c <HAL_RCC_OscConfig+0x130>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d168      	bne.n	800763c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e26b      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
=======
 8008d1c:	4b96      	ldr	r3, [pc, #600]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 030c 	and.w	r3, r3, #12
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d00c      	beq.n	8008d42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d28:	4b93      	ldr	r3, [pc, #588]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 030c 	and.w	r3, r3, #12
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d112      	bne.n	8008d5a <HAL_RCC_OscConfig+0x62>
 8008d34:	4b90      	ldr	r3, [pc, #576]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d40:	d10b      	bne.n	8008d5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d42:	4b8d      	ldr	r3, [pc, #564]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d06c      	beq.n	8008e28 <HAL_RCC_OscConfig+0x130>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d168      	bne.n	8008e28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e26b      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007576:	d106      	bne.n	8007586 <HAL_RCC_OscConfig+0x7a>
 8007578:	4b84      	ldr	r3, [pc, #528]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a83      	ldr	r2, [pc, #524]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800757e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e02e      	b.n	80075e4 <HAL_RCC_OscConfig+0xd8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10c      	bne.n	80075a8 <HAL_RCC_OscConfig+0x9c>
 800758e:	4b7f      	ldr	r3, [pc, #508]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7e      	ldr	r2, [pc, #504]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	4b7c      	ldr	r3, [pc, #496]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a7b      	ldr	r2, [pc, #492]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	e01d      	b.n	80075e4 <HAL_RCC_OscConfig+0xd8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b0:	d10c      	bne.n	80075cc <HAL_RCC_OscConfig+0xc0>
 80075b2:	4b76      	ldr	r3, [pc, #472]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a75      	ldr	r2, [pc, #468]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	4b73      	ldr	r3, [pc, #460]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a72      	ldr	r2, [pc, #456]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e00b      	b.n	80075e4 <HAL_RCC_OscConfig+0xd8>
 80075cc:	4b6f      	ldr	r3, [pc, #444]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a6e      	ldr	r2, [pc, #440]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4b6c      	ldr	r3, [pc, #432]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6b      	ldr	r2, [pc, #428]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80075de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d013      	beq.n	8007614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ec:	f7fd f8c8 	bl	8004780 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075f4:	f7fd f8c4 	bl	8004780 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	; 0x64
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e21f      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007606:	4b61      	ldr	r3, [pc, #388]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0xe8>
 8007612:	e014      	b.n	800763e <HAL_RCC_OscConfig+0x132>
=======
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d62:	d106      	bne.n	8008d72 <HAL_RCC_OscConfig+0x7a>
 8008d64:	4b84      	ldr	r3, [pc, #528]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a83      	ldr	r2, [pc, #524]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e02e      	b.n	8008dd0 <HAL_RCC_OscConfig+0xd8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10c      	bne.n	8008d94 <HAL_RCC_OscConfig+0x9c>
 8008d7a:	4b7f      	ldr	r3, [pc, #508]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7e      	ldr	r2, [pc, #504]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	4b7c      	ldr	r3, [pc, #496]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a7b      	ldr	r2, [pc, #492]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	e01d      	b.n	8008dd0 <HAL_RCC_OscConfig+0xd8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d9c:	d10c      	bne.n	8008db8 <HAL_RCC_OscConfig+0xc0>
 8008d9e:	4b76      	ldr	r3, [pc, #472]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a75      	ldr	r2, [pc, #468]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	4b73      	ldr	r3, [pc, #460]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a72      	ldr	r2, [pc, #456]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	e00b      	b.n	8008dd0 <HAL_RCC_OscConfig+0xd8>
 8008db8:	4b6f      	ldr	r3, [pc, #444]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a6e      	ldr	r2, [pc, #440]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	4b6c      	ldr	r3, [pc, #432]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a6b      	ldr	r2, [pc, #428]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd8:	f7fd f8e6 	bl	8005fa8 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008de0:	f7fd f8e2 	bl	8005fa8 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b64      	cmp	r3, #100	; 0x64
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e21f      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008df2:	4b61      	ldr	r3, [pc, #388]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0xe8>
 8008dfe:	e014      	b.n	8008e2a <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8007614:	f7fd f8b4 	bl	8004780 <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800761c:	f7fd f8b0 	bl	8004780 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b64      	cmp	r3, #100	; 0x64
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e20b      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800762e:	4b57      	ldr	r3, [pc, #348]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0x110>
 800763a:	e000      	b.n	800763e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763c:	bf00      	nop
=======
 8008e00:	f7fd f8d2 	bl	8005fa8 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e08:	f7fd f8ce 	bl	8005fa8 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b64      	cmp	r3, #100	; 0x64
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e20b      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e1a:	4b57      	ldr	r3, [pc, #348]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <HAL_RCC_OscConfig+0x110>
 8008e26:	e000      	b.n	8008e2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e28:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d069      	beq.n	800771e <HAL_RCC_OscConfig+0x212>
=======
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d069      	beq.n	8008f0a <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< Updated upstream
 800764a:	4b50      	ldr	r3, [pc, #320]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007656:	4b4d      	ldr	r3, [pc, #308]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b08      	cmp	r3, #8
 8007660:	d11c      	bne.n	800769c <HAL_RCC_OscConfig+0x190>
 8007662:	4b4a      	ldr	r3, [pc, #296]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d116      	bne.n	800769c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800766e:	4b47      	ldr	r3, [pc, #284]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_RCC_OscConfig+0x17a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e1df      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
=======
 8008e36:	4b50      	ldr	r3, [pc, #320]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e42:	4b4d      	ldr	r3, [pc, #308]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 030c 	and.w	r3, r3, #12
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d11c      	bne.n	8008e88 <HAL_RCC_OscConfig+0x190>
 8008e4e:	4b4a      	ldr	r3, [pc, #296]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d116      	bne.n	8008e88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e5a:	4b47      	ldr	r3, [pc, #284]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <HAL_RCC_OscConfig+0x17a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d001      	beq.n	8008e72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e1df      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8007686:	4b41      	ldr	r3, [pc, #260]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	493d      	ldr	r1, [pc, #244]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007696:	4313      	orrs	r3, r2
 8007698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769a:	e040      	b.n	800771e <HAL_RCC_OscConfig+0x212>
=======
 8008e72:	4b41      	ldr	r3, [pc, #260]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	493d      	ldr	r1, [pc, #244]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e86:	e040      	b.n	8008f0a <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d023      	beq.n	80076ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076a4:	4b39      	ldr	r3, [pc, #228]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a38      	ldr	r2, [pc, #224]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b0:	f7fd f866 	bl	8004780 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076b8:	f7fd f862 	bl	8004780 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e1bd      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ca:	4b30      	ldr	r3, [pc, #192]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0f0      	beq.n	80076b8 <HAL_RCC_OscConfig+0x1ac>
=======
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d023      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e90:	4b39      	ldr	r3, [pc, #228]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a38      	ldr	r2, [pc, #224]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008e96:	f043 0301 	orr.w	r3, r3, #1
 8008e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9c:	f7fd f884 	bl	8005fa8 <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ea4:	f7fd f880 	bl	8005fa8 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e1bd      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb6:	4b30      	ldr	r3, [pc, #192]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x1ac>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80076d6:	4b2d      	ldr	r3, [pc, #180]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4929      	ldr	r1, [pc, #164]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	600b      	str	r3, [r1, #0]
 80076ea:	e018      	b.n	800771e <HAL_RCC_OscConfig+0x212>
=======
 8008ec2:	4b2d      	ldr	r3, [pc, #180]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	4929      	ldr	r1, [pc, #164]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	600b      	str	r3, [r1, #0]
 8008ed6:	e018      	b.n	8008f0a <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80076ec:	4b27      	ldr	r3, [pc, #156]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a26      	ldr	r2, [pc, #152]	; (800778c <HAL_RCC_OscConfig+0x280>)
 80076f2:	f023 0301 	bic.w	r3, r3, #1
 80076f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fd f842 	bl	8004780 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007700:	f7fd f83e 	bl	8004780 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e199      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x1f4>
=======
 8008ed8:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a26      	ldr	r2, [pc, #152]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008ede:	f023 0301 	bic.w	r3, r3, #1
 8008ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee4:	f7fd f860 	bl	8005fa8 <HAL_GetTick>
 8008ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eec:	f7fd f85c 	bl	8005fa8 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e199      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008efe:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x1f4>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d038      	beq.n	800779c <HAL_RCC_OscConfig+0x290>
=======
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d038      	beq.n	8008f88 <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< Updated upstream
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d019      	beq.n	8007766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007738:	f043 0301 	orr.w	r3, r3, #1
 800773c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800773e:	f7fd f81f 	bl	8004780 <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007746:	f7fd f81b 	bl	8004780 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e176      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800775a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0x23a>
 8007764:	e01a      	b.n	800779c <HAL_RCC_OscConfig+0x290>
=======
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d019      	beq.n	8008f52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f1e:	4b16      	ldr	r3, [pc, #88]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f2a:	f7fd f83d 	bl	8005fa8 <HAL_GetTick>
 8008f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f30:	e008      	b.n	8008f44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f32:	f7fd f839 	bl	8005fa8 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d901      	bls.n	8008f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e176      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0f0      	beq.n	8008f32 <HAL_RCC_OscConfig+0x23a>
 8008f50:	e01a      	b.n	8008f88 <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <HAL_RCC_OscConfig+0x280>)
 8007768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776a:	4a08      	ldr	r2, [pc, #32]	; (800778c <HAL_RCC_OscConfig+0x280>)
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007772:	f7fd f805 	bl	8004780 <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007778:	e00a      	b.n	8007790 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800777a:	f7fd f801 	bl	8004780 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d903      	bls.n	8007790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e15c      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
 800778c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007790:	4b91      	ldr	r3, [pc, #580]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ee      	bne.n	800777a <HAL_RCC_OscConfig+0x26e>
=======
 8008f52:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f56:	4a08      	ldr	r2, [pc, #32]	; (8008f78 <HAL_RCC_OscConfig+0x280>)
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f5e:	f7fd f823 	bl	8005fa8 <HAL_GetTick>
 8008f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f64:	e00a      	b.n	8008f7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f66:	f7fd f81f 	bl	8005fa8 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d903      	bls.n	8008f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e15c      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
 8008f78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f7c:	4b91      	ldr	r3, [pc, #580]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1ee      	bne.n	8008f66 <HAL_RCC_OscConfig+0x26e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80a4 	beq.w	80078f2 <HAL_RCC_OscConfig+0x3e6>
=======
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80a4 	beq.w	80090de <HAL_RCC_OscConfig+0x3e6>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80077aa:	4b8b      	ldr	r3, [pc, #556]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10d      	bne.n	80077d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077b6:	4b88      	ldr	r3, [pc, #544]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	4a87      	ldr	r2, [pc, #540]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c0:	6413      	str	r3, [r2, #64]	; 0x40
 80077c2:	4b85      	ldr	r3, [pc, #532]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077d2:	4b82      	ldr	r3, [pc, #520]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d118      	bne.n	8007810 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077de:	4b7f      	ldr	r3, [pc, #508]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a7e      	ldr	r2, [pc, #504]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 80077e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ea:	f7fc ffc9 	bl	8004780 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f2:	f7fc ffc5 	bl	8004780 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b64      	cmp	r3, #100	; 0x64
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e120      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007804:	4b75      	ldr	r3, [pc, #468]	; (80079dc <HAL_RCC_OscConfig+0x4d0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_RCC_OscConfig+0x2e6>
=======
 8008f96:	4b8b      	ldr	r3, [pc, #556]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10d      	bne.n	8008fbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fa2:	4b88      	ldr	r3, [pc, #544]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	4a87      	ldr	r2, [pc, #540]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fac:	6413      	str	r3, [r2, #64]	; 0x40
 8008fae:	4b85      	ldr	r3, [pc, #532]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	60bb      	str	r3, [r7, #8]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fbe:	4b82      	ldr	r3, [pc, #520]	; (80091c8 <HAL_RCC_OscConfig+0x4d0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d118      	bne.n	8008ffc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008fca:	4b7f      	ldr	r3, [pc, #508]	; (80091c8 <HAL_RCC_OscConfig+0x4d0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a7e      	ldr	r2, [pc, #504]	; (80091c8 <HAL_RCC_OscConfig+0x4d0>)
 8008fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fd6:	f7fc ffe7 	bl	8005fa8 <HAL_GetTick>
 8008fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fdc:	e008      	b.n	8008ff0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fde:	f7fc ffe3 	bl	8005fa8 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b64      	cmp	r3, #100	; 0x64
 8008fea:	d901      	bls.n	8008ff0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e120      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ff0:	4b75      	ldr	r3, [pc, #468]	; (80091c8 <HAL_RCC_OscConfig+0x4d0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0f0      	beq.n	8008fde <HAL_RCC_OscConfig+0x2e6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d106      	bne.n	8007826 <HAL_RCC_OscConfig+0x31a>
 8007818:	4b6f      	ldr	r3, [pc, #444]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800781a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781c:	4a6e      	ldr	r2, [pc, #440]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	6713      	str	r3, [r2, #112]	; 0x70
 8007824:	e02d      	b.n	8007882 <HAL_RCC_OscConfig+0x376>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10c      	bne.n	8007848 <HAL_RCC_OscConfig+0x33c>
 800782e:	4b6a      	ldr	r3, [pc, #424]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	4a69      	ldr	r2, [pc, #420]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	6713      	str	r3, [r2, #112]	; 0x70
 800783a:	4b67      	ldr	r3, [pc, #412]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	4a66      	ldr	r2, [pc, #408]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007840:	f023 0304 	bic.w	r3, r3, #4
 8007844:	6713      	str	r3, [r2, #112]	; 0x70
 8007846:	e01c      	b.n	8007882 <HAL_RCC_OscConfig+0x376>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b05      	cmp	r3, #5
 800784e:	d10c      	bne.n	800786a <HAL_RCC_OscConfig+0x35e>
 8007850:	4b61      	ldr	r3, [pc, #388]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	4a60      	ldr	r2, [pc, #384]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007856:	f043 0304 	orr.w	r3, r3, #4
 800785a:	6713      	str	r3, [r2, #112]	; 0x70
 800785c:	4b5e      	ldr	r3, [pc, #376]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a5d      	ldr	r2, [pc, #372]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
 8007868:	e00b      	b.n	8007882 <HAL_RCC_OscConfig+0x376>
 800786a:	4b5b      	ldr	r3, [pc, #364]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a5a      	ldr	r2, [pc, #360]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	4b58      	ldr	r3, [pc, #352]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4a57      	ldr	r2, [pc, #348]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d015      	beq.n	80078b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788a:	f7fc ff79 	bl	8004780 <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007890:	e00a      	b.n	80078a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007892:	f7fc ff75 	bl	8004780 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e0ce      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a8:	4b4b      	ldr	r3, [pc, #300]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0ee      	beq.n	8007892 <HAL_RCC_OscConfig+0x386>
 80078b4:	e014      	b.n	80078e0 <HAL_RCC_OscConfig+0x3d4>
=======
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d106      	bne.n	8009012 <HAL_RCC_OscConfig+0x31a>
 8009004:	4b6f      	ldr	r3, [pc, #444]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009008:	4a6e      	ldr	r2, [pc, #440]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	6713      	str	r3, [r2, #112]	; 0x70
 8009010:	e02d      	b.n	800906e <HAL_RCC_OscConfig+0x376>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10c      	bne.n	8009034 <HAL_RCC_OscConfig+0x33c>
 800901a:	4b6a      	ldr	r3, [pc, #424]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800901c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901e:	4a69      	ldr	r2, [pc, #420]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	6713      	str	r3, [r2, #112]	; 0x70
 8009026:	4b67      	ldr	r3, [pc, #412]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902a:	4a66      	ldr	r2, [pc, #408]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800902c:	f023 0304 	bic.w	r3, r3, #4
 8009030:	6713      	str	r3, [r2, #112]	; 0x70
 8009032:	e01c      	b.n	800906e <HAL_RCC_OscConfig+0x376>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b05      	cmp	r3, #5
 800903a:	d10c      	bne.n	8009056 <HAL_RCC_OscConfig+0x35e>
 800903c:	4b61      	ldr	r3, [pc, #388]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009040:	4a60      	ldr	r2, [pc, #384]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009042:	f043 0304 	orr.w	r3, r3, #4
 8009046:	6713      	str	r3, [r2, #112]	; 0x70
 8009048:	4b5e      	ldr	r3, [pc, #376]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800904a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904c:	4a5d      	ldr	r2, [pc, #372]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800904e:	f043 0301 	orr.w	r3, r3, #1
 8009052:	6713      	str	r3, [r2, #112]	; 0x70
 8009054:	e00b      	b.n	800906e <HAL_RCC_OscConfig+0x376>
 8009056:	4b5b      	ldr	r3, [pc, #364]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	4a5a      	ldr	r2, [pc, #360]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	6713      	str	r3, [r2, #112]	; 0x70
 8009062:	4b58      	ldr	r3, [pc, #352]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009066:	4a57      	ldr	r2, [pc, #348]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009068:	f023 0304 	bic.w	r3, r3, #4
 800906c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d015      	beq.n	80090a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009076:	f7fc ff97 	bl	8005fa8 <HAL_GetTick>
 800907a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800907c:	e00a      	b.n	8009094 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907e:	f7fc ff93 	bl	8005fa8 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	f241 3288 	movw	r2, #5000	; 0x1388
 800908c:	4293      	cmp	r3, r2
 800908e:	d901      	bls.n	8009094 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e0ce      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009094:	4b4b      	ldr	r3, [pc, #300]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0ee      	beq.n	800907e <HAL_RCC_OscConfig+0x386>
 80090a0:	e014      	b.n	80090cc <HAL_RCC_OscConfig+0x3d4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80078b6:	f7fc ff63 	bl	8004780 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078bc:	e00a      	b.n	80078d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078be:	f7fc ff5f 	bl	8004780 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e0b8      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d4:	4b40      	ldr	r3, [pc, #256]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ee      	bne.n	80078be <HAL_RCC_OscConfig+0x3b2>
=======
 80090a2:	f7fc ff81 	bl	8005fa8 <HAL_GetTick>
 80090a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090a8:	e00a      	b.n	80090c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090aa:	f7fc ff7d 	bl	8005fa8 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e0b8      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090c0:	4b40      	ldr	r3, [pc, #256]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 80090c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1ee      	bne.n	80090aa <HAL_RCC_OscConfig+0x3b2>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078e6:	4b3c      	ldr	r3, [pc, #240]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a3b      	ldr	r2, [pc, #236]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d105      	bne.n	80090de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090d2:	4b3c      	ldr	r3, [pc, #240]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	4a3b      	ldr	r2, [pc, #236]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 80090d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090dc:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 80a4 	beq.w	8007a44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078fc:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b08      	cmp	r3, #8
 8007906:	d06b      	beq.n	80079e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d149      	bne.n	80079a4 <HAL_RCC_OscConfig+0x498>
=======
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80a4 	beq.w	8009230 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090e8:	4b36      	ldr	r3, [pc, #216]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f003 030c 	and.w	r3, r3, #12
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d06b      	beq.n	80091cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d149      	bne.n	8009190 <HAL_RCC_OscConfig+0x498>
>>>>>>> Stashed changes
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8007910:	4b31      	ldr	r3, [pc, #196]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a30      	ldr	r2, [pc, #192]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800791a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fc ff30 	bl	8004780 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007924:	f7fc ff2c 	bl	8004780 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e087      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007936:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x418>
=======
 80090fc:	4b31      	ldr	r3, [pc, #196]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a30      	ldr	r2, [pc, #192]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009108:	f7fc ff4e 	bl	8005fa8 <HAL_GetTick>
 800910c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009110:	f7fc ff4a 	bl	8005fa8 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e087      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009122:	4b28      	ldr	r3, [pc, #160]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f0      	bne.n	8009110 <HAL_RCC_OscConfig+0x418>
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69da      	ldr	r2, [r3, #28]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	019b      	lsls	r3, r3, #6
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	3b01      	subs	r3, #1
 800795c:	041b      	lsls	r3, r3, #16
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	4313      	orrs	r3, r2
 8007968:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 800796a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800796e:	6053      	str	r3, [r2, #4]
=======
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	69da      	ldr	r2, [r3, #28]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	431a      	orrs	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	019b      	lsls	r3, r3, #6
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	085b      	lsrs	r3, r3, #1
 8009146:	3b01      	subs	r3, #1
 8009148:	041b      	lsls	r3, r3, #16
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	061b      	lsls	r3, r3, #24
 8009152:	4313      	orrs	r3, r2
 8009154:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800915a:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8007970:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800797a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7fc ff00 	bl	8004780 <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007984:	f7fc fefc 	bl	8004780 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e057      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f0      	beq.n	8007984 <HAL_RCC_OscConfig+0x478>
 80079a2:	e04f      	b.n	8007a44 <HAL_RCC_OscConfig+0x538>
=======
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fc ff1e 	bl	8005fa8 <HAL_GetTick>
 800916c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009170:	f7fc ff1a 	bl	8005fa8 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e057      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009182:	4b10      	ldr	r3, [pc, #64]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f0      	beq.n	8009170 <HAL_RCC_OscConfig+0x478>
 800918e:	e04f      	b.n	8009230 <HAL_RCC_OscConfig+0x538>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a0b      	ldr	r2, [pc, #44]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80079aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fc fee6 	bl	8004780 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b8:	f7fc fee2 	bl	8004780 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e03d      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <HAL_RCC_OscConfig+0x4cc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4ac>
 80079d6:	e035      	b.n	8007a44 <HAL_RCC_OscConfig+0x538>
 80079d8:	40023800 	.word	0x40023800
 80079dc:	40007000 	.word	0x40007000
=======
 8009190:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a0b      	ldr	r2, [pc, #44]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 8009196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800919a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919c:	f7fc ff04 	bl	8005fa8 <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091a2:	e008      	b.n	80091b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091a4:	f7fc ff00 	bl	8005fa8 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e03d      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091b6:	4b03      	ldr	r3, [pc, #12]	; (80091c4 <HAL_RCC_OscConfig+0x4cc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1f0      	bne.n	80091a4 <HAL_RCC_OscConfig+0x4ac>
 80091c2:	e035      	b.n	8009230 <HAL_RCC_OscConfig+0x538>
 80091c4:	40023800 	.word	0x40023800
 80091c8:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 80079e0:	4b1b      	ldr	r3, [pc, #108]	; (8007a50 <HAL_RCC_OscConfig+0x544>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	60fb      	str	r3, [r7, #12]
=======
 80091cc:	4b1b      	ldr	r3, [pc, #108]	; (800923c <HAL_RCC_OscConfig+0x544>)
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d028      	beq.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d121      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d11a      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d111      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d107      	bne.n	8007a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d001      	beq.n	8007a44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <HAL_RCC_OscConfig+0x53a>
=======
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d028      	beq.n	800922c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d121      	bne.n	800922c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d11a      	bne.n	800922c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091fc:	4013      	ands	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009202:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009204:	4293      	cmp	r3, r2
 8009206:	d111      	bne.n	800922c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	3b01      	subs	r3, #1
 8009216:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009218:	429a      	cmp	r2, r3
 800921a:	d107      	bne.n	800922c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009228:	429a      	cmp	r2, r3
 800922a:	d001      	beq.n	8009230 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <HAL_RCC_OscConfig+0x53a>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800

08007a54 <HAL_RCC_ClockConfig>:
=======
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	40023800 	.word	0x40023800

08009240 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0d0      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
=======
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e0d0      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8007a6c:	4b6a      	ldr	r3, [pc, #424]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d910      	bls.n	8007a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b67      	ldr	r3, [pc, #412]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 020f 	bic.w	r2, r3, #15
 8007a82:	4965      	ldr	r1, [pc, #404]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	600b      	str	r3, [r1, #0]
=======
 8009258:	4b6a      	ldr	r3, [pc, #424]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	429a      	cmp	r2, r3
 8009264:	d910      	bls.n	8009288 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009266:	4b67      	ldr	r3, [pc, #412]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f023 020f 	bic.w	r2, r3, #15
 800926e:	4965      	ldr	r1, [pc, #404]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	4313      	orrs	r3, r2
 8009274:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8007a8a:	4b63      	ldr	r3, [pc, #396]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d001      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0b8      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
=======
 8009276:	4b63      	ldr	r3, [pc, #396]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d001      	beq.n	8009288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0b8      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <HAL_RCC_ClockConfig+0x96>
=======
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d020      	beq.n	80092d6 <HAL_RCC_ClockConfig+0x96>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a58      	ldr	r2, [pc, #352]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007acc:	4b53      	ldr	r3, [pc, #332]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a52      	ldr	r2, [pc, #328]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ad6:	6093      	str	r3, [r2, #8]
=======
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092a0:	4b59      	ldr	r3, [pc, #356]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	4a58      	ldr	r2, [pc, #352]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80092aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d005      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80092b8:	4b53      	ldr	r3, [pc, #332]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	4a52      	ldr	r2, [pc, #328]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092c2:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8007ad8:	4b50      	ldr	r3, [pc, #320]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	494d      	ldr	r1, [pc, #308]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
=======
 80092c4:	4b50      	ldr	r3, [pc, #320]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	494d      	ldr	r1, [pc, #308]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d040      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x124>
=======
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d040      	beq.n	8009364 <HAL_RCC_ClockConfig+0x124>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d107      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d115      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e07f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
=======
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d107      	bne.n	80092fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ea:	4b47      	ldr	r3, [pc, #284]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d115      	bne.n	8009322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e07f      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b16:	4b41      	ldr	r3, [pc, #260]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e073      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
=======
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d107      	bne.n	8009312 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009302:	4b41      	ldr	r3, [pc, #260]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e073      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 8007b26:	4b3d      	ldr	r3, [pc, #244]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e06b      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
=======
 8009312:	4b3d      	ldr	r3, [pc, #244]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e06b      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8007b36:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 0203 	bic.w	r2, r3, #3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4936      	ldr	r1, [pc, #216]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b48:	f7fc fe1a 	bl	8004780 <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b50:	f7fc fe16 	bl	8004780 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e053      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b66:	4b2d      	ldr	r3, [pc, #180]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 020c 	and.w	r2, r3, #12
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1eb      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xfc>
=======
 8009322:	4b39      	ldr	r3, [pc, #228]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f023 0203 	bic.w	r2, r3, #3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	4936      	ldr	r1, [pc, #216]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 8009330:	4313      	orrs	r3, r2
 8009332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009334:	f7fc fe38 	bl	8005fa8 <HAL_GetTick>
 8009338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800933a:	e00a      	b.n	8009352 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800933c:	f7fc fe34 	bl	8005fa8 <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	f241 3288 	movw	r2, #5000	; 0x1388
 800934a:	4293      	cmp	r3, r2
 800934c:	d901      	bls.n	8009352 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e053      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009352:	4b2d      	ldr	r3, [pc, #180]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 020c 	and.w	r2, r3, #12
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	429a      	cmp	r2, r3
 8009362:	d1eb      	bne.n	800933c <HAL_RCC_ClockConfig+0xfc>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8007b78:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d210      	bcs.n	8007ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 020f 	bic.w	r2, r3, #15
 8007b8e:	4922      	ldr	r1, [pc, #136]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]
=======
 8009364:	4b27      	ldr	r3, [pc, #156]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d210      	bcs.n	8009394 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f023 020f 	bic.w	r2, r3, #15
 800937a:	4922      	ldr	r1, [pc, #136]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	4313      	orrs	r3, r2
 8009380:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e032      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
=======
 8009382:	4b20      	ldr	r3, [pc, #128]	; (8009404 <HAL_RCC_ClockConfig+0x1c4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d001      	beq.n	8009394 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e032      	b.n	80093fa <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4916      	ldr	r1, [pc, #88]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
=======
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093a0:	4b19      	ldr	r3, [pc, #100]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	4916      	ldr	r1, [pc, #88]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	490e      	ldr	r1, [pc, #56]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
=======
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80093be:	4b12      	ldr	r3, [pc, #72]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	490e      	ldr	r1, [pc, #56]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8007be6:	f000 f821 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 8007bea:	4601      	mov	r1, r0
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <HAL_RCC_ClockConfig+0x1cc>)
 8007bf8:	5cd3      	ldrb	r3, [r2, r3]
 8007bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_RCC_ClockConfig+0x1d0>)
 8007c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_ClockConfig+0x1d4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fc fc94 	bl	8004534 <HAL_InitTick>

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	40023c00 	.word	0x40023c00
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	0800fc88 	.word	0x0800fc88
 8007c24:	20000034 	.word	0x20000034
 8007c28:	20000038 	.word	0x20000038

08007c2c <HAL_RCC_GetSysClockFreq>:
=======
 80093d2:	f000 f821 	bl	8009418 <HAL_RCC_GetSysClockFreq>
 80093d6:	4601      	mov	r1, r0
 80093d8:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <HAL_RCC_ClockConfig+0x1c8>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	091b      	lsrs	r3, r3, #4
 80093de:	f003 030f 	and.w	r3, r3, #15
 80093e2:	4a0a      	ldr	r2, [pc, #40]	; (800940c <HAL_RCC_ClockConfig+0x1cc>)
 80093e4:	5cd3      	ldrb	r3, [r2, r3]
 80093e6:	fa21 f303 	lsr.w	r3, r1, r3
 80093ea:	4a09      	ldr	r2, [pc, #36]	; (8009410 <HAL_RCC_ClockConfig+0x1d0>)
 80093ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80093ee:	4b09      	ldr	r3, [pc, #36]	; (8009414 <HAL_RCC_ClockConfig+0x1d4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fc fcaa 	bl	8005d4c <HAL_InitTick>

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	40023c00 	.word	0x40023c00
 8009408:	40023800 	.word	0x40023800
 800940c:	08011b94 	.word	0x08011b94
 8009410:	20001030 	.word	0x20001030
 8009414:	20001034 	.word	0x20001034

08009418 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8007c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c42:	4b50      	ldr	r3, [pc, #320]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 030c 	and.w	r3, r3, #12
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d007      	beq.n	8007c5e <HAL_RCC_GetSysClockFreq+0x32>
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d008      	beq.n	8007c64 <HAL_RCC_GetSysClockFreq+0x38>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 808d 	bne.w	8007d72 <HAL_RCC_GetSysClockFreq+0x146>
=======
 8009418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	2300      	movs	r3, #0
 8009428:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800942e:	4b50      	ldr	r3, [pc, #320]	; (8009570 <HAL_RCC_GetSysClockFreq+0x158>)
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f003 030c 	and.w	r3, r3, #12
 8009436:	2b04      	cmp	r3, #4
 8009438:	d007      	beq.n	800944a <HAL_RCC_GetSysClockFreq+0x32>
 800943a:	2b08      	cmp	r3, #8
 800943c:	d008      	beq.n	8009450 <HAL_RCC_GetSysClockFreq+0x38>
 800943e:	2b00      	cmp	r3, #0
 8009440:	f040 808d 	bne.w	800955e <HAL_RCC_GetSysClockFreq+0x146>
>>>>>>> Stashed changes
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8007c58:	4b4b      	ldr	r3, [pc, #300]	; (8007d88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007c5a:	60bb      	str	r3, [r7, #8]
      break;
 8007c5c:	e08c      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 8009444:	4b4b      	ldr	r3, [pc, #300]	; (8009574 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009446:	60bb      	str	r3, [r7, #8]
      break;
 8009448:	e08c      	b.n	8009564 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8007c5e:	4b4b      	ldr	r3, [pc, #300]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8007c60:	60bb      	str	r3, [r7, #8]
      break;
 8007c62:	e089      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 800944a:	4b4b      	ldr	r3, [pc, #300]	; (8009578 <HAL_RCC_GetSysClockFreq+0x160>)
 800944c:	60bb      	str	r3, [r7, #8]
      break;
 800944e:	e089      	b.n	8009564 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8007c64:	4b47      	ldr	r3, [pc, #284]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c6e:	4b45      	ldr	r3, [pc, #276]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d023      	beq.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c7a:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	099b      	lsrs	r3, r3, #6
 8007c80:	f04f 0400 	mov.w	r4, #0
 8007c84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	ea03 0501 	and.w	r5, r3, r1
 8007c90:	ea04 0602 	and.w	r6, r4, r2
 8007c94:	4a3d      	ldr	r2, [pc, #244]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8007c96:	fb02 f106 	mul.w	r1, r2, r6
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	fb02 f205 	mul.w	r2, r2, r5
 8007ca0:	440a      	add	r2, r1
 8007ca2:	493a      	ldr	r1, [pc, #232]	; (8007d8c <HAL_RCC_GetSysClockFreq+0x160>)
 8007ca4:	fba5 0101 	umull	r0, r1, r5, r1
 8007ca8:	1853      	adds	r3, r2, r1
 8007caa:	4619      	mov	r1, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f04f 0400 	mov.w	r4, #0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4623      	mov	r3, r4
 8007cb6:	f7f8 fafb 	bl	80002b0 <__aeabi_uldivmod>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e049      	b.n	8007d56 <HAL_RCC_GetSysClockFreq+0x12a>
=======
 8009450:	4b47      	ldr	r3, [pc, #284]	; (8009570 <HAL_RCC_GetSysClockFreq+0x158>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009458:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800945a:	4b45      	ldr	r3, [pc, #276]	; (8009570 <HAL_RCC_GetSysClockFreq+0x158>)
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d023      	beq.n	80094ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009466:	4b42      	ldr	r3, [pc, #264]	; (8009570 <HAL_RCC_GetSysClockFreq+0x158>)
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	099b      	lsrs	r3, r3, #6
 800946c:	f04f 0400 	mov.w	r4, #0
 8009470:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	ea03 0501 	and.w	r5, r3, r1
 800947c:	ea04 0602 	and.w	r6, r4, r2
 8009480:	4a3d      	ldr	r2, [pc, #244]	; (8009578 <HAL_RCC_GetSysClockFreq+0x160>)
 8009482:	fb02 f106 	mul.w	r1, r2, r6
 8009486:	2200      	movs	r2, #0
 8009488:	fb02 f205 	mul.w	r2, r2, r5
 800948c:	440a      	add	r2, r1
 800948e:	493a      	ldr	r1, [pc, #232]	; (8009578 <HAL_RCC_GetSysClockFreq+0x160>)
 8009490:	fba5 0101 	umull	r0, r1, r5, r1
 8009494:	1853      	adds	r3, r2, r1
 8009496:	4619      	mov	r1, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f04f 0400 	mov.w	r4, #0
 800949e:	461a      	mov	r2, r3
 80094a0:	4623      	mov	r3, r4
 80094a2:	f7f6 ff05 	bl	80002b0 <__aeabi_uldivmod>
 80094a6:	4603      	mov	r3, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e049      	b.n	8009542 <HAL_RCC_GetSysClockFreq+0x12a>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8007cc2:	4b30      	ldr	r3, [pc, #192]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	f04f 0400 	mov.w	r4, #0
 8007ccc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	ea03 0501 	and.w	r5, r3, r1
 8007cd8:	ea04 0602 	and.w	r6, r4, r2
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	f04f 0400 	mov.w	r4, #0
 8007ce8:	0154      	lsls	r4, r2, #5
 8007cea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007cee:	014b      	lsls	r3, r1, #5
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	1b49      	subs	r1, r1, r5
 8007cf6:	eb62 0206 	sbc.w	r2, r2, r6
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	f04f 0400 	mov.w	r4, #0
 8007d02:	0194      	lsls	r4, r2, #6
 8007d04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007d08:	018b      	lsls	r3, r1, #6
 8007d0a:	1a5b      	subs	r3, r3, r1
 8007d0c:	eb64 0402 	sbc.w	r4, r4, r2
 8007d10:	f04f 0100 	mov.w	r1, #0
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	00e2      	lsls	r2, r4, #3
 8007d1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007d1e:	00d9      	lsls	r1, r3, #3
 8007d20:	460b      	mov	r3, r1
 8007d22:	4614      	mov	r4, r2
 8007d24:	195b      	adds	r3, r3, r5
 8007d26:	eb44 0406 	adc.w	r4, r4, r6
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	02a2      	lsls	r2, r4, #10
 8007d34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007d38:	0299      	lsls	r1, r3, #10
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	4621      	mov	r1, r4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f04f 0400 	mov.w	r4, #0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	f7f8 fab0 	bl	80002b0 <__aeabi_uldivmod>
 8007d50:	4603      	mov	r3, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	3301      	adds	r3, #1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	60bb      	str	r3, [r7, #8]
      break;
 8007d70:	e002      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 80094ae:	4b30      	ldr	r3, [pc, #192]	; (8009570 <HAL_RCC_GetSysClockFreq+0x158>)
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	099b      	lsrs	r3, r3, #6
 80094b4:	f04f 0400 	mov.w	r4, #0
 80094b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	ea03 0501 	and.w	r5, r3, r1
 80094c4:	ea04 0602 	and.w	r6, r4, r2
 80094c8:	4629      	mov	r1, r5
 80094ca:	4632      	mov	r2, r6
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	f04f 0400 	mov.w	r4, #0
 80094d4:	0154      	lsls	r4, r2, #5
 80094d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094da:	014b      	lsls	r3, r1, #5
 80094dc:	4619      	mov	r1, r3
 80094de:	4622      	mov	r2, r4
 80094e0:	1b49      	subs	r1, r1, r5
 80094e2:	eb62 0206 	sbc.w	r2, r2, r6
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	f04f 0400 	mov.w	r4, #0
 80094ee:	0194      	lsls	r4, r2, #6
 80094f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80094f4:	018b      	lsls	r3, r1, #6
 80094f6:	1a5b      	subs	r3, r3, r1
 80094f8:	eb64 0402 	sbc.w	r4, r4, r2
 80094fc:	f04f 0100 	mov.w	r1, #0
 8009500:	f04f 0200 	mov.w	r2, #0
 8009504:	00e2      	lsls	r2, r4, #3
 8009506:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800950a:	00d9      	lsls	r1, r3, #3
 800950c:	460b      	mov	r3, r1
 800950e:	4614      	mov	r4, r2
 8009510:	195b      	adds	r3, r3, r5
 8009512:	eb44 0406 	adc.w	r4, r4, r6
 8009516:	f04f 0100 	mov.w	r1, #0
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	02a2      	lsls	r2, r4, #10
 8009520:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009524:	0299      	lsls	r1, r3, #10
 8009526:	460b      	mov	r3, r1
 8009528:	4614      	mov	r4, r2
 800952a:	4618      	mov	r0, r3
 800952c:	4621      	mov	r1, r4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f04f 0400 	mov.w	r4, #0
 8009534:	461a      	mov	r2, r3
 8009536:	4623      	mov	r3, r4
 8009538:	f7f6 feba 	bl	80002b0 <__aeabi_uldivmod>
 800953c:	4603      	mov	r3, r0
 800953e:	460c      	mov	r4, r1
 8009540:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009542:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <HAL_RCC_GetSysClockFreq+0x158>)
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	0c1b      	lsrs	r3, r3, #16
 8009548:	f003 0303 	and.w	r3, r3, #3
 800954c:	3301      	adds	r3, #1
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	60bb      	str	r3, [r7, #8]
      break;
 800955c:	e002      	b.n	8009564 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007d74:	60bb      	str	r3, [r7, #8]
      break;
 8007d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d78:	68bb      	ldr	r3, [r7, #8]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40023800 	.word	0x40023800
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	017d7840 	.word	0x017d7840

08007d90 <HAL_RCC_GetHCLKFreq>:
=======
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009560:	60bb      	str	r3, [r7, #8]
      break;
 8009562:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009564:	68bb      	ldr	r3, [r7, #8]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800956e:	bf00      	nop
 8009570:	40023800 	.word	0x40023800
 8009574:	00f42400 	.word	0x00f42400
 8009578:	017d7840 	.word	0x017d7840

0800957c <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000034 	.word	0x20000034

08007da8 <HAL_RCC_GetPCLK1Freq>:
=======
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009580:	4b03      	ldr	r3, [pc, #12]	; (8009590 <HAL_RCC_GetHCLKFreq+0x14>)
 8009582:	681b      	ldr	r3, [r3, #0]
}
 8009584:	4618      	mov	r0, r3
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	20001030 	.word	0x20001030

08009594 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dac:	f7ff fff0 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007db0:	4601      	mov	r1, r0
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0a9b      	lsrs	r3, r3, #10
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dbe:	5cd3      	ldrb	r3, [r2, r3]
 8007dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	0800fc98 	.word	0x0800fc98

08007dd0 <HAL_RCC_GetPCLK2Freq>:
=======
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009598:	f7ff fff0 	bl	800957c <HAL_RCC_GetHCLKFreq>
 800959c:	4601      	mov	r1, r0
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	0a9b      	lsrs	r3, r3, #10
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	4a03      	ldr	r2, [pc, #12]	; (80095b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095aa:	5cd3      	ldrb	r3, [r2, r3]
 80095ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40023800 	.word	0x40023800
 80095b8:	08011ba4 	.word	0x08011ba4

080095bc <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dd4:	f7ff ffdc 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4601      	mov	r1, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0b5b      	lsrs	r3, r3, #13
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4a03      	ldr	r2, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de6:	5cd3      	ldrb	r3, [r2, r3]
 8007de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	0800fc98 	.word	0x0800fc98

08007df8 <HAL_RCC_GetClockConfig>:
=======
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80095c0:	f7ff ffdc 	bl	800957c <HAL_RCC_GetHCLKFreq>
 80095c4:	4601      	mov	r1, r0
 80095c6:	4b05      	ldr	r3, [pc, #20]	; (80095dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	0b5b      	lsrs	r3, r3, #13
 80095cc:	f003 0307 	and.w	r3, r3, #7
 80095d0:	4a03      	ldr	r2, [pc, #12]	; (80095e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095d2:	5cd3      	ldrb	r3, [r2, r3]
 80095d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095d8:	4618      	mov	r0, r3
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	40023800 	.word	0x40023800
 80095e0:	08011ba4 	.word	0x08011ba4

080095e4 <HAL_RCC_GetClockConfig>:
>>>>>>> Stashed changes
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< Updated upstream
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	220f      	movs	r2, #15
 8007e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0203 	and.w	r2, r3, #3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <HAL_RCC_GetClockConfig+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	601a      	str	r2, [r3, #0]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800
 8007e58:	40023c00 	.word	0x40023c00

08007e5c <HAL_RCCEx_PeriphCLKConfig>:
=======
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	220f      	movs	r2, #15
 80095f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80095f4:	4b12      	ldr	r3, [pc, #72]	; (8009640 <HAL_RCC_GetClockConfig+0x5c>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f003 0203 	and.w	r2, r3, #3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <HAL_RCC_GetClockConfig+0x5c>)
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800960c:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <HAL_RCC_GetClockConfig+0x5c>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <HAL_RCC_GetClockConfig+0x5c>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	08db      	lsrs	r3, r3, #3
 800961e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009626:	4b07      	ldr	r3, [pc, #28]	; (8009644 <HAL_RCC_GetClockConfig+0x60>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 020f 	and.w	r2, r3, #15
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	601a      	str	r2, [r3, #0]
}
 8009632:	bf00      	nop
 8009634:	370c      	adds	r7, #12
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	40023800 	.word	0x40023800
 8009644:	40023c00 	.word	0x40023c00

08009648 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61bb      	str	r3, [r7, #24]
=======
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< Updated upstream
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d012      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d012      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 8007e84:	4b69      	ldr	r3, [pc, #420]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4a68      	ldr	r2, [pc, #416]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e8e:	6093      	str	r3, [r2, #8]
 8007e90:	4b66      	ldr	r3, [pc, #408]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	4964      	ldr	r1, [pc, #400]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
=======
 8009670:	4b69      	ldr	r3, [pc, #420]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	4a68      	ldr	r2, [pc, #416]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009676:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800967a:	6093      	str	r3, [r2, #8]
 800967c:	4b66      	ldr	r3, [pc, #408]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	4964      	ldr	r1, [pc, #400]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009686:	4313      	orrs	r3, r2
 8009688:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009692:	2301      	movs	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d017      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d017      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
 8007eb6:	4b5d      	ldr	r3, [pc, #372]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	4959      	ldr	r1, [pc, #356]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed4:	d101      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	61bb      	str	r3, [r7, #24]
=======
 80096a2:	4b5d      	ldr	r3, [pc, #372]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b0:	4959      	ldr	r1, [pc, #356]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096c0:	d101      	bne.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80096c2:	2301      	movs	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80096ce:	2301      	movs	r3, #1
 80096d0:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
<<<<<<< Updated upstream
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d017      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d017      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
<<<<<<< Updated upstream
 8007ef2:	4b4e      	ldr	r3, [pc, #312]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	494a      	ldr	r1, [pc, #296]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f10:	d101      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f12:	2301      	movs	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61bb      	str	r3, [r7, #24]
=======
 80096de:	4b4e      	ldr	r3, [pc, #312]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ec:	494a      	ldr	r1, [pc, #296]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096fc:	d101      	bne.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80096fe:	2301      	movs	r3, #1
 8009700:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800970a:	2301      	movs	r3, #1
 800970c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
=======
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800971a:	2301      	movs	r3, #1
 800971c:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< Updated upstream
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 808b 	beq.w	8008056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 808b 	beq.w	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> Stashed changes
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 8007f40:	4b3a      	ldr	r3, [pc, #232]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	4a39      	ldr	r2, [pc, #228]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8007f4c:	4b37      	ldr	r3, [pc, #220]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f58:	4b35      	ldr	r3, [pc, #212]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a34      	ldr	r2, [pc, #208]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f64:	f7fc fc0c 	bl	8004780 <HAL_GetTick>
 8007f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f6c:	f7fc fc08 	bl	8004780 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b64      	cmp	r3, #100	; 0x64
 8007f78:	d901      	bls.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e355      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f7e:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f0      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 800972c:	4b3a      	ldr	r3, [pc, #232]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	4a39      	ldr	r2, [pc, #228]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009736:	6413      	str	r3, [r2, #64]	; 0x40
 8009738:	4b37      	ldr	r3, [pc, #220]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009740:	60bb      	str	r3, [r7, #8]
 8009742:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009744:	4b35      	ldr	r3, [pc, #212]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a34      	ldr	r2, [pc, #208]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800974a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800974e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009750:	f7fc fc2a 	bl	8005fa8 <HAL_GetTick>
 8009754:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009756:	e008      	b.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009758:	f7fc fc26 	bl	8005fa8 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b64      	cmp	r3, #100	; 0x64
 8009764:	d901      	bls.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	e355      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800976a:	4b2c      	ldr	r3, [pc, #176]	; (800981c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0f0      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> Stashed changes
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< Updated upstream
 8007f8a:	4b28      	ldr	r3, [pc, #160]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d035      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d02e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fb2:	4b1e      	ldr	r3, [pc, #120]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007fca:	4a18      	ldr	r2, [pc, #96]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fd0:	4b16      	ldr	r3, [pc, #88]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d114      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fc fbd0 	bl	8004780 <HAL_GetTick>
 8007fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe4:	f7fc fbcc 	bl	8004780 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e317      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0ee      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 8009776:	4b28      	ldr	r3, [pc, #160]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800977a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800977e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d035      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	429a      	cmp	r2, r3
 8009792:	d02e      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009794:	4b20      	ldr	r3, [pc, #128]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800979c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800979e:	4b1e      	ldr	r3, [pc, #120]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	4a1d      	ldr	r2, [pc, #116]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	4a1a      	ldr	r2, [pc, #104]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80097b6:	4a18      	ldr	r2, [pc, #96]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80097bc:	4b16      	ldr	r3, [pc, #88]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d114      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097c8:	f7fc fbee 	bl	8005fa8 <HAL_GetTick>
 80097cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097ce:	e00a      	b.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097d0:	f7fc fbea 	bl	8005fa8 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f241 3288 	movw	r2, #5000	; 0x1388
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e317      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ee      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> Stashed changes
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< Updated upstream
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008012:	d111      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008022:	400b      	ands	r3, r1
 8008024:	4901      	ldr	r1, [pc, #4]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008026:	4313      	orrs	r3, r2
 8008028:	608b      	str	r3, [r1, #8]
 800802a:	e00b      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800802c:	40023800 	.word	0x40023800
 8008030:	40007000 	.word	0x40007000
 8008034:	0ffffcff 	.word	0x0ffffcff
 8008038:	4bb0      	ldr	r3, [pc, #704]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	4aaf      	ldr	r2, [pc, #700]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800803e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008042:	6093      	str	r3, [r2, #8]
 8008044:	4bad      	ldr	r3, [pc, #692]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008050:	49aa      	ldr	r1, [pc, #680]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008052:	4313      	orrs	r3, r2
 8008054:	670b      	str	r3, [r1, #112]	; 0x70
=======
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097fe:	d111      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800980c:	4b04      	ldr	r3, [pc, #16]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800980e:	400b      	ands	r3, r1
 8009810:	4901      	ldr	r1, [pc, #4]	; (8009818 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009812:	4313      	orrs	r3, r2
 8009814:	608b      	str	r3, [r1, #8]
 8009816:	e00b      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009818:	40023800 	.word	0x40023800
 800981c:	40007000 	.word	0x40007000
 8009820:	0ffffcff 	.word	0x0ffffcff
 8009824:	4bb0      	ldr	r3, [pc, #704]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4aaf      	ldr	r2, [pc, #700]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800982a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800982e:	6093      	str	r3, [r2, #8]
 8009830:	4bad      	ldr	r3, [pc, #692]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800983c:	49aa      	ldr	r1, [pc, #680]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800983e:	4313      	orrs	r3, r2
 8009840:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> Stashed changes
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< Updated upstream
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b00      	cmp	r3, #0
 8008060:	d010      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	2b00      	cmp	r3, #0
 800984c:	d010      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< Updated upstream
 8008062:	4ba6      	ldr	r3, [pc, #664]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008068:	4aa4      	ldr	r2, [pc, #656]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800806a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008072:	4ba2      	ldr	r3, [pc, #648]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008074:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	499f      	ldr	r1, [pc, #636]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 800984e:	4ba6      	ldr	r3, [pc, #664]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009854:	4aa4      	ldr	r2, [pc, #656]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800985a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800985e:	4ba2      	ldr	r3, [pc, #648]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009860:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009868:	499f      	ldr	r1, [pc, #636]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 8008090:	4b9a      	ldr	r3, [pc, #616]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809e:	4997      	ldr	r1, [pc, #604]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800987c:	4b9a      	ldr	r3, [pc, #616]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800987e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009882:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800988a:	4997      	ldr	r1, [pc, #604]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800988c:	4313      	orrs	r3, r2
 800988e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 80080b2:	4b92      	ldr	r3, [pc, #584]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c0:	498e      	ldr	r1, [pc, #568]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800989e:	4b92      	ldr	r3, [pc, #584]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ac:	498e      	ldr	r1, [pc, #568]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 80080d4:	4b89      	ldr	r3, [pc, #548]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e2:	4986      	ldr	r1, [pc, #536]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80098c0:	4b89      	ldr	r3, [pc, #548]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ce:	4986      	ldr	r1, [pc, #536]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< Updated upstream
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< Updated upstream
 80080f6:	4b81      	ldr	r3, [pc, #516]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	497d      	ldr	r1, [pc, #500]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008106:	4313      	orrs	r3, r2
 8008108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80098e2:	4b81      	ldr	r3, [pc, #516]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f0:	497d      	ldr	r1, [pc, #500]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8008118:	4b78      	ldr	r3, [pc, #480]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800811a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811e:	f023 0203 	bic.w	r2, r3, #3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	4975      	ldr	r1, [pc, #468]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008128:	4313      	orrs	r3, r2
 800812a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8009904:	4b78      	ldr	r3, [pc, #480]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800990a:	f023 0203 	bic.w	r2, r3, #3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	4975      	ldr	r1, [pc, #468]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009914:	4313      	orrs	r3, r2
 8009916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00a      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00a      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 800813a:	4b70      	ldr	r3, [pc, #448]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008140:	f023 020c 	bic.w	r2, r3, #12
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008148:	496c      	ldr	r1, [pc, #432]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8009926:	4b70      	ldr	r3, [pc, #448]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992c:	f023 020c 	bic.w	r2, r3, #12
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009934:	496c      	ldr	r1, [pc, #432]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009936:	4313      	orrs	r3, r2
 8009938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 800815c:	4b67      	ldr	r3, [pc, #412]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008162:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816a:	4964      	ldr	r1, [pc, #400]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8009948:	4b67      	ldr	r3, [pc, #412]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800994a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800994e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009956:	4964      	ldr	r1, [pc, #400]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009958:	4313      	orrs	r3, r2
 800995a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 800817e:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008184:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	495b      	ldr	r1, [pc, #364]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800996a:	4b5f      	ldr	r3, [pc, #380]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009978:	495b      	ldr	r1, [pc, #364]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800997a:	4313      	orrs	r3, r2
 800997c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 80081a0:	4b56      	ldr	r3, [pc, #344]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	4953      	ldr	r1, [pc, #332]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800998c:	4b56      	ldr	r3, [pc, #344]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800998e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009992:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999a:	4953      	ldr	r1, [pc, #332]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800999c:	4313      	orrs	r3, r2
 800999e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
<<<<<<< Updated upstream
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00a      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
<<<<<<< Updated upstream
 80081c2:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	494a      	ldr	r1, [pc, #296]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80099ae:	4b4e      	ldr	r3, [pc, #312]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	494a      	ldr	r1, [pc, #296]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
<<<<<<< Updated upstream
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00a      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
<<<<<<< Updated upstream
 80081e4:	4b45      	ldr	r3, [pc, #276]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f2:	4942      	ldr	r1, [pc, #264]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80099d0:	4b45      	ldr	r3, [pc, #276]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099de:	4942      	ldr	r1, [pc, #264]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
<<<<<<< Updated upstream
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00a      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
<<<<<<< Updated upstream
 8008206:	4b3d      	ldr	r3, [pc, #244]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	4939      	ldr	r1, [pc, #228]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80099f2:	4b3d      	ldr	r3, [pc, #244]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80099f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a00:	4939      	ldr	r1, [pc, #228]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< Updated upstream
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00a      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< Updated upstream
 8008228:	4b34      	ldr	r3, [pc, #208]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800822a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008236:	4931      	ldr	r1, [pc, #196]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8009a14:	4b34      	ldr	r3, [pc, #208]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a22:	4931      	ldr	r1, [pc, #196]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
<<<<<<< Updated upstream
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d011      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d011      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
<<<<<<< Updated upstream
 800824a:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800824c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008250:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008258:	4928      	ldr	r1, [pc, #160]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800825a:	4313      	orrs	r3, r2
 800825c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008268:	d101      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800826a:	2301      	movs	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
=======
 8009a36:	4b2c      	ldr	r3, [pc, #176]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a44:	4928      	ldr	r1, [pc, #160]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a54:	d101      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009a56:	2301      	movs	r3, #1
 8009a58:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< Updated upstream
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	61bb      	str	r3, [r7, #24]
=======
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009a66:	2301      	movs	r3, #1
 8009a68:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
 800828a:	4b1c      	ldr	r3, [pc, #112]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008298:	4918      	ldr	r1, [pc, #96]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8009a76:	4b1c      	ldr	r3, [pc, #112]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a84:	4918      	ldr	r1, [pc, #96]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
<<<<<<< Updated upstream
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
<<<<<<< Updated upstream
 80082ac:	4b13      	ldr	r3, [pc, #76]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082bc:	490f      	ldr	r1, [pc, #60]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8009a98:	4b13      	ldr	r3, [pc, #76]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aa8:	490f      	ldr	r1, [pc, #60]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
<<<<<<< Updated upstream
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d005      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d2:	f040 80d8 	bne.w	8008486 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082e2:	f7fc fa4d 	bl	8004780 <HAL_GetTick>
 80082e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082e8:	e00a      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082ea:	f7fc fa49 	bl	8004780 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b64      	cmp	r3, #100	; 0x64
 80082f6:	d903      	bls.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e196      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80082fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008300:	4b6c      	ldr	r3, [pc, #432]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1ee      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x48e>
=======
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d005      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009abe:	f040 80d8 	bne.w	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ac2:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009ac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ace:	f7fc fa6b 	bl	8005fa8 <HAL_GetTick>
 8009ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ad4:	e00a      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ad6:	f7fc fa67 	bl	8005fa8 <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	2b64      	cmp	r3, #100	; 0x64
 8009ae2:	d903      	bls.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e196      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009ae8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009aec:	4b6c      	ldr	r3, [pc, #432]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1ee      	bne.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
>>>>>>> Stashed changes

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
<<<<<<< Updated upstream
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d021      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d11d      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x500>
=======
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d021      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d11d      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x500>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< Updated upstream
 8008320:	4b64      	ldr	r3, [pc, #400]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800832e:	4b61      	ldr	r3, [pc, #388]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008334:	0e1b      	lsrs	r3, r3, #24
 8008336:	f003 030f 	and.w	r3, r3, #15
 800833a:	60fb      	str	r3, [r7, #12]
=======
 8009b0c:	4b64      	ldr	r3, [pc, #400]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	0c1b      	lsrs	r3, r3, #16
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009b1a:	4b61      	ldr	r3, [pc, #388]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b20:	0e1b      	lsrs	r3, r3, #24
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	019a      	lsls	r2, r3, #6
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	431a      	orrs	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	071b      	lsls	r3, r3, #28
 8008354:	4957      	ldr	r1, [pc, #348]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	019a      	lsls	r2, r3, #6
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	041b      	lsls	r3, r3, #16
 8009b32:	431a      	orrs	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	061b      	lsls	r3, r3, #24
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	071b      	lsls	r3, r3, #28
 8009b40:	4957      	ldr	r1, [pc, #348]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
<<<<<<< Updated upstream
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008370:	d00a      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02e      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008386:	d129      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x580>
=======
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b5c:	d00a      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d02e      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b72:	d129      	bne.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< Updated upstream
 8008388:	4b4a      	ldr	r3, [pc, #296]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800838a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008396:	4b47      	ldr	r3, [pc, #284]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839c:	0f1b      	lsrs	r3, r3, #28
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	60fb      	str	r3, [r7, #12]
=======
 8009b74:	4b4a      	ldr	r3, [pc, #296]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b7a:	0c1b      	lsrs	r3, r3, #16
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009b82:	4b47      	ldr	r3, [pc, #284]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b88:	0f1b      	lsrs	r3, r3, #28
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
<<<<<<< Updated upstream
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	019a      	lsls	r2, r3, #6
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	041b      	lsls	r3, r3, #16
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	431a      	orrs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	071b      	lsls	r3, r3, #28
 80083bc:	493d      	ldr	r1, [pc, #244]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80083c4:	4b3b      	ldr	r3, [pc, #236]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ca:	f023 021f 	bic.w	r2, r3, #31
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	3b01      	subs	r3, #1
 80083d4:	4937      	ldr	r1, [pc, #220]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	019a      	lsls	r2, r3, #6
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	071b      	lsls	r3, r3, #28
 8009ba8:	493d      	ldr	r1, [pc, #244]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009bb0:	4b3b      	ldr	r3, [pc, #236]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb6:	f023 021f 	bic.w	r2, r3, #31
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	4937      	ldr	r1, [pc, #220]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01d      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
=======
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01d      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
<<<<<<< Updated upstream
 80083e8:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ee:	0e1b      	lsrs	r3, r3, #24
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083f6:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083fc:	0f1b      	lsrs	r3, r3, #28
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	60fb      	str	r3, [r7, #12]
=======
 8009bd4:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bda:	0e1b      	lsrs	r3, r3, #24
 8009bdc:	f003 030f 	and.w	r3, r3, #15
 8009be0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009be2:	4b2f      	ldr	r3, [pc, #188]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be8:	0f1b      	lsrs	r3, r3, #28
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
<<<<<<< Updated upstream
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	019a      	lsls	r2, r3, #6
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	431a      	orrs	r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	061b      	lsls	r3, r3, #24
 8008416:	431a      	orrs	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	071b      	lsls	r3, r3, #28
 800841c:	4925      	ldr	r1, [pc, #148]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	019a      	lsls	r2, r3, #6
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	041b      	lsls	r3, r3, #16
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	061b      	lsls	r3, r3, #24
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	071b      	lsls	r3, r3, #28
 8009c08:	4925      	ldr	r1, [pc, #148]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< Updated upstream
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d011      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
=======
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d011      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	019a      	lsls	r2, r3, #6
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	431a      	orrs	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	061b      	lsls	r3, r3, #24
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	071b      	lsls	r3, r3, #28
 800844c:	4919      	ldr	r1, [pc, #100]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800844e:	4313      	orrs	r3, r2
 8008450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	019a      	lsls	r2, r3, #6
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	061b      	lsls	r3, r3, #24
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	071b      	lsls	r3, r3, #28
 8009c38:	4919      	ldr	r1, [pc, #100]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< Updated upstream
 8008454:	4b17      	ldr	r3, [pc, #92]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a16      	ldr	r2, [pc, #88]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800845a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800845e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008460:	f7fc f98e 	bl	8004780 <HAL_GetTick>
 8008464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008466:	e008      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008468:	f7fc f98a 	bl	8004780 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b64      	cmp	r3, #100	; 0x64
 8008474:	d901      	bls.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e0d7      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0f0      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x60c>
=======
 8009c40:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a16      	ldr	r2, [pc, #88]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4c:	f7fc f9ac 	bl	8005fa8 <HAL_GetTick>
 8009c50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c54:	f7fc f9a8 	bl	8005fa8 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b64      	cmp	r3, #100	; 0x64
 8009c60:	d901      	bls.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e0d7      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c66:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x60c>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
<<<<<<< Updated upstream
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2b01      	cmp	r3, #1
 800848a:	f040 80cd 	bne.w	8008628 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800849a:	f7fc f971 	bl	8004780 <HAL_GetTick>
 800849e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084a0:	e00a      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084a2:	f7fc f96d 	bl	8004780 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b64      	cmp	r3, #100	; 0x64
 80084ae:	d903      	bls.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e0ba      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80084b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084b8:	4b5e      	ldr	r3, [pc, #376]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c4:	d0ed      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x646>
=======
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	f040 80cd 	bne.w	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a08      	ldr	r2, [pc, #32]	; (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c86:	f7fc f98f 	bl	8005fa8 <HAL_GetTick>
 8009c8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009c8c:	e00a      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c8e:	f7fc f98b 	bl	8005fa8 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b64      	cmp	r3, #100	; 0x64
 8009c9a:	d903      	bls.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e0ba      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009ca0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ca4:	4b5e      	ldr	r3, [pc, #376]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cb0:	d0ed      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x646>
>>>>>>> Stashed changes

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
<<<<<<< Updated upstream
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02e      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d12a      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
=======
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d02e      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d12a      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
<<<<<<< Updated upstream
 80084ee:	4b51      	ldr	r3, [pc, #324]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	0c1b      	lsrs	r3, r3, #16
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084fc:	4b4d      	ldr	r3, [pc, #308]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	0f1b      	lsrs	r3, r3, #28
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	60fb      	str	r3, [r7, #12]
=======
 8009cda:	4b51      	ldr	r3, [pc, #324]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ce8:	4b4d      	ldr	r3, [pc, #308]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cee:	0f1b      	lsrs	r3, r3, #28
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< Updated upstream
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	019a      	lsls	r2, r3, #6
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	061b      	lsls	r3, r3, #24
 800851c:	431a      	orrs	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	071b      	lsls	r3, r3, #28
 8008522:	4944      	ldr	r1, [pc, #272]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800852a:	4b42      	ldr	r3, [pc, #264]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800852c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008530:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	3b01      	subs	r3, #1
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	493d      	ldr	r1, [pc, #244]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	019a      	lsls	r2, r3, #6
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	061b      	lsls	r3, r3, #24
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	071b      	lsls	r3, r3, #28
 8009d0e:	4944      	ldr	r1, [pc, #272]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009d16:	4b42      	ldr	r3, [pc, #264]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d24:	3b01      	subs	r3, #1
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	493d      	ldr	r1, [pc, #244]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
<<<<<<< Updated upstream
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d022      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008558:	d11d      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x73a>
=======
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d022      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d44:	d11d      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< Updated upstream
 800855a:	4b36      	ldr	r3, [pc, #216]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008560:	0e1b      	lsrs	r3, r3, #24
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008568:	4b32      	ldr	r3, [pc, #200]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800856e:	0f1b      	lsrs	r3, r3, #28
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	60fb      	str	r3, [r7, #12]
=======
 8009d46:	4b36      	ldr	r3, [pc, #216]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4c:	0e1b      	lsrs	r3, r3, #24
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d54:	4b32      	ldr	r3, [pc, #200]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5a:	0f1b      	lsrs	r3, r3, #28
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
<<<<<<< Updated upstream
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	019a      	lsls	r2, r3, #6
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	431a      	orrs	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	071b      	lsls	r3, r3, #28
 800858e:	4929      	ldr	r1, [pc, #164]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	019a      	lsls	r2, r3, #6
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	431a      	orrs	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	071b      	lsls	r3, r3, #28
 8009d7a:	4929      	ldr	r1, [pc, #164]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< Updated upstream
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0308 	and.w	r3, r3, #8
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d028      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x798>
=======
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d028      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x798>
>>>>>>> Stashed changes
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< Updated upstream
 80085a2:	4b24      	ldr	r3, [pc, #144]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085b0:	4b20      	ldr	r3, [pc, #128]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	0c1b      	lsrs	r3, r3, #16
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	60fb      	str	r3, [r7, #12]
=======
 8009d8e:	4b24      	ldr	r3, [pc, #144]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d94:	0e1b      	lsrs	r3, r3, #24
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009d9c:	4b20      	ldr	r3, [pc, #128]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da2:	0c1b      	lsrs	r3, r3, #16
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< Updated upstream
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	019a      	lsls	r2, r3, #6
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	041b      	lsls	r3, r3, #16
 80085c8:	431a      	orrs	r2, r3
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	071b      	lsls	r3, r3, #28
 80085d6:	4917      	ldr	r1, [pc, #92]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085de:	4b15      	ldr	r3, [pc, #84]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4911      	ldr	r1, [pc, #68]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	019a      	lsls	r2, r3, #6
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	431a      	orrs	r2, r3
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	061b      	lsls	r3, r3, #24
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	071b      	lsls	r3, r3, #28
 8009dc2:	4917      	ldr	r1, [pc, #92]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009dca:	4b15      	ldr	r3, [pc, #84]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4911      	ldr	r1, [pc, #68]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
<<<<<<< Updated upstream
 80085f4:	4b0f      	ldr	r3, [pc, #60]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a0e      	ldr	r2, [pc, #56]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008600:	f7fc f8be 	bl	8004780 <HAL_GetTick>
 8008604:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008606:	e008      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008608:	f7fc f8ba 	bl	8004780 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b64      	cmp	r3, #100	; 0x64
 8008614:	d901      	bls.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e007      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008626:	d1ef      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
=======
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a0e      	ldr	r2, [pc, #56]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dec:	f7fc f8dc 	bl	8005fa8 <HAL_GetTick>
 8009df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009df2:	e008      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009df4:	f7fc f8d8 	bl	8005fa8 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b64      	cmp	r3, #100	; 0x64
 8009e00:	d901      	bls.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e007      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e06:	4b06      	ldr	r3, [pc, #24]	; (8009e20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e12:	d1ef      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40023800 	.word	0x40023800

08008638 <HAL_RTC_Init>:
=======
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	40023800 	.word	0x40023800

08009e24 <HAL_RTC_Init>:
>>>>>>> Stashed changes
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
<<<<<<< Updated upstream
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e06b      	b.n	8008722 <HAL_RTC_Init+0xea>
=======
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e06b      	b.n	8009f0e <HAL_RTC_Init+0xea>
>>>>>>> Stashed changes
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
<<<<<<< Updated upstream
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7f5b      	ldrb	r3, [r3, #29]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d105      	bne.n	8008660 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fb fcaa 	bl	8003fb4 <HAL_RTC_MspInit>
=======
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7f5b      	ldrb	r3, [r3, #29]
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d105      	bne.n	8009e4c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7fb fcc0 	bl	80057cc <HAL_RTC_MspInit>
>>>>>>> Stashed changes
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
<<<<<<< Updated upstream
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	22ca      	movs	r2, #202	; 0xca
 800866c:	625a      	str	r2, [r3, #36]	; 0x24
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2253      	movs	r2, #83	; 0x53
 8008674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb00 	bl	8008c7c <RTC_EnterInitMode>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d008      	beq.n	8008694 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	22ff      	movs	r2, #255	; 0xff
 8008688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2204      	movs	r2, #4
 800868e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e046      	b.n	8008722 <HAL_RTC_Init+0xea>
=======
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	22ca      	movs	r2, #202	; 0xca
 8009e58:	625a      	str	r2, [r3, #36]	; 0x24
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2253      	movs	r2, #83	; 0x53
 8009e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fb00 	bl	800a468 <RTC_EnterInitMode>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d008      	beq.n	8009e80 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	22ff      	movs	r2, #255	; 0xff
 8009e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2204      	movs	r2, #4
 8009e7a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e046      	b.n	8009f0e <HAL_RTC_Init+0xea>
>>>>>>> Stashed changes
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
<<<<<<< Updated upstream
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6899      	ldr	r1, [r3, #8]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b23      	ldr	r3, [pc, #140]	; (800872c <HAL_RTC_Init+0xf4>)
 80086a0:	400b      	ands	r3, r1
 80086a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6899      	ldr	r1, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	68d2      	ldr	r2, [r2, #12]
 80086ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6919      	ldr	r1, [r3, #16]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	041a      	lsls	r2, r3, #16
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ee:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0208 	bic.w	r2, r2, #8
 80086fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	22ff      	movs	r2, #255	; 0xff
 8008718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008720:	2300      	movs	r3, #0
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	ff8fffbf 	.word	0xff8fffbf

08008730 <HAL_RTC_SetTime>:
=======
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6899      	ldr	r1, [r3, #8]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <HAL_RTC_Init+0xf4>)
 8009e8c:	400b      	ands	r3, r1
 8009e8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6899      	ldr	r1, [r3, #8]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68d2      	ldr	r2, [r2, #12]
 8009eb6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6919      	ldr	r1, [r3, #16]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	041a      	lsls	r2, r3, #16
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eda:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0208 	bic.w	r2, r2, #8
 8009eea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	22ff      	movs	r2, #255	; 0xff
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
  }
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	ff8fffbf 	.word	0xff8fffbf

08009f1c <HAL_RTC_SetTime>:
>>>>>>> Stashed changes
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
<<<<<<< Updated upstream
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
=======
 8009f1c:	b590      	push	{r4, r7, lr}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	7f1b      	ldrb	r3, [r3, #28]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_RTC_SetTime+0x1c>
 8008748:	2302      	movs	r3, #2
 800874a:	e0a8      	b.n	800889e <HAL_RTC_SetTime+0x16e>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2202      	movs	r2, #2
 8008756:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d126      	bne.n	80087ac <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d102      	bne.n	8008772 <HAL_RTC_SetTime+0x42>
=======
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	7f1b      	ldrb	r3, [r3, #28]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <HAL_RTC_SetTime+0x1c>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e0a8      	b.n	800a08a <HAL_RTC_SetTime+0x16e>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2202      	movs	r2, #2
 8009f42:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d126      	bne.n	8009f98 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <HAL_RTC_SetTime+0x42>
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
<<<<<<< Updated upstream
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	731a      	strb	r2, [r3, #12]
=======
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	731a      	strb	r2, [r3, #12]
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
<<<<<<< Updated upstream
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 faac 	bl	8008cd4 <RTC_ByteToBcd2>
 800877c:	4603      	mov	r3, r0
 800877e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 faa5 	bl	8008cd4 <RTC_ByteToBcd2>
 800878a:	4603      	mov	r3, r0
 800878c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800878e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	789b      	ldrb	r3, [r3, #2]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fa9d 	bl	8008cd4 <RTC_ByteToBcd2>
 800879a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800879c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	7b1b      	ldrb	r3, [r3, #12]
 80087a4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	e018      	b.n	80087de <HAL_RTC_SetTime+0xae>
=======
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 faac 	bl	800a4c0 <RTC_ByteToBcd2>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 faa5 	bl	800a4c0 <RTC_ByteToBcd2>
 8009f76:	4603      	mov	r3, r0
 8009f78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009f7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	789b      	ldrb	r3, [r3, #2]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fa9d 	bl	800a4c0 <RTC_ByteToBcd2>
 8009f86:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009f88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	7b1b      	ldrb	r3, [r3, #12]
 8009f90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e018      	b.n	8009fca <HAL_RTC_SetTime+0xae>
>>>>>>> Stashed changes
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
<<<<<<< Updated upstream
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <HAL_RTC_SetTime+0x90>
=======
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <HAL_RTC_SetTime+0x90>
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
<<<<<<< Updated upstream
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	731a      	strb	r2, [r3, #12]
=======
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	731a      	strb	r2, [r3, #12]
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
<<<<<<< Updated upstream
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087cc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80087d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	7b1b      	ldrb	r3, [r3, #12]
 80087d8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
=======
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009fb8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009fbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	7b1b      	ldrb	r3, [r3, #12]
 8009fc4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
<<<<<<< Updated upstream
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	22ca      	movs	r2, #202	; 0xca
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2253      	movs	r2, #83	; 0x53
 80087ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fa44 	bl	8008c7c <RTC_EnterInitMode>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	22ff      	movs	r2, #255	; 0xff
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2204      	movs	r2, #4
 8008806:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e045      	b.n	800889e <HAL_RTC_SetTime+0x16e>
=======
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	22ca      	movs	r2, #202	; 0xca
 8009fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2253      	movs	r2, #83	; 0x53
 8009fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 fa44 	bl	800a468 <RTC_EnterInitMode>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	22ff      	movs	r2, #255	; 0xff
 8009fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2204      	movs	r2, #4
 8009ff2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e045      	b.n	800a08a <HAL_RTC_SetTime+0x16e>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
<<<<<<< Updated upstream
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	6979      	ldr	r1, [r7, #20]
 8008818:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <HAL_RTC_SetTime+0x178>)
 800881a:	400b      	ands	r3, r1
 800881c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800882c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6899      	ldr	r1, [r3, #8]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	431a      	orrs	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008854:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	d111      	bne.n	8008888 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 f9e1 	bl	8008c2c <HAL_RTC_WaitForSynchro>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	22ff      	movs	r2, #255	; 0xff
 8008876:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2204      	movs	r2, #4
 800887c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e00a      	b.n	800889e <HAL_RTC_SetTime+0x16e>
=======
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	6979      	ldr	r1, [r7, #20]
 800a004:	4b23      	ldr	r3, [pc, #140]	; (800a094 <HAL_RTC_SetTime+0x178>)
 800a006:	400b      	ands	r3, r1
 800a008:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	689a      	ldr	r2, [r3, #8]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a018:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6899      	ldr	r1, [r3, #8]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	691a      	ldr	r2, [r3, #16]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	431a      	orrs	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	430a      	orrs	r2, r1
 800a030:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a040:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f003 0320 	and.w	r3, r3, #32
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d111      	bne.n	800a074 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f9e1 	bl	800a418 <HAL_RTC_WaitForSynchro>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	22ff      	movs	r2, #255	; 0xff
 800a062:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2204      	movs	r2, #4
 800a068:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e00a      	b.n	800a08a <HAL_RTC_SetTime+0x16e>
>>>>>>> Stashed changes
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800889c:	2300      	movs	r3, #0
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd90      	pop	{r4, r7, pc}
 80088a6:	bf00      	nop
 80088a8:	007f7f7f 	.word	0x007f7f7f

080088ac <HAL_RTC_SetDate>:
=======
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	22ff      	movs	r2, #255	; 0xff
 800a07a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a088:	2300      	movs	r3, #0
  }
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd90      	pop	{r4, r7, pc}
 800a092:	bf00      	nop
 800a094:	007f7f7f 	.word	0x007f7f7f

0800a098 <HAL_RTC_SetDate>:
>>>>>>> Stashed changes
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
<<<<<<< Updated upstream
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
=======
 800a098:	b590      	push	{r4, r7, lr}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	7f1b      	ldrb	r3, [r3, #28]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_RTC_SetDate+0x1c>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e092      	b.n	80089ee <HAL_RTC_SetDate+0x142>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2202      	movs	r2, #2
 80088d2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10e      	bne.n	80088f8 <HAL_RTC_SetDate+0x4c>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	330a      	adds	r3, #10
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	705a      	strb	r2, [r3, #1]
=======
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	7f1b      	ldrb	r3, [r3, #28]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_RTC_SetDate+0x1c>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e092      	b.n	800a1da <HAL_RTC_SetDate+0x142>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10e      	bne.n	800a0e4 <HAL_RTC_SetDate+0x4c>
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	f003 0310 	and.w	r3, r3, #16
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	785b      	ldrb	r3, [r3, #1]
 800a0d6:	f023 0310 	bic.w	r3, r3, #16
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	330a      	adds	r3, #10
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	705a      	strb	r2, [r3, #1]
>>>>>>> Stashed changes
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
<<<<<<< Updated upstream
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d11c      	bne.n	8008938 <HAL_RTC_SetDate+0x8c>
=======
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d11c      	bne.n	800a124 <HAL_RTC_SetDate+0x8c>
>>>>>>> Stashed changes
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
<<<<<<< Updated upstream
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	78db      	ldrb	r3, [r3, #3]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f9e6 	bl	8008cd4 <RTC_ByteToBcd2>
 8008908:	4603      	mov	r3, r0
 800890a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f9df 	bl	8008cd4 <RTC_ByteToBcd2>
 8008916:	4603      	mov	r3, r0
 8008918:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800891a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	789b      	ldrb	r3, [r3, #2]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f9d7 	bl	8008cd4 <RTC_ByteToBcd2>
 8008926:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008928:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	e00e      	b.n	8008956 <HAL_RTC_SetDate+0xaa>
=======
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	78db      	ldrb	r3, [r3, #3]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f9e6 	bl	800a4c0 <RTC_ByteToBcd2>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f9df 	bl	800a4c0 <RTC_ByteToBcd2>
 800a102:	4603      	mov	r3, r0
 800a104:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a106:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	789b      	ldrb	r3, [r3, #2]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 f9d7 	bl	800a4c0 <RTC_ByteToBcd2>
 800a112:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a114:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a11e:	4313      	orrs	r3, r2
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e00e      	b.n	800a142 <HAL_RTC_SetDate+0xaa>
>>>>>>> Stashed changes
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
<<<<<<< Updated upstream
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	78db      	ldrb	r3, [r3, #3]
 800893c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008944:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800894a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]
=======
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	78db      	ldrb	r3, [r3, #3]
 800a128:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	785b      	ldrb	r3, [r3, #1]
 800a12e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a130:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a136:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a13e:	4313      	orrs	r3, r2
 800a140:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
<<<<<<< Updated upstream
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	22ca      	movs	r2, #202	; 0xca
 800895c:	625a      	str	r2, [r3, #36]	; 0x24
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2253      	movs	r2, #83	; 0x53
 8008964:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f988 	bl	8008c7c <RTC_EnterInitMode>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	22ff      	movs	r2, #255	; 0xff
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2204      	movs	r2, #4
 800897e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e031      	b.n	80089ee <HAL_RTC_SetDate+0x142>
=======
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	22ca      	movs	r2, #202	; 0xca
 800a148:	625a      	str	r2, [r3, #36]	; 0x24
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2253      	movs	r2, #83	; 0x53
 800a150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f988 	bl	800a468 <RTC_EnterInitMode>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	22ff      	movs	r2, #255	; 0xff
 800a164:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2204      	movs	r2, #4
 800a16a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e031      	b.n	800a1da <HAL_RTC_SetDate+0x142>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
<<<<<<< Updated upstream
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	6979      	ldr	r1, [r7, #20]
 8008990:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <HAL_RTC_SetDate+0x14c>)
 8008992:	400b      	ands	r3, r1
 8008994:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d111      	bne.n	80089d8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f939 	bl	8008c2c <HAL_RTC_WaitForSynchro>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	22ff      	movs	r2, #255	; 0xff
 80089c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2204      	movs	r2, #4
 80089cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e00a      	b.n	80089ee <HAL_RTC_SetDate+0x142>
=======
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	6979      	ldr	r1, [r7, #20]
 800a17c:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <HAL_RTC_SetDate+0x14c>)
 800a17e:	400b      	ands	r3, r1
 800a180:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a190:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f003 0320 	and.w	r3, r3, #32
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d111      	bne.n	800a1c4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f939 	bl	800a418 <HAL_RTC_WaitForSynchro>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	22ff      	movs	r2, #255	; 0xff
 800a1b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e00a      	b.n	800a1da <HAL_RTC_SetDate+0x142>
>>>>>>> Stashed changes
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}
 80089f6:	bf00      	nop
 80089f8:	00ffff3f 	.word	0x00ffff3f

080089fc <HAL_RTC_SetAlarm>:
=======
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	22ff      	movs	r2, #255	; 0xff
 800a1ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
  }
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd90      	pop	{r4, r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	00ffff3f 	.word	0x00ffff3f

0800a1e8 <HAL_RTC_SetAlarm>:
>>>>>>> Stashed changes
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
<<<<<<< Updated upstream
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b089      	sub	sp, #36	; 0x24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
=======
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b089      	sub	sp, #36	; 0x24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	7f1b      	ldrb	r3, [r3, #28]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_RTC_SetAlarm+0x24>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e101      	b.n	8008c24 <HAL_RTC_SetAlarm+0x228>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d137      	bne.n	8008aa2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <HAL_RTC_SetAlarm+0x4a>
=======
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	7f1b      	ldrb	r3, [r3, #28]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_RTC_SetAlarm+0x24>
 800a208:	2302      	movs	r3, #2
 800a20a:	e101      	b.n	800a410 <HAL_RTC_SetAlarm+0x228>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2201      	movs	r2, #1
 800a210:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2202      	movs	r2, #2
 800a216:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d137      	bne.n	800a28e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <HAL_RTC_SetAlarm+0x4a>
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
<<<<<<< Updated upstream
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2200      	movs	r2, #0
 8008a44:	731a      	strb	r2, [r3, #12]
=======
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	2200      	movs	r2, #0
 800a230:	731a      	strb	r2, [r3, #12]
>>>>>>> Stashed changes
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
<<<<<<< Updated upstream
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f942 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a50:	4603      	mov	r3, r0
 8008a52:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f93b 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a62:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	789b      	ldrb	r3, [r3, #2]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f000 f933 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a6e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008a70:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	7b1b      	ldrb	r3, [r3, #12]
 8008a78:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a7a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f925 	bl	8008cd4 <RTC_ByteToBcd2>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a8e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e023      	b.n	8008aea <HAL_RTC_SetAlarm+0xee>
=======
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f000 f942 	bl	800a4c0 <RTC_ByteToBcd2>
 800a23c:	4603      	mov	r3, r0
 800a23e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 f93b 	bl	800a4c0 <RTC_ByteToBcd2>
 800a24a:	4603      	mov	r3, r0
 800a24c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a24e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	789b      	ldrb	r3, [r3, #2]
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f933 	bl	800a4c0 <RTC_ByteToBcd2>
 800a25a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a25c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	7b1b      	ldrb	r3, [r3, #12]
 800a264:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a266:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f925 	bl	800a4c0 <RTC_ByteToBcd2>
 800a276:	4603      	mov	r3, r0
 800a278:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a27a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a282:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a288:	4313      	orrs	r3, r2
 800a28a:	61fb      	str	r3, [r7, #28]
 800a28c:	e023      	b.n	800a2d6 <HAL_RTC_SetAlarm+0xee>
>>>>>>> Stashed changes
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
<<<<<<< Updated upstream
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <HAL_RTC_SetAlarm+0xba>
=======
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <HAL_RTC_SetAlarm+0xba>
>>>>>>> Stashed changes
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
<<<<<<< Updated upstream
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	731a      	strb	r2, [r3, #12]
=======
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	731a      	strb	r2, [r3, #12]
>>>>>>> Stashed changes
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
<<<<<<< Updated upstream
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	785b      	ldrb	r3, [r3, #1]
 8008ac0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ac2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ac8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	7b1b      	ldrb	r3, [r3, #12]
 8008ace:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ad0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ad8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008ada:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ae0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61fb      	str	r3, [r7, #28]
=======
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	785b      	ldrb	r3, [r3, #1]
 800a2ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a2ae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a2b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	7b1b      	ldrb	r3, [r3, #12]
 800a2ba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a2bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a2c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a2cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
<<<<<<< Updated upstream
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	22ca      	movs	r2, #202	; 0xca
 8008afc:	625a      	str	r2, [r3, #36]	; 0x24
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2253      	movs	r2, #83	; 0x53
 8008b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0e:	d13f      	bne.n	8008b90 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b1e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b2e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b30:	f7fb fe26 	bl	8004780 <HAL_GetTick>
 8008b34:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008b36:	e013      	b.n	8008b60 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b38:	f7fb fe22 	bl	8004780 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b46:	d90b      	bls.n	8008b60 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	22ff      	movs	r2, #255	; 0xff
 8008b4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2203      	movs	r2, #3
 8008b54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e061      	b.n	8008c24 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0e4      	beq.n	8008b38 <HAL_RTC_SetAlarm+0x13c>
=======
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	685a      	ldr	r2, [r3, #4]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	22ca      	movs	r2, #202	; 0xca
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2253      	movs	r2, #83	; 0x53
 800a2f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fa:	d13f      	bne.n	800a37c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689a      	ldr	r2, [r3, #8]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a30a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a31a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a31c:	f7fb fe44 	bl	8005fa8 <HAL_GetTick>
 800a320:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a322:	e013      	b.n	800a34c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a324:	f7fb fe40 	bl	8005fa8 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a332:	d90b      	bls.n	800a34c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	22ff      	movs	r2, #255	; 0xff
 800a33a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2203      	movs	r2, #3
 800a340:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e061      	b.n	800a410 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0e4      	beq.n	800a324 <HAL_RTC_SetAlarm+0x13c>
>>>>>>> Stashed changes
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
<<<<<<< Updated upstream
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b8c:	609a      	str	r2, [r3, #8]
 8008b8e:	e03e      	b.n	8008c0e <HAL_RTC_SetAlarm+0x212>
=======
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69fa      	ldr	r2, [r7, #28]
 800a360:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a378:	609a      	str	r2, [r3, #8]
 800a37a:	e03e      	b.n	800a3fa <HAL_RTC_SetAlarm+0x212>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
<<<<<<< Updated upstream
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b9e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bb0:	f7fb fde6 	bl	8004780 <HAL_GetTick>
 8008bb4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008bb6:	e013      	b.n	8008be0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bb8:	f7fb fde2 	bl	8004780 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bc6:	d90b      	bls.n	8008be0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e021      	b.n	8008c24 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0e4      	beq.n	8008bb8 <HAL_RTC_SetAlarm+0x1bc>
=======
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a38a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a39a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a39c:	f7fb fe04 	bl	8005fa8 <HAL_GetTick>
 800a3a0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a3a2:	e013      	b.n	800a3cc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a3a4:	f7fb fe00 	bl	8005fa8 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3b2:	d90b      	bls.n	800a3cc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	22ff      	movs	r2, #255	; 0xff
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2203      	movs	r2, #3
 800a3c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e021      	b.n	800a410 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f003 0302 	and.w	r3, r3, #2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0e4      	beq.n	800a3a4 <HAL_RTC_SetAlarm+0x1bc>
>>>>>>> Stashed changes
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
<<<<<<< Updated upstream
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c0c:	609a      	str	r2, [r3, #8]
=======
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3f8:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
<<<<<<< Updated upstream
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	22ff      	movs	r2, #255	; 0xff
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3724      	adds	r7, #36	; 0x24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd90      	pop	{r4, r7, pc}

08008c2c <HAL_RTC_WaitForSynchro>:
=======
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	22ff      	movs	r2, #255	; 0xff
 800a400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3724      	adds	r7, #36	; 0x24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd90      	pop	{r4, r7, pc}

0800a418 <HAL_RTC_WaitForSynchro>:
>>>>>>> Stashed changes
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
<<<<<<< Updated upstream
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c46:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c48:	f7fb fd9a 	bl	8004780 <HAL_GetTick>
 8008c4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c4e:	e009      	b.n	8008c64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c50:	f7fb fd96 	bl	8004780 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c5e:	d901      	bls.n	8008c64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e007      	b.n	8008c74 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0ee      	beq.n	8008c50 <HAL_RTC_WaitForSynchro+0x24>
=======
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a432:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a434:	f7fb fdb8 	bl	8005fa8 <HAL_GetTick>
 800a438:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a43a:	e009      	b.n	800a450 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a43c:	f7fb fdb4 	bl	8005fa8 <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a44a:	d901      	bls.n	800a450 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e007      	b.n	800a460 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0ee      	beq.n	800a43c <HAL_RTC_WaitForSynchro+0x24>
>>>>>>> Stashed changes
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <RTC_EnterInitMode>:
=======
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <RTC_EnterInitMode>:
>>>>>>> Stashed changes
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
<<<<<<< Updated upstream
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d119      	bne.n	8008cca <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ca0:	f7fb fd6e 	bl	8004780 <HAL_GetTick>
 8008ca4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ca6:	e009      	b.n	8008cbc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ca8:	f7fb fd6a 	bl	8004780 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb6:	d901      	bls.n	8008cbc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e007      	b.n	8008ccc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0ee      	beq.n	8008ca8 <RTC_EnterInitMode+0x2c>
=======
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d119      	bne.n	800a4b6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a48c:	f7fb fd8c 	bl	8005fa8 <HAL_GetTick>
 800a490:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a492:	e009      	b.n	800a4a8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a494:	f7fb fd88 	bl	8005fa8 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4a2:	d901      	bls.n	800a4a8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e007      	b.n	800a4b8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0ee      	beq.n	800a494 <RTC_EnterInitMode+0x2c>
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <RTC_ByteToBcd2>:
=======
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <RTC_ByteToBcd2>:
>>>>>>> Stashed changes
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
<<<<<<< Updated upstream
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008ce2:	e005      	b.n	8008cf0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	3b0a      	subs	r3, #10
 8008cee:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	2b09      	cmp	r3, #9
 8008cf4:	d8f6      	bhi.n	8008ce4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b2db      	uxtb	r3, r3
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_RTCEx_SetTimeStamp>:
=======
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a4ce:	e005      	b.n	800a4dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	3b0a      	subs	r3, #10
 800a4da:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	2b09      	cmp	r3, #9
 800a4e0:	d8f6      	bhi.n	800a4d0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	b2db      	uxtb	r3, r3
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_RTCEx_SetTimeStamp>:
>>>>>>> Stashed changes
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
<<<<<<< Updated upstream
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
=======
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
<<<<<<< Updated upstream
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	7f1b      	ldrb	r3, [r3, #28]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e03e      	b.n	8008daa <HAL_RTCEx_SetTimeStamp+0x9a>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2202      	movs	r2, #2
 8008d36:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	4b1e      	ldr	r3, [pc, #120]	; (8008db8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	22ca      	movs	r2, #202	; 0xca
 8008d52:	625a      	str	r2, [r3, #36]	; 0x24
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2253      	movs	r2, #83	; 0x53
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0206 	bic.w	r2, r2, #6
 8008d6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d92:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	22ff      	movs	r2, #255	; 0xff
 8008d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	fffff7f7 	.word	0xfffff7f7

08008dbc <HAL_SDRAM_Init>:
=======
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	7f1b      	ldrb	r3, [r3, #28]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a514:	2302      	movs	r3, #2
 800a516:	e03e      	b.n	800a596 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2202      	movs	r2, #2
 800a522:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	4313      	orrs	r3, r2
 800a536:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	22ca      	movs	r2, #202	; 0xca
 800a53e:	625a      	str	r2, [r3, #36]	; 0x24
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2253      	movs	r2, #83	; 0x53
 800a546:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0206 	bic.w	r2, r2, #6
 800a556:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	430a      	orrs	r2, r1
 800a566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a57e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	22ff      	movs	r2, #255	; 0xff
 800a586:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	fffff7f7 	.word	0xfffff7f7

0800a5a8 <HAL_SDRAM_Init>:
>>>>>>> Stashed changes
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
<<<<<<< Updated upstream
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e025      	b.n	8008e1c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
=======
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e025      	b.n	800a608 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d106      	bne.n	800a5d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
<<<<<<< Updated upstream
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7fb fb9b 	bl	8004520 <HAL_SDRAM_MspInit>
=======
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7fb fbb1 	bl	8005d38 <HAL_SDRAM_MspInit>
>>>>>>> Stashed changes
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
<<<<<<< Updated upstream
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f002 f9d1 	bl	800b1a4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	f002 fa3b 	bl	800b288 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_SDRAM_SendCommand>:
=======
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2202      	movs	r2, #2
 800a5da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f002 f93f 	bl	800c86c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	f002 f9a9 	bl	800c950 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_SDRAM_SendCommand>:
>>>>>>> Stashed changes
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d101      	bne.n	8008e40 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e018      	b.n	8008e72 <HAL_SDRAM_SendCommand+0x4e>
=======
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b02      	cmp	r3, #2
 800a626:	d101      	bne.n	800a62c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a628:	2302      	movs	r3, #2
 800a62a:	e018      	b.n	800a65e <HAL_SDRAM_SendCommand+0x4e>
>>>>>>> Stashed changes
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
<<<<<<< Updated upstream
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f002 fa99 	bl	800b388 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d104      	bne.n	8008e68 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2205      	movs	r2, #5
 8008e62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008e66:	e003      	b.n	8008e70 <HAL_SDRAM_SendCommand+0x4c>
=======
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2202      	movs	r2, #2
 800a630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f002 fa07 	bl	800ca50 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b02      	cmp	r3, #2
 800a648:	d104      	bne.n	800a654 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2205      	movs	r2, #5
 800a64e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a652:	e003      	b.n	800a65c <HAL_SDRAM_SendCommand+0x4c>
>>>>>>> Stashed changes
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
<<<<<<< Updated upstream
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_SDRAM_ProgramRefreshRate>:
=======
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <HAL_SDRAM_ProgramRefreshRate>:
>>>>>>> Stashed changes
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
<<<<<<< Updated upstream
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d101      	bne.n	8008e94 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008e90:	2302      	movs	r3, #2
 8008e92:	e00e      	b.n	8008eb2 <HAL_SDRAM_ProgramRefreshRate+0x38>
=======
 800a666:	b580      	push	{r7, lr}
 800a668:	b082      	sub	sp, #8
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d101      	bne.n	800a680 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a67c:	2302      	movs	r3, #2
 800a67e:	e00e      	b.n	800a69e <HAL_SDRAM_ProgramRefreshRate+0x38>
>>>>>>> Stashed changes
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
<<<<<<< Updated upstream
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f002 fa91 	bl	800b3ca <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <HAL_SPI_Init>:
=======
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f002 f9ff 	bl	800ca92 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
=======
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< Updated upstream
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e084      	b.n	8008fd6 <HAL_SPI_Init+0x11c>
=======
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e084      	b.n	800a7c2 <HAL_SPI_Init+0x11c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7fb f87e 	bl	8003fe8 <HAL_SPI_MspInit>
=======
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7fb f894 	bl	8005800 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f0c:	d902      	bls.n	8008f14 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e002      	b.n	8008f1a <HAL_SPI_Init+0x60>
=======
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6f8:	d902      	bls.n	800a700 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	e002      	b.n	800a706 <HAL_SPI_Init+0x60>
>>>>>>> Stashed changes
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< Updated upstream
 8008f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f18:	60fb      	str	r3, [r7, #12]
=======
 800a700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a704:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< Updated upstream
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f22:	d007      	beq.n	8008f34 <HAL_SPI_Init+0x7a>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f2c:	d002      	beq.n	8008f34 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a70e:	d007      	beq.n	800a720 <HAL_SPI_Init+0x7a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a718:	d002      	beq.n	800a720 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
<<<<<<< Updated upstream
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10b      	bne.n	8008f54 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f44:	d903      	bls.n	8008f4e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f4c:	e002      	b.n	8008f54 <HAL_SPI_Init+0x9a>
=======
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a730:	d903      	bls.n	800a73a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2202      	movs	r2, #2
 800a736:	631a      	str	r2, [r3, #48]	; 0x30
 800a738:	e002      	b.n	800a740 <HAL_SPI_Init+0x9a>
>>>>>>> Stashed changes
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
<<<<<<< Updated upstream
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
<<<<<<< Updated upstream
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	ea42 0103 	orr.w	r1, r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	601a      	str	r2, [r3, #0]
=======
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	431a      	orrs	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	ea42 0103 	orr.w	r1, r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
<<<<<<< Updated upstream
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	0c1b      	lsrs	r3, r3, #16
 8008f94:	f003 0204 	and.w	r2, r3, #4
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	ea42 0103 	orr.w	r1, r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
=======
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	f003 0204 	and.w	r2, r3, #4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	431a      	orrs	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78e:	431a      	orrs	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	ea42 0103 	orr.w	r1, r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <HAL_TIM_Base_Init>:
=======
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69da      	ldr	r2, [r3, #28]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e01d      	b.n	800902c <HAL_TIM_Base_Init+0x4e>
=======
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e01d      	b.n	800a818 <HAL_TIM_Base_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fb f861 	bl	80040cc <HAL_TIM_Base_MspInit>
=======
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7fb f877 	bl	80058e4 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2202      	movs	r2, #2
 800900e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	3304      	adds	r3, #4
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f000 fbc3 	bl	80097a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_TIM_Base_Start_IT>:
=======
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3304      	adds	r3, #4
 800a806:	4619      	mov	r1, r3
 800a808:	4610      	mov	r0, r2
 800a80a:	f000 fbc3 	bl	800af94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3708      	adds	r7, #8
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <HAL_TIM_Base_Start_IT>:
>>>>>>> Stashed changes
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
=======
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< Updated upstream
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <HAL_TIM_Base_Start_IT+0x50>)
 8009054:	4013      	ands	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d00b      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x42>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009064:	d007      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0201 	orr.w	r2, r2, #1
 8009074:	601a      	str	r2, [r3, #0]
=======
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0201 	orr.w	r2, r2, #1
 800a836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <HAL_TIM_Base_Start_IT+0x50>)
 800a840:	4013      	ands	r3, r2
 800a842:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b06      	cmp	r3, #6
 800a848:	d00b      	beq.n	800a862 <HAL_TIM_Base_Start_IT+0x42>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a850:	d007      	beq.n	800a862 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f042 0201 	orr.w	r2, r2, #1
 800a860:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	00010007 	.word	0x00010007

08009088 <HAL_TIM_PWM_Init>:
=======
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr
 800a870:	00010007 	.word	0x00010007

0800a874 <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e01d      	b.n	80090d6 <HAL_TIM_PWM_Init+0x4e>
=======
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e01d      	b.n	800a8c2 <HAL_TIM_PWM_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f815 	bl	80090de <HAL_TIM_PWM_MspInit>
=======
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f815 	bl	800a8ca <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f000 fb6e 	bl	80097a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_TIM_PWM_MspInit>:
=======
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f000 fb6e 	bl	800af94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <HAL_TIM_PWM_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
=======
 800a8ca:	b480      	push	{r7}
 800a8cc:	b083      	sub	sp, #12
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <HAL_TIM_IRQHandler>:
=======
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b02      	cmp	r3, #2
 8009106:	d122      	bne.n	800914e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b02      	cmp	r3, #2
 8009114:	d11b      	bne.n	800914e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f06f 0202 	mvn.w	r2, #2
 800911e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_TIM_IRQHandler+0x4a>
=======
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d122      	bne.n	800a93a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f003 0302 	and.w	r3, r3, #2
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d11b      	bne.n	800a93a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f06f 0202 	mvn.w	r2, #2
 800a90a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	f003 0303 	and.w	r3, r3, #3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fb19 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 800913a:	e005      	b.n	8009148 <HAL_TIM_IRQHandler+0x56>
=======
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fb19 	bl	800af58 <HAL_TIM_IC_CaptureCallback>
 800a926:	e005      	b.n	800a934 <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fb0b 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb1c 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	771a      	strb	r2, [r3, #28]
=======
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fb0b 	bl	800af44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fb1c 	bl	800af6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b04      	cmp	r3, #4
 800915a:	d122      	bne.n	80091a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d11b      	bne.n	80091a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f06f 0204 	mvn.w	r2, #4
 8009172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_TIM_IRQHandler+0x9e>
=======
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b04      	cmp	r3, #4
 800a946:	d122      	bne.n	800a98e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f003 0304 	and.w	r3, r3, #4
 800a952:	2b04      	cmp	r3, #4
 800a954:	d11b      	bne.n	800a98e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f06f 0204 	mvn.w	r2, #4
 800a95e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 faef 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 800918e:	e005      	b.n	800919c <HAL_TIM_IRQHandler+0xaa>
=======
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 faef 	bl	800af58 <HAL_TIM_IC_CaptureCallback>
 800a97a:	e005      	b.n	800a988 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fae1 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 faf2 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	771a      	strb	r2, [r3, #28]
=======
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fae1 	bl	800af44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 faf2 	bl	800af6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d122      	bne.n	80091f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	d11b      	bne.n	80091f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f06f 0208 	mvn.w	r2, #8
 80091c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2204      	movs	r2, #4
 80091cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_TIM_IRQHandler+0xf2>
=======
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	f003 0308 	and.w	r3, r3, #8
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d122      	bne.n	800a9e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f003 0308 	and.w	r3, r3, #8
 800a9a6:	2b08      	cmp	r3, #8
 800a9a8:	d11b      	bne.n	800a9e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f06f 0208 	mvn.w	r2, #8
 800a9b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2204      	movs	r2, #4
 800a9b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	f003 0303 	and.w	r3, r3, #3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fac5 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 80091e2:	e005      	b.n	80091f0 <HAL_TIM_IRQHandler+0xfe>
=======
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fac5 	bl	800af58 <HAL_TIM_IC_CaptureCallback>
 800a9ce:	e005      	b.n	800a9dc <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fab7 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fac8 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	771a      	strb	r2, [r3, #28]
=======
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fab7 	bl	800af44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fac8 	bl	800af6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b10      	cmp	r3, #16
 8009202:	d122      	bne.n	800924a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b10      	cmp	r3, #16
 8009210:	d11b      	bne.n	800924a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f06f 0210 	mvn.w	r2, #16
 800921a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2208      	movs	r2, #8
 8009220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <HAL_TIM_IRQHandler+0x146>
=======
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	f003 0310 	and.w	r3, r3, #16
 800a9ec:	2b10      	cmp	r3, #16
 800a9ee:	d122      	bne.n	800aa36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f003 0310 	and.w	r3, r3, #16
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d11b      	bne.n	800aa36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f06f 0210 	mvn.w	r2, #16
 800aa06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa9b 	bl	800976c <HAL_TIM_IC_CaptureCallback>
 8009236:	e005      	b.n	8009244 <HAL_TIM_IRQHandler+0x152>
=======
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fa9b 	bl	800af58 <HAL_TIM_IC_CaptureCallback>
 800aa22:	e005      	b.n	800aa30 <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa8d 	bl	8009758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa9e 	bl	8009780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	771a      	strb	r2, [r3, #28]
=======
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fa8d 	bl	800af44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa9e 	bl	800af6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d10e      	bne.n	8009276 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b01      	cmp	r3, #1
 8009264:	d107      	bne.n	8009276 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f06f 0201 	mvn.w	r2, #1
 800926e:	611a      	str	r2, [r3, #16]
=======
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d10e      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d107      	bne.n	800aa62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f06f 0201 	mvn.w	r2, #1
 800aa5a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f8 ff43 	bl	80020fc <HAL_TIM_PeriodElapsedCallback>
=======
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7f8 fe8f 	bl	8003780 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	2b80      	cmp	r3, #128	; 0x80
 8009282:	d10e      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b80      	cmp	r3, #128	; 0x80
 8009290:	d107      	bne.n	80092a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800929a:	611a      	str	r2, [r3, #16]
=======
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6c:	2b80      	cmp	r3, #128	; 0x80
 800aa6e:	d10e      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b80      	cmp	r3, #128	; 0x80
 800aa7c:	d107      	bne.n	800aa8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa86:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ffb9 	bl	800a214 <HAL_TIMEx_BreakCallback>
=======
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 ffb9 	bl	800ba00 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< Updated upstream
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b0:	d10e      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092bc:	2b80      	cmp	r3, #128	; 0x80
 80092be:	d107      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092c8:	611a      	str	r2, [r3, #16]
=======
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9c:	d10e      	bne.n	800aabc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa8:	2b80      	cmp	r3, #128	; 0x80
 800aaaa:	d107      	bne.n	800aabc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aab4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 ffac 	bl	800a228 <HAL_TIMEx_Break2Callback>
=======
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 ffac 	bl	800ba14 <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092da:	2b40      	cmp	r3, #64	; 0x40
 80092dc:	d10e      	bne.n	80092fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	d107      	bne.n	80092fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092f4:	611a      	str	r2, [r3, #16]
=======
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac6:	2b40      	cmp	r3, #64	; 0x40
 800aac8:	d10e      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad4:	2b40      	cmp	r3, #64	; 0x40
 800aad6:	d107      	bne.n	800aae8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aae0:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa4c 	bl	8009794 <HAL_TIM_TriggerCallback>
=======
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fa4c 	bl	800af80 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b20      	cmp	r3, #32
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b20      	cmp	r3, #32
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0220 	mvn.w	r2, #32
 8009320:	611a      	str	r2, [r3, #16]
=======
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f003 0320 	and.w	r3, r3, #32
 800aaf2:	2b20      	cmp	r3, #32
 800aaf4:	d10e      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b20      	cmp	r3, #32
 800ab02:	d107      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f06f 0220 	mvn.w	r2, #32
 800ab0c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 ff6c 	bl	800a200 <HAL_TIMEx_CommutCallback>
=======
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 ff6c 	bl	800b9ec <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_TIM_PWM_ConfigChannel>:
=======
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
=======
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009346:	2302      	movs	r3, #2
 8009348:	e105      	b.n	8009556 <HAL_TIM_PWM_ConfigChannel+0x226>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2202      	movs	r2, #2
 8009356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b14      	cmp	r3, #20
 800935e:	f200 80f0 	bhi.w	8009542 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009362:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093bd 	.word	0x080093bd
 800936c:	08009543 	.word	0x08009543
 8009370:	08009543 	.word	0x08009543
 8009374:	08009543 	.word	0x08009543
 8009378:	080093fd 	.word	0x080093fd
 800937c:	08009543 	.word	0x08009543
 8009380:	08009543 	.word	0x08009543
 8009384:	08009543 	.word	0x08009543
 8009388:	0800943f 	.word	0x0800943f
 800938c:	08009543 	.word	0x08009543
 8009390:	08009543 	.word	0x08009543
 8009394:	08009543 	.word	0x08009543
 8009398:	0800947f 	.word	0x0800947f
 800939c:	08009543 	.word	0x08009543
 80093a0:	08009543 	.word	0x08009543
 80093a4:	08009543 	.word	0x08009543
 80093a8:	080094c1 	.word	0x080094c1
 80093ac:	08009543 	.word	0x08009543
 80093b0:	08009543 	.word	0x08009543
 80093b4:	08009543 	.word	0x08009543
 80093b8:	08009501 	.word	0x08009501
=======
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d101      	bne.n	800ab36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ab32:	2302      	movs	r3, #2
 800ab34:	e105      	b.n	800ad42 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2202      	movs	r2, #2
 800ab42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b14      	cmp	r3, #20
 800ab4a:	f200 80f0 	bhi.w	800ad2e <HAL_TIM_PWM_ConfigChannel+0x212>
 800ab4e:	a201      	add	r2, pc, #4	; (adr r2, 800ab54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ab50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800ad2f 	.word	0x0800ad2f
 800ab5c:	0800ad2f 	.word	0x0800ad2f
 800ab60:	0800ad2f 	.word	0x0800ad2f
 800ab64:	0800abe9 	.word	0x0800abe9
 800ab68:	0800ad2f 	.word	0x0800ad2f
 800ab6c:	0800ad2f 	.word	0x0800ad2f
 800ab70:	0800ad2f 	.word	0x0800ad2f
 800ab74:	0800ac2b 	.word	0x0800ac2b
 800ab78:	0800ad2f 	.word	0x0800ad2f
 800ab7c:	0800ad2f 	.word	0x0800ad2f
 800ab80:	0800ad2f 	.word	0x0800ad2f
 800ab84:	0800ac6b 	.word	0x0800ac6b
 800ab88:	0800ad2f 	.word	0x0800ad2f
 800ab8c:	0800ad2f 	.word	0x0800ad2f
 800ab90:	0800ad2f 	.word	0x0800ad2f
 800ab94:	0800acad 	.word	0x0800acad
 800ab98:	0800ad2f 	.word	0x0800ad2f
 800ab9c:	0800ad2f 	.word	0x0800ad2f
 800aba0:	0800ad2f 	.word	0x0800ad2f
 800aba4:	0800aced 	.word	0x0800aced
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68b9      	ldr	r1, [r7, #8]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fa90 	bl	80098e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f042 0208 	orr.w	r2, r2, #8
 80093d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0204 	bic.w	r2, r2, #4
 80093e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6999      	ldr	r1, [r3, #24]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	619a      	str	r2, [r3, #24]
      break;
 80093fa:	e0a3      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fa90 	bl	800b0d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	699a      	ldr	r2, [r3, #24]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0208 	orr.w	r2, r2, #8
 800abc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0204 	bic.w	r2, r2, #4
 800abd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6999      	ldr	r1, [r3, #24]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691a      	ldr	r2, [r3, #16]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	619a      	str	r2, [r3, #24]
      break;
 800abe6:	e0a3      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68b9      	ldr	r1, [r7, #8]
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fae2 	bl	80099cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699a      	ldr	r2, [r3, #24]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6999      	ldr	r1, [r3, #24]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	021a      	lsls	r2, r3, #8
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	619a      	str	r2, [r3, #24]
      break;
 800943c:	e082      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fae2 	bl	800b1b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699a      	ldr	r2, [r3, #24]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	699a      	ldr	r2, [r3, #24]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6999      	ldr	r1, [r3, #24]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	021a      	lsls	r2, r3, #8
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	619a      	str	r2, [r3, #24]
      break;
 800ac28:	e082      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fb39 	bl	8009abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0208 	orr.w	r2, r2, #8
 8009458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0204 	bic.w	r2, r2, #4
 8009468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69d9      	ldr	r1, [r3, #28]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	61da      	str	r2, [r3, #28]
      break;
 800947c:	e062      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fb39 	bl	800b2a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	69da      	ldr	r2, [r3, #28]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f042 0208 	orr.w	r2, r2, #8
 800ac44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	69da      	ldr	r2, [r3, #28]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f022 0204 	bic.w	r2, r2, #4
 800ac54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	69d9      	ldr	r1, [r3, #28]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	691a      	ldr	r2, [r3, #16]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	430a      	orrs	r2, r1
 800ac66:	61da      	str	r2, [r3, #28]
      break;
 800ac68:	e062      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	4618      	mov	r0, r3
 8009486:	f000 fb8f 	bl	8009ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69d9      	ldr	r1, [r3, #28]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	021a      	lsls	r2, r3, #8
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	61da      	str	r2, [r3, #28]
      break;
 80094be:	e041      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 fb8f 	bl	800b394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69da      	ldr	r2, [r3, #28]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69da      	ldr	r2, [r3, #28]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	69d9      	ldr	r1, [r3, #28]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	021a      	lsls	r2, r3, #8
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	61da      	str	r2, [r3, #28]
      break;
 800acaa:	e041      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fbc6 	bl	8009c58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0208 	orr.w	r2, r2, #8
 80094da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0204 	bic.w	r2, r2, #4
 80094ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094fe:	e021      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fbc6 	bl	800b444 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f042 0208 	orr.w	r2, r2, #8
 800acc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0204 	bic.w	r2, r2, #4
 800acd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	691a      	ldr	r2, [r3, #16]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	430a      	orrs	r2, r1
 800ace8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800acea:	e021      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fbf8 	bl	8009cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800951a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	021a      	lsls	r2, r3, #8
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009540:	e000      	b.n	8009544 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68b9      	ldr	r1, [r7, #8]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fbf8 	bl	800b4e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	021a      	lsls	r2, r3, #8
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	430a      	orrs	r2, r1
 800ad2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 8009542:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop

08009560 <HAL_TIM_ConfigClockSource>:
=======
 800ad2e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop

0800ad4c <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
=======
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009570:	2b01      	cmp	r3, #1
 8009572:	d101      	bne.n	8009578 <HAL_TIM_ConfigClockSource+0x18>
 8009574:	2302      	movs	r3, #2
 8009576:	e0a6      	b.n	80096c6 <HAL_TIM_ConfigClockSource+0x166>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d101      	bne.n	800ad64 <HAL_TIM_ConfigClockSource+0x18>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e0a6      	b.n	800aeb2 <HAL_TIM_ConfigClockSource+0x166>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <HAL_TIM_ConfigClockSource+0x170>)
 8009594:	4013      	ands	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800959e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b40      	cmp	r3, #64	; 0x40
 80095ae:	d067      	beq.n	8009680 <HAL_TIM_ConfigClockSource+0x120>
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d80b      	bhi.n	80095cc <HAL_TIM_ConfigClockSource+0x6c>
 80095b4:	2b10      	cmp	r3, #16
 80095b6:	d073      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d802      	bhi.n	80095c2 <HAL_TIM_ConfigClockSource+0x62>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d06f      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
=======
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4b4f      	ldr	r3, [pc, #316]	; (800aebc <HAL_TIM_ConfigClockSource+0x170>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b40      	cmp	r3, #64	; 0x40
 800ad9a:	d067      	beq.n	800ae6c <HAL_TIM_ConfigClockSource+0x120>
 800ad9c:	2b40      	cmp	r3, #64	; 0x40
 800ad9e:	d80b      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x6c>
 800ada0:	2b10      	cmp	r3, #16
 800ada2:	d073      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x140>
 800ada4:	2b10      	cmp	r3, #16
 800ada6:	d802      	bhi.n	800adae <HAL_TIM_ConfigClockSource+0x62>
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d06f      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x140>
>>>>>>> Stashed changes
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< Updated upstream
 80095c0:	e078      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	d06c      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
 80095c6:	2b30      	cmp	r3, #48	; 0x30
 80095c8:	d06a      	beq.n	80096a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80095ca:	e073      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095cc:	2b70      	cmp	r3, #112	; 0x70
 80095ce:	d00d      	beq.n	80095ec <HAL_TIM_ConfigClockSource+0x8c>
 80095d0:	2b70      	cmp	r3, #112	; 0x70
 80095d2:	d804      	bhi.n	80095de <HAL_TIM_ConfigClockSource+0x7e>
 80095d4:	2b50      	cmp	r3, #80	; 0x50
 80095d6:	d033      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0xe0>
 80095d8:	2b60      	cmp	r3, #96	; 0x60
 80095da:	d041      	beq.n	8009660 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80095dc:	e06a      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80095de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e2:	d066      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0x152>
 80095e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e8:	d017      	beq.n	800961a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80095ea:	e063      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	6899      	ldr	r1, [r3, #8]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f000 fcd4 	bl	8009fa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800960e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	609a      	str	r2, [r3, #8]
      break;
 8009618:	e04c      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	6899      	ldr	r1, [r3, #8]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f000 fcbd 	bl	8009fa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963c:	609a      	str	r2, [r3, #8]
      break;
 800963e:	e039      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	6859      	ldr	r1, [r3, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	461a      	mov	r2, r3
 800964e:	f000 fc31 	bl	8009eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2150      	movs	r1, #80	; 0x50
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc8a 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 800965e:	e029      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	6859      	ldr	r1, [r3, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	461a      	mov	r2, r3
 800966e:	f000 fc50 	bl	8009f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2160      	movs	r1, #96	; 0x60
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fc7a 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 800967e:	e019      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	6859      	ldr	r1, [r3, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	461a      	mov	r2, r3
 800968e:	f000 fc11 	bl	8009eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2140      	movs	r1, #64	; 0x40
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fc6a 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 800969e:	e009      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f000 fc61 	bl	8009f72 <TIM_ITRx_SetConfig>
      break;
 80096b0:	e000      	b.n	80096b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80096b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	fffeff88 	.word	0xfffeff88

080096d4 <HAL_TIM_SlaveConfigSynchro>:
=======
 800adac:	e078      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800adae:	2b20      	cmp	r3, #32
 800adb0:	d06c      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x140>
 800adb2:	2b30      	cmp	r3, #48	; 0x30
 800adb4:	d06a      	beq.n	800ae8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800adb6:	e073      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800adb8:	2b70      	cmp	r3, #112	; 0x70
 800adba:	d00d      	beq.n	800add8 <HAL_TIM_ConfigClockSource+0x8c>
 800adbc:	2b70      	cmp	r3, #112	; 0x70
 800adbe:	d804      	bhi.n	800adca <HAL_TIM_ConfigClockSource+0x7e>
 800adc0:	2b50      	cmp	r3, #80	; 0x50
 800adc2:	d033      	beq.n	800ae2c <HAL_TIM_ConfigClockSource+0xe0>
 800adc4:	2b60      	cmp	r3, #96	; 0x60
 800adc6:	d041      	beq.n	800ae4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800adc8:	e06a      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800adca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adce:	d066      	beq.n	800ae9e <HAL_TIM_ConfigClockSource+0x152>
 800add0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add4:	d017      	beq.n	800ae06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800add6:	e063      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6818      	ldr	r0, [r3, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	6899      	ldr	r1, [r3, #8]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	f000 fcd4 	bl	800b794 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800adfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	609a      	str	r2, [r3, #8]
      break;
 800ae04:	e04c      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	6899      	ldr	r1, [r3, #8]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	f000 fcbd 	bl	800b794 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae28:	609a      	str	r2, [r3, #8]
      break;
 800ae2a:	e039      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	6859      	ldr	r1, [r3, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	f000 fc31 	bl	800b6a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2150      	movs	r1, #80	; 0x50
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fc8a 	bl	800b75e <TIM_ITRx_SetConfig>
      break;
 800ae4a:	e029      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	6859      	ldr	r1, [r3, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	f000 fc50 	bl	800b6fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2160      	movs	r1, #96	; 0x60
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fc7a 	bl	800b75e <TIM_ITRx_SetConfig>
      break;
 800ae6a:	e019      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	6859      	ldr	r1, [r3, #4]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	f000 fc11 	bl	800b6a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2140      	movs	r1, #64	; 0x40
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fc6a 	bl	800b75e <TIM_ITRx_SetConfig>
      break;
 800ae8a:	e009      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f000 fc61 	bl	800b75e <TIM_ITRx_SetConfig>
      break;
 800ae9c:	e000      	b.n	800aea0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ae9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	fffeff88 	.word	0xfffeff88

0800aec0 <HAL_TIM_SlaveConfigSynchro>:
>>>>>>> Stashed changes
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
<<<<<<< Updated upstream
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
=======
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_TIM_SlaveConfigSynchro+0x18>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e031      	b.n	8009750 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fb50 	bl	8009da4 <TIM_SlaveTimer_SetConfig>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e018      	b.n	8009750 <HAL_TIM_SlaveConfigSynchro+0x7c>
=======
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d101      	bne.n	800aed8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800aed4:	2302      	movs	r3, #2
 800aed6:	e031      	b.n	800af3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fb50 	bl	800b590 <TIM_SlaveTimer_SetConfig>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d009      	beq.n	800af0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e018      	b.n	800af3c <HAL_TIM_SlaveConfigSynchro+0x7c>
>>>>>>> Stashed changes
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
<<<<<<< Updated upstream
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68da      	ldr	r2, [r3, #12]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800972c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800973c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68da      	ldr	r2, [r3, #12]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
=======
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_IC_CaptureCallback>:
=======
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
=======
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
=======
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIM_TriggerCallback>:
=======
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
=======
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <TIM_Base_SetConfig>:
=======
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a40      	ldr	r2, [pc, #256]	; (80098bc <TIM_Base_SetConfig+0x114>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d013      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c6:	d00f      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a3d      	ldr	r2, [pc, #244]	; (80098c0 <TIM_Base_SetConfig+0x118>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00b      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a3c      	ldr	r2, [pc, #240]	; (80098c4 <TIM_Base_SetConfig+0x11c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d007      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a3b      	ldr	r2, [pc, #236]	; (80098c8 <TIM_Base_SetConfig+0x120>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d003      	beq.n	80097e8 <TIM_Base_SetConfig+0x40>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a3a      	ldr	r2, [pc, #232]	; (80098cc <TIM_Base_SetConfig+0x124>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d108      	bne.n	80097fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2f      	ldr	r2, [pc, #188]	; (80098bc <TIM_Base_SetConfig+0x114>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d02b      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009808:	d027      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a2c      	ldr	r2, [pc, #176]	; (80098c0 <TIM_Base_SetConfig+0x118>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d023      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a2b      	ldr	r2, [pc, #172]	; (80098c4 <TIM_Base_SetConfig+0x11c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d01f      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a2a      	ldr	r2, [pc, #168]	; (80098c8 <TIM_Base_SetConfig+0x120>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d01b      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a29      	ldr	r2, [pc, #164]	; (80098cc <TIM_Base_SetConfig+0x124>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d017      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a28      	ldr	r2, [pc, #160]	; (80098d0 <TIM_Base_SetConfig+0x128>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d013      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a27      	ldr	r2, [pc, #156]	; (80098d4 <TIM_Base_SetConfig+0x12c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00f      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a26      	ldr	r2, [pc, #152]	; (80098d8 <TIM_Base_SetConfig+0x130>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00b      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a25      	ldr	r2, [pc, #148]	; (80098dc <TIM_Base_SetConfig+0x134>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d007      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a24      	ldr	r2, [pc, #144]	; (80098e0 <TIM_Base_SetConfig+0x138>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d003      	beq.n	800985a <TIM_Base_SetConfig+0xb2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a23      	ldr	r2, [pc, #140]	; (80098e4 <TIM_Base_SetConfig+0x13c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d108      	bne.n	800986c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	4313      	orrs	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
=======
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a40      	ldr	r2, [pc, #256]	; (800b0a8 <TIM_Base_SetConfig+0x114>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d013      	beq.n	800afd4 <TIM_Base_SetConfig+0x40>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb2:	d00f      	beq.n	800afd4 <TIM_Base_SetConfig+0x40>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a3d      	ldr	r2, [pc, #244]	; (800b0ac <TIM_Base_SetConfig+0x118>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d00b      	beq.n	800afd4 <TIM_Base_SetConfig+0x40>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a3c      	ldr	r2, [pc, #240]	; (800b0b0 <TIM_Base_SetConfig+0x11c>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d007      	beq.n	800afd4 <TIM_Base_SetConfig+0x40>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	4a3b      	ldr	r2, [pc, #236]	; (800b0b4 <TIM_Base_SetConfig+0x120>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d003      	beq.n	800afd4 <TIM_Base_SetConfig+0x40>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a3a      	ldr	r2, [pc, #232]	; (800b0b8 <TIM_Base_SetConfig+0x124>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d108      	bne.n	800afe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a2f      	ldr	r2, [pc, #188]	; (800b0a8 <TIM_Base_SetConfig+0x114>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d02b      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff4:	d027      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a2c      	ldr	r2, [pc, #176]	; (800b0ac <TIM_Base_SetConfig+0x118>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d023      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a2b      	ldr	r2, [pc, #172]	; (800b0b0 <TIM_Base_SetConfig+0x11c>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d01f      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a2a      	ldr	r2, [pc, #168]	; (800b0b4 <TIM_Base_SetConfig+0x120>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d01b      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a29      	ldr	r2, [pc, #164]	; (800b0b8 <TIM_Base_SetConfig+0x124>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d017      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a28      	ldr	r2, [pc, #160]	; (800b0bc <TIM_Base_SetConfig+0x128>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d013      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a27      	ldr	r2, [pc, #156]	; (800b0c0 <TIM_Base_SetConfig+0x12c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d00f      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a26      	ldr	r2, [pc, #152]	; (800b0c4 <TIM_Base_SetConfig+0x130>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00b      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a25      	ldr	r2, [pc, #148]	; (800b0c8 <TIM_Base_SetConfig+0x134>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d007      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a24      	ldr	r2, [pc, #144]	; (800b0cc <TIM_Base_SetConfig+0x138>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d003      	beq.n	800b046 <TIM_Base_SetConfig+0xb2>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a23      	ldr	r2, [pc, #140]	; (800b0d0 <TIM_Base_SetConfig+0x13c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d108      	bne.n	800b058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b04c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a0a      	ldr	r2, [pc, #40]	; (80098bc <TIM_Base_SetConfig+0x114>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_Base_SetConfig+0xf8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a0c      	ldr	r2, [pc, #48]	; (80098cc <TIM_Base_SetConfig+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d103      	bne.n	80098a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	691a      	ldr	r2, [r3, #16]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	4313      	orrs	r3, r2
 800b064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a0a      	ldr	r2, [pc, #40]	; (800b0a8 <TIM_Base_SetConfig+0x114>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d003      	beq.n	800b08c <TIM_Base_SetConfig+0xf8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a0c      	ldr	r2, [pc, #48]	; (800b0b8 <TIM_Base_SetConfig+0x124>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d103      	bne.n	800b094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	691a      	ldr	r2, [r3, #16]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	615a      	str	r2, [r3, #20]
}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40010000 	.word	0x40010000
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	40000c00 	.word	0x40000c00
 80098cc:	40010400 	.word	0x40010400
 80098d0:	40014000 	.word	0x40014000
 80098d4:	40014400 	.word	0x40014400
 80098d8:	40014800 	.word	0x40014800
 80098dc:	40001800 	.word	0x40001800
 80098e0:	40001c00 	.word	0x40001c00
 80098e4:	40002000 	.word	0x40002000

080098e8 <TIM_OC1_SetConfig>:
=======
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	615a      	str	r2, [r3, #20]
}
 800b09a:	bf00      	nop
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	40010000 	.word	0x40010000
 800b0ac:	40000400 	.word	0x40000400
 800b0b0:	40000800 	.word	0x40000800
 800b0b4:	40000c00 	.word	0x40000c00
 800b0b8:	40010400 	.word	0x40010400
 800b0bc:	40014000 	.word	0x40014000
 800b0c0:	40014400 	.word	0x40014400
 800b0c4:	40014800 	.word	0x40014800
 800b0c8:	40001800 	.word	0x40001800
 800b0cc:	40001c00 	.word	0x40001c00
 800b0d0:	40002000 	.word	0x40002000

0800b0d4 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
=======
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	f023 0201 	bic.w	r2, r3, #1
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4b2b      	ldr	r3, [pc, #172]	; (80099c0 <TIM_OC1_SetConfig+0xd8>)
 8009914:	4013      	ands	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f023 0302 	bic.w	r3, r3, #2
 8009930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a21      	ldr	r2, [pc, #132]	; (80099c4 <TIM_OC1_SetConfig+0xdc>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d003      	beq.n	800994c <TIM_OC1_SetConfig+0x64>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <TIM_OC1_SetConfig+0xe0>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d10c      	bne.n	8009966 <TIM_OC1_SetConfig+0x7e>
=======
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f023 0201 	bic.w	r2, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <TIM_OC1_SetConfig+0xd8>)
 800b100:	4013      	ands	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f023 0302 	bic.w	r3, r3, #2
 800b11c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	4313      	orrs	r3, r2
 800b126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a21      	ldr	r2, [pc, #132]	; (800b1b0 <TIM_OC1_SetConfig+0xdc>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d003      	beq.n	800b138 <TIM_OC1_SetConfig+0x64>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a20      	ldr	r2, [pc, #128]	; (800b1b4 <TIM_OC1_SetConfig+0xe0>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d10c      	bne.n	800b152 <TIM_OC1_SetConfig+0x7e>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f023 0308 	bic.w	r3, r3, #8
 8009952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f023 0304 	bic.w	r3, r3, #4
 8009964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <TIM_OC1_SetConfig+0xdc>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d003      	beq.n	8009976 <TIM_OC1_SetConfig+0x8e>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <TIM_OC1_SetConfig+0xe0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d111      	bne.n	800999a <TIM_OC1_SetConfig+0xb2>
=======
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f023 0308 	bic.w	r3, r3, #8
 800b13e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	4313      	orrs	r3, r2
 800b148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f023 0304 	bic.w	r3, r3, #4
 800b150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a16      	ldr	r2, [pc, #88]	; (800b1b0 <TIM_OC1_SetConfig+0xdc>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d003      	beq.n	800b162 <TIM_OC1_SetConfig+0x8e>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a15      	ldr	r2, [pc, #84]	; (800b1b4 <TIM_OC1_SetConfig+0xe0>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d111      	bne.n	800b186 <TIM_OC1_SetConfig+0xb2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800997c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	4313      	orrs	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
=======
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	621a      	str	r2, [r3, #32]
}
 80099b4:	bf00      	nop
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	fffeff8f 	.word	0xfffeff8f
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40010400 	.word	0x40010400

080099cc <TIM_OC2_SetConfig>:
=======
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	621a      	str	r2, [r3, #32]
}
 800b1a0:	bf00      	nop
 800b1a2:	371c      	adds	r7, #28
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	fffeff8f 	.word	0xfffeff8f
 800b1b0:	40010000 	.word	0x40010000
 800b1b4:	40010400 	.word	0x40010400

0800b1b8 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
=======
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f023 0210 	bic.w	r2, r3, #16
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4b2e      	ldr	r3, [pc, #184]	; (8009ab0 <TIM_OC2_SetConfig+0xe4>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	021b      	lsls	r3, r3, #8
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f023 0320 	bic.w	r3, r3, #32
 8009a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a23      	ldr	r2, [pc, #140]	; (8009ab4 <TIM_OC2_SetConfig+0xe8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d003      	beq.n	8009a34 <TIM_OC2_SetConfig+0x68>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a22      	ldr	r2, [pc, #136]	; (8009ab8 <TIM_OC2_SetConfig+0xec>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d10d      	bne.n	8009a50 <TIM_OC2_SetConfig+0x84>
=======
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	f023 0210 	bic.w	r2, r3, #16
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	4b2e      	ldr	r3, [pc, #184]	; (800b29c <TIM_OC2_SetConfig+0xe4>)
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f023 0320 	bic.w	r3, r3, #32
 800b202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	011b      	lsls	r3, r3, #4
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a23      	ldr	r2, [pc, #140]	; (800b2a0 <TIM_OC2_SetConfig+0xe8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d003      	beq.n	800b220 <TIM_OC2_SetConfig+0x68>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a22      	ldr	r2, [pc, #136]	; (800b2a4 <TIM_OC2_SetConfig+0xec>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d10d      	bne.n	800b23c <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	011b      	lsls	r3, r3, #4
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a4e:	617b      	str	r3, [r7, #20]
=======
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	011b      	lsls	r3, r3, #4
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	4313      	orrs	r3, r2
 800b232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b23a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< Updated upstream
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a18      	ldr	r2, [pc, #96]	; (8009ab4 <TIM_OC2_SetConfig+0xe8>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d003      	beq.n	8009a60 <TIM_OC2_SetConfig+0x94>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a17      	ldr	r2, [pc, #92]	; (8009ab8 <TIM_OC2_SetConfig+0xec>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d113      	bne.n	8009a88 <TIM_OC2_SetConfig+0xbc>
=======
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a18      	ldr	r2, [pc, #96]	; (800b2a0 <TIM_OC2_SetConfig+0xe8>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d003      	beq.n	800b24c <TIM_OC2_SetConfig+0x94>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a17      	ldr	r2, [pc, #92]	; (800b2a4 <TIM_OC2_SetConfig+0xec>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d113      	bne.n	800b274 <TIM_OC2_SetConfig+0xbc>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]
=======
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b25a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	4313      	orrs	r3, r2
 800b266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	621a      	str	r2, [r3, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	371c      	adds	r7, #28
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	feff8fff 	.word	0xfeff8fff
 8009ab4:	40010000 	.word	0x40010000
 8009ab8:	40010400 	.word	0x40010400

08009abc <TIM_OC3_SetConfig>:
=======
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	621a      	str	r2, [r3, #32]
}
 800b28e:	bf00      	nop
 800b290:	371c      	adds	r7, #28
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	feff8fff 	.word	0xfeff8fff
 800b2a0:	40010000 	.word	0x40010000
 800b2a4:	40010400 	.word	0x40010400

0800b2a8 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
=======
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4b2d      	ldr	r3, [pc, #180]	; (8009b9c <TIM_OC3_SetConfig+0xe0>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a22      	ldr	r2, [pc, #136]	; (8009ba0 <TIM_OC3_SetConfig+0xe4>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d003      	beq.n	8009b22 <TIM_OC3_SetConfig+0x66>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a21      	ldr	r2, [pc, #132]	; (8009ba4 <TIM_OC3_SetConfig+0xe8>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d10d      	bne.n	8009b3e <TIM_OC3_SetConfig+0x82>
=======
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4b2d      	ldr	r3, [pc, #180]	; (800b388 <TIM_OC3_SetConfig+0xe0>)
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a22      	ldr	r2, [pc, #136]	; (800b38c <TIM_OC3_SetConfig+0xe4>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_OC3_SetConfig+0x66>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a21      	ldr	r2, [pc, #132]	; (800b390 <TIM_OC3_SetConfig+0xe8>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d10d      	bne.n	800b32a <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	021b      	lsls	r3, r3, #8
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a17      	ldr	r2, [pc, #92]	; (8009ba0 <TIM_OC3_SetConfig+0xe4>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d003      	beq.n	8009b4e <TIM_OC3_SetConfig+0x92>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <TIM_OC3_SetConfig+0xe8>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d113      	bne.n	8009b76 <TIM_OC3_SetConfig+0xba>
=======
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	021b      	lsls	r3, r3, #8
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	4313      	orrs	r3, r2
 800b320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a17      	ldr	r2, [pc, #92]	; (800b38c <TIM_OC3_SetConfig+0xe4>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d003      	beq.n	800b33a <TIM_OC3_SetConfig+0x92>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a16      	ldr	r2, [pc, #88]	; (800b390 <TIM_OC3_SetConfig+0xe8>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d113      	bne.n	800b362 <TIM_OC3_SetConfig+0xba>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	011b      	lsls	r3, r3, #4
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	011b      	lsls	r3, r3, #4
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	613b      	str	r3, [r7, #16]
=======
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	4313      	orrs	r3, r2
 800b354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	011b      	lsls	r3, r3, #4
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	4313      	orrs	r3, r2
 800b360:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	621a      	str	r2, [r3, #32]
}
 8009b90:	bf00      	nop
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	fffeff8f 	.word	0xfffeff8f
 8009ba0:	40010000 	.word	0x40010000
 8009ba4:	40010400 	.word	0x40010400

08009ba8 <TIM_OC4_SetConfig>:
=======
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	621a      	str	r2, [r3, #32]
}
 800b37c:	bf00      	nop
 800b37e:	371c      	adds	r7, #28
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr
 800b388:	fffeff8f 	.word	0xfffeff8f
 800b38c:	40010000 	.word	0x40010000
 800b390:	40010400 	.word	0x40010400

0800b394 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
=======
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4b1e      	ldr	r3, [pc, #120]	; (8009c4c <TIM_OC4_SetConfig+0xa4>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	021b      	lsls	r3, r3, #8
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	031b      	lsls	r3, r3, #12
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <TIM_OC4_SetConfig+0xa8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d003      	beq.n	8009c10 <TIM_OC4_SetConfig+0x68>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a12      	ldr	r2, [pc, #72]	; (8009c54 <TIM_OC4_SetConfig+0xac>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d109      	bne.n	8009c24 <TIM_OC4_SetConfig+0x7c>
=======
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	4b1e      	ldr	r3, [pc, #120]	; (800b438 <TIM_OC4_SetConfig+0xa4>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	021b      	lsls	r3, r3, #8
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	031b      	lsls	r3, r3, #12
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a13      	ldr	r2, [pc, #76]	; (800b43c <TIM_OC4_SetConfig+0xa8>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d003      	beq.n	800b3fc <TIM_OC4_SetConfig+0x68>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a12      	ldr	r2, [pc, #72]	; (800b440 <TIM_OC4_SetConfig+0xac>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d109      	bne.n	800b410 <TIM_OC4_SetConfig+0x7c>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	019b      	lsls	r3, r3, #6
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
=======
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	019b      	lsls	r3, r3, #6
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	621a      	str	r2, [r3, #32]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	feff8fff 	.word	0xfeff8fff
 8009c50:	40010000 	.word	0x40010000
 8009c54:	40010400 	.word	0x40010400

08009c58 <TIM_OC5_SetConfig>:
=======
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	697a      	ldr	r2, [r7, #20]
 800b414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	621a      	str	r2, [r3, #32]
}
 800b42a:	bf00      	nop
 800b42c:	371c      	adds	r7, #28
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	feff8fff 	.word	0xfeff8fff
 800b43c:	40010000 	.word	0x40010000
 800b440:	40010400 	.word	0x40010400

0800b444 <TIM_OC5_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
=======
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< Updated upstream
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <TIM_OC5_SetConfig+0x98>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a12      	ldr	r2, [pc, #72]	; (8009cf4 <TIM_OC5_SetConfig+0x9c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_OC5_SetConfig+0x5e>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a11      	ldr	r2, [pc, #68]	; (8009cf8 <TIM_OC5_SetConfig+0xa0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d109      	bne.n	8009cca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	621a      	str	r2, [r3, #32]
}
 8009ce4:	bf00      	nop
 8009ce6:	371c      	adds	r7, #28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	fffeff8f 	.word	0xfffeff8f
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40010400 	.word	0x40010400

08009cfc <TIM_OC6_SetConfig>:
=======
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4b1b      	ldr	r3, [pc, #108]	; (800b4dc <TIM_OC5_SetConfig+0x98>)
 800b470:	4013      	ands	r3, r2
 800b472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	041b      	lsls	r3, r3, #16
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	4313      	orrs	r3, r2
 800b490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a12      	ldr	r2, [pc, #72]	; (800b4e0 <TIM_OC5_SetConfig+0x9c>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d003      	beq.n	800b4a2 <TIM_OC5_SetConfig+0x5e>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a11      	ldr	r2, [pc, #68]	; (800b4e4 <TIM_OC5_SetConfig+0xa0>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d109      	bne.n	800b4b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685a      	ldr	r2, [r3, #4]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	621a      	str	r2, [r3, #32]
}
 800b4d0:	bf00      	nop
 800b4d2:	371c      	adds	r7, #28
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	fffeff8f 	.word	0xfffeff8f
 800b4e0:	40010000 	.word	0x40010000
 800b4e4:	40010400 	.word	0x40010400

0800b4e8 <TIM_OC6_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
=======
 800b4e8:	b480      	push	{r7}
 800b4ea:	b087      	sub	sp, #28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< Updated upstream
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <TIM_OC6_SetConfig+0x9c>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <TIM_OC6_SetConfig+0xa0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d003      	beq.n	8009d5c <TIM_OC6_SetConfig+0x60>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <TIM_OC6_SetConfig+0xa4>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d109      	bne.n	8009d70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	029b      	lsls	r3, r3, #10
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
=======
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <TIM_OC6_SetConfig+0x9c>)
 800b514:	4013      	ands	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	4313      	orrs	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b52a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	051b      	lsls	r3, r3, #20
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	4313      	orrs	r3, r2
 800b536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a13      	ldr	r2, [pc, #76]	; (800b588 <TIM_OC6_SetConfig+0xa0>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d003      	beq.n	800b548 <TIM_OC6_SetConfig+0x60>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a12      	ldr	r2, [pc, #72]	; (800b58c <TIM_OC6_SetConfig+0xa4>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d109      	bne.n	800b55c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b54e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	029b      	lsls	r3, r3, #10
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	4313      	orrs	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	621a      	str	r2, [r3, #32]
}
 8009d8a:	bf00      	nop
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	feff8fff 	.word	0xfeff8fff
 8009d9c:	40010000 	.word	0x40010000
 8009da0:	40010400 	.word	0x40010400

08009da4 <TIM_SlaveTimer_SetConfig>:
=======
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	621a      	str	r2, [r3, #32]
}
 800b576:	bf00      	nop
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	feff8fff 	.word	0xfeff8fff
 800b588:	40010000 	.word	0x40010000
 800b58c:	40010400 	.word	0x40010400

0800b590 <TIM_SlaveTimer_SetConfig>:
>>>>>>> Stashed changes
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
<<<<<<< Updated upstream
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
=======
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4b39      	ldr	r3, [pc, #228]	; (8009eb0 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	2b30      	cmp	r3, #48	; 0x30
 8009de8:	d05c      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
 8009dea:	2b30      	cmp	r3, #48	; 0x30
 8009dec:	d806      	bhi.n	8009dfc <TIM_SlaveTimer_SetConfig+0x58>
 8009dee:	2b10      	cmp	r3, #16
 8009df0:	d058      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d056      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d054      	beq.n	8009ea4 <TIM_SlaveTimer_SetConfig+0x100>
=======
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	4b39      	ldr	r3, [pc, #228]	; (800b69c <TIM_SlaveTimer_SetConfig+0x10c>)
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2b30      	cmp	r3, #48	; 0x30
 800b5d4:	d05c      	beq.n	800b690 <TIM_SlaveTimer_SetConfig+0x100>
 800b5d6:	2b30      	cmp	r3, #48	; 0x30
 800b5d8:	d806      	bhi.n	800b5e8 <TIM_SlaveTimer_SetConfig+0x58>
 800b5da:	2b10      	cmp	r3, #16
 800b5dc:	d058      	beq.n	800b690 <TIM_SlaveTimer_SetConfig+0x100>
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	d056      	beq.n	800b690 <TIM_SlaveTimer_SetConfig+0x100>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d054      	beq.n	800b690 <TIM_SlaveTimer_SetConfig+0x100>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
<<<<<<< Updated upstream
 8009dfa:	e054      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009dfc:	2b50      	cmp	r3, #80	; 0x50
 8009dfe:	d03d      	beq.n	8009e7c <TIM_SlaveTimer_SetConfig+0xd8>
 8009e00:	2b50      	cmp	r3, #80	; 0x50
 8009e02:	d802      	bhi.n	8009e0a <TIM_SlaveTimer_SetConfig+0x66>
 8009e04:	2b40      	cmp	r3, #64	; 0x40
 8009e06:	d010      	beq.n	8009e2a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8009e08:	e04d      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009e0a:	2b60      	cmp	r3, #96	; 0x60
 8009e0c:	d040      	beq.n	8009e90 <TIM_SlaveTimer_SetConfig+0xec>
 8009e0e:	2b70      	cmp	r3, #112	; 0x70
 8009e10:	d000      	beq.n	8009e14 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009e12:	e048      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68d9      	ldr	r1, [r3, #12]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f000 f8c0 	bl	8009fa8 <TIM_ETR_SetConfig>
      break;
 8009e28:	e03d      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	d101      	bne.n	8009e36 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e038      	b.n	8009ea8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6a1a      	ldr	r2, [r3, #32]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0201 	bic.w	r2, r2, #1
 8009e4c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	621a      	str	r2, [r3, #32]
      break;
 8009e7a:	e014      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	6899      	ldr	r1, [r3, #8]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	f000 f813 	bl	8009eb4 <TIM_TI1_ConfigInputStage>
      break;
 8009e8e:	e00a      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	6899      	ldr	r1, [r3, #8]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	f000 f838 	bl	8009f12 <TIM_TI2_ConfigInputStage>
      break;
 8009ea2:	e000      	b.n	8009ea6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8009ea4:	bf00      	nop
  }
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	fffefff8 	.word	0xfffefff8

08009eb4 <TIM_TI1_ConfigInputStage>:
=======
 800b5e6:	e054      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b5e8:	2b50      	cmp	r3, #80	; 0x50
 800b5ea:	d03d      	beq.n	800b668 <TIM_SlaveTimer_SetConfig+0xd8>
 800b5ec:	2b50      	cmp	r3, #80	; 0x50
 800b5ee:	d802      	bhi.n	800b5f6 <TIM_SlaveTimer_SetConfig+0x66>
 800b5f0:	2b40      	cmp	r3, #64	; 0x40
 800b5f2:	d010      	beq.n	800b616 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800b5f4:	e04d      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b5f6:	2b60      	cmp	r3, #96	; 0x60
 800b5f8:	d040      	beq.n	800b67c <TIM_SlaveTimer_SetConfig+0xec>
 800b5fa:	2b70      	cmp	r3, #112	; 0x70
 800b5fc:	d000      	beq.n	800b600 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800b5fe:	e048      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6818      	ldr	r0, [r3, #0]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	68d9      	ldr	r1, [r3, #12]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689a      	ldr	r2, [r3, #8]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	f000 f8c0 	bl	800b794 <TIM_ETR_SetConfig>
      break;
 800b614:	e03d      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b05      	cmp	r3, #5
 800b61c:	d101      	bne.n	800b622 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e038      	b.n	800b694 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6a1a      	ldr	r2, [r3, #32]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b648:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	4313      	orrs	r3, r2
 800b654:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	621a      	str	r2, [r3, #32]
      break;
 800b666:	e014      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	6899      	ldr	r1, [r3, #8]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	461a      	mov	r2, r3
 800b676:	f000 f813 	bl	800b6a0 <TIM_TI1_ConfigInputStage>
      break;
 800b67a:	e00a      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6818      	ldr	r0, [r3, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	6899      	ldr	r1, [r3, #8]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	461a      	mov	r2, r3
 800b68a:	f000 f838 	bl	800b6fe <TIM_TI2_ConfigInputStage>
      break;
 800b68e:	e000      	b.n	800b692 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800b690:	bf00      	nop
  }
  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	fffefff8 	.word	0xfffefff8

0800b6a0 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
=======
 800b6a0:	b480      	push	{r7}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f023 0201 	bic.w	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f023 030a 	bic.w	r3, r3, #10
 8009ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	621a      	str	r2, [r3, #32]
}
 8009f06:	bf00      	nop
 8009f08:	371c      	adds	r7, #28
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <TIM_TI2_ConfigInputStage>:
=======
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6a1b      	ldr	r3, [r3, #32]
 800b6b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	f023 0201 	bic.w	r2, r3, #1
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f023 030a 	bic.w	r3, r3, #10
 800b6dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	621a      	str	r2, [r3, #32]
}
 800b6f2:	bf00      	nop
 800b6f4:	371c      	adds	r7, #28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8009f12:	b480      	push	{r7}
 8009f14:	b087      	sub	sp, #28
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
=======
 800b6fe:	b480      	push	{r7}
 800b700:	b087      	sub	sp, #28
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	f023 0210 	bic.w	r2, r3, #16
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	031b      	lsls	r3, r3, #12
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	621a      	str	r2, [r3, #32]
}
 8009f66:	bf00      	nop
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <TIM_ITRx_SetConfig>:
=======
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	f023 0210 	bic.w	r2, r3, #16
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6a1b      	ldr	r3, [r3, #32]
 800b720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	031b      	lsls	r3, r3, #12
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	4313      	orrs	r3, r2
 800b732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b73a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	621a      	str	r2, [r3, #32]
}
 800b752:	bf00      	nop
 800b754:	371c      	adds	r7, #28
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
=======
 800b75e:	b480      	push	{r7}
 800b760:	b085      	sub	sp, #20
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	f043 0307 	orr.w	r3, r3, #7
 8009f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	609a      	str	r2, [r3, #8]
}
 8009f9c:	bf00      	nop
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <TIM_ETR_SetConfig>:
=======
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f043 0307 	orr.w	r3, r3, #7
 800b780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	609a      	str	r2, [r3, #8]
}
 800b788:	bf00      	nop
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	021a      	lsls	r2, r3, #8
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	609a      	str	r2, [r3, #8]
}
 8009fdc:	bf00      	nop
 8009fde:	371c      	adds	r7, #28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800b794:	b480      	push	{r7}
 800b796:	b087      	sub	sp, #28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	021a      	lsls	r2, r3, #8
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	431a      	orrs	r2, r3
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	609a      	str	r2, [r3, #8]
}
 800b7c8:	bf00      	nop
 800b7ca:	371c      	adds	r7, #28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
=======
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e06d      	b.n	800a0dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a30      	ldr	r2, [pc, #192]	; (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d004      	beq.n	800a034 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a2f      	ldr	r2, [pc, #188]	; (800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d108      	bne.n	800a046 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d101      	bne.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	e06d      	b.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a30      	ldr	r2, [pc, #192]	; (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d004      	beq.n	800b820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a2f      	ldr	r2, [pc, #188]	; (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d108      	bne.n	800b832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a03a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]
=======
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a20      	ldr	r2, [pc, #128]	; (800a0e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d01d      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a1d      	ldr	r2, [pc, #116]	; (800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a1c      	ldr	r2, [pc, #112]	; (800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a1a      	ldr	r2, [pc, #104]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a16      	ldr	r2, [pc, #88]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a15      	ldr	r2, [pc, #84]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d10c      	bne.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	609a      	str	r2, [r3, #8]
=======
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4313      	orrs	r3, r2
 800b842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a20      	ldr	r2, [pc, #128]	; (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d022      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b85e:	d01d      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1d      	ldr	r2, [pc, #116]	; (800b8dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d018      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1c      	ldr	r2, [pc, #112]	; (800b8e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d013      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1a      	ldr	r2, [pc, #104]	; (800b8e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00e      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a15      	ldr	r2, [pc, #84]	; (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d009      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a16      	ldr	r2, [pc, #88]	; (800b8e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d004      	beq.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a15      	ldr	r2, [pc, #84]	; (800b8ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d10c      	bne.n	800b8b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	40010000 	.word	0x40010000
 800a0ec:	40010400 	.word	0x40010400
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40014000 	.word	0x40014000
 800a100:	40001800 	.word	0x40001800

0800a104 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	40010000 	.word	0x40010000
 800b8d8:	40010400 	.word	0x40010400
 800b8dc:	40000400 	.word	0x40000400
 800b8e0:	40000800 	.word	0x40000800
 800b8e4:	40000c00 	.word	0x40000c00
 800b8e8:	40014000 	.word	0x40014000
 800b8ec:	40001800 	.word	0x40001800

0800b8f0 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> Stashed changes
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< Updated upstream
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
=======
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e065      	b.n	800a1ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b904:	2b01      	cmp	r3, #1
 800b906:	d101      	bne.n	800b90c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b908:	2302      	movs	r3, #2
 800b90a:	e065      	b.n	800b9d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< Updated upstream
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a186:	4313      	orrs	r3, r2
 800a188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	041b      	lsls	r3, r3, #16
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a16      	ldr	r2, [pc, #88]	; (800a1f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d004      	beq.n	800a1ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a14      	ldr	r2, [pc, #80]	; (800a1fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d115      	bne.n	800a1da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
=======
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	4313      	orrs	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	4313      	orrs	r3, r2
 800b958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	4313      	orrs	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b972:	4313      	orrs	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	041b      	lsls	r3, r3, #16
 800b982:	4313      	orrs	r3, r2
 800b984:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a16      	ldr	r2, [pc, #88]	; (800b9e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d004      	beq.n	800b99a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a14      	ldr	r2, [pc, #80]	; (800b9e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d115      	bne.n	800b9c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
>>>>>>> Stashed changes
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< Updated upstream
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	051b      	lsls	r3, r3, #20
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]
=======
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	051b      	lsls	r3, r3, #20
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	69db      	ldr	r3, [r3, #28]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< Updated upstream
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40010400 	.word	0x40010400

0800a200 <HAL_TIMEx_CommutCallback>:
=======
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	40010000 	.word	0x40010000
 800b9e8:	40010400 	.word	0x40010400

0800b9ec <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
=======
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_TIMEx_BreakCallback>:
=======
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
=======
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_TIMEx_Break2Callback>:
=======
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
=======
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <HAL_UART_Init>:
=======
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e040      	b.n	800a2d0 <HAL_UART_Init+0x94>
=======
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e040      	b.n	800babc <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
=======
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7fa f800 	bl	8004264 <HAL_UART_MspInit>
=======
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7fa f816 	bl	8005a7c <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2224      	movs	r2, #36	; 0x24
 800a268:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0201 	bic.w	r2, r2, #1
 800a278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 faa6 	bl	800a7cc <UART_SetConfig>
 800a280:	4603      	mov	r3, r0
 800a282:	2b01      	cmp	r3, #1
 800a284:	d101      	bne.n	800a28a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e022      	b.n	800a2d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fd44 	bl	800ad20 <UART_AdvFeatureConfig>
=======
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2224      	movs	r2, #36	; 0x24
 800ba54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f022 0201 	bic.w	r2, r2, #1
 800ba64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fa14 	bl	800be94 <UART_SetConfig>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e022      	b.n	800babc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fcb2 	bl	800c3e8 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0201 	orr.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fdcb 	bl	800ae64 <UART_CheckIdleState>
 800a2ce:	4603      	mov	r3, r0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08a      	sub	sp, #40	; 0x28
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	d17f      	bne.n	800a3f0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <HAL_UART_Transmit+0x24>
 800a2f6:	88fb      	ldrh	r3, [r7, #6]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e078      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_UART_Transmit+0x36>
 800a30a:	2302      	movs	r3, #2
 800a30c:	e071      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2221      	movs	r2, #33	; 0x21
 800a320:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a322:	f7fa fa2d 	bl	8004780 <HAL_GetTick>
 800a326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	88fa      	ldrh	r2, [r7, #6]
 800a32c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	88fa      	ldrh	r2, [r7, #6]
 800a334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a340:	d108      	bne.n	800a354 <HAL_UART_Transmit+0x7c>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	e003      	b.n	800a35c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a358:	2300      	movs	r3, #0
 800a35a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a364:	e02c      	b.n	800a3c0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2200      	movs	r2, #0
 800a36e:	2180      	movs	r1, #128	; 0x80
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 fda6 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d001      	beq.n	800a380 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e038      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a394:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	3302      	adds	r3, #2
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	e007      	b.n	800a3ae <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1cc      	bne.n	800a366 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	2140      	movs	r1, #64	; 0x40
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 fd73 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e005      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	e000      	b.n	800a3f2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a3f0:	2302      	movs	r3, #2
  }
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <HAL_UART_Receive_IT>:
=======
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685a      	ldr	r2, [r3, #4]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800baa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f042 0201 	orr.w	r2, r2, #1
 800bab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fd39 	bl	800c52c <UART_CheckIdleState>
 800baba:	4603      	mov	r3, r0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	4613      	mov	r3, r2
 800a408:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a40e:	2b20      	cmp	r3, #32
 800a410:	f040 808a 	bne.w	800a528 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <HAL_UART_Receive_IT+0x24>
 800a41a:	88fb      	ldrh	r3, [r7, #6]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e082      	b.n	800a52a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_UART_Receive_IT+0x36>
 800a42e:	2302      	movs	r3, #2
 800a430:	e07b      	b.n	800a52a <HAL_UART_Receive_IT+0x12e>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	88fa      	ldrh	r2, [r7, #6]
 800a444:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45e:	d10e      	bne.n	800a47e <HAL_UART_Receive_IT+0x82>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d105      	bne.n	800a474 <HAL_UART_Receive_IT+0x78>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a46e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a472:	e02d      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	22ff      	movs	r2, #255	; 0xff
 800a478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a47c:	e028      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10d      	bne.n	800a4a2 <HAL_UART_Receive_IT+0xa6>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d104      	bne.n	800a498 <HAL_UART_Receive_IT+0x9c>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	22ff      	movs	r2, #255	; 0xff
 800a492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a496:	e01b      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	227f      	movs	r2, #127	; 0x7f
 800a49c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4a0:	e016      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4aa:	d10d      	bne.n	800a4c8 <HAL_UART_Receive_IT+0xcc>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <HAL_UART_Receive_IT+0xc2>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	227f      	movs	r2, #127	; 0x7f
 800a4b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4bc:	e008      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	223f      	movs	r2, #63	; 0x3f
 800a4c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4c6:	e003      	b.n	800a4d0 <HAL_UART_Receive_IT+0xd4>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2222      	movs	r2, #34	; 0x22
 800a4da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f042 0201 	orr.w	r2, r2, #1
 800a4ea:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f4:	d107      	bne.n	800a506 <HAL_UART_Receive_IT+0x10a>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d103      	bne.n	800a506 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <HAL_UART_Receive_IT+0x13c>)
 800a502:	661a      	str	r2, [r3, #96]	; 0x60
 800a504:	e002      	b.n	800a50c <HAL_UART_Receive_IT+0x110>
=======
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	4613      	mov	r3, r2
 800bad0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	f040 808a 	bne.w	800bbf0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <HAL_UART_Receive_IT+0x24>
 800bae2:	88fb      	ldrh	r3, [r7, #6]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	e082      	b.n	800bbf2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d101      	bne.n	800bafa <HAL_UART_Receive_IT+0x36>
 800baf6:	2302      	movs	r3, #2
 800baf8:	e07b      	b.n	800bbf2 <HAL_UART_Receive_IT+0x12e>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	88fa      	ldrh	r2, [r7, #6]
 800bb0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	88fa      	ldrh	r2, [r7, #6]
 800bb14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb26:	d10e      	bne.n	800bb46 <HAL_UART_Receive_IT+0x82>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <HAL_UART_Receive_IT+0x78>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bb36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bb3a:	e02d      	b.n	800bb98 <HAL_UART_Receive_IT+0xd4>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	22ff      	movs	r2, #255	; 0xff
 800bb40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bb44:	e028      	b.n	800bb98 <HAL_UART_Receive_IT+0xd4>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10d      	bne.n	800bb6a <HAL_UART_Receive_IT+0xa6>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d104      	bne.n	800bb60 <HAL_UART_Receive_IT+0x9c>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	22ff      	movs	r2, #255	; 0xff
 800bb5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bb5e:	e01b      	b.n	800bb98 <HAL_UART_Receive_IT+0xd4>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	227f      	movs	r2, #127	; 0x7f
 800bb64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bb68:	e016      	b.n	800bb98 <HAL_UART_Receive_IT+0xd4>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb72:	d10d      	bne.n	800bb90 <HAL_UART_Receive_IT+0xcc>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <HAL_UART_Receive_IT+0xc2>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	227f      	movs	r2, #127	; 0x7f
 800bb80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bb84:	e008      	b.n	800bb98 <HAL_UART_Receive_IT+0xd4>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	223f      	movs	r2, #63	; 0x3f
 800bb8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bb8e:	e003      	b.n	800bb98 <HAL_UART_Receive_IT+0xd4>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2222      	movs	r2, #34	; 0x22
 800bba2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f042 0201 	orr.w	r2, r2, #1
 800bbb2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbbc:	d107      	bne.n	800bbce <HAL_UART_Receive_IT+0x10a>
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d103      	bne.n	800bbce <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4a0d      	ldr	r2, [pc, #52]	; (800bc00 <HAL_UART_Receive_IT+0x13c>)
 800bbca:	661a      	str	r2, [r3, #96]	; 0x60
 800bbcc:	e002      	b.n	800bbd4 <HAL_UART_Receive_IT+0x110>
>>>>>>> Stashed changes
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
<<<<<<< Updated upstream
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4a0c      	ldr	r2, [pc, #48]	; (800a53c <HAL_UART_Receive_IT+0x140>)
 800a50a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a522:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	e000      	b.n	800a52a <HAL_UART_Receive_IT+0x12e>
=======
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4a0c      	ldr	r2, [pc, #48]	; (800bc04 <HAL_UART_Receive_IT+0x140>)
 800bbd2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800bbea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	e000      	b.n	800bbf2 <HAL_UART_Receive_IT+0x12e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800a528:	2302      	movs	r3, #2
  }
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	0800b0fd 	.word	0x0800b0fd
 800a53c:	0800b057 	.word	0x0800b057

0800a540 <HAL_UART_IRQHandler>:
=======
 800bbf0:	2302      	movs	r3, #2
  }
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	0800c7c5 	.word	0x0800c7c5
 800bc04:	0800c71f 	.word	0x0800c71f

0800bc08 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	617b      	str	r3, [r7, #20]
=======
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	69db      	ldr	r3, [r3, #28]
 800bc16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< Updated upstream
 800a560:	69fa      	ldr	r2, [r7, #28]
 800a562:	f640 030f 	movw	r3, #2063	; 0x80f
 800a566:	4013      	ands	r3, r2
 800a568:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d113      	bne.n	800a598 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 8100 	beq.w	800a78e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
      }
      return;
 800a596:	e0fa      	b.n	800a78e <HAL_UART_IRQHandler+0x24e>
=======
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bc2e:	4013      	ands	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d113      	bne.n	800bc60 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f003 0320 	and.w	r3, r3, #32
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00e      	beq.n	800bc60 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d009      	beq.n	800bc60 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 8100 	beq.w	800be56 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	4798      	blx	r3
      }
      return;
 800bc5e:	e0fa      	b.n	800be56 <HAL_UART_IRQHandler+0x24e>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< Updated upstream
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f000 80d5 	beq.w	800a74a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d105      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80ca 	beq.w	800a74a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00e      	beq.n	800a5de <HAL_UART_IRQHandler+0x9e>
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d6:	f043 0201 	orr.w	r2, r3, #1
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80d5 	beq.w	800be12 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d105      	bne.n	800bc7e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 80ca 	beq.w	800be12 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00e      	beq.n	800bca6 <HAL_UART_IRQHandler+0x9e>
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d009      	beq.n	800bca6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2201      	movs	r2, #1
 800bc98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc9e:	f043 0201 	orr.w	r2, r3, #1
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00e      	beq.n	800a606 <HAL_UART_IRQHandler+0xc6>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d009      	beq.n	800a606 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5fe:	f043 0204 	orr.w	r2, r3, #4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	f003 0302 	and.w	r3, r3, #2
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00e      	beq.n	800bcce <HAL_UART_IRQHandler+0xc6>
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d009      	beq.n	800bcce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc6:	f043 0204 	orr.w	r2, r3, #4
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< Updated upstream
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00e      	beq.n	800a62e <HAL_UART_IRQHandler+0xee>
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2204      	movs	r2, #4
 800a620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a626:	f043 0202 	orr.w	r2, r3, #2
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00e      	beq.n	800bcf6 <HAL_UART_IRQHandler+0xee>
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d009      	beq.n	800bcf6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2204      	movs	r2, #4
 800bce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcee:	f043 0202 	orr.w	r2, r3, #2
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< Updated upstream
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b00      	cmp	r3, #0
 800a636:	d013      	beq.n	800a660 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d009      	beq.n	800a660 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2208      	movs	r2, #8
 800a652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a658:	f043 0208 	orr.w	r2, r3, #8
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	f003 0308 	and.w	r3, r3, #8
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d013      	beq.n	800bd28 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d104      	bne.n	800bd14 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d009      	beq.n	800bd28 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2208      	movs	r2, #8
 800bd1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd20:	f043 0208 	orr.w	r2, r3, #8
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< Updated upstream
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00f      	beq.n	800a68a <HAL_UART_IRQHandler+0x14a>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a67c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a682:	f043 0220 	orr.w	r2, r3, #32
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	67da      	str	r2, [r3, #124]	; 0x7c
=======
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00f      	beq.n	800bd52 <HAL_UART_IRQHandler+0x14a>
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00a      	beq.n	800bd52 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd4a:	f043 0220 	orr.w	r2, r3, #32
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	67da      	str	r2, [r3, #124]	; 0x7c
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d07f      	beq.n	800a792 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	f003 0320 	and.w	r3, r3, #32
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d007      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	4798      	blx	r3
=======
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d07f      	beq.n	800be5a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	f003 0320 	and.w	r3, r3, #32
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00c      	beq.n	800bd7e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d007      	beq.n	800bd7e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	4798      	blx	r3
>>>>>>> Stashed changes
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< Updated upstream
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ba:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d004      	beq.n	800a6d4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d031      	beq.n	800a738 <HAL_UART_IRQHandler+0x1f8>
=======
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd82:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d004      	beq.n	800bd9c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d031      	beq.n	800be00 <HAL_UART_IRQHandler+0x1f8>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc6f 	bl	800afb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	d123      	bne.n	800a730 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6f6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d013      	beq.n	800a728 <HAL_UART_IRQHandler+0x1e8>
=======
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fc6f 	bl	800c680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b40      	cmp	r3, #64	; 0x40
 800bdae:	d123      	bne.n	800bdf8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdbe:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d013      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x1e8>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a704:	4a26      	ldr	r2, [pc, #152]	; (800a7a0 <HAL_UART_IRQHandler+0x260>)
 800a706:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fa fefb 	bl	8005508 <HAL_DMA_Abort_IT>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d016      	beq.n	800a746 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a722:	4610      	mov	r0, r2
 800a724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a726:	e00e      	b.n	800a746 <HAL_UART_IRQHandler+0x206>
=======
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdcc:	4a26      	ldr	r2, [pc, #152]	; (800be68 <HAL_UART_IRQHandler+0x260>)
 800bdce:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fa ffab 	bl	8006d30 <HAL_DMA_Abort_IT>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d016      	beq.n	800be0e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bdea:	4610      	mov	r0, r2
 800bdec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdee:	e00e      	b.n	800be0e <HAL_UART_IRQHandler+0x206>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f845 	bl	800a7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72e:	e00a      	b.n	800a746 <HAL_UART_IRQHandler+0x206>
=======
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 f845 	bl	800be80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf6:	e00a      	b.n	800be0e <HAL_UART_IRQHandler+0x206>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f841 	bl	800a7b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a736:	e006      	b.n	800a746 <HAL_UART_IRQHandler+0x206>
=======
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f841 	bl	800be80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfe:	e006      	b.n	800be0e <HAL_UART_IRQHandler+0x206>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f83d 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a744:	e025      	b.n	800a792 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a746:	bf00      	nop
    return;
 800a748:	e023      	b.n	800a792 <HAL_UART_IRQHandler+0x252>
=======
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f83d 	bl	800be80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800be0c:	e025      	b.n	800be5a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0e:	bf00      	nop
    return;
 800be10:	e023      	b.n	800be5a <HAL_UART_IRQHandler+0x252>
>>>>>>> Stashed changes
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< Updated upstream
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00d      	beq.n	800a770 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d008      	beq.n	800a770 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a762:	2b00      	cmp	r3, #0
 800a764:	d017      	beq.n	800a796 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	4798      	blx	r3
    }
    return;
 800a76e:	e012      	b.n	800a796 <HAL_UART_IRQHandler+0x256>
=======
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00d      	beq.n	800be38 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be22:	2b00      	cmp	r3, #0
 800be24:	d008      	beq.n	800be38 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d017      	beq.n	800be5e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
    }
    return;
 800be36:	e012      	b.n	800be5e <HAL_UART_IRQHandler+0x256>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< Updated upstream
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00e      	beq.n	800a798 <HAL_UART_IRQHandler+0x258>
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fc4d 	bl	800b024 <UART_EndTransmit_IT>
    return;
 800a78a:	bf00      	nop
 800a78c:	e004      	b.n	800a798 <HAL_UART_IRQHandler+0x258>
      return;
 800a78e:	bf00      	nop
 800a790:	e002      	b.n	800a798 <HAL_UART_IRQHandler+0x258>
    return;
 800a792:	bf00      	nop
 800a794:	e000      	b.n	800a798 <HAL_UART_IRQHandler+0x258>
    return;
 800a796:	bf00      	nop
  }

}
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800aff9 	.word	0x0800aff9

0800a7a4 <HAL_UART_TxCpltCallback>:
=======
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00e      	beq.n	800be60 <HAL_UART_IRQHandler+0x258>
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d009      	beq.n	800be60 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fc4d 	bl	800c6ec <UART_EndTransmit_IT>
    return;
 800be52:	bf00      	nop
 800be54:	e004      	b.n	800be60 <HAL_UART_IRQHandler+0x258>
      return;
 800be56:	bf00      	nop
 800be58:	e002      	b.n	800be60 <HAL_UART_IRQHandler+0x258>
    return;
 800be5a:	bf00      	nop
 800be5c:	e000      	b.n	800be60 <HAL_UART_IRQHandler+0x258>
    return;
 800be5e:	bf00      	nop
  }

}
 800be60:	3720      	adds	r7, #32
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	0800c6c1 	.word	0x0800c6c1

0800be6c <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
=======
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UART_ErrorCallback>:
=======
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
=======
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <UART_SetConfig>:
=======
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
=======
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
<<<<<<< Updated upstream
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75fb      	strb	r3, [r7, #23]
=======
 800be9c:	2300      	movs	r3, #0
 800be9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4bb1      	ldr	r3, [pc, #708]	; (800aac0 <UART_SetConfig+0x2f4>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	6939      	ldr	r1, [r7, #16]
 800a804:	430b      	orrs	r3, r1
 800a806:	6013      	str	r3, [r2, #0]
=======
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	431a      	orrs	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	431a      	orrs	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	4313      	orrs	r3, r2
 800beba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	4bb1      	ldr	r3, [pc, #708]	; (800c188 <UART_SetConfig+0x2f4>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	6939      	ldr	r1, [r7, #16]
 800becc:	430b      	orrs	r3, r1
 800bece:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	605a      	str	r2, [r3, #4]
=======
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68da      	ldr	r2, [r3, #12]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	430a      	orrs	r2, r1
 800a840:	609a      	str	r2, [r3, #8]
=======
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a1b      	ldr	r3, [r3, #32]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a9f      	ldr	r2, [pc, #636]	; (800aac4 <UART_SetConfig+0x2f8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d121      	bne.n	800a890 <UART_SetConfig+0xc4>
 800a84c:	4b9e      	ldr	r3, [pc, #632]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a852:	f003 0303 	and.w	r3, r3, #3
 800a856:	2b03      	cmp	r3, #3
 800a858:	d816      	bhi.n	800a888 <UART_SetConfig+0xbc>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x94>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a871 	.word	0x0800a871
 800a864:	0800a87d 	.word	0x0800a87d
 800a868:	0800a877 	.word	0x0800a877
 800a86c:	0800a883 	.word	0x0800a883
 800a870:	2301      	movs	r3, #1
 800a872:	77fb      	strb	r3, [r7, #31]
 800a874:	e151      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a876:	2302      	movs	r3, #2
 800a878:	77fb      	strb	r3, [r7, #31]
 800a87a:	e14e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a87c:	2304      	movs	r3, #4
 800a87e:	77fb      	strb	r3, [r7, #31]
 800a880:	e14b      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a882:	2308      	movs	r3, #8
 800a884:	77fb      	strb	r3, [r7, #31]
 800a886:	e148      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a888:	2310      	movs	r3, #16
 800a88a:	77fb      	strb	r3, [r7, #31]
 800a88c:	bf00      	nop
 800a88e:	e144      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a8d      	ldr	r2, [pc, #564]	; (800aacc <UART_SetConfig+0x300>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d134      	bne.n	800a904 <UART_SetConfig+0x138>
 800a89a:	4b8b      	ldr	r3, [pc, #556]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a0:	f003 030c 	and.w	r3, r3, #12
 800a8a4:	2b0c      	cmp	r3, #12
 800a8a6:	d829      	bhi.n	800a8fc <UART_SetConfig+0x130>
 800a8a8:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <UART_SetConfig+0xe4>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a8e5 	.word	0x0800a8e5
 800a8b4:	0800a8fd 	.word	0x0800a8fd
 800a8b8:	0800a8fd 	.word	0x0800a8fd
 800a8bc:	0800a8fd 	.word	0x0800a8fd
 800a8c0:	0800a8f1 	.word	0x0800a8f1
 800a8c4:	0800a8fd 	.word	0x0800a8fd
 800a8c8:	0800a8fd 	.word	0x0800a8fd
 800a8cc:	0800a8fd 	.word	0x0800a8fd
 800a8d0:	0800a8eb 	.word	0x0800a8eb
 800a8d4:	0800a8fd 	.word	0x0800a8fd
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a8fd 	.word	0x0800a8fd
 800a8e0:	0800a8f7 	.word	0x0800a8f7
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e117      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	77fb      	strb	r3, [r7, #31]
 800a8ee:	e114      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	77fb      	strb	r3, [r7, #31]
 800a8f4:	e111      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	77fb      	strb	r3, [r7, #31]
 800a8fa:	e10e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	bf00      	nop
 800a902:	e10a      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a71      	ldr	r2, [pc, #452]	; (800aad0 <UART_SetConfig+0x304>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d120      	bne.n	800a950 <UART_SetConfig+0x184>
 800a90e:	4b6e      	ldr	r3, [pc, #440]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a918:	2b10      	cmp	r3, #16
 800a91a:	d00f      	beq.n	800a93c <UART_SetConfig+0x170>
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d802      	bhi.n	800a926 <UART_SetConfig+0x15a>
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <UART_SetConfig+0x164>
 800a924:	e010      	b.n	800a948 <UART_SetConfig+0x17c>
 800a926:	2b20      	cmp	r3, #32
 800a928:	d005      	beq.n	800a936 <UART_SetConfig+0x16a>
 800a92a:	2b30      	cmp	r3, #48	; 0x30
 800a92c:	d009      	beq.n	800a942 <UART_SetConfig+0x176>
 800a92e:	e00b      	b.n	800a948 <UART_SetConfig+0x17c>
 800a930:	2300      	movs	r3, #0
 800a932:	77fb      	strb	r3, [r7, #31]
 800a934:	e0f1      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a936:	2302      	movs	r3, #2
 800a938:	77fb      	strb	r3, [r7, #31]
 800a93a:	e0ee      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a93c:	2304      	movs	r3, #4
 800a93e:	77fb      	strb	r3, [r7, #31]
 800a940:	e0eb      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a942:	2308      	movs	r3, #8
 800a944:	77fb      	strb	r3, [r7, #31]
 800a946:	e0e8      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a948:	2310      	movs	r3, #16
 800a94a:	77fb      	strb	r3, [r7, #31]
 800a94c:	bf00      	nop
 800a94e:	e0e4      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a5f      	ldr	r2, [pc, #380]	; (800aad4 <UART_SetConfig+0x308>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d120      	bne.n	800a99c <UART_SetConfig+0x1d0>
 800a95a:	4b5b      	ldr	r3, [pc, #364]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d00f      	beq.n	800a988 <UART_SetConfig+0x1bc>
 800a968:	2b40      	cmp	r3, #64	; 0x40
 800a96a:	d802      	bhi.n	800a972 <UART_SetConfig+0x1a6>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d005      	beq.n	800a97c <UART_SetConfig+0x1b0>
 800a970:	e010      	b.n	800a994 <UART_SetConfig+0x1c8>
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d005      	beq.n	800a982 <UART_SetConfig+0x1b6>
 800a976:	2bc0      	cmp	r3, #192	; 0xc0
 800a978:	d009      	beq.n	800a98e <UART_SetConfig+0x1c2>
 800a97a:	e00b      	b.n	800a994 <UART_SetConfig+0x1c8>
 800a97c:	2300      	movs	r3, #0
 800a97e:	77fb      	strb	r3, [r7, #31]
 800a980:	e0cb      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a982:	2302      	movs	r3, #2
 800a984:	77fb      	strb	r3, [r7, #31]
 800a986:	e0c8      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a988:	2304      	movs	r3, #4
 800a98a:	77fb      	strb	r3, [r7, #31]
 800a98c:	e0c5      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a98e:	2308      	movs	r3, #8
 800a990:	77fb      	strb	r3, [r7, #31]
 800a992:	e0c2      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a994:	2310      	movs	r3, #16
 800a996:	77fb      	strb	r3, [r7, #31]
 800a998:	bf00      	nop
 800a99a:	e0be      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a4d      	ldr	r2, [pc, #308]	; (800aad8 <UART_SetConfig+0x30c>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d124      	bne.n	800a9f0 <UART_SetConfig+0x224>
 800a9a6:	4b48      	ldr	r3, [pc, #288]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b4:	d012      	beq.n	800a9dc <UART_SetConfig+0x210>
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	d802      	bhi.n	800a9c2 <UART_SetConfig+0x1f6>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <UART_SetConfig+0x204>
 800a9c0:	e012      	b.n	800a9e8 <UART_SetConfig+0x21c>
 800a9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9c6:	d006      	beq.n	800a9d6 <UART_SetConfig+0x20a>
 800a9c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9cc:	d009      	beq.n	800a9e2 <UART_SetConfig+0x216>
 800a9ce:	e00b      	b.n	800a9e8 <UART_SetConfig+0x21c>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	77fb      	strb	r3, [r7, #31]
 800a9d4:	e0a1      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	77fb      	strb	r3, [r7, #31]
 800a9da:	e09e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9dc:	2304      	movs	r3, #4
 800a9de:	77fb      	strb	r3, [r7, #31]
 800a9e0:	e09b      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	77fb      	strb	r3, [r7, #31]
 800a9e6:	e098      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	77fb      	strb	r3, [r7, #31]
 800a9ec:	bf00      	nop
 800a9ee:	e094      	b.n	800ab1a <UART_SetConfig+0x34e>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a39      	ldr	r2, [pc, #228]	; (800aadc <UART_SetConfig+0x310>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d124      	bne.n	800aa44 <UART_SetConfig+0x278>
 800a9fa:	4b33      	ldr	r3, [pc, #204]	; (800aac8 <UART_SetConfig+0x2fc>)
 800a9fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa08:	d012      	beq.n	800aa30 <UART_SetConfig+0x264>
 800aa0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa0e:	d802      	bhi.n	800aa16 <UART_SetConfig+0x24a>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <UART_SetConfig+0x258>
 800aa14:	e012      	b.n	800aa3c <UART_SetConfig+0x270>
 800aa16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa1a:	d006      	beq.n	800aa2a <UART_SetConfig+0x25e>
 800aa1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa20:	d009      	beq.n	800aa36 <UART_SetConfig+0x26a>
 800aa22:	e00b      	b.n	800aa3c <UART_SetConfig+0x270>
 800aa24:	2301      	movs	r3, #1
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e077      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e074      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa30:	2304      	movs	r3, #4
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	e071      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa36:	2308      	movs	r3, #8
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e06e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	bf00      	nop
 800aa42:	e06a      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a25      	ldr	r2, [pc, #148]	; (800aae0 <UART_SetConfig+0x314>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d124      	bne.n	800aa98 <UART_SetConfig+0x2cc>
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <UART_SetConfig+0x2fc>)
 800aa50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa5c:	d012      	beq.n	800aa84 <UART_SetConfig+0x2b8>
 800aa5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa62:	d802      	bhi.n	800aa6a <UART_SetConfig+0x29e>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d007      	beq.n	800aa78 <UART_SetConfig+0x2ac>
 800aa68:	e012      	b.n	800aa90 <UART_SetConfig+0x2c4>
 800aa6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa6e:	d006      	beq.n	800aa7e <UART_SetConfig+0x2b2>
 800aa70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa74:	d009      	beq.n	800aa8a <UART_SetConfig+0x2be>
 800aa76:	e00b      	b.n	800aa90 <UART_SetConfig+0x2c4>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	77fb      	strb	r3, [r7, #31]
 800aa7c:	e04d      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	77fb      	strb	r3, [r7, #31]
 800aa82:	e04a      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa84:	2304      	movs	r3, #4
 800aa86:	77fb      	strb	r3, [r7, #31]
 800aa88:	e047      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa8a:	2308      	movs	r3, #8
 800aa8c:	77fb      	strb	r3, [r7, #31]
 800aa8e:	e044      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa90:	2310      	movs	r3, #16
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	bf00      	nop
 800aa96:	e040      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a11      	ldr	r2, [pc, #68]	; (800aae4 <UART_SetConfig+0x318>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d139      	bne.n	800ab16 <UART_SetConfig+0x34a>
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <UART_SetConfig+0x2fc>)
 800aaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aaac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab0:	d027      	beq.n	800ab02 <UART_SetConfig+0x336>
 800aab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab6:	d817      	bhi.n	800aae8 <UART_SetConfig+0x31c>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01c      	beq.n	800aaf6 <UART_SetConfig+0x32a>
 800aabc:	e027      	b.n	800ab0e <UART_SetConfig+0x342>
 800aabe:	bf00      	nop
 800aac0:	efff69f3 	.word	0xefff69f3
 800aac4:	40011000 	.word	0x40011000
 800aac8:	40023800 	.word	0x40023800
 800aacc:	40004400 	.word	0x40004400
 800aad0:	40004800 	.word	0x40004800
 800aad4:	40004c00 	.word	0x40004c00
 800aad8:	40005000 	.word	0x40005000
 800aadc:	40011400 	.word	0x40011400
 800aae0:	40007800 	.word	0x40007800
 800aae4:	40007c00 	.word	0x40007c00
 800aae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaec:	d006      	beq.n	800aafc <UART_SetConfig+0x330>
 800aaee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aaf2:	d009      	beq.n	800ab08 <UART_SetConfig+0x33c>
 800aaf4:	e00b      	b.n	800ab0e <UART_SetConfig+0x342>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e00e      	b.n	800ab1a <UART_SetConfig+0x34e>
 800aafc:	2302      	movs	r3, #2
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e00b      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab02:	2304      	movs	r3, #4
 800ab04:	77fb      	strb	r3, [r7, #31]
 800ab06:	e008      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab08:	2308      	movs	r3, #8
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	e005      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab0e:	2310      	movs	r3, #16
 800ab10:	77fb      	strb	r3, [r7, #31]
 800ab12:	bf00      	nop
 800ab14:	e001      	b.n	800ab1a <UART_SetConfig+0x34e>
 800ab16:	2310      	movs	r3, #16
 800ab18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab22:	d17f      	bne.n	800ac24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ab24:	7ffb      	ldrb	r3, [r7, #31]
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d85c      	bhi.n	800abe4 <UART_SetConfig+0x418>
 800ab2a:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <UART_SetConfig+0x364>)
 800ab2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab30:	0800ab55 	.word	0x0800ab55
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab95 	.word	0x0800ab95
 800ab3c:	0800abe5 	.word	0x0800abe5
 800ab40:	0800abad 	.word	0x0800abad
 800ab44:	0800abe5 	.word	0x0800abe5
 800ab48:	0800abe5 	.word	0x0800abe5
 800ab4c:	0800abe5 	.word	0x0800abe5
 800ab50:	0800abcd 	.word	0x0800abcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab54:	f7fd f928 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800ab58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	005a      	lsls	r2, r3, #1
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	085b      	lsrs	r3, r3, #1
 800ab64:	441a      	add	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	61bb      	str	r3, [r7, #24]
        break;
 800ab72:	e03a      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab74:	f7fd f92c 	bl	8007dd0 <HAL_RCC_GetPCLK2Freq>
 800ab78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	005a      	lsls	r2, r3, #1
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	085b      	lsrs	r3, r3, #1
 800ab84:	441a      	add	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	61bb      	str	r3, [r7, #24]
        break;
 800ab92:	e02a      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	085a      	lsrs	r2, r3, #1
 800ab9a:	4b5f      	ldr	r3, [pc, #380]	; (800ad18 <UART_SetConfig+0x54c>)
 800ab9c:	4413      	add	r3, r2
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6852      	ldr	r2, [r2, #4]
 800aba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	61bb      	str	r3, [r7, #24]
        break;
 800abaa:	e01e      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abac:	f7fd f83e 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 800abb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	005a      	lsls	r2, r3, #1
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	085b      	lsrs	r3, r3, #1
 800abbc:	441a      	add	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	61bb      	str	r3, [r7, #24]
        break;
 800abca:	e00e      	b.n	800abea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	085b      	lsrs	r3, r3, #1
 800abd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	fbb2 f3f3 	udiv	r3, r2, r3
 800abde:	b29b      	uxth	r3, r3
 800abe0:	61bb      	str	r3, [r7, #24]
        break;
 800abe2:	e002      	b.n	800abea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	75fb      	strb	r3, [r7, #23]
        break;
 800abe8:	bf00      	nop
=======
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a9f      	ldr	r2, [pc, #636]	; (800c18c <UART_SetConfig+0x2f8>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d121      	bne.n	800bf58 <UART_SetConfig+0xc4>
 800bf14:	4b9e      	ldr	r3, [pc, #632]	; (800c190 <UART_SetConfig+0x2fc>)
 800bf16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d816      	bhi.n	800bf50 <UART_SetConfig+0xbc>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <UART_SetConfig+0x94>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf39 	.word	0x0800bf39
 800bf2c:	0800bf45 	.word	0x0800bf45
 800bf30:	0800bf3f 	.word	0x0800bf3f
 800bf34:	0800bf4b 	.word	0x0800bf4b
 800bf38:	2301      	movs	r3, #1
 800bf3a:	77fb      	strb	r3, [r7, #31]
 800bf3c:	e151      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bf3e:	2302      	movs	r3, #2
 800bf40:	77fb      	strb	r3, [r7, #31]
 800bf42:	e14e      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bf44:	2304      	movs	r3, #4
 800bf46:	77fb      	strb	r3, [r7, #31]
 800bf48:	e14b      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bf4a:	2308      	movs	r3, #8
 800bf4c:	77fb      	strb	r3, [r7, #31]
 800bf4e:	e148      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bf50:	2310      	movs	r3, #16
 800bf52:	77fb      	strb	r3, [r7, #31]
 800bf54:	bf00      	nop
 800bf56:	e144      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a8d      	ldr	r2, [pc, #564]	; (800c194 <UART_SetConfig+0x300>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d134      	bne.n	800bfcc <UART_SetConfig+0x138>
 800bf62:	4b8b      	ldr	r3, [pc, #556]	; (800c190 <UART_SetConfig+0x2fc>)
 800bf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf68:	f003 030c 	and.w	r3, r3, #12
 800bf6c:	2b0c      	cmp	r3, #12
 800bf6e:	d829      	bhi.n	800bfc4 <UART_SetConfig+0x130>
 800bf70:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <UART_SetConfig+0xe4>)
 800bf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf76:	bf00      	nop
 800bf78:	0800bfad 	.word	0x0800bfad
 800bf7c:	0800bfc5 	.word	0x0800bfc5
 800bf80:	0800bfc5 	.word	0x0800bfc5
 800bf84:	0800bfc5 	.word	0x0800bfc5
 800bf88:	0800bfb9 	.word	0x0800bfb9
 800bf8c:	0800bfc5 	.word	0x0800bfc5
 800bf90:	0800bfc5 	.word	0x0800bfc5
 800bf94:	0800bfc5 	.word	0x0800bfc5
 800bf98:	0800bfb3 	.word	0x0800bfb3
 800bf9c:	0800bfc5 	.word	0x0800bfc5
 800bfa0:	0800bfc5 	.word	0x0800bfc5
 800bfa4:	0800bfc5 	.word	0x0800bfc5
 800bfa8:	0800bfbf 	.word	0x0800bfbf
 800bfac:	2300      	movs	r3, #0
 800bfae:	77fb      	strb	r3, [r7, #31]
 800bfb0:	e117      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	77fb      	strb	r3, [r7, #31]
 800bfb6:	e114      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bfb8:	2304      	movs	r3, #4
 800bfba:	77fb      	strb	r3, [r7, #31]
 800bfbc:	e111      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bfbe:	2308      	movs	r3, #8
 800bfc0:	77fb      	strb	r3, [r7, #31]
 800bfc2:	e10e      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bfc4:	2310      	movs	r3, #16
 800bfc6:	77fb      	strb	r3, [r7, #31]
 800bfc8:	bf00      	nop
 800bfca:	e10a      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a71      	ldr	r2, [pc, #452]	; (800c198 <UART_SetConfig+0x304>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d120      	bne.n	800c018 <UART_SetConfig+0x184>
 800bfd6:	4b6e      	ldr	r3, [pc, #440]	; (800c190 <UART_SetConfig+0x2fc>)
 800bfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bfe0:	2b10      	cmp	r3, #16
 800bfe2:	d00f      	beq.n	800c004 <UART_SetConfig+0x170>
 800bfe4:	2b10      	cmp	r3, #16
 800bfe6:	d802      	bhi.n	800bfee <UART_SetConfig+0x15a>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <UART_SetConfig+0x164>
 800bfec:	e010      	b.n	800c010 <UART_SetConfig+0x17c>
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d005      	beq.n	800bffe <UART_SetConfig+0x16a>
 800bff2:	2b30      	cmp	r3, #48	; 0x30
 800bff4:	d009      	beq.n	800c00a <UART_SetConfig+0x176>
 800bff6:	e00b      	b.n	800c010 <UART_SetConfig+0x17c>
 800bff8:	2300      	movs	r3, #0
 800bffa:	77fb      	strb	r3, [r7, #31]
 800bffc:	e0f1      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800bffe:	2302      	movs	r3, #2
 800c000:	77fb      	strb	r3, [r7, #31]
 800c002:	e0ee      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c004:	2304      	movs	r3, #4
 800c006:	77fb      	strb	r3, [r7, #31]
 800c008:	e0eb      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c00a:	2308      	movs	r3, #8
 800c00c:	77fb      	strb	r3, [r7, #31]
 800c00e:	e0e8      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c010:	2310      	movs	r3, #16
 800c012:	77fb      	strb	r3, [r7, #31]
 800c014:	bf00      	nop
 800c016:	e0e4      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a5f      	ldr	r2, [pc, #380]	; (800c19c <UART_SetConfig+0x308>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d120      	bne.n	800c064 <UART_SetConfig+0x1d0>
 800c022:	4b5b      	ldr	r3, [pc, #364]	; (800c190 <UART_SetConfig+0x2fc>)
 800c024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c028:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c02c:	2b40      	cmp	r3, #64	; 0x40
 800c02e:	d00f      	beq.n	800c050 <UART_SetConfig+0x1bc>
 800c030:	2b40      	cmp	r3, #64	; 0x40
 800c032:	d802      	bhi.n	800c03a <UART_SetConfig+0x1a6>
 800c034:	2b00      	cmp	r3, #0
 800c036:	d005      	beq.n	800c044 <UART_SetConfig+0x1b0>
 800c038:	e010      	b.n	800c05c <UART_SetConfig+0x1c8>
 800c03a:	2b80      	cmp	r3, #128	; 0x80
 800c03c:	d005      	beq.n	800c04a <UART_SetConfig+0x1b6>
 800c03e:	2bc0      	cmp	r3, #192	; 0xc0
 800c040:	d009      	beq.n	800c056 <UART_SetConfig+0x1c2>
 800c042:	e00b      	b.n	800c05c <UART_SetConfig+0x1c8>
 800c044:	2300      	movs	r3, #0
 800c046:	77fb      	strb	r3, [r7, #31]
 800c048:	e0cb      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c04a:	2302      	movs	r3, #2
 800c04c:	77fb      	strb	r3, [r7, #31]
 800c04e:	e0c8      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c050:	2304      	movs	r3, #4
 800c052:	77fb      	strb	r3, [r7, #31]
 800c054:	e0c5      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c056:	2308      	movs	r3, #8
 800c058:	77fb      	strb	r3, [r7, #31]
 800c05a:	e0c2      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c05c:	2310      	movs	r3, #16
 800c05e:	77fb      	strb	r3, [r7, #31]
 800c060:	bf00      	nop
 800c062:	e0be      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a4d      	ldr	r2, [pc, #308]	; (800c1a0 <UART_SetConfig+0x30c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d124      	bne.n	800c0b8 <UART_SetConfig+0x224>
 800c06e:	4b48      	ldr	r3, [pc, #288]	; (800c190 <UART_SetConfig+0x2fc>)
 800c070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c07c:	d012      	beq.n	800c0a4 <UART_SetConfig+0x210>
 800c07e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c082:	d802      	bhi.n	800c08a <UART_SetConfig+0x1f6>
 800c084:	2b00      	cmp	r3, #0
 800c086:	d007      	beq.n	800c098 <UART_SetConfig+0x204>
 800c088:	e012      	b.n	800c0b0 <UART_SetConfig+0x21c>
 800c08a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c08e:	d006      	beq.n	800c09e <UART_SetConfig+0x20a>
 800c090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c094:	d009      	beq.n	800c0aa <UART_SetConfig+0x216>
 800c096:	e00b      	b.n	800c0b0 <UART_SetConfig+0x21c>
 800c098:	2300      	movs	r3, #0
 800c09a:	77fb      	strb	r3, [r7, #31]
 800c09c:	e0a1      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c09e:	2302      	movs	r3, #2
 800c0a0:	77fb      	strb	r3, [r7, #31]
 800c0a2:	e09e      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0a4:	2304      	movs	r3, #4
 800c0a6:	77fb      	strb	r3, [r7, #31]
 800c0a8:	e09b      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0aa:	2308      	movs	r3, #8
 800c0ac:	77fb      	strb	r3, [r7, #31]
 800c0ae:	e098      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0b0:	2310      	movs	r3, #16
 800c0b2:	77fb      	strb	r3, [r7, #31]
 800c0b4:	bf00      	nop
 800c0b6:	e094      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a39      	ldr	r2, [pc, #228]	; (800c1a4 <UART_SetConfig+0x310>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d124      	bne.n	800c10c <UART_SetConfig+0x278>
 800c0c2:	4b33      	ldr	r3, [pc, #204]	; (800c190 <UART_SetConfig+0x2fc>)
 800c0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c0cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0d0:	d012      	beq.n	800c0f8 <UART_SetConfig+0x264>
 800c0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0d6:	d802      	bhi.n	800c0de <UART_SetConfig+0x24a>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <UART_SetConfig+0x258>
 800c0dc:	e012      	b.n	800c104 <UART_SetConfig+0x270>
 800c0de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0e2:	d006      	beq.n	800c0f2 <UART_SetConfig+0x25e>
 800c0e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0e8:	d009      	beq.n	800c0fe <UART_SetConfig+0x26a>
 800c0ea:	e00b      	b.n	800c104 <UART_SetConfig+0x270>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	77fb      	strb	r3, [r7, #31]
 800c0f0:	e077      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	77fb      	strb	r3, [r7, #31]
 800c0f6:	e074      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0f8:	2304      	movs	r3, #4
 800c0fa:	77fb      	strb	r3, [r7, #31]
 800c0fc:	e071      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c0fe:	2308      	movs	r3, #8
 800c100:	77fb      	strb	r3, [r7, #31]
 800c102:	e06e      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c104:	2310      	movs	r3, #16
 800c106:	77fb      	strb	r3, [r7, #31]
 800c108:	bf00      	nop
 800c10a:	e06a      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a25      	ldr	r2, [pc, #148]	; (800c1a8 <UART_SetConfig+0x314>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d124      	bne.n	800c160 <UART_SetConfig+0x2cc>
 800c116:	4b1e      	ldr	r3, [pc, #120]	; (800c190 <UART_SetConfig+0x2fc>)
 800c118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c11c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c124:	d012      	beq.n	800c14c <UART_SetConfig+0x2b8>
 800c126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c12a:	d802      	bhi.n	800c132 <UART_SetConfig+0x29e>
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d007      	beq.n	800c140 <UART_SetConfig+0x2ac>
 800c130:	e012      	b.n	800c158 <UART_SetConfig+0x2c4>
 800c132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c136:	d006      	beq.n	800c146 <UART_SetConfig+0x2b2>
 800c138:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c13c:	d009      	beq.n	800c152 <UART_SetConfig+0x2be>
 800c13e:	e00b      	b.n	800c158 <UART_SetConfig+0x2c4>
 800c140:	2300      	movs	r3, #0
 800c142:	77fb      	strb	r3, [r7, #31]
 800c144:	e04d      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c146:	2302      	movs	r3, #2
 800c148:	77fb      	strb	r3, [r7, #31]
 800c14a:	e04a      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c14c:	2304      	movs	r3, #4
 800c14e:	77fb      	strb	r3, [r7, #31]
 800c150:	e047      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c152:	2308      	movs	r3, #8
 800c154:	77fb      	strb	r3, [r7, #31]
 800c156:	e044      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c158:	2310      	movs	r3, #16
 800c15a:	77fb      	strb	r3, [r7, #31]
 800c15c:	bf00      	nop
 800c15e:	e040      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a11      	ldr	r2, [pc, #68]	; (800c1ac <UART_SetConfig+0x318>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d139      	bne.n	800c1de <UART_SetConfig+0x34a>
 800c16a:	4b09      	ldr	r3, [pc, #36]	; (800c190 <UART_SetConfig+0x2fc>)
 800c16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c178:	d027      	beq.n	800c1ca <UART_SetConfig+0x336>
 800c17a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c17e:	d817      	bhi.n	800c1b0 <UART_SetConfig+0x31c>
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01c      	beq.n	800c1be <UART_SetConfig+0x32a>
 800c184:	e027      	b.n	800c1d6 <UART_SetConfig+0x342>
 800c186:	bf00      	nop
 800c188:	efff69f3 	.word	0xefff69f3
 800c18c:	40011000 	.word	0x40011000
 800c190:	40023800 	.word	0x40023800
 800c194:	40004400 	.word	0x40004400
 800c198:	40004800 	.word	0x40004800
 800c19c:	40004c00 	.word	0x40004c00
 800c1a0:	40005000 	.word	0x40005000
 800c1a4:	40011400 	.word	0x40011400
 800c1a8:	40007800 	.word	0x40007800
 800c1ac:	40007c00 	.word	0x40007c00
 800c1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1b4:	d006      	beq.n	800c1c4 <UART_SetConfig+0x330>
 800c1b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c1ba:	d009      	beq.n	800c1d0 <UART_SetConfig+0x33c>
 800c1bc:	e00b      	b.n	800c1d6 <UART_SetConfig+0x342>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	77fb      	strb	r3, [r7, #31]
 800c1c2:	e00e      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	77fb      	strb	r3, [r7, #31]
 800c1c8:	e00b      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c1ca:	2304      	movs	r3, #4
 800c1cc:	77fb      	strb	r3, [r7, #31]
 800c1ce:	e008      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c1d0:	2308      	movs	r3, #8
 800c1d2:	77fb      	strb	r3, [r7, #31]
 800c1d4:	e005      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c1d6:	2310      	movs	r3, #16
 800c1d8:	77fb      	strb	r3, [r7, #31]
 800c1da:	bf00      	nop
 800c1dc:	e001      	b.n	800c1e2 <UART_SetConfig+0x34e>
 800c1de:	2310      	movs	r3, #16
 800c1e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	69db      	ldr	r3, [r3, #28]
 800c1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ea:	d17f      	bne.n	800c2ec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d85c      	bhi.n	800c2ac <UART_SetConfig+0x418>
 800c1f2:	a201      	add	r2, pc, #4	; (adr r2, 800c1f8 <UART_SetConfig+0x364>)
 800c1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f8:	0800c21d 	.word	0x0800c21d
 800c1fc:	0800c23d 	.word	0x0800c23d
 800c200:	0800c25d 	.word	0x0800c25d
 800c204:	0800c2ad 	.word	0x0800c2ad
 800c208:	0800c275 	.word	0x0800c275
 800c20c:	0800c2ad 	.word	0x0800c2ad
 800c210:	0800c2ad 	.word	0x0800c2ad
 800c214:	0800c2ad 	.word	0x0800c2ad
 800c218:	0800c295 	.word	0x0800c295
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c21c:	f7fd f9ba 	bl	8009594 <HAL_RCC_GetPCLK1Freq>
 800c220:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	005a      	lsls	r2, r3, #1
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	085b      	lsrs	r3, r3, #1
 800c22c:	441a      	add	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	fbb2 f3f3 	udiv	r3, r2, r3
 800c236:	b29b      	uxth	r3, r3
 800c238:	61bb      	str	r3, [r7, #24]
        break;
 800c23a:	e03a      	b.n	800c2b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c23c:	f7fd f9be 	bl	80095bc <HAL_RCC_GetPCLK2Freq>
 800c240:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	005a      	lsls	r2, r3, #1
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	085b      	lsrs	r3, r3, #1
 800c24c:	441a      	add	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	fbb2 f3f3 	udiv	r3, r2, r3
 800c256:	b29b      	uxth	r3, r3
 800c258:	61bb      	str	r3, [r7, #24]
        break;
 800c25a:	e02a      	b.n	800c2b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	085a      	lsrs	r2, r3, #1
 800c262:	4b5f      	ldr	r3, [pc, #380]	; (800c3e0 <UART_SetConfig+0x54c>)
 800c264:	4413      	add	r3, r2
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	6852      	ldr	r2, [r2, #4]
 800c26a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c26e:	b29b      	uxth	r3, r3
 800c270:	61bb      	str	r3, [r7, #24]
        break;
 800c272:	e01e      	b.n	800c2b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c274:	f7fd f8d0 	bl	8009418 <HAL_RCC_GetSysClockFreq>
 800c278:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	005a      	lsls	r2, r3, #1
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	085b      	lsrs	r3, r3, #1
 800c284:	441a      	add	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28e:	b29b      	uxth	r3, r3
 800c290:	61bb      	str	r3, [r7, #24]
        break;
 800c292:	e00e      	b.n	800c2b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	085b      	lsrs	r3, r3, #1
 800c29a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	61bb      	str	r3, [r7, #24]
        break;
 800c2aa:	e002      	b.n	800c2b2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	75fb      	strb	r3, [r7, #23]
        break;
 800c2b0:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< Updated upstream
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	2b0f      	cmp	r3, #15
 800abee:	d916      	bls.n	800ac1e <UART_SetConfig+0x452>
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf6:	d212      	bcs.n	800ac1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f023 030f 	bic.w	r3, r3, #15
 800ac00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	897b      	ldrh	r3, [r7, #10]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	897a      	ldrh	r2, [r7, #10]
 800ac1a:	60da      	str	r2, [r3, #12]
 800ac1c:	e070      	b.n	800ad00 <UART_SetConfig+0x534>
=======
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	2b0f      	cmp	r3, #15
 800c2b6:	d916      	bls.n	800c2e6 <UART_SetConfig+0x452>
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2be:	d212      	bcs.n	800c2e6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	f023 030f 	bic.w	r3, r3, #15
 800c2c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	085b      	lsrs	r3, r3, #1
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f003 0307 	and.w	r3, r3, #7
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	897b      	ldrh	r3, [r7, #10]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	897a      	ldrh	r2, [r7, #10]
 800c2e2:	60da      	str	r2, [r3, #12]
 800c2e4:	e070      	b.n	800c3c8 <UART_SetConfig+0x534>
>>>>>>> Stashed changes
    }
    else
    {
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800ac1e:	2301      	movs	r3, #1
 800ac20:	75fb      	strb	r3, [r7, #23]
 800ac22:	e06d      	b.n	800ad00 <UART_SetConfig+0x534>
=======
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	75fb      	strb	r3, [r7, #23]
 800c2ea:	e06d      	b.n	800c3c8 <UART_SetConfig+0x534>
>>>>>>> Stashed changes
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 800ac24:	7ffb      	ldrb	r3, [r7, #31]
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d859      	bhi.n	800acde <UART_SetConfig+0x512>
 800ac2a:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <UART_SetConfig+0x464>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac55 	.word	0x0800ac55
 800ac34:	0800ac73 	.word	0x0800ac73
 800ac38:	0800ac91 	.word	0x0800ac91
 800ac3c:	0800acdf 	.word	0x0800acdf
 800ac40:	0800aca9 	.word	0x0800aca9
 800ac44:	0800acdf 	.word	0x0800acdf
 800ac48:	0800acdf 	.word	0x0800acdf
 800ac4c:	0800acdf 	.word	0x0800acdf
 800ac50:	0800acc7 	.word	0x0800acc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac54:	f7fd f8a8 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800ac58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	085a      	lsrs	r2, r3, #1
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	441a      	add	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	61bb      	str	r3, [r7, #24]
        break;
 800ac70:	e038      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac72:	f7fd f8ad 	bl	8007dd0 <HAL_RCC_GetPCLK2Freq>
 800ac76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	085a      	lsrs	r2, r3, #1
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	61bb      	str	r3, [r7, #24]
        break;
 800ac8e:	e029      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	085a      	lsrs	r2, r3, #1
 800ac96:	4b21      	ldr	r3, [pc, #132]	; (800ad1c <UART_SetConfig+0x550>)
 800ac98:	4413      	add	r3, r2
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	6852      	ldr	r2, [r2, #4]
 800ac9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	61bb      	str	r3, [r7, #24]
        break;
 800aca6:	e01d      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aca8:	f7fc ffc0 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 800acac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	085a      	lsrs	r2, r3, #1
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	441a      	add	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	61bb      	str	r3, [r7, #24]
        break;
 800acc4:	e00e      	b.n	800ace4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	085b      	lsrs	r3, r3, #1
 800accc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd8:	b29b      	uxth	r3, r3
 800acda:	61bb      	str	r3, [r7, #24]
        break;
 800acdc:	e002      	b.n	800ace4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	75fb      	strb	r3, [r7, #23]
        break;
 800ace2:	bf00      	nop
=======
 800c2ec:	7ffb      	ldrb	r3, [r7, #31]
 800c2ee:	2b08      	cmp	r3, #8
 800c2f0:	d859      	bhi.n	800c3a6 <UART_SetConfig+0x512>
 800c2f2:	a201      	add	r2, pc, #4	; (adr r2, 800c2f8 <UART_SetConfig+0x464>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c33b 	.word	0x0800c33b
 800c300:	0800c359 	.word	0x0800c359
 800c304:	0800c3a7 	.word	0x0800c3a7
 800c308:	0800c371 	.word	0x0800c371
 800c30c:	0800c3a7 	.word	0x0800c3a7
 800c310:	0800c3a7 	.word	0x0800c3a7
 800c314:	0800c3a7 	.word	0x0800c3a7
 800c318:	0800c38f 	.word	0x0800c38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c31c:	f7fd f93a 	bl	8009594 <HAL_RCC_GetPCLK1Freq>
 800c320:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	085a      	lsrs	r2, r3, #1
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	441a      	add	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	fbb2 f3f3 	udiv	r3, r2, r3
 800c334:	b29b      	uxth	r3, r3
 800c336:	61bb      	str	r3, [r7, #24]
        break;
 800c338:	e038      	b.n	800c3ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c33a:	f7fd f93f 	bl	80095bc <HAL_RCC_GetPCLK2Freq>
 800c33e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	085a      	lsrs	r2, r3, #1
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	441a      	add	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c352:	b29b      	uxth	r3, r3
 800c354:	61bb      	str	r3, [r7, #24]
        break;
 800c356:	e029      	b.n	800c3ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	085a      	lsrs	r2, r3, #1
 800c35e:	4b21      	ldr	r3, [pc, #132]	; (800c3e4 <UART_SetConfig+0x550>)
 800c360:	4413      	add	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6852      	ldr	r2, [r2, #4]
 800c366:	fbb3 f3f2 	udiv	r3, r3, r2
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	61bb      	str	r3, [r7, #24]
        break;
 800c36e:	e01d      	b.n	800c3ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c370:	f7fd f852 	bl	8009418 <HAL_RCC_GetSysClockFreq>
 800c374:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	085a      	lsrs	r2, r3, #1
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	441a      	add	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	fbb2 f3f3 	udiv	r3, r2, r3
 800c388:	b29b      	uxth	r3, r3
 800c38a:	61bb      	str	r3, [r7, #24]
        break;
 800c38c:	e00e      	b.n	800c3ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	085b      	lsrs	r3, r3, #1
 800c394:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	61bb      	str	r3, [r7, #24]
        break;
 800c3a4:	e002      	b.n	800c3ac <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	75fb      	strb	r3, [r7, #23]
        break;
 800c3aa:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< Updated upstream
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2b0f      	cmp	r3, #15
 800ace8:	d908      	bls.n	800acfc <UART_SetConfig+0x530>
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf0:	d204      	bcs.n	800acfc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	60da      	str	r2, [r3, #12]
 800acfa:	e001      	b.n	800ad00 <UART_SetConfig+0x534>
=======
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	2b0f      	cmp	r3, #15
 800c3b0:	d908      	bls.n	800c3c4 <UART_SetConfig+0x530>
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b8:	d204      	bcs.n	800c3c4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	e001      	b.n	800c3c8 <UART_SetConfig+0x534>
>>>>>>> Stashed changes
    }
    else
    {
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800acfc:	2301      	movs	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
=======
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	01e84800 	.word	0x01e84800
 800ad1c:	00f42400 	.word	0x00f42400

0800ad20 <UART_AdvFeatureConfig>:
=======
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3720      	adds	r7, #32
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	01e84800 	.word	0x01e84800
 800c3e4:	00f42400 	.word	0x00f42400

0800c3e8 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
=======
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
=======
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00a      	beq.n	800c412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
=======
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	f003 0302 	and.w	r3, r3, #2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00a      	beq.n	800c434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
=======
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	f003 0304 	and.w	r3, r3, #4
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00a      	beq.n	800c456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	430a      	orrs	r2, r1
 800c454:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	f003 0308 	and.w	r3, r3, #8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00a      	beq.n	800adb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	430a      	orrs	r2, r1
 800adae:	605a      	str	r2, [r3, #4]
=======
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00a      	beq.n	800c478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	430a      	orrs	r2, r1
 800c476:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	609a      	str	r2, [r3, #8]
=======
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47c:	f003 0310 	and.w	r3, r3, #16
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00a      	beq.n	800c49a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	430a      	orrs	r2, r1
 800c498:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]
=======
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49e:	f003 0320 	and.w	r3, r3, #32
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00a      	beq.n	800c4bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01a      	beq.n	800ae36 <UART_AdvFeatureConfig+0x116>
=======
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d01a      	beq.n	800c4fe <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae1e:	d10a      	bne.n	800ae36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
=======
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4e6:	d10a      	bne.n	800c4fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	605a      	str	r2, [r3, #4]
  }
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <UART_CheckIdleState>:
=======
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	430a      	orrs	r2, r1
 800c51e:	605a      	str	r2, [r3, #4]
  }
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	6078      	str	r0, [r7, #4]
=======
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af02      	add	r7, sp, #8
 800c532:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ae72:	f7f9 fc85 	bl	8004780 <HAL_GetTick>
 800ae76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b08      	cmp	r3, #8
 800ae84:	d10e      	bne.n	800aea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f814 	bl	800aec2 <UART_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e00a      	b.n	800aeba <UART_CheckIdleState+0x56>
=======
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c53a:	f7f9 fd35 	bl	8005fa8 <HAL_GetTick>
 800c53e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f003 0308 	and.w	r3, r3, #8
 800c54a:	2b08      	cmp	r3, #8
 800c54c:	d10e      	bne.n	800c56c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c54e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c552:	9300      	str	r3, [sp, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f814 	bl	800c58a <UART_WaitOnFlagUntilTimeout>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c568:	2303      	movs	r3, #3
 800c56a:	e00a      	b.n	800c582 <UART_CheckIdleState+0x56>
>>>>>>> Stashed changes
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2220      	movs	r2, #32
 800aea8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2220      	movs	r2, #32
 800aeae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <UART_WaitOnFlagUntilTimeout>:
=======
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2220      	movs	r2, #32
 800c570:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	4613      	mov	r3, r2
 800aed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aed2:	e05d      	b.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d059      	beq.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aedc:	f7f9 fc50 	bl	8004780 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d302      	bcc.n	800aef2 <UART_WaitOnFlagUntilTimeout+0x30>
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d11b      	bne.n	800af2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0201 	bic.w	r2, r2, #1
 800af10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2220      	movs	r2, #32
 800af16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2220      	movs	r2, #32
 800af1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e042      	b.n	800afb0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0304 	and.w	r3, r3, #4
 800af34:	2b00      	cmp	r3, #0
 800af36:	d02b      	beq.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af46:	d123      	bne.n	800af90 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af50:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af60:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0201 	bic.w	r2, r2, #1
 800af70:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2220      	movs	r2, #32
 800af76:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2220      	movs	r2, #32
 800af7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2220      	movs	r2, #32
 800af82:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e00f      	b.n	800afb0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	69da      	ldr	r2, [r3, #28]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	4013      	ands	r3, r2
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	bf0c      	ite	eq
 800afa0:	2301      	moveq	r3, #1
 800afa2:	2300      	movne	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	461a      	mov	r2, r3
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d092      	beq.n	800aed4 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b084      	sub	sp, #16
 800c58e:	af00      	add	r7, sp, #0
 800c590:	60f8      	str	r0, [r7, #12]
 800c592:	60b9      	str	r1, [r7, #8]
 800c594:	603b      	str	r3, [r7, #0]
 800c596:	4613      	mov	r3, r2
 800c598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c59a:	e05d      	b.n	800c658 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a2:	d059      	beq.n	800c658 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5a4:	f7f9 fd00 	bl	8005fa8 <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d302      	bcc.n	800c5ba <UART_WaitOnFlagUntilTimeout+0x30>
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d11b      	bne.n	800c5f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f022 0201 	bic.w	r2, r2, #1
 800c5d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2220      	movs	r2, #32
 800c5de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2220      	movs	r2, #32
 800c5e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	e042      	b.n	800c678 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d02b      	beq.n	800c658 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c60a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c60e:	d123      	bne.n	800c658 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c618:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c628:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f022 0201 	bic.w	r2, r2, #1
 800c638:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2220      	movs	r2, #32
 800c63e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2220      	movs	r2, #32
 800c644:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2220      	movs	r2, #32
 800c64a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e00f      	b.n	800c678 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	69da      	ldr	r2, [r3, #28]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	4013      	ands	r3, r2
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	429a      	cmp	r2, r3
 800c666:	bf0c      	ite	eq
 800c668:	2301      	moveq	r3, #1
 800c66a:	2300      	movne	r3, #0
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	79fb      	ldrb	r3, [r7, #7]
 800c672:	429a      	cmp	r2, r3
 800c674:	d092      	beq.n	800c59c <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <UART_EndRxTransfer>:
=======
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800afce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689a      	ldr	r2, [r3, #8]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f022 0201 	bic.w	r2, r2, #1
 800afde:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2220      	movs	r2, #32
 800afe4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	661a      	str	r2, [r3, #96]	; 0x60
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <UART_DMAAbortOnError>:
=======
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c696:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689a      	ldr	r2, [r3, #8]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f022 0201 	bic.w	r2, r2, #1
 800c6a6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fbce 	bl	800a7b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <UART_EndTransmit_IT>:
=======
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f7ff fbce 	bl	800be80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b03a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	665a      	str	r2, [r3, #100]	; 0x64
=======
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c702:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fbab 	bl	800a7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <UART_RxISR_8BIT>:
=======
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7ff fbab 	bl	800be6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <UART_RxISR_8BIT>:
>>>>>>> Stashed changes
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b064:	81fb      	strh	r3, [r7, #14]
=======
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c72c:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b06a:	2b22      	cmp	r3, #34	; 0x22
 800b06c:	d13a      	bne.n	800b0e4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b076:	89bb      	ldrh	r3, [r7, #12]
 800b078:	b2d9      	uxtb	r1, r3
 800b07a:	89fb      	ldrh	r3, [r7, #14]
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	400a      	ands	r2, r1
 800b084:	b2d2      	uxtb	r2, r2
 800b086:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3b01      	subs	r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d121      	bne.n	800b0f4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0be:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689a      	ldr	r2, [r3, #8]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 0201 	bic.w	r2, r2, #1
 800b0ce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c732:	2b22      	cmp	r3, #34	; 0x22
 800c734:	d13a      	bne.n	800c7ac <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c73e:	89bb      	ldrh	r3, [r7, #12]
 800c740:	b2d9      	uxtb	r1, r3
 800c742:	89fb      	ldrh	r3, [r7, #14]
 800c744:	b2da      	uxtb	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c74a:	400a      	ands	r2, r1
 800c74c:	b2d2      	uxtb	r2, r2
 800c74e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c754:	1c5a      	adds	r2, r3, #1
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c760:	b29b      	uxth	r3, r3
 800c762:	3b01      	subs	r3, #1
 800c764:	b29a      	uxth	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c772:	b29b      	uxth	r3, r3
 800c774:	2b00      	cmp	r3, #0
 800c776:	d121      	bne.n	800c7bc <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c786:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	689a      	ldr	r2, [r3, #8]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f022 0201 	bic.w	r2, r2, #1
 800c796:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2220      	movs	r2, #32
 800c79c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7f6 ff4d 	bl	8001f7c <HAL_UART_RxCpltCallback>
=======
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7f5 fc4d 	bl	8002044 <HAL_UART_RxCpltCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 800b0e2:	e007      	b.n	800b0f4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f042 0208 	orr.w	r2, r2, #8
 800b0f2:	619a      	str	r2, [r3, #24]
}
 800b0f4:	bf00      	nop
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <UART_RxISR_16BIT>:
=======
 800c7aa:	e007      	b.n	800c7bc <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	699a      	ldr	r2, [r3, #24]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0208 	orr.w	r2, r2, #8
 800c7ba:	619a      	str	r2, [r3, #24]
}
 800c7bc:	bf00      	nop
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <UART_RxISR_16BIT>:
>>>>>>> Stashed changes
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b10a:	81fb      	strh	r3, [r7, #14]
=======
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7d2:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b110:	2b22      	cmp	r3, #34	; 0x22
 800b112:	d13a      	bne.n	800b18a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b120:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b122:	89ba      	ldrh	r2, [r7, #12]
 800b124:	89fb      	ldrh	r3, [r7, #14]
 800b126:	4013      	ands	r3, r2
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b132:	1c9a      	adds	r2, r3, #2
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b13e:	b29b      	uxth	r3, r3
 800b140:	3b01      	subs	r3, #1
 800b142:	b29a      	uxth	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d121      	bne.n	800b19a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b164:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689a      	ldr	r2, [r3, #8]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0201 	bic.w	r2, r2, #1
 800b174:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	661a      	str	r2, [r3, #96]	; 0x60
=======
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7d8:	2b22      	cmp	r3, #34	; 0x22
 800c7da:	d13a      	bne.n	800c852 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c7ea:	89ba      	ldrh	r2, [r7, #12]
 800c7ec:	89fb      	ldrh	r3, [r7, #14]
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fa:	1c9a      	adds	r2, r3, #2
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c806:	b29b      	uxth	r3, r3
 800c808:	3b01      	subs	r3, #1
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c818:	b29b      	uxth	r3, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d121      	bne.n	800c862 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c82c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689a      	ldr	r2, [r3, #8]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f022 0201 	bic.w	r2, r2, #1
 800c83c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2220      	movs	r2, #32
 800c842:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7f6 fefa 	bl	8001f7c <HAL_UART_RxCpltCallback>
=======
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7f5 fbfa 	bl	8002044 <HAL_UART_RxCpltCallback>
>>>>>>> Stashed changes
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< Updated upstream
 800b188:	e007      	b.n	800b19a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f042 0208 	orr.w	r2, r2, #8
 800b198:	619a      	str	r2, [r3, #24]
}
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <FMC_SDRAM_Init>:
=======
 800c850:	e007      	b.n	800c862 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0208 	orr.w	r2, r2, #8
 800c860:	619a      	str	r2, [r3, #24]
}
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
	...

0800c86c <FMC_SDRAM_Init>:
>>>>>>> Stashed changes
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
<<<<<<< Updated upstream
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60bb      	str	r3, [r7, #8]
=======
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
<<<<<<< Updated upstream
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d027      	beq.n	800b20e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4b2f      	ldr	r3, [pc, #188]	; (800b284 <FMC_SDRAM_Init+0xe0>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
=======
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d027      	beq.n	800c8d6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	4b2f      	ldr	r3, [pc, #188]	; (800c94c <FMC_SDRAM_Init+0xe0>)
 800c890:	4013      	ands	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
<<<<<<< Updated upstream
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1d4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b1da:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b1e0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b1e6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b1ec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b1f2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b1f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b1fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	e032      	b.n	800b274 <FMC_SDRAM_Init+0xd0>
=======
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c89c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c8a2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c8a8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c8ae:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c8b4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c8ba:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c8c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c8c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	e032      	b.n	800c93c <FMC_SDRAM_Init+0xd0>
>>>>>>> Stashed changes
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
<<<<<<< Updated upstream
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b21a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b224:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b22a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	4b12      	ldr	r3, [pc, #72]	; (800b284 <FMC_SDRAM_Init+0xe0>)
 800b23c:	4013      	ands	r3, r2
 800b23e:	60bb      	str	r3, [r7, #8]
=======
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c8e2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c8ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c8f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	4b12      	ldr	r3, [pc, #72]	; (800c94c <FMC_SDRAM_Init+0xe0>)
 800c904:	4013      	ands	r3, r2
 800c906:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
<<<<<<< Updated upstream
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b248:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b24e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b254:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b25a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b260:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	4313      	orrs	r3, r2
 800b266:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	ffff8000 	.word	0xffff8000

0800b288 <FMC_SDRAM_Timing_Init>:
=======
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c910:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c916:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c91c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c922:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c928:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	ffff8000 	.word	0xffff8000

0800c950 <FMC_SDRAM_Timing_Init>:
>>>>>>> Stashed changes
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
<<<<<<< Updated upstream
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
=======
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
<<<<<<< Updated upstream
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d02e      	beq.n	800b300 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2ae:	617b      	str	r3, [r7, #20]
=======
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d02e      	beq.n	800c9c8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	689b      	ldr	r3, [r3, #8]
 800c96e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c976:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
<<<<<<< Updated upstream
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b2c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b2d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b2dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b2e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	609a      	str	r2, [r3, #8]
 800b2fe:	e039      	b.n	800b374 <FMC_SDRAM_Timing_Init+0xec>
=======
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	3b01      	subs	r3, #1
 800c984:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c986:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c990:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	3b01      	subs	r3, #1
 800c998:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c99a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c9a4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c9ae:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	609a      	str	r2, [r3, #8]
 800c9c6:	e039      	b.n	800ca3c <FMC_SDRAM_Timing_Init+0xec>
>>>>>>> Stashed changes
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
<<<<<<< Updated upstream
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <FMC_SDRAM_Timing_Init+0xfc>)
 800b30a:	4013      	ands	r3, r2
 800b30c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	3b01      	subs	r3, #1
 800b314:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	3b01      	subs	r3, #1
 800b31c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b31e:	4313      	orrs	r3, r2
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	4313      	orrs	r3, r2
 800b324:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b332:	613b      	str	r3, [r7, #16]
=======
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	4b1e      	ldr	r3, [pc, #120]	; (800ca4c <FMC_SDRAM_Timing_Init+0xfc>)
 800c9d2:	4013      	ands	r3, r2
 800c9d4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9fa:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
<<<<<<< Updated upstream
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	3b01      	subs	r3, #1
 800b340:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b342:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	3b01      	subs	r3, #1
 800b34a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b34c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	3b01      	subs	r3, #1
 800b354:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b356:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b360:	4313      	orrs	r3, r2
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	371c      	adds	r7, #28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	ff0f0fff 	.word	0xff0f0fff

0800b388 <FMC_SDRAM_SendCommand>:
=======
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ca0a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ca14:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ca1e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	699b      	ldr	r3, [r3, #24]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	697a      	ldr	r2, [r7, #20]
 800ca34:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	371c      	adds	r7, #28
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	ff0f0fff 	.word	0xff0f0fff

0800ca50 <FMC_SDRAM_SendCommand>:
>>>>>>> Stashed changes
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
=======
 800ca50:	b480      	push	{r7}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
<<<<<<< Updated upstream
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b3aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <FMC_SDRAM_ProgramRefreshRate>:
=======
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ca68:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800ca72:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ca7e:	697a      	ldr	r2, [r7, #20]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	371c      	adds	r7, #28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <FMC_SDRAM_ProgramRefreshRate>:
>>>>>>> Stashed changes
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
<<<<<<< Updated upstream
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
=======
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
<<<<<<< Updated upstream
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695a      	ldr	r2, [r3, #20]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <makeFreeRtosPriority>:
=======
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	695a      	ldr	r2, [r3, #20]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	431a      	orrs	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <makeFreeRtosPriority>:
>>>>>>> Stashed changes

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
<<<<<<< Updated upstream
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b402:	2b84      	cmp	r3, #132	; 0x84
 800b404:	d005      	beq.n	800b412 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	3303      	adds	r3, #3
 800b410:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <osKernelStart>:
=======
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	4603      	mov	r3, r0
 800cac0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cac2:	2300      	movs	r3, #0
 800cac4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caca:	2b84      	cmp	r3, #132	; 0x84
 800cacc:	d005      	beq.n	800cada <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cace:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4413      	add	r3, r2
 800cad6:	3303      	adds	r3, #3
 800cad8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cada:	68fb      	ldr	r3, [r7, #12]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <osKernelStart>:
>>>>>>> Stashed changes
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< Updated upstream
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b424:	f001 f8d4 	bl	800c5d0 <vTaskStartScheduler>
  
  return osOK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <osThreadCreate>:
=======
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800caec:	f001 f8f4 	bl	800dcd8 <vTaskStartScheduler>
  
  return osOK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <osThreadCreate>:
>>>>>>> Stashed changes
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< Updated upstream
 800b42e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b430:	b089      	sub	sp, #36	; 0x24
 800b432:	af04      	add	r7, sp, #16
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
=======
 800caf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caf8:	b089      	sub	sp, #36	; 0x24
 800cafa:	af04      	add	r7, sp, #16
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< Updated upstream
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d020      	beq.n	800b482 <osThreadCreate+0x54>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01c      	beq.n	800b482 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685c      	ldr	r4, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681d      	ldr	r5, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691e      	ldr	r6, [r3, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff ffc8 	bl	800b3f0 <makeFreeRtosPriority>
 800b460:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b46a:	9202      	str	r2, [sp, #8]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	9100      	str	r1, [sp, #0]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	4632      	mov	r2, r6
 800b474:	4629      	mov	r1, r5
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fe52 	bl	800c120 <xTaskCreateStatic>
 800b47c:	4603      	mov	r3, r0
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e01c      	b.n	800b4bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685c      	ldr	r4, [r3, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b48e:	b29e      	uxth	r6, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff ffaa 	bl	800b3f0 <makeFreeRtosPriority>
 800b49c:	4602      	mov	r2, r0
 800b49e:	f107 030c 	add.w	r3, r7, #12
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	9200      	str	r2, [sp, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fe97 	bl	800c1e0 <xTaskCreate>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d001      	beq.n	800b4bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <osThreadCreate+0x90>
=======
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	695b      	ldr	r3, [r3, #20]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d020      	beq.n	800cb4a <osThreadCreate+0x54>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d01c      	beq.n	800cb4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685c      	ldr	r4, [r3, #4]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681d      	ldr	r5, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	691e      	ldr	r6, [r3, #16]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff ffc8 	bl	800cab8 <makeFreeRtosPriority>
 800cb28:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb32:	9202      	str	r2, [sp, #8]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	9100      	str	r1, [sp, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	4632      	mov	r2, r6
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f000 fe72 	bl	800d828 <xTaskCreateStatic>
 800cb44:	4603      	mov	r3, r0
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	e01c      	b.n	800cb84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685c      	ldr	r4, [r3, #4]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb56:	b29e      	uxth	r6, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff ffaa 	bl	800cab8 <makeFreeRtosPriority>
 800cb64:	4602      	mov	r2, r0
 800cb66:	f107 030c 	add.w	r3, r7, #12
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	9200      	str	r2, [sp, #0]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	4632      	mov	r2, r6
 800cb72:	4629      	mov	r1, r5
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 feb7 	bl	800d8e8 <xTaskCreate>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d001      	beq.n	800cb84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e000      	b.n	800cb86 <osThreadCreate+0x90>
>>>>>>> Stashed changes
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< Updated upstream
 800b4bc:	68fb      	ldr	r3, [r7, #12]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c6 <osDelay>:
=======
 800cb84:	68fb      	ldr	r3, [r7, #12]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb8e <osDelay>:
>>>>>>> Stashed changes
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< Updated upstream
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <osDelay+0x16>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	e000      	b.n	800b4de <osDelay+0x18>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f001 f840 	bl	800c564 <vTaskDelay>
  
  return osOK;
 800b4e4:	2300      	movs	r3, #0
=======
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <osDelay+0x16>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	e000      	b.n	800cba6 <osDelay+0x18>
 800cba4:	2301      	movs	r3, #1
 800cba6:	4618      	mov	r0, r3
 800cba8:	f001 f860 	bl	800dc6c <vTaskDelay>
  
  return osOK;
 800cbac:	2300      	movs	r3, #0
>>>>>>> Stashed changes
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< Updated upstream
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <osMutexCreate>:
=======
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <osMutexCreate>:
>>>>>>> Stashed changes
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
<<<<<<< Updated upstream
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
=======
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b082      	sub	sp, #8
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
<<<<<<< Updated upstream
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4619      	mov	r1, r3
 800b504:	2001      	movs	r0, #1
 800b506:	f000 fa60 	bl	800b9ca <xQueueCreateMutexStatic>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e003      	b.n	800b516 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b50e:	2001      	movs	r0, #1
 800b510:	f000 fa43 	bl	800b99a <xQueueCreateMutex>
 800b514:	4603      	mov	r3, r0
=======
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d007      	beq.n	800cbd6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	2001      	movs	r0, #1
 800cbce:	f000 fa60 	bl	800d092 <xQueueCreateMutexStatic>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	e003      	b.n	800cbde <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	f000 fa43 	bl	800d062 <xQueueCreateMutex>
 800cbdc:	4603      	mov	r3, r0
>>>>>>> Stashed changes
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
<<<<<<< Updated upstream
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <osMessageCreate>:
=======
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <osMessageCreate>:
>>>>>>> Stashed changes
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
<<<<<<< Updated upstream
 800b51e:	b590      	push	{r4, r7, lr}
 800b520:	b085      	sub	sp, #20
 800b522:	af02      	add	r7, sp, #8
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
=======
 800cbe6:	b590      	push	{r4, r7, lr}
 800cbe8:	b085      	sub	sp, #20
 800cbea:	af02      	add	r7, sp, #8
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
<<<<<<< Updated upstream
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d012      	beq.n	800b556 <osMessageCreate+0x38>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00e      	beq.n	800b556 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6859      	ldr	r1, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689a      	ldr	r2, [r3, #8]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68dc      	ldr	r4, [r3, #12]
 800b548:	2300      	movs	r3, #0
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	4623      	mov	r3, r4
 800b54e:	f000 f92d 	bl	800b7ac <xQueueGenericCreateStatic>
 800b552:	4603      	mov	r3, r0
 800b554:	e008      	b.n	800b568 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	4619      	mov	r1, r3
 800b562:	f000 f9a0 	bl	800b8a6 <xQueueGenericCreate>
 800b566:	4603      	mov	r3, r0
=======
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d012      	beq.n	800cc1e <osMessageCreate+0x38>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00e      	beq.n	800cc1e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6818      	ldr	r0, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6859      	ldr	r1, [r3, #4]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	68dc      	ldr	r4, [r3, #12]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	4623      	mov	r3, r4
 800cc16:	f000 f92d 	bl	800ce74 <xQueueGenericCreateStatic>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	e008      	b.n	800cc30 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f000 f9a0 	bl	800cf6e <xQueueGenericCreate>
 800cc2e:	4603      	mov	r3, r0
>>>>>>> Stashed changes
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
<<<<<<< Updated upstream
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd90      	pop	{r4, r7, pc}

0800b570 <vListInitialise>:
=======
 800cc30:	4618      	mov	r0, r3
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd90      	pop	{r4, r7, pc}

0800cc38 <vListInitialise>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< Updated upstream
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
=======
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f103 0208 	add.w	r2, r3, #8
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	605a      	str	r2, [r3, #4]
=======
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f103 0208 	add.w	r2, r3, #8
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< Updated upstream
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	609a      	str	r2, [r3, #8]
=======
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc50:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< Updated upstream
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f103 0208 	add.w	r2, r3, #8
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f103 0208 	add.w	r2, r3, #8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]
=======
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f103 0208 	add.w	r2, r3, #8
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f103 0208 	add.w	r2, r3, #8
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< Updated upstream
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <vListInitialiseItem>:
=======
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <vListInitialiseItem>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< Updated upstream
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	611a      	str	r2, [r3, #16]
=======
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< Updated upstream
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <vListInsertEnd>:
=======
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <vListInsertEnd>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]
=======
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< Updated upstream
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	609a      	str	r2, [r3, #8]
=======
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	689a      	ldr	r2, [r3, #8]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< Updated upstream
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	601a      	str	r2, [r3, #0]
}
 800b606:	bf00      	nop
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <vListInsert>:
=======
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	1c5a      	adds	r2, r3, #1
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	601a      	str	r2, [r3, #0]
}
 800ccce:	bf00      	nop
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <vListInsert>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< Updated upstream
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60bb      	str	r3, [r7, #8]
=======
 800ccda:	b480      	push	{r7}
 800ccdc:	b085      	sub	sp, #20
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< Updated upstream
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d103      	bne.n	800b632 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	e00c      	b.n	800b64c <vListInsert+0x3a>
=======
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf0:	d103      	bne.n	800ccfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	e00c      	b.n	800cd14 <vListInsert+0x3a>
>>>>>>> Stashed changes
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< Updated upstream
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3308      	adds	r3, #8
 800b636:	60fb      	str	r3, [r7, #12]
 800b638:	e002      	b.n	800b640 <vListInsert+0x2e>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	60fb      	str	r3, [r7, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d2f6      	bcs.n	800b63a <vListInsert+0x28>
=======
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e002      	b.n	800cd08 <vListInsert+0x2e>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d2f6      	bcs.n	800cd02 <vListInsert+0x28>
>>>>>>> Stashed changes
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< Updated upstream
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	605a      	str	r2, [r3, #4]
=======
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< Updated upstream
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	601a      	str	r2, [r3, #0]
}
 800b678:	bf00      	nop
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <uxListRemove>:
=======
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	601a      	str	r2, [r3, #0]
}
 800cd40:	bf00      	nop
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <uxListRemove>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< Updated upstream
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	6892      	ldr	r2, [r2, #8]
 800b69a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	6852      	ldr	r2, [r2, #4]
 800b6a4:	605a      	str	r2, [r3, #4]
=======
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	6892      	ldr	r2, [r2, #8]
 800cd62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	6852      	ldr	r2, [r2, #4]
 800cd6c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< Updated upstream
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d103      	bne.n	800b6b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	605a      	str	r2, [r3, #4]
=======
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d103      	bne.n	800cd80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689a      	ldr	r2, [r3, #8]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< Updated upstream
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	1e5a      	subs	r2, r3, #1
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <xQueueGenericReset>:
=======
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	1e5a      	subs	r2, r3, #1
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <xQueueGenericReset>:
>>>>>>> Stashed changes
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< Updated upstream
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10b      	bne.n	800b704 <xQueueGenericReset+0x2c>
=======
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10b      	bne.n	800cdcc <xQueueGenericReset+0x2c>
>>>>>>> Stashed changes

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	b672      	cpsid	i
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	b662      	cpsie	i
 800b700:	60bb      	str	r3, [r7, #8]
 800b702:	e7fe      	b.n	800b702 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b704:	f001 fdb8 	bl	800d278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b710:	68f9      	ldr	r1, [r7, #12]
 800b712:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	441a      	add	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b734:	3b01      	subs	r3, #1
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b73a:	fb01 f303 	mul.w	r3, r1, r3
 800b73e:	441a      	add	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	22ff      	movs	r2, #255	; 0xff
 800b748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	22ff      	movs	r2, #255	; 0xff
 800b750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d114      	bne.n	800b784 <xQueueGenericReset+0xac>
=======
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	b672      	cpsid	i
 800cdba:	f383 8811 	msr	BASEPRI, r3
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	b662      	cpsie	i
 800cdc8:	60bb      	str	r3, [r7, #8]
 800cdca:	e7fe      	b.n	800cdca <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800cdcc:	f001 ff0c 	bl	800ebe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd8:	68f9      	ldr	r1, [r7, #12]
 800cdda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cddc:	fb01 f303 	mul.w	r3, r1, r3
 800cde0:	441a      	add	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	68f9      	ldr	r1, [r7, #12]
 800ce00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce02:	fb01 f303 	mul.w	r3, r1, r3
 800ce06:	441a      	add	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	22ff      	movs	r2, #255	; 0xff
 800ce10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	22ff      	movs	r2, #255	; 0xff
 800ce18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d114      	bne.n	800ce4c <xQueueGenericReset+0xac>
>>>>>>> Stashed changes
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< Updated upstream
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01a      	beq.n	800b798 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3310      	adds	r3, #16
 800b766:	4618      	mov	r0, r3
 800b768:	f001 f9b2 	bl	800cad0 <xTaskRemoveFromEventList>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d012      	beq.n	800b798 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b772:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <xQueueGenericReset+0xd0>)
 800b774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	e009      	b.n	800b798 <xQueueGenericReset+0xc0>
=======
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d01a      	beq.n	800ce60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3310      	adds	r3, #16
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f001 f9d2 	bl	800e1d8 <xTaskRemoveFromEventList>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d012      	beq.n	800ce60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	; (800ce70 <xQueueGenericReset+0xd0>)
 800ce3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	e009      	b.n	800ce60 <xQueueGenericReset+0xc0>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< Updated upstream
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3310      	adds	r3, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fef1 	bl	800b570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3324      	adds	r3, #36	; 0x24
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff feec 	bl	800b570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b798:	f001 fda0 	bl	800d2dc <vPortExitCritical>
=======
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3310      	adds	r3, #16
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fef1 	bl	800cc38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3324      	adds	r3, #36	; 0x24
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff feec 	bl	800cc38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce60:	f001 fef4 	bl	800ec4c <vPortExitCritical>
>>>>>>> Stashed changes

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< Updated upstream
 800b79c:	2301      	movs	r3, #1
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	e000ed04 	.word	0xe000ed04

0800b7ac <xQueueGenericCreateStatic>:
=======
 800ce64:	2301      	movs	r3, #1
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	e000ed04 	.word	0xe000ed04

0800ce74 <xQueueGenericCreateStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08e      	sub	sp, #56	; 0x38
 800b7b0:	af02      	add	r7, sp, #8
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <xQueueGenericCreateStatic+0x2c>
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	b672      	cpsid	i
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	b662      	cpsie	i
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7d6:	e7fe      	b.n	800b7d6 <xQueueGenericCreateStatic+0x2a>
=======
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08e      	sub	sp, #56	; 0x38
 800ce78:	af02      	add	r7, sp, #8
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10b      	bne.n	800cea0 <xQueueGenericCreateStatic+0x2c>
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	b672      	cpsid	i
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	b662      	cpsie	i
 800ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce9e:	e7fe      	b.n	800ce9e <xQueueGenericCreateStatic+0x2a>
>>>>>>> Stashed changes

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< Updated upstream
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <xQueueGenericCreateStatic+0x4a>
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	b672      	cpsid	i
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	b662      	cpsie	i
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueGenericCreateStatic+0x48>
=======
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10b      	bne.n	800cebe <xQueueGenericCreateStatic+0x4a>
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	b672      	cpsid	i
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	b662      	cpsie	i
 800ceba:	627b      	str	r3, [r7, #36]	; 0x24
 800cebc:	e7fe      	b.n	800cebc <xQueueGenericCreateStatic+0x48>
>>>>>>> Stashed changes

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< Updated upstream
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <xQueueGenericCreateStatic+0x56>
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <xQueueGenericCreateStatic+0x5a>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <xQueueGenericCreateStatic+0x5c>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <xQueueGenericCreateStatic+0x78>
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	b672      	cpsid	i
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	b662      	cpsie	i
 800b820:	623b      	str	r3, [r7, #32]
 800b822:	e7fe      	b.n	800b822 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d102      	bne.n	800b830 <xQueueGenericCreateStatic+0x84>
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <xQueueGenericCreateStatic+0x88>
 800b830:	2301      	movs	r3, #1
 800b832:	e000      	b.n	800b836 <xQueueGenericCreateStatic+0x8a>
 800b834:	2300      	movs	r3, #0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d10b      	bne.n	800b852 <xQueueGenericCreateStatic+0xa6>
 800b83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83e:	b672      	cpsid	i
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	b662      	cpsie	i
 800b84e:	61fb      	str	r3, [r7, #28]
 800b850:	e7fe      	b.n	800b850 <xQueueGenericCreateStatic+0xa4>
=======
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <xQueueGenericCreateStatic+0x56>
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <xQueueGenericCreateStatic+0x5a>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e000      	b.n	800ced0 <xQueueGenericCreateStatic+0x5c>
 800cece:	2300      	movs	r3, #0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10b      	bne.n	800ceec <xQueueGenericCreateStatic+0x78>
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	b672      	cpsid	i
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	b662      	cpsie	i
 800cee8:	623b      	str	r3, [r7, #32]
 800ceea:	e7fe      	b.n	800ceea <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d102      	bne.n	800cef8 <xQueueGenericCreateStatic+0x84>
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <xQueueGenericCreateStatic+0x88>
 800cef8:	2301      	movs	r3, #1
 800cefa:	e000      	b.n	800cefe <xQueueGenericCreateStatic+0x8a>
 800cefc:	2300      	movs	r3, #0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10b      	bne.n	800cf1a <xQueueGenericCreateStatic+0xa6>
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	b672      	cpsid	i
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	b662      	cpsie	i
 800cf16:	61fb      	str	r3, [r7, #28]
 800cf18:	e7fe      	b.n	800cf18 <xQueueGenericCreateStatic+0xa4>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< Updated upstream
 800b852:	2348      	movs	r3, #72	; 0x48
 800b854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b48      	cmp	r3, #72	; 0x48
 800b85a:	d00b      	beq.n	800b874 <xQueueGenericCreateStatic+0xc8>
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	b672      	cpsid	i
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	b662      	cpsie	i
 800b870:	61bb      	str	r3, [r7, #24]
 800b872:	e7fe      	b.n	800b872 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b874:	697b      	ldr	r3, [r7, #20]
=======
 800cf1a:	2348      	movs	r3, #72	; 0x48
 800cf1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b48      	cmp	r3, #72	; 0x48
 800cf22:	d00b      	beq.n	800cf3c <xQueueGenericCreateStatic+0xc8>
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	b672      	cpsid	i
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	b662      	cpsie	i
 800cf38:	61bb      	str	r3, [r7, #24]
 800cf3a:	e7fe      	b.n	800cf3a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf3c:	697b      	ldr	r3, [r7, #20]
>>>>>>> Stashed changes
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00d      	beq.n	800b89c <xQueueGenericCreateStatic+0xf0>
=======
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00d      	beq.n	800cf64 <xQueueGenericCreateStatic+0xf0>
>>>>>>> Stashed changes
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< Updated upstream
 800b880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 800b888:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	68b9      	ldr	r1, [r7, #8]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f846 	bl	800b928 <prvInitialiseNewQueue>
=======
 800cf50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	9300      	str	r3, [sp, #0]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f000 f846 	bl	800cff0 <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3730      	adds	r7, #48	; 0x30
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <xQueueGenericCreate>:
=======
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3730      	adds	r7, #48	; 0x30
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <xQueueGenericCreate>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b08a      	sub	sp, #40	; 0x28
 800b8aa:	af02      	add	r7, sp, #8
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	71fb      	strb	r3, [r7, #7]
=======
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b08a      	sub	sp, #40	; 0x28
 800cf72:	af02      	add	r7, sp, #8
 800cf74:	60f8      	str	r0, [r7, #12]
 800cf76:	60b9      	str	r1, [r7, #8]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< Updated upstream
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <xQueueGenericCreate+0x2c>
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	b672      	cpsid	i
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	b662      	cpsie	i
 800b8ce:	613b      	str	r3, [r7, #16]
 800b8d0:	e7fe      	b.n	800b8d0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	e004      	b.n	800b8e8 <xQueueGenericCreate+0x42>
=======
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10b      	bne.n	800cf9a <xQueueGenericCreate+0x2c>
 800cf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf86:	b672      	cpsid	i
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	b662      	cpsie	i
 800cf96:	613b      	str	r3, [r7, #16]
 800cf98:	e7fe      	b.n	800cf98 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d102      	bne.n	800cfa6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
 800cfa4:	e004      	b.n	800cfb0 <xQueueGenericCreate+0x42>
>>>>>>> Stashed changes
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	fb02 f303 	mul.w	r3, r2, r3
 800b8e6:	61fb      	str	r3, [r7, #28]
=======
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< Updated upstream
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	3348      	adds	r3, #72	; 0x48
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fde5 	bl	800d4bc <pvPortMalloc>
 800b8f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d011      	beq.n	800b91e <xQueueGenericCreate+0x78>
=======
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	3348      	adds	r3, #72	; 0x48
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f001 ff39 	bl	800ee2c <pvPortMalloc>
 800cfba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d011      	beq.n	800cfe6 <xQueueGenericCreate+0x78>
>>>>>>> Stashed changes
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	3348      	adds	r3, #72	; 0x48
 800b902:	617b      	str	r3, [r7, #20]
=======
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	3348      	adds	r3, #72	; 0x48
 800cfca:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< Updated upstream
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< Updated upstream
 800b90c:	79fa      	ldrb	r2, [r7, #7]
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4613      	mov	r3, r2
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 f805 	bl	800b928 <prvInitialiseNewQueue>
=======
 800cfd4:	79fa      	ldrb	r2, [r7, #7]
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	68b9      	ldr	r1, [r7, #8]
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 f805 	bl	800cff0 <prvInitialiseNewQueue>
>>>>>>> Stashed changes
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< Updated upstream
 800b91e:	69bb      	ldr	r3, [r7, #24]
	}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <prvInitialiseNewQueue>:
=======
 800cfe6:	69bb      	ldr	r3, [r7, #24]
	}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3720      	adds	r7, #32
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <prvInitialiseNewQueue>:
>>>>>>> Stashed changes

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< Updated upstream
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
 800b934:	70fb      	strb	r3, [r7, #3]
=======
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
 800cffc:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d103      	bne.n	800b944 <prvInitialiseNewQueue+0x1c>
=======
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d103      	bne.n	800d00c <prvInitialiseNewQueue+0x1c>
>>>>>>> Stashed changes
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< Updated upstream
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	e002      	b.n	800b94a <prvInitialiseNewQueue+0x22>
=======
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	69ba      	ldr	r2, [r7, #24]
 800d008:	601a      	str	r2, [r3, #0]
 800d00a:	e002      	b.n	800d012 <prvInitialiseNewQueue+0x22>
>>>>>>> Stashed changes
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< Updated upstream
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	601a      	str	r2, [r3, #0]
=======
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< Updated upstream
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b956:	2101      	movs	r1, #1
 800b958:	69b8      	ldr	r0, [r7, #24]
 800b95a:	f7ff febd 	bl	800b6d8 <xQueueGenericReset>
=======
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d01e:	2101      	movs	r1, #1
 800d020:	69b8      	ldr	r0, [r7, #24]
 800d022:	f7ff febd 	bl	800cda0 <xQueueGenericReset>
>>>>>>> Stashed changes
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< Updated upstream
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <prvInitialiseMutex>:
=======
 800d026:	bf00      	nop
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <prvInitialiseMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
<<<<<<< Updated upstream
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00e      	beq.n	800b992 <prvInitialiseMutex+0x2c>
=======
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00e      	beq.n	800d05a <prvInitialiseMutex+0x2c>
>>>>>>> Stashed changes
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
<<<<<<< Updated upstream
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	60da      	str	r2, [r3, #12]
=======
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< Updated upstream
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f837 	bl	800ba00 <xQueueGenericSend>
=======
 800d04e:	2300      	movs	r3, #0
 800d050:	2200      	movs	r2, #0
 800d052:	2100      	movs	r1, #0
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 f837 	bl	800d0c8 <xQueueGenericSend>
>>>>>>> Stashed changes
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
<<<<<<< Updated upstream
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <xQueueCreateMutex>:
=======
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <xQueueCreateMutex>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< Updated upstream
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b086      	sub	sp, #24
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b9ac:	79fb      	ldrb	r3, [r7, #7]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6939      	ldr	r1, [r7, #16]
 800b9b2:	6978      	ldr	r0, [r7, #20]
 800b9b4:	f7ff ff77 	bl	800b8a6 <xQueueGenericCreate>
 800b9b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff ffd3 	bl	800b966 <prvInitialiseMutex>

		return xNewQueue;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
	}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <xQueueCreateMutexStatic>:
=======
 800d062:	b580      	push	{r7, lr}
 800d064:	b086      	sub	sp, #24
 800d066:	af00      	add	r7, sp, #0
 800d068:	4603      	mov	r3, r0
 800d06a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d06c:	2301      	movs	r3, #1
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	2300      	movs	r3, #0
 800d072:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	461a      	mov	r2, r3
 800d078:	6939      	ldr	r1, [r7, #16]
 800d07a:	6978      	ldr	r0, [r7, #20]
 800d07c:	f7ff ff77 	bl	800cf6e <xQueueGenericCreate>
 800d080:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff ffd3 	bl	800d02e <prvInitialiseMutex>

		return xNewQueue;
 800d088:	68fb      	ldr	r3, [r7, #12]
	}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <xQueueCreateMutexStatic>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< Updated upstream
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af02      	add	r7, sp, #8
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	6039      	str	r1, [r7, #0]
 800b9d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	613b      	str	r3, [r7, #16]
=======
 800d092:	b580      	push	{r7, lr}
 800d094:	b088      	sub	sp, #32
 800d096:	af02      	add	r7, sp, #8
 800d098:	4603      	mov	r3, r0
 800d09a:	6039      	str	r1, [r7, #0]
 800d09c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	617b      	str	r3, [r7, #20]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
<<<<<<< Updated upstream
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	6939      	ldr	r1, [r7, #16]
 800b9e8:	6978      	ldr	r0, [r7, #20]
 800b9ea:	f7ff fedf 	bl	800b7ac <xQueueGenericCreateStatic>
 800b9ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f7ff ffb8 	bl	800b966 <prvInitialiseMutex>

		return xNewQueue;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
	}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <xQueueGenericSend>:
=======
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	6939      	ldr	r1, [r7, #16]
 800d0b0:	6978      	ldr	r0, [r7, #20]
 800d0b2:	f7ff fedf 	bl	800ce74 <xQueueGenericCreateStatic>
 800d0b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f7ff ffb8 	bl	800d02e <prvInitialiseMutex>

		return xNewQueue;
 800d0be:	68fb      	ldr	r3, [r7, #12]
	}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <xQueueGenericSend>:
>>>>>>> Stashed changes

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08e      	sub	sp, #56	; 0x38
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10b      	bne.n	800ba34 <xQueueGenericSend+0x34>
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	b672      	cpsid	i
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	b662      	cpsie	i
 800ba30:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba32:	e7fe      	b.n	800ba32 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d103      	bne.n	800ba42 <xQueueGenericSend+0x42>
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <xQueueGenericSend+0x46>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e000      	b.n	800ba48 <xQueueGenericSend+0x48>
 800ba46:	2300      	movs	r3, #0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10b      	bne.n	800ba64 <xQueueGenericSend+0x64>
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	b672      	cpsid	i
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	b662      	cpsie	i
 800ba60:	627b      	str	r3, [r7, #36]	; 0x24
 800ba62:	e7fe      	b.n	800ba62 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d103      	bne.n	800ba72 <xQueueGenericSend+0x72>
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <xQueueGenericSend+0x76>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e000      	b.n	800ba78 <xQueueGenericSend+0x78>
 800ba76:	2300      	movs	r3, #0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <xQueueGenericSend+0x94>
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	623b      	str	r3, [r7, #32]
 800ba92:	e7fe      	b.n	800ba92 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba94:	f001 f9dc 	bl	800ce50 <xTaskGetSchedulerState>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d102      	bne.n	800baa4 <xQueueGenericSend+0xa4>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <xQueueGenericSend+0xa8>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <xQueueGenericSend+0xaa>
 800baa8:	2300      	movs	r3, #0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10b      	bne.n	800bac6 <xQueueGenericSend+0xc6>
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	b672      	cpsid	i
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	b662      	cpsie	i
 800bac2:	61fb      	str	r3, [r7, #28]
 800bac4:	e7fe      	b.n	800bac4 <xQueueGenericSend+0xc4>
=======
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08e      	sub	sp, #56	; 0x38
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10b      	bne.n	800d0fc <xQueueGenericSend+0x34>
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	b672      	cpsid	i
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	b662      	cpsie	i
 800d0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0fa:	e7fe      	b.n	800d0fa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d103      	bne.n	800d10a <xQueueGenericSend+0x42>
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	2b00      	cmp	r3, #0
 800d108:	d101      	bne.n	800d10e <xQueueGenericSend+0x46>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <xQueueGenericSend+0x48>
 800d10e:	2300      	movs	r3, #0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <xQueueGenericSend+0x64>
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	b672      	cpsid	i
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	b662      	cpsie	i
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
 800d12a:	e7fe      	b.n	800d12a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d103      	bne.n	800d13a <xQueueGenericSend+0x72>
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d136:	2b01      	cmp	r3, #1
 800d138:	d101      	bne.n	800d13e <xQueueGenericSend+0x76>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <xQueueGenericSend+0x78>
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10b      	bne.n	800d15c <xQueueGenericSend+0x94>
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	b672      	cpsid	i
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	b662      	cpsie	i
 800d158:	623b      	str	r3, [r7, #32]
 800d15a:	e7fe      	b.n	800d15a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d15c:	f001 f9fc 	bl	800e558 <xTaskGetSchedulerState>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <xQueueGenericSend+0xa4>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <xQueueGenericSend+0xa8>
 800d16c:	2301      	movs	r3, #1
 800d16e:	e000      	b.n	800d172 <xQueueGenericSend+0xaa>
 800d170:	2300      	movs	r3, #0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <xQueueGenericSend+0xc6>
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	b672      	cpsid	i
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	b662      	cpsie	i
 800d18a:	61fb      	str	r3, [r7, #28]
 800d18c:	e7fe      	b.n	800d18c <xQueueGenericSend+0xc4>
>>>>>>> Stashed changes
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800bac6:	f001 fbd7 	bl	800d278 <vPortEnterCritical>
=======
 800d18e:	f001 fd2b 	bl	800ebe8 <vPortEnterCritical>
>>>>>>> Stashed changes
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< Updated upstream
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d302      	bcc.n	800badc <xQueueGenericSend+0xdc>
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d129      	bne.n	800bb30 <xQueueGenericSend+0x130>
=======
 800d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d302      	bcc.n	800d1a4 <xQueueGenericSend+0xdc>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d129      	bne.n	800d1f8 <xQueueGenericSend+0x130>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae2:	f000 fa0d 	bl	800bf00 <prvCopyDataToQueue>
 800bae6:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	68b9      	ldr	r1, [r7, #8]
 800d1a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1aa:	f000 fa53 	bl	800d654 <prvCopyDataToQueue>
 800d1ae:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> Stashed changes

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	2b00      	cmp	r3, #0
 800baee:	d010      	beq.n	800bb12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	3324      	adds	r3, #36	; 0x24
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 ffeb 	bl	800cad0 <xTaskRemoveFromEventList>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d013      	beq.n	800bb28 <xQueueGenericSend+0x128>
=======
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d010      	beq.n	800d1da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	3324      	adds	r3, #36	; 0x24
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f001 f80b 	bl	800e1d8 <xTaskRemoveFromEventList>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d013      	beq.n	800d1f0 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800bb00:	4b3f      	ldr	r3, [pc, #252]	; (800bc00 <xQueueGenericSend+0x200>)
 800bb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb06:	601a      	str	r2, [r3, #0]
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	e00a      	b.n	800bb28 <xQueueGenericSend+0x128>
=======
 800d1c8:	4b3f      	ldr	r3, [pc, #252]	; (800d2c8 <xQueueGenericSend+0x200>)
 800d1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ce:	601a      	str	r2, [r3, #0]
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	e00a      	b.n	800d1f0 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< Updated upstream
 800bb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d007      	beq.n	800bb28 <xQueueGenericSend+0x128>
=======
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <xQueueGenericSend+0x128>
>>>>>>> Stashed changes
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< Updated upstream
 800bb18:	4b39      	ldr	r3, [pc, #228]	; (800bc00 <xQueueGenericSend+0x200>)
 800bb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	f3bf 8f6f 	isb	sy
=======
 800d1e0:	4b39      	ldr	r3, [pc, #228]	; (800d2c8 <xQueueGenericSend+0x200>)
 800d1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800bb28:	f001 fbd8 	bl	800d2dc <vPortExitCritical>
				return pdPASS;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e063      	b.n	800bbf8 <xQueueGenericSend+0x1f8>
=======
 800d1f0:	f001 fd2c 	bl	800ec4c <vPortExitCritical>
				return pdPASS;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e063      	b.n	800d2c0 <xQueueGenericSend+0x1f8>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <xQueueGenericSend+0x13e>
=======
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d103      	bne.n	800d206 <xQueueGenericSend+0x13e>
>>>>>>> Stashed changes
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800bb36:	f001 fbd1 	bl	800d2dc <vPortExitCritical>
=======
 800d1fe:	f001 fd25 	bl	800ec4c <vPortExitCritical>
>>>>>>> Stashed changes

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< Updated upstream
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e05c      	b.n	800bbf8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <xQueueGenericSend+0x152>
=======
 800d202:	2300      	movs	r3, #0
 800d204:	e05c      	b.n	800d2c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d106      	bne.n	800d21a <xQueueGenericSend+0x152>
>>>>>>> Stashed changes
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800bb44:	f107 0314 	add.w	r3, r7, #20
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 f825 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800d20c:	f107 0314 	add.w	r3, r7, #20
 800d210:	4618      	mov	r0, r3
 800d212:	f001 f845 	bl	800e2a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d216:	2301      	movs	r3, #1
 800d218:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800bb52:	f001 fbc3 	bl	800d2dc <vPortExitCritical>
=======
 800d21a:	f001 fd17 	bl	800ec4c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800bb56:	f000 fd9d 	bl	800c694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb5a:	f001 fb8d 	bl	800d278 <vPortEnterCritical>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb64:	b25b      	sxtb	r3, r3
 800bb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6a:	d103      	bne.n	800bb74 <xQueueGenericSend+0x174>
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb7a:	b25b      	sxtb	r3, r3
 800bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb80:	d103      	bne.n	800bb8a <xQueueGenericSend+0x18a>
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb8a:	f001 fba7 	bl	800d2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb8e:	1d3a      	adds	r2, r7, #4
 800bb90:	f107 0314 	add.w	r3, r7, #20
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f001 f814 	bl	800cbc4 <xTaskCheckForTimeOut>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d124      	bne.n	800bbec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba4:	f000 faa4 	bl	800c0f0 <prvIsQueueFull>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d018      	beq.n	800bbe0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	3310      	adds	r3, #16
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f000 ff64 	bl	800ca84 <vTaskPlaceOnEventList>
=======
 800d21e:	f000 fdbd 	bl	800dd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d222:	f001 fce1 	bl	800ebe8 <vPortEnterCritical>
 800d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d22c:	b25b      	sxtb	r3, r3
 800d22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d232:	d103      	bne.n	800d23c <xQueueGenericSend+0x174>
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d242:	b25b      	sxtb	r3, r3
 800d244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d248:	d103      	bne.n	800d252 <xQueueGenericSend+0x18a>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d252:	f001 fcfb 	bl	800ec4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d256:	1d3a      	adds	r2, r7, #4
 800d258:	f107 0314 	add.w	r3, r7, #20
 800d25c:	4611      	mov	r1, r2
 800d25e:	4618      	mov	r0, r3
 800d260:	f001 f834 	bl	800e2cc <xTaskCheckForTimeOut>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d124      	bne.n	800d2b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d26c:	f000 fac4 	bl	800d7f8 <prvIsQueueFull>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d018      	beq.n	800d2a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	3310      	adds	r3, #16
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 ff84 	bl	800e18c <vTaskPlaceOnEventList>
>>>>>>> Stashed changes
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800bbbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbbe:	f000 fa2f 	bl	800c020 <prvUnlockQueue>
=======
 800d284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d286:	f000 fa4f 	bl	800d728 <prvUnlockQueue>
>>>>>>> Stashed changes
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< Updated upstream
 800bbc2:	f000 fd75 	bl	800c6b0 <xTaskResumeAll>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f47f af7c 	bne.w	800bac6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <xQueueGenericSend+0x200>)
 800bbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	e772      	b.n	800bac6 <xQueueGenericSend+0xc6>
=======
 800d28a:	f000 fd95 	bl	800ddb8 <xTaskResumeAll>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	f47f af7c 	bne.w	800d18e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <xQueueGenericSend+0x200>)
 800d298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	e772      	b.n	800d18e <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800bbe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbe2:	f000 fa1d 	bl	800c020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbe6:	f000 fd63 	bl	800c6b0 <xTaskResumeAll>
 800bbea:	e76c      	b.n	800bac6 <xQueueGenericSend+0xc6>
=======
 800d2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2aa:	f000 fa3d 	bl	800d728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ae:	f000 fd83 	bl	800ddb8 <xTaskResumeAll>
 800d2b2:	e76c      	b.n	800d18e <xQueueGenericSend+0xc6>
>>>>>>> Stashed changes
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800bbec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbee:	f000 fa17 	bl	800c020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbf2:	f000 fd5d 	bl	800c6b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3738      	adds	r7, #56	; 0x38
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	e000ed04 	.word	0xe000ed04

0800bc04 <xQueueGenericSendFromISR>:
=======
 800d2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2b6:	f000 fa37 	bl	800d728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2ba:	f000 fd7d 	bl	800ddb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3738      	adds	r7, #56	; 0x38
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <xQueueGenericSendFromISR>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< Updated upstream
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10b      	bne.n	800bc34 <xQueueGenericSendFromISR+0x30>
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	b672      	cpsid	i
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	b662      	cpsie	i
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
 800bc32:	e7fe      	b.n	800bc32 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d103      	bne.n	800bc42 <xQueueGenericSendFromISR+0x3e>
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <xQueueGenericSendFromISR+0x42>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e000      	b.n	800bc48 <xQueueGenericSendFromISR+0x44>
 800bc46:	2300      	movs	r3, #0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10b      	bne.n	800bc64 <xQueueGenericSendFromISR+0x60>
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	b672      	cpsid	i
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	b662      	cpsie	i
 800bc60:	623b      	str	r3, [r7, #32]
 800bc62:	e7fe      	b.n	800bc62 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d103      	bne.n	800bc72 <xQueueGenericSendFromISR+0x6e>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <xQueueGenericSendFromISR+0x72>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <xQueueGenericSendFromISR+0x74>
 800bc76:	2300      	movs	r3, #0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10b      	bne.n	800bc94 <xQueueGenericSendFromISR+0x90>
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	b672      	cpsid	i
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	b662      	cpsie	i
 800bc90:	61fb      	str	r3, [r7, #28]
 800bc92:	e7fe      	b.n	800bc92 <xQueueGenericSendFromISR+0x8e>
=======
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08e      	sub	sp, #56	; 0x38
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
 800d2d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10b      	bne.n	800d2fc <xQueueGenericSendFromISR+0x30>
 800d2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e8:	b672      	cpsid	i
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	b662      	cpsie	i
 800d2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d2fa:	e7fe      	b.n	800d2fa <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d103      	bne.n	800d30a <xQueueGenericSendFromISR+0x3e>
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <xQueueGenericSendFromISR+0x42>
 800d30a:	2301      	movs	r3, #1
 800d30c:	e000      	b.n	800d310 <xQueueGenericSendFromISR+0x44>
 800d30e:	2300      	movs	r3, #0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10b      	bne.n	800d32c <xQueueGenericSendFromISR+0x60>
 800d314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d318:	b672      	cpsid	i
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	b662      	cpsie	i
 800d328:	623b      	str	r3, [r7, #32]
 800d32a:	e7fe      	b.n	800d32a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d103      	bne.n	800d33a <xQueueGenericSendFromISR+0x6e>
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d336:	2b01      	cmp	r3, #1
 800d338:	d101      	bne.n	800d33e <xQueueGenericSendFromISR+0x72>
 800d33a:	2301      	movs	r3, #1
 800d33c:	e000      	b.n	800d340 <xQueueGenericSendFromISR+0x74>
 800d33e:	2300      	movs	r3, #0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10b      	bne.n	800d35c <xQueueGenericSendFromISR+0x90>
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	b672      	cpsid	i
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	b662      	cpsie	i
 800d358:	61fb      	str	r3, [r7, #28]
 800d35a:	e7fe      	b.n	800d35a <xQueueGenericSendFromISR+0x8e>
>>>>>>> Stashed changes
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< Updated upstream
 800bc94:	f001 fbd0 	bl	800d438 <vPortValidateInterruptPriority>
=======
 800d35c:	f001 fd24 	bl	800eda8 <vPortValidateInterruptPriority>
>>>>>>> Stashed changes

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< Updated upstream
 800bc98:	f3ef 8211 	mrs	r2, BASEPRI
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	b672      	cpsid	i
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	b662      	cpsie	i
 800bcb0:	61ba      	str	r2, [r7, #24]
 800bcb2:	617b      	str	r3, [r7, #20]
=======
 800d360:	f3ef 8211 	mrs	r2, BASEPRI
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	b672      	cpsid	i
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	b662      	cpsie	i
 800d378:	61ba      	str	r2, [r7, #24]
 800d37a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< Updated upstream
 800bcb4:	69bb      	ldr	r3, [r7, #24]
=======
 800d37c:	69bb      	ldr	r3, [r7, #24]
>>>>>>> Stashed changes
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< Updated upstream
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d302      	bcc.n	800bcca <xQueueGenericSendFromISR+0xc6>
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d12c      	bne.n	800bd24 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 800d37e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d388:	429a      	cmp	r2, r3
 800d38a:	d302      	bcc.n	800d392 <xQueueGenericSendFromISR+0xc6>
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d12c      	bne.n	800d3ec <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> Stashed changes
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< Updated upstream
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcda:	f000 f911 	bl	800bf00 <prvCopyDataToQueue>
=======
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3a2:	f000 f957 	bl	800d654 <prvCopyDataToQueue>
>>>>>>> Stashed changes

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< Updated upstream
 800bcde:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce6:	d112      	bne.n	800bd0e <xQueueGenericSendFromISR+0x10a>
=======
 800d3a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ae:	d112      	bne.n	800d3d6 <xQueueGenericSendFromISR+0x10a>
>>>>>>> Stashed changes
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d016      	beq.n	800bd1e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	3324      	adds	r3, #36	; 0x24
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 feeb 	bl	800cad0 <xTaskRemoveFromEventList>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00e      	beq.n	800bd1e <xQueueGenericSendFromISR+0x11a>
=======
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d016      	beq.n	800d3e6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	3324      	adds	r3, #36	; 0x24
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 ff0b 	bl	800e1d8 <xTaskRemoveFromEventList>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00e      	beq.n	800d3e6 <xQueueGenericSendFromISR+0x11a>
>>>>>>> Stashed changes
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< Updated upstream
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00b      	beq.n	800bd1e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	e007      	b.n	800bd1e <xQueueGenericSendFromISR+0x11a>
=======
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	e007      	b.n	800d3e6 <xQueueGenericSendFromISR+0x11a>
>>>>>>> Stashed changes
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< Updated upstream
 800bd0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd12:	3301      	adds	r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	b25a      	sxtb	r2, r3
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bd22:	e001      	b.n	800bd28 <xQueueGenericSendFromISR+0x124>
=======
 800d3d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3da:	3301      	adds	r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	b25a      	sxtb	r2, r3
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d3ea:	e001      	b.n	800d3f0 <xQueueGenericSendFromISR+0x124>
>>>>>>> Stashed changes
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< Updated upstream
 800bd24:	2300      	movs	r3, #0
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
 800bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2a:	613b      	str	r3, [r7, #16]
=======
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< Updated upstream
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f383 8811 	msr	BASEPRI, r3
=======
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< Updated upstream
 800bd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3738      	adds	r7, #56	; 0x38
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <xQueueReceive>:
	return xReturn;
=======
 800d3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3738      	adds	r7, #56	; 0x38
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <xQueueSemaphoreTake>:
	} /*lint -restore */
>>>>>>> Stashed changes
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08c      	sub	sp, #48	; 0x30
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800d404:	b580      	push	{r7, lr}
 800d406:	b08e      	sub	sp, #56	; 0x38
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d40e:	2300      	movs	r3, #0
 800d410:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d416:	2300      	movs	r3, #0
 800d418:	633b      	str	r3, [r7, #48]	; 0x30
#endif
>>>>>>> Stashed changes

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< Updated upstream
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10b      	bne.n	800bd6e <xQueueReceive+0x32>
	__asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5a:	b672      	cpsid	i
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	b662      	cpsie	i
 800bd6a:	623b      	str	r3, [r7, #32]
 800bd6c:	e7fe      	b.n	800bd6c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <xQueueReceive+0x40>
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <xQueueReceive+0x44>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <xQueueReceive+0x46>
 800bd80:	2300      	movs	r3, #0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10b      	bne.n	800bd9e <xQueueReceive+0x62>
 800bd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8a:	b672      	cpsid	i
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	b662      	cpsie	i
 800bd9a:	61fb      	str	r3, [r7, #28]
 800bd9c:	e7fe      	b.n	800bd9c <xQueueReceive+0x60>
=======
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d10b      	bne.n	800d438 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d424:	b672      	cpsid	i
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	b662      	cpsie	i
 800d434:	623b      	str	r3, [r7, #32]
 800d436:	e7fe      	b.n	800d436 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <xQueueSemaphoreTake+0x54>
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	b672      	cpsid	i
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	b662      	cpsie	i
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	e7fe      	b.n	800d456 <xQueueSemaphoreTake+0x52>
>>>>>>> Stashed changes

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< Updated upstream
 800bd9e:	f001 f857 	bl	800ce50 <xTaskGetSchedulerState>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <xQueueReceive+0x72>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <xQueueReceive+0x76>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <xQueueReceive+0x78>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10b      	bne.n	800bdd0 <xQueueReceive+0x94>
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	b672      	cpsid	i
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	b662      	cpsie	i
 800bdcc:	61bb      	str	r3, [r7, #24]
 800bdce:	e7fe      	b.n	800bdce <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdd0:	f001 fa52 	bl	800d278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01f      	beq.n	800be20 <xQueueReceive+0xe4>
=======
 800d458:	f001 f87e 	bl	800e558 <xTaskGetSchedulerState>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <xQueueSemaphoreTake+0x64>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <xQueueSemaphoreTake+0x68>
 800d468:	2301      	movs	r3, #1
 800d46a:	e000      	b.n	800d46e <xQueueSemaphoreTake+0x6a>
 800d46c:	2300      	movs	r3, #0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10b      	bne.n	800d48a <xQueueSemaphoreTake+0x86>
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	b672      	cpsid	i
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	b662      	cpsie	i
 800d486:	61bb      	str	r3, [r7, #24]
 800d488:	e7fe      	b.n	800d488 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d48a:	f001 fbad 	bl	800ebe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	2b00      	cmp	r3, #0
 800d498:	d024      	beq.n	800d4e4 <xQueueSemaphoreTake+0xe0>
>>>>>>> Stashed changes
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde4:	f000 f8f6 	bl	800bfd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
<<<<<<< Updated upstream
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	1e5a      	subs	r2, r3, #1
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00f      	beq.n	800be18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fe67 	bl	800cad0 <xTaskRemoveFromEventList>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d007      	beq.n	800be18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be08:	4b3c      	ldr	r3, [pc, #240]	; (800befc <xQueueReceive+0x1c0>)
 800be0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be0e:	601a      	str	r2, [r3, #0]
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	f3bf 8f6f 	isb	sy
=======

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	1e5a      	subs	r2, r3, #1
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d104      	bne.n	800d4b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d4aa:	f001 fa17 	bl	800e8dc <pvTaskIncrementMutexHeldCount>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00f      	beq.n	800d4dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	3310      	adds	r3, #16
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 fe89 	bl	800e1d8 <xTaskRemoveFromEventList>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d007      	beq.n	800d4dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4cc:	4b54      	ldr	r3, [pc, #336]	; (800d620 <xQueueSemaphoreTake+0x21c>)
 800d4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800be18:	f001 fa60 	bl	800d2dc <vPortExitCritical>
				return pdPASS;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e069      	b.n	800bef4 <xQueueReceive+0x1b8>
=======
 800d4dc:	f001 fbb6 	bl	800ec4c <vPortExitCritical>
				return pdPASS;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e098      	b.n	800d616 <xQueueSemaphoreTake+0x212>
>>>>>>> Stashed changes
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< Updated upstream
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d103      	bne.n	800be2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be26:	f001 fa59 	bl	800d2dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e062      	b.n	800bef4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d106      	bne.n	800be42 <xQueueReceive+0x106>
=======
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d112      	bne.n	800d510 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00b      	beq.n	800d508 <xQueueSemaphoreTake+0x104>
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	b672      	cpsid	i
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	b662      	cpsie	i
 800d504:	617b      	str	r3, [r7, #20]
 800d506:	e7fe      	b.n	800d506 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d508:	f001 fba0 	bl	800ec4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d50c:	2300      	movs	r3, #0
 800d50e:	e082      	b.n	800d616 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d512:	2b00      	cmp	r3, #0
 800d514:	d106      	bne.n	800d524 <xQueueSemaphoreTake+0x120>
>>>>>>> Stashed changes
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< Updated upstream
 800be34:	f107 0310 	add.w	r3, r7, #16
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fead 	bl	800cb98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be3e:	2301      	movs	r3, #1
 800be40:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800d516:	f107 030c 	add.w	r3, r7, #12
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fec0 	bl	800e2a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d520:	2301      	movs	r3, #1
 800d522:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800be42:	f001 fa4b 	bl	800d2dc <vPortExitCritical>
=======
 800d524:	f001 fb92 	bl	800ec4c <vPortExitCritical>
>>>>>>> Stashed changes

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< Updated upstream
 800be46:	f000 fc25 	bl	800c694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be4a:	f001 fa15 	bl	800d278 <vPortEnterCritical>
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be54:	b25b      	sxtb	r3, r3
 800be56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5a:	d103      	bne.n	800be64 <xQueueReceive+0x128>
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be70:	d103      	bne.n	800be7a <xQueueReceive+0x13e>
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be7a:	f001 fa2f 	bl	800d2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be7e:	1d3a      	adds	r2, r7, #4
 800be80:	f107 0310 	add.w	r3, r7, #16
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fe9c 	bl	800cbc4 <xTaskCheckForTimeOut>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d123      	bne.n	800beda <xQueueReceive+0x19e>
=======
 800d528:	f000 fc38 	bl	800dd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d52c:	f001 fb5c 	bl	800ebe8 <vPortEnterCritical>
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d536:	b25b      	sxtb	r3, r3
 800d538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53c:	d103      	bne.n	800d546 <xQueueSemaphoreTake+0x142>
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d54c:	b25b      	sxtb	r3, r3
 800d54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d552:	d103      	bne.n	800d55c <xQueueSemaphoreTake+0x158>
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	2200      	movs	r2, #0
 800d558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d55c:	f001 fb76 	bl	800ec4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d560:	463a      	mov	r2, r7
 800d562:	f107 030c 	add.w	r3, r7, #12
 800d566:	4611      	mov	r1, r2
 800d568:	4618      	mov	r0, r3
 800d56a:	f000 feaf 	bl	800e2cc <xTaskCheckForTimeOut>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d132      	bne.n	800d5da <xQueueSemaphoreTake+0x1d6>
>>>>>>> Stashed changes
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800be92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be94:	f000 f916 	bl	800c0c4 <prvIsQueueEmpty>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d017      	beq.n	800bece <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	3324      	adds	r3, #36	; 0x24
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	4611      	mov	r1, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fdec 	bl	800ca84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beae:	f000 f8b7 	bl	800c020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beb2:	f000 fbfd 	bl	800c6b0 <xTaskResumeAll>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d189      	bne.n	800bdd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <xQueueReceive+0x1c0>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	e780      	b.n	800bdd0 <xQueueReceive+0x94>
=======
 800d574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d576:	f000 f929 	bl	800d7cc <prvIsQueueEmpty>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d026      	beq.n	800d5ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d109      	bne.n	800d59c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d588:	f001 fb2e 	bl	800ebe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	4618      	mov	r0, r3
 800d592:	f000 ffff 	bl	800e594 <xTaskPriorityInherit>
 800d596:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d598:	f001 fb58 	bl	800ec4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59e:	3324      	adds	r3, #36	; 0x24
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fdf1 	bl	800e18c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d5aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5ac:	f000 f8bc 	bl	800d728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d5b0:	f000 fc02 	bl	800ddb8 <xTaskResumeAll>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f47f af67 	bne.w	800d48a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d5bc:	4b18      	ldr	r3, [pc, #96]	; (800d620 <xQueueSemaphoreTake+0x21c>)
 800d5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	e75d      	b.n	800d48a <xQueueSemaphoreTake+0x86>
>>>>>>> Stashed changes
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800bece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed0:	f000 f8a6 	bl	800c020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bed4:	f000 fbec 	bl	800c6b0 <xTaskResumeAll>
 800bed8:	e77a      	b.n	800bdd0 <xQueueReceive+0x94>
=======
 800d5ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5d0:	f000 f8aa 	bl	800d728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5d4:	f000 fbf0 	bl	800ddb8 <xTaskResumeAll>
 800d5d8:	e757      	b.n	800d48a <xQueueSemaphoreTake+0x86>
			}
>>>>>>> Stashed changes
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< Updated upstream
 800beda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bedc:	f000 f8a0 	bl	800c020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bee0:	f000 fbe6 	bl	800c6b0 <xTaskResumeAll>
=======
 800d5da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5dc:	f000 f8a4 	bl	800d728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5e0:	f000 fbea 	bl	800ddb8 <xTaskResumeAll>
>>>>>>> Stashed changes

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< Updated upstream
 800bee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee6:	f000 f8ed 	bl	800c0c4 <prvIsQueueEmpty>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	f43f af6f 	beq.w	800bdd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bef2:	2300      	movs	r3, #0
=======
 800d5e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5e6:	f000 f8f1 	bl	800d7cc <prvIsQueueEmpty>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f43f af4c 	beq.w	800d48a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00d      	beq.n	800d614 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d5f8:	f001 faf6 	bl	800ebe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d5fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5fe:	f000 f811 	bl	800d624 <prvGetDisinheritPriorityAfterTimeout>
 800d602:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d60a:	4618      	mov	r0, r3
 800d60c:	f001 f8ca 	bl	800e7a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d610:	f001 fb1c 	bl	800ec4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d614:	2300      	movs	r3, #0
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< Updated upstream
 800bef4:	4618      	mov	r0, r3
 800bef6:	3730      	adds	r7, #48	; 0x30
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <prvCopyDataToQueue>:
=======
 800d616:	4618      	mov	r0, r3
 800d618:	3738      	adds	r7, #56	; 0x38
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	e000ed04 	.word	0xe000ed04

0800d624 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d630:	2b00      	cmp	r3, #0
 800d632:	d006      	beq.n	800d642 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f1c3 0307 	rsb	r3, r3, #7
 800d63e:	60fb      	str	r3, [r7, #12]
 800d640:	e001      	b.n	800d646 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d646:	68fb      	ldr	r3, [r7, #12]
	}
 800d648:	4618      	mov	r0, r3
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <prvCopyDataToQueue>:
>>>>>>> Stashed changes

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< Updated upstream
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	617b      	str	r3, [r7, #20]
=======
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d660:	2300      	movs	r3, #0
 800d662:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< Updated upstream
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10d      	bne.n	800bf3a <prvCopyDataToQueue+0x3a>
=======
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10d      	bne.n	800d68e <prvCopyDataToQueue+0x3a>
>>>>>>> Stashed changes
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< Updated upstream
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d14d      	bne.n	800bfc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ffae 	bl	800ce8c <xTaskPriorityDisinherit>
 800bf30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	609a      	str	r2, [r3, #8]
 800bf38:	e043      	b.n	800bfc2 <prvCopyDataToQueue+0xc2>
=======
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d14d      	bne.n	800d716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 f808 	bl	800e694 <xTaskPriorityDisinherit>
 800d684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	609a      	str	r2, [r3, #8]
 800d68c:	e043      	b.n	800d716 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< Updated upstream
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d119      	bne.n	800bf74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6858      	ldr	r0, [r3, #4]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf48:	461a      	mov	r2, r3
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	f001 fcc4 	bl	800d8d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf58:	441a      	add	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d32b      	bcc.n	800bfc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	605a      	str	r2, [r3, #4]
 800bf72:	e026      	b.n	800bfc2 <prvCopyDataToQueue+0xc2>
=======
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d119      	bne.n	800d6c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6858      	ldr	r0, [r3, #4]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69c:	461a      	mov	r2, r3
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	f001 fdd2 	bl	800f248 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ac:	441a      	add	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d32b      	bcc.n	800d716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	605a      	str	r2, [r3, #4]
 800d6c6:	e026      	b.n	800d716 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< Updated upstream
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68d8      	ldr	r0, [r3, #12]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	68b9      	ldr	r1, [r7, #8]
 800bf80:	f001 fcaa 	bl	800d8d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	425b      	negs	r3, r3
 800bf8e:	441a      	add	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68da      	ldr	r2, [r3, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d207      	bcs.n	800bfb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	689a      	ldr	r2, [r3, #8]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa8:	425b      	negs	r3, r3
 800bfaa:	441a      	add	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	60da      	str	r2, [r3, #12]
=======
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	68d8      	ldr	r0, [r3, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	f001 fdb8 	bl	800f248 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	68da      	ldr	r2, [r3, #12]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e0:	425b      	negs	r3, r3
 800d6e2:	441a      	add	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d207      	bcs.n	800d704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	441a      	add	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< Updated upstream
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d105      	bne.n	800bfc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <prvCopyDataToQueue+0xc2>
=======
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b02      	cmp	r3, #2
 800d708:	d105      	bne.n	800d716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <prvCopyDataToQueue+0xc2>
>>>>>>> Stashed changes
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< Updated upstream
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	613b      	str	r3, [r7, #16]
=======
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	3b01      	subs	r3, #1
 800d714:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< Updated upstream
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfca:	697b      	ldr	r3, [r7, #20]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d018      	beq.n	800c018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68da      	ldr	r2, [r3, #12]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	441a      	add	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68da      	ldr	r2, [r3, #12]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d303      	bcc.n	800c008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68d9      	ldr	r1, [r3, #12]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c010:	461a      	mov	r2, r3
 800c012:	6838      	ldr	r0, [r7, #0]
 800c014:	f001 fc60 	bl	800d8d8 <memcpy>
=======
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	1c5a      	adds	r2, r3, #1
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d71e:	697b      	ldr	r3, [r7, #20]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3718      	adds	r7, #24
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <prvUnlockQueue>:
>>>>>>> Stashed changes
	}
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< Updated upstream
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
=======
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800c028:	f001 f926 	bl	800d278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c034:	e011      	b.n	800c05a <prvUnlockQueue+0x3a>
=======
 800d730:	f001 fa5a 	bl	800ebe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d73a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d73c:	e011      	b.n	800d762 <prvUnlockQueue+0x3a>
>>>>>>> Stashed changes
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< Updated upstream
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d012      	beq.n	800c064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3324      	adds	r3, #36	; 0x24
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fd44 	bl	800cad0 <xTaskRemoveFromEventList>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <prvUnlockQueue+0x32>
=======
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	2b00      	cmp	r3, #0
 800d744:	d012      	beq.n	800d76c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	3324      	adds	r3, #36	; 0x24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f000 fd44 	bl	800e1d8 <xTaskRemoveFromEventList>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <prvUnlockQueue+0x32>
>>>>>>> Stashed changes
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< Updated upstream
 800c04e:	f000 fe1d 	bl	800cc8c <vTaskMissedYield>
=======
 800d756:	f000 fe1d 	bl	800e394 <vTaskMissedYield>
>>>>>>> Stashed changes
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< Updated upstream
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	3b01      	subs	r3, #1
 800c056:	b2db      	uxtb	r3, r3
 800c058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dce9      	bgt.n	800c036 <prvUnlockQueue+0x16>
 800c062:	e000      	b.n	800c066 <prvUnlockQueue+0x46>
					break;
 800c064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	22ff      	movs	r2, #255	; 0xff
 800c06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c06e:	f001 f935 	bl	800d2dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c072:	f001 f901 	bl	800d278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c07c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c07e:	e011      	b.n	800c0a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d012      	beq.n	800c0ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3310      	adds	r3, #16
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 fd1f 	bl	800cad0 <xTaskRemoveFromEventList>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c098:	f000 fdf8 	bl	800cc8c <vTaskMissedYield>
=======
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d766:	2b00      	cmp	r3, #0
 800d768:	dce9      	bgt.n	800d73e <prvUnlockQueue+0x16>
 800d76a:	e000      	b.n	800d76e <prvUnlockQueue+0x46>
					break;
 800d76c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	22ff      	movs	r2, #255	; 0xff
 800d772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d776:	f001 fa69 	bl	800ec4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d77a:	f001 fa35 	bl	800ebe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d786:	e011      	b.n	800d7ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d012      	beq.n	800d7b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	3310      	adds	r3, #16
 800d794:	4618      	mov	r0, r3
 800d796:	f000 fd1f 	bl	800e1d8 <xTaskRemoveFromEventList>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d7a0:	f000 fdf8 	bl	800e394 <vTaskMissedYield>
>>>>>>> Stashed changes
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< Updated upstream
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dce9      	bgt.n	800c080 <prvUnlockQueue+0x60>
 800c0ac:	e000      	b.n	800c0b0 <prvUnlockQueue+0x90>
=======
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d7ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	dce9      	bgt.n	800d788 <prvUnlockQueue+0x60>
 800d7b4:	e000      	b.n	800d7b8 <prvUnlockQueue+0x90>
>>>>>>> Stashed changes
			}
			else
			{
				break;
<<<<<<< Updated upstream
 800c0ae:	bf00      	nop
=======
 800d7b6:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< Updated upstream
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	22ff      	movs	r2, #255	; 0xff
 800c0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0b8:	f001 f910 	bl	800d2dc <vPortExitCritical>
}
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <prvIsQueueEmpty>:
=======
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	22ff      	movs	r2, #255	; 0xff
 800d7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7c0:	f001 fa44 	bl	800ec4c <vPortExitCritical>
}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <prvIsQueueEmpty>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0cc:	f001 f8d4 	bl	800d278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	e001      	b.n	800c0e2 <prvIsQueueEmpty+0x1e>
=======
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7d4:	f001 fa08 	bl	800ebe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e001      	b.n	800d7ea <prvIsQueueEmpty+0x1e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0e2:	f001 f8fb 	bl	800d2dc <vPortExitCritical>

	return xReturn;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <prvIsQueueFull>:
=======
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7ea:	f001 fa2f 	bl	800ec4c <vPortExitCritical>

	return xReturn;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <prvIsQueueFull>:
>>>>>>> Stashed changes
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< Updated upstream
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0f8:	f001 f8be 	bl	800d278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c104:	429a      	cmp	r2, r3
 800c106:	d102      	bne.n	800c10e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c108:	2301      	movs	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e001      	b.n	800c112 <prvIsQueueFull+0x22>
=======
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d800:	f001 f9f2 	bl	800ebe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d102      	bne.n	800d816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	e001      	b.n	800d81a <prvIsQueueFull+0x22>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< Updated upstream
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c112:	f001 f8e3 	bl	800d2dc <vPortExitCritical>

	return xReturn;
 800c116:	68fb      	ldr	r3, [r7, #12]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <xTaskCreateStatic>:
=======
 800d816:	2300      	movs	r3, #0
 800d818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d81a:	f001 fa17 	bl	800ec4c <vPortExitCritical>

	return xReturn;
 800d81e:	68fb      	ldr	r3, [r7, #12]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <xTaskCreateStatic>:
>>>>>>> Stashed changes
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< Updated upstream
 800c120:	b580      	push	{r7, lr}
 800c122:	b08e      	sub	sp, #56	; 0x38
 800c124:	af04      	add	r7, sp, #16
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
=======
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08e      	sub	sp, #56	; 0x38
 800d82c:	af04      	add	r7, sp, #16
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
 800d834:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< Updated upstream
 800c12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10b      	bne.n	800c14c <xTaskCreateStatic+0x2c>
 800c134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c138:	b672      	cpsid	i
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	b662      	cpsie	i
 800c148:	623b      	str	r3, [r7, #32]
 800c14a:	e7fe      	b.n	800c14a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10b      	bne.n	800c16a <xTaskCreateStatic+0x4a>
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	b672      	cpsid	i
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	b662      	cpsie	i
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	e7fe      	b.n	800c168 <xTaskCreateStatic+0x48>
=======
 800d836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10b      	bne.n	800d854 <xTaskCreateStatic+0x2c>
 800d83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d840:	b672      	cpsid	i
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	b662      	cpsie	i
 800d850:	623b      	str	r3, [r7, #32]
 800d852:	e7fe      	b.n	800d852 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10b      	bne.n	800d872 <xTaskCreateStatic+0x4a>
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	b672      	cpsid	i
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	b662      	cpsie	i
 800d86e:	61fb      	str	r3, [r7, #28]
 800d870:	e7fe      	b.n	800d870 <xTaskCreateStatic+0x48>
>>>>>>> Stashed changes
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< Updated upstream
 800c16a:	2358      	movs	r3, #88	; 0x58
 800c16c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b58      	cmp	r3, #88	; 0x58
 800c172:	d00b      	beq.n	800c18c <xTaskCreateStatic+0x6c>
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	b672      	cpsid	i
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	b662      	cpsie	i
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	e7fe      	b.n	800c18a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c18c:	693b      	ldr	r3, [r7, #16]
=======
 800d872:	2358      	movs	r3, #88	; 0x58
 800d874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b58      	cmp	r3, #88	; 0x58
 800d87a:	d00b      	beq.n	800d894 <xTaskCreateStatic+0x6c>
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	b672      	cpsid	i
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	b662      	cpsie	i
 800d890:	61bb      	str	r3, [r7, #24]
 800d892:	e7fe      	b.n	800d892 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d894:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< Updated upstream
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	2b00      	cmp	r3, #0
 800c192:	d01e      	beq.n	800c1d2 <xTaskCreateStatic+0xb2>
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	2b00      	cmp	r3, #0
 800c198:	d01b      	beq.n	800c1d2 <xTaskCreateStatic+0xb2>
=======
 800d896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d01e      	beq.n	800d8da <xTaskCreateStatic+0xb2>
 800d89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d01b      	beq.n	800d8da <xTaskCreateStatic+0xb2>
>>>>>>> Stashed changes
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< Updated upstream
 800c19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a2:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8aa:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
=======
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9303      	str	r3, [sp, #12]
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	9302      	str	r3, [sp, #8]
 800c1b4:	f107 0314 	add.w	r3, r7, #20
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f850 	bl	800c26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1cc:	f000 f8e0 	bl	800c390 <prvAddNewTaskToReadyList>
 800c1d0:	e001      	b.n	800c1d6 <xTaskCreateStatic+0xb6>
=======
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9303      	str	r3, [sp, #12]
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	9302      	str	r3, [sp, #8]
 800d8bc:	f107 0314 	add.w	r3, r7, #20
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	68b9      	ldr	r1, [r7, #8]
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 f850 	bl	800d972 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8d4:	f000 f8e0 	bl	800da98 <prvAddNewTaskToReadyList>
 800d8d8:	e001      	b.n	800d8de <xTaskCreateStatic+0xb6>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = NULL;
<<<<<<< Updated upstream
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1d6:	697b      	ldr	r3, [r7, #20]
	}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3728      	adds	r7, #40	; 0x28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <xTaskCreate>:
=======
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8de:	697b      	ldr	r3, [r7, #20]
	}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3728      	adds	r7, #40	; 0x28
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <xTaskCreate>:
>>>>>>> Stashed changes
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< Updated upstream
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b08c      	sub	sp, #48	; 0x30
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	603b      	str	r3, [r7, #0]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	80fb      	strh	r3, [r7, #6]
=======
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08c      	sub	sp, #48	; 0x30
 800d8ec:	af04      	add	r7, sp, #16
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< Updated upstream
 800c1f0:	88fb      	ldrh	r3, [r7, #6]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 f961 	bl	800d4bc <pvPortMalloc>
 800c1fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00e      	beq.n	800c220 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c202:	2058      	movs	r0, #88	; 0x58
 800c204:	f001 f95a 	bl	800d4bc <pvPortMalloc>
 800c208:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	631a      	str	r2, [r3, #48]	; 0x30
 800c216:	e005      	b.n	800c224 <xTaskCreate+0x44>
=======
 800d8f8:	88fb      	ldrh	r3, [r7, #6]
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f001 fa95 	bl	800ee2c <pvPortMalloc>
 800d902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00e      	beq.n	800d928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d90a:	2058      	movs	r0, #88	; 0x58
 800d90c:	f001 fa8e 	bl	800ee2c <pvPortMalloc>
 800d910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d003      	beq.n	800d920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	631a      	str	r2, [r3, #48]	; 0x30
 800d91e:	e005      	b.n	800d92c <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< Updated upstream
 800c218:	6978      	ldr	r0, [r7, #20]
 800c21a:	f001 fa1b 	bl	800d654 <vPortFree>
 800c21e:	e001      	b.n	800c224 <xTaskCreate+0x44>
=======
 800d920:	6978      	ldr	r0, [r7, #20]
 800d922:	f001 fb4f 	bl	800efc4 <vPortFree>
 800d926:	e001      	b.n	800d92c <xTaskCreate+0x44>
>>>>>>> Stashed changes
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< Updated upstream
 800c220:	2300      	movs	r3, #0
 800c222:	61fb      	str	r3, [r7, #28]
=======
 800d928:	2300      	movs	r3, #0
 800d92a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< Updated upstream
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d017      	beq.n	800c25a <xTaskCreate+0x7a>
=======
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d017      	beq.n	800d962 <xTaskCreate+0x7a>
>>>>>>> Stashed changes
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< Updated upstream
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
=======
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
>>>>>>> Stashed changes
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< Updated upstream
 800c232:	88fa      	ldrh	r2, [r7, #6]
 800c234:	2300      	movs	r3, #0
 800c236:	9303      	str	r3, [sp, #12]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	68b9      	ldr	r1, [r7, #8]
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f80e 	bl	800c26a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c24e:	69f8      	ldr	r0, [r7, #28]
 800c250:	f000 f89e 	bl	800c390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c254:	2301      	movs	r3, #1
 800c256:	61bb      	str	r3, [r7, #24]
 800c258:	e002      	b.n	800c260 <xTaskCreate+0x80>
=======
 800d93a:	88fa      	ldrh	r2, [r7, #6]
 800d93c:	2300      	movs	r3, #0
 800d93e:	9303      	str	r3, [sp, #12]
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	9302      	str	r3, [sp, #8]
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	9301      	str	r3, [sp, #4]
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 f80e 	bl	800d972 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d956:	69f8      	ldr	r0, [r7, #28]
 800d958:	f000 f89e 	bl	800da98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d95c:	2301      	movs	r3, #1
 800d95e:	61bb      	str	r3, [r7, #24]
 800d960:	e002      	b.n	800d968 <xTaskCreate+0x80>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< Updated upstream
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295
 800c25e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c260:	69bb      	ldr	r3, [r7, #24]
	}
 800c262:	4618      	mov	r0, r3
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <prvInitialiseNewTask>:
=======
 800d962:	f04f 33ff 	mov.w	r3, #4294967295
 800d966:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d968:	69bb      	ldr	r3, [r7, #24]
	}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3720      	adds	r7, #32
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <prvInitialiseNewTask>:
>>>>>>> Stashed changes
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< Updated upstream
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b088      	sub	sp, #32
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
 800c276:	603b      	str	r3, [r7, #0]
=======
 800d972:	b580      	push	{r7, lr}
 800d974:	b088      	sub	sp, #32
 800d976:	af00      	add	r7, sp, #0
 800d978:	60f8      	str	r0, [r7, #12]
 800d97a:	60b9      	str	r1, [r7, #8]
 800d97c:	607a      	str	r2, [r7, #4]
 800d97e:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< Updated upstream
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	461a      	mov	r2, r3
 800c282:	21a5      	movs	r1, #165	; 0xa5
 800c284:	f001 fb33 	bl	800d8ee <memset>
=======
 800d980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d982:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	461a      	mov	r2, r3
 800d98a:	21a5      	movs	r1, #165	; 0xa5
 800d98c:	f001 fc67 	bl	800f25e <memset>
>>>>>>> Stashed changes
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< Updated upstream
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c292:	440b      	add	r3, r1
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	f023 0307 	bic.w	r3, r3, #7
 800c2a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <prvInitialiseNewTask+0x5a>
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	b672      	cpsid	i
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	b662      	cpsie	i
 800c2c0:	617b      	str	r3, [r7, #20]
 800c2c2:	e7fe      	b.n	800c2c2 <prvInitialiseNewTask+0x58>
=======
 800d990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d994:	6879      	ldr	r1, [r7, #4]
 800d996:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d99a:	440b      	add	r3, r1
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	4413      	add	r3, r2
 800d9a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	f023 0307 	bic.w	r3, r3, #7
 800d9a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	f003 0307 	and.w	r3, r3, #7
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00b      	beq.n	800d9cc <prvInitialiseNewTask+0x5a>
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	b672      	cpsid	i
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	b662      	cpsie	i
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	e7fe      	b.n	800d9ca <prvInitialiseNewTask+0x58>
>>>>>>> Stashed changes
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< Updated upstream
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d01f      	beq.n	800c30a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61fb      	str	r3, [r7, #28]
 800c2ce:	e012      	b.n	800c2f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	7819      	ldrb	r1, [r3, #0]
 800c2d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4413      	add	r3, r2
 800c2de:	3334      	adds	r3, #52	; 0x34
 800c2e0:	460a      	mov	r2, r1
 800c2e2:	701a      	strb	r2, [r3, #0]
=======
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d01f      	beq.n	800da12 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	61fb      	str	r3, [r7, #28]
 800d9d6:	e012      	b.n	800d9fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9d8:	68ba      	ldr	r2, [r7, #8]
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	4413      	add	r3, r2
 800d9de:	7819      	ldrb	r1, [r3, #0]
 800d9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	3334      	adds	r3, #52	; 0x34
 800d9e8:	460a      	mov	r2, r1
 800d9ea:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< Updated upstream
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d006      	beq.n	800c2fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	61fb      	str	r3, [r7, #28]
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	2b0f      	cmp	r3, #15
 800c2fa:	d9e9      	bls.n	800c2d0 <prvInitialiseNewTask+0x66>
 800c2fc:	e000      	b.n	800c300 <prvInitialiseNewTask+0x96>
			{
				break;
 800c2fe:	bf00      	nop
=======
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d006      	beq.n	800da06 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	61fb      	str	r3, [r7, #28]
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	2b0f      	cmp	r3, #15
 800da02:	d9e9      	bls.n	800d9d8 <prvInitialiseNewTask+0x66>
 800da04:	e000      	b.n	800da08 <prvInitialiseNewTask+0x96>
			{
				break;
 800da06:	bf00      	nop
>>>>>>> Stashed changes
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< Updated upstream
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c308:	e003      	b.n	800c312 <prvInitialiseNewTask+0xa8>
=======
 800da08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da10:	e003      	b.n	800da1a <prvInitialiseNewTask+0xa8>
>>>>>>> Stashed changes
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< Updated upstream
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< Updated upstream
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	2b06      	cmp	r3, #6
 800c316:	d901      	bls.n	800c31c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c318:	2306      	movs	r3, #6
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800da1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1c:	2b06      	cmp	r3, #6
 800da1e:	d901      	bls.n	800da24 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da20:	2306      	movs	r3, #6
 800da22:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< Updated upstream
 800c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c320:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c326:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	2200      	movs	r2, #0
 800c32c:	649a      	str	r2, [r3, #72]	; 0x48
=======
 800da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	2200      	movs	r2, #0
 800da34:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> Stashed changes
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	3304      	adds	r3, #4
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff f93c 	bl	800b5b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	3318      	adds	r3, #24
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff f937 	bl	800b5b0 <vListInitialiseItem>
=======
 800da36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da38:	3304      	adds	r3, #4
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff f91c 	bl	800cc78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	3318      	adds	r3, #24
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff f917 	bl	800cc78 <vListInitialiseItem>
>>>>>>> Stashed changes

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< Updated upstream
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c346:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	f1c3 0207 	rsb	r2, r3, #7
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c356:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	f1c3 0207 	rsb	r2, r3, #7
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5e:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
<<<<<<< Updated upstream
 800c358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35a:	2200      	movs	r2, #0
 800c35c:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	2200      	movs	r2, #0
 800da64:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> Stashed changes
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< Updated upstream
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	2200      	movs	r2, #0
 800c362:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	2200      	movs	r2, #0
 800c368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
=======
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	2200      	movs	r2, #0
 800da6a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< Updated upstream
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	69b8      	ldr	r0, [r7, #24]
 800c372:	f000 fe79 	bl	800d068 <pxPortInitialiseStack>
 800c376:	4602      	mov	r2, r0
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	601a      	str	r2, [r3, #0]
=======
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	68f9      	ldr	r1, [r7, #12]
 800da78:	69b8      	ldr	r0, [r7, #24]
 800da7a:	f000 ffa9 	bl	800e9d0 <pxPortInitialiseStack>
 800da7e:	4602      	mov	r2, r0
 800da80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da82:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< Updated upstream
 800c37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <prvInitialiseNewTask+0x11e>
=======
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <prvInitialiseNewTask+0x11e>
>>>>>>> Stashed changes
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< Updated upstream
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c386:	601a      	str	r2, [r3, #0]
=======
 800da8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da8e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800c388:	bf00      	nop
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvAddNewTaskToReadyList>:
=======
 800da90:	bf00      	nop
 800da92:	3720      	adds	r7, #32
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <prvAddNewTaskToReadyList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< Updated upstream
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c398:	f000 ff6e 	bl	800d278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c39c:	4b2a      	ldr	r3, [pc, #168]	; (800c448 <prvAddNewTaskToReadyList+0xb8>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	4a29      	ldr	r2, [pc, #164]	; (800c448 <prvAddNewTaskToReadyList+0xb8>)
 800c3a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3a6:	4b29      	ldr	r3, [pc, #164]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d109      	bne.n	800c3c2 <prvAddNewTaskToReadyList+0x32>
=======
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800daa0:	f001 f8a2 	bl	800ebe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800daa4:	4b2a      	ldr	r3, [pc, #168]	; (800db50 <prvAddNewTaskToReadyList+0xb8>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	3301      	adds	r3, #1
 800daaa:	4a29      	ldr	r2, [pc, #164]	; (800db50 <prvAddNewTaskToReadyList+0xb8>)
 800daac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800daae:	4b29      	ldr	r3, [pc, #164]	; (800db54 <prvAddNewTaskToReadyList+0xbc>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d109      	bne.n	800daca <prvAddNewTaskToReadyList+0x32>
>>>>>>> Stashed changes
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< Updated upstream
 800c3ae:	4a27      	ldr	r2, [pc, #156]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3b4:	4b24      	ldr	r3, [pc, #144]	; (800c448 <prvAddNewTaskToReadyList+0xb8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d110      	bne.n	800c3de <prvAddNewTaskToReadyList+0x4e>
=======
 800dab6:	4a27      	ldr	r2, [pc, #156]	; (800db54 <prvAddNewTaskToReadyList+0xbc>)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dabc:	4b24      	ldr	r3, [pc, #144]	; (800db50 <prvAddNewTaskToReadyList+0xb8>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d110      	bne.n	800dae6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< Updated upstream
 800c3bc:	f000 fc8c 	bl	800ccd8 <prvInitialiseTaskLists>
 800c3c0:	e00d      	b.n	800c3de <prvAddNewTaskToReadyList+0x4e>
=======
 800dac4:	f000 fc8c 	bl	800e3e0 <prvInitialiseTaskLists>
 800dac8:	e00d      	b.n	800dae6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> Stashed changes
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< Updated upstream
 800c3c2:	4b23      	ldr	r3, [pc, #140]	; (800c450 <prvAddNewTaskToReadyList+0xc0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d109      	bne.n	800c3de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3ca:	4b20      	ldr	r3, [pc, #128]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d802      	bhi.n	800c3de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3d8:	4a1c      	ldr	r2, [pc, #112]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6013      	str	r3, [r2, #0]
=======
 800daca:	4b23      	ldr	r3, [pc, #140]	; (800db58 <prvAddNewTaskToReadyList+0xc0>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d109      	bne.n	800dae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dad2:	4b20      	ldr	r3, [pc, #128]	; (800db54 <prvAddNewTaskToReadyList+0xbc>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dadc:	429a      	cmp	r2, r3
 800dade:	d802      	bhi.n	800dae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dae0:	4a1c      	ldr	r2, [pc, #112]	; (800db54 <prvAddNewTaskToReadyList+0xbc>)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< Updated upstream
 800c3de:	4b1d      	ldr	r3, [pc, #116]	; (800c454 <prvAddNewTaskToReadyList+0xc4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	4a1b      	ldr	r2, [pc, #108]	; (800c454 <prvAddNewTaskToReadyList+0xc4>)
 800c3e6:	6013      	str	r3, [r2, #0]
=======
 800dae6:	4b1d      	ldr	r3, [pc, #116]	; (800db5c <prvAddNewTaskToReadyList+0xc4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3301      	adds	r3, #1
 800daec:	4a1b      	ldr	r2, [pc, #108]	; (800db5c <prvAddNewTaskToReadyList+0xc4>)
 800daee:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< Updated upstream
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	409a      	lsls	r2, r3
 800c3f0:	4b19      	ldr	r3, [pc, #100]	; (800c458 <prvAddNewTaskToReadyList+0xc8>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	4a18      	ldr	r2, [pc, #96]	; (800c458 <prvAddNewTaskToReadyList+0xc8>)
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4a15      	ldr	r2, [pc, #84]	; (800c45c <prvAddNewTaskToReadyList+0xcc>)
 800c408:	441a      	add	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3304      	adds	r3, #4
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f7ff f8da 	bl	800b5ca <vListInsertEnd>
=======
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	2201      	movs	r2, #1
 800daf6:	409a      	lsls	r2, r3
 800daf8:	4b19      	ldr	r3, [pc, #100]	; (800db60 <prvAddNewTaskToReadyList+0xc8>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	4a18      	ldr	r2, [pc, #96]	; (800db60 <prvAddNewTaskToReadyList+0xc8>)
 800db00:	6013      	str	r3, [r2, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4a15      	ldr	r2, [pc, #84]	; (800db64 <prvAddNewTaskToReadyList+0xcc>)
 800db10:	441a      	add	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3304      	adds	r3, #4
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7ff f8ba 	bl	800cc92 <vListInsertEnd>
>>>>>>> Stashed changes

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800c416:	f000 ff61 	bl	800d2dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c41a:	4b0d      	ldr	r3, [pc, #52]	; (800c450 <prvAddNewTaskToReadyList+0xc0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00e      	beq.n	800c440 <prvAddNewTaskToReadyList+0xb0>
=======
 800db1e:	f001 f895 	bl	800ec4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db22:	4b0d      	ldr	r3, [pc, #52]	; (800db58 <prvAddNewTaskToReadyList+0xc0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00e      	beq.n	800db48 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> Stashed changes
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< Updated upstream
 800c422:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvAddNewTaskToReadyList+0xbc>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d207      	bcs.n	800c440 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <prvAddNewTaskToReadyList+0xd0>)
 800c432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	f3bf 8f6f 	isb	sy
=======
 800db2a:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <prvAddNewTaskToReadyList+0xbc>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db34:	429a      	cmp	r2, r3
 800db36:	d207      	bcs.n	800db48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db38:	4b0b      	ldr	r3, [pc, #44]	; (800db68 <prvAddNewTaskToReadyList+0xd0>)
 800db3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db3e:	601a      	str	r2, [r3, #0]
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20000670 	.word	0x20000670
 800c44c:	20000570 	.word	0x20000570
 800c450:	2000067c 	.word	0x2000067c
 800c454:	2000068c 	.word	0x2000068c
 800c458:	20000678 	.word	0x20000678
 800c45c:	20000574 	.word	0x20000574
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <vTaskDelayUntil>:
=======
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20001698 	.word	0x20001698
 800db54:	20001598 	.word	0x20001598
 800db58:	200016a4 	.word	0x200016a4
 800db5c:	200016b4 	.word	0x200016b4
 800db60:	200016a0 	.word	0x200016a0
 800db64:	2000159c 	.word	0x2000159c
 800db68:	e000ed04 	.word	0xe000ed04

0800db6c <vTaskDelayUntil>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
<<<<<<< Updated upstream
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c46e:	2300      	movs	r3, #0
 800c470:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10b      	bne.n	800c490 <vTaskDelayUntil+0x2c>
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	b672      	cpsid	i
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	b662      	cpsie	i
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	e7fe      	b.n	800c48e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10b      	bne.n	800c4ae <vTaskDelayUntil+0x4a>
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	b672      	cpsid	i
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	b662      	cpsie	i
 800c4aa:	613b      	str	r3, [r7, #16]
 800c4ac:	e7fe      	b.n	800c4ac <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c4ae:	4b2a      	ldr	r3, [pc, #168]	; (800c558 <vTaskDelayUntil+0xf4>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00b      	beq.n	800c4ce <vTaskDelayUntil+0x6a>
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	b672      	cpsid	i
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	b662      	cpsie	i
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	e7fe      	b.n	800c4cc <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c4ce:	f000 f8e1 	bl	800c694 <vTaskSuspendAll>
=======
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b08a      	sub	sp, #40	; 0x28
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800db76:	2300      	movs	r3, #0
 800db78:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10b      	bne.n	800db98 <vTaskDelayUntil+0x2c>
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	b672      	cpsid	i
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	b662      	cpsie	i
 800db94:	617b      	str	r3, [r7, #20]
 800db96:	e7fe      	b.n	800db96 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10b      	bne.n	800dbb6 <vTaskDelayUntil+0x4a>
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	b672      	cpsid	i
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	b662      	cpsie	i
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	e7fe      	b.n	800dbb4 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800dbb6:	4b2a      	ldr	r3, [pc, #168]	; (800dc60 <vTaskDelayUntil+0xf4>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <vTaskDelayUntil+0x6a>
 800dbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc2:	b672      	cpsid	i
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	b662      	cpsie	i
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	e7fe      	b.n	800dbd4 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800dbd6:	f000 f8e1 	bl	800dd9c <vTaskSuspendAll>
>>>>>>> Stashed changes
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
<<<<<<< Updated upstream
 800c4d2:	4b22      	ldr	r3, [pc, #136]	; (800c55c <vTaskDelayUntil+0xf8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	4413      	add	r3, r2
 800c4e0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6a3a      	ldr	r2, [r7, #32]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d20b      	bcs.n	800c504 <vTaskDelayUntil+0xa0>
=======
 800dbda:	4b22      	ldr	r3, [pc, #136]	; (800dc64 <vTaskDelayUntil+0xf8>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6a3a      	ldr	r2, [r7, #32]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d20b      	bcs.n	800dc0c <vTaskDelayUntil+0xa0>
>>>>>>> Stashed changes
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
<<<<<<< Updated upstream
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d211      	bcs.n	800c51a <vTaskDelayUntil+0xb6>
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d90d      	bls.n	800c51a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c4fe:	2301      	movs	r3, #1
 800c500:	627b      	str	r3, [r7, #36]	; 0x24
 800c502:	e00a      	b.n	800c51a <vTaskDelayUntil+0xb6>
=======
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	69fa      	ldr	r2, [r7, #28]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d211      	bcs.n	800dc22 <vTaskDelayUntil+0xb6>
 800dbfe:	69fa      	ldr	r2, [r7, #28]
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d90d      	bls.n	800dc22 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800dc06:	2301      	movs	r3, #1
 800dc08:	627b      	str	r3, [r7, #36]	; 0x24
 800dc0a:	e00a      	b.n	800dc22 <vTaskDelayUntil+0xb6>
>>>>>>> Stashed changes
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
<<<<<<< Updated upstream
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d303      	bcc.n	800c516 <vTaskDelayUntil+0xb2>
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	429a      	cmp	r2, r3
 800c514:	d901      	bls.n	800c51a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c516:	2301      	movs	r3, #1
 800c518:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	69fa      	ldr	r2, [r7, #28]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d303      	bcc.n	800dc1e <vTaskDelayUntil+0xb2>
 800dc16:	69fa      	ldr	r2, [r7, #28]
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d901      	bls.n	800dc22 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
<<<<<<< Updated upstream
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <vTaskDelayUntil+0xd0>
=======
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	69fa      	ldr	r2, [r7, #28]
 800dc26:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d006      	beq.n	800dc3c <vTaskDelayUntil+0xd0>
>>>>>>> Stashed changes
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
<<<<<<< Updated upstream
 800c526:	69fa      	ldr	r2, [r7, #28]
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2100      	movs	r1, #0
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fd34 	bl	800cf9c <prvAddCurrentTaskToDelayedList>
=======
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	6a3b      	ldr	r3, [r7, #32]
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	2100      	movs	r1, #0
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 fe64 	bl	800e904 <prvAddCurrentTaskToDelayedList>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
<<<<<<< Updated upstream
 800c534:	f000 f8bc 	bl	800c6b0 <xTaskResumeAll>
 800c538:	61b8      	str	r0, [r7, #24]
=======
 800dc3c:	f000 f8bc 	bl	800ddb8 <xTaskResumeAll>
 800dc40:	61b8      	str	r0, [r7, #24]
>>>>>>> Stashed changes

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d107      	bne.n	800c550 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c540:	4b07      	ldr	r3, [pc, #28]	; (800c560 <vTaskDelayUntil+0xfc>)
 800c542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	f3bf 8f6f 	isb	sy
=======
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d107      	bne.n	800dc58 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800dc48:	4b07      	ldr	r3, [pc, #28]	; (800dc68 <vTaskDelayUntil+0xfc>)
 800dc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4e:	601a      	str	r2, [r3, #0]
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800c550:	bf00      	nop
 800c552:	3728      	adds	r7, #40	; 0x28
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20000698 	.word	0x20000698
 800c55c:	20000674 	.word	0x20000674
 800c560:	e000ed04 	.word	0xe000ed04

0800c564 <vTaskDelay>:
=======
 800dc58:	bf00      	nop
 800dc5a:	3728      	adds	r7, #40	; 0x28
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	200016c0 	.word	0x200016c0
 800dc64:	2000169c 	.word	0x2000169c
 800dc68:	e000ed04 	.word	0xe000ed04

0800dc6c <vTaskDelay>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< Updated upstream
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d018      	beq.n	800c5a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c576:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <vTaskDelay+0x64>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <vTaskDelay+0x32>
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	b672      	cpsid	i
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	b662      	cpsie	i
 800c592:	60bb      	str	r3, [r7, #8]
 800c594:	e7fe      	b.n	800c594 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c596:	f000 f87d 	bl	800c694 <vTaskSuspendAll>
=======
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d018      	beq.n	800dcb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc7e:	4b14      	ldr	r3, [pc, #80]	; (800dcd0 <vTaskDelay+0x64>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00b      	beq.n	800dc9e <vTaskDelay+0x32>
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	b672      	cpsid	i
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	b662      	cpsie	i
 800dc9a:	60bb      	str	r3, [r7, #8]
 800dc9c:	e7fe      	b.n	800dc9c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800dc9e:	f000 f87d 	bl	800dd9c <vTaskSuspendAll>
>>>>>>> Stashed changes
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< Updated upstream
 800c59a:	2100      	movs	r1, #0
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fcfd 	bl	800cf9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5a2:	f000 f885 	bl	800c6b0 <xTaskResumeAll>
 800c5a6:	60f8      	str	r0, [r7, #12]
=======
 800dca2:	2100      	movs	r1, #0
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fe2d 	bl	800e904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dcaa:	f000 f885 	bl	800ddb8 <xTaskResumeAll>
 800dcae:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< Updated upstream
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d107      	bne.n	800c5be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c5ae:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <vTaskDelay+0x68>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
=======
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d107      	bne.n	800dcc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dcb6:	4b07      	ldr	r3, [pc, #28]	; (800dcd4 <vTaskDelay+0x68>)
 800dcb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< Updated upstream
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20000698 	.word	0x20000698
 800c5cc:	e000ed04 	.word	0xe000ed04

0800c5d0 <vTaskStartScheduler>:
=======
 800dcc6:	bf00      	nop
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	200016c0 	.word	0x200016c0
 800dcd4:	e000ed04 	.word	0xe000ed04

0800dcd8 <vTaskStartScheduler>:
>>>>>>> Stashed changes

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< Updated upstream
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08a      	sub	sp, #40	; 0x28
 800c5d4:	af04      	add	r7, sp, #16
=======
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08a      	sub	sp, #40	; 0x28
 800dcdc:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< Updated upstream
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	607b      	str	r3, [r7, #4]
=======
 800dcde:	2300      	movs	r3, #0
 800dce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< Updated upstream
 800c5de:	463a      	mov	r2, r7
 800c5e0:	1d39      	adds	r1, r7, #4
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f3 fffc 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	9202      	str	r2, [sp, #8]
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	491f      	ldr	r1, [pc, #124]	; (800c67c <vTaskStartScheduler+0xac>)
 800c600:	481f      	ldr	r0, [pc, #124]	; (800c680 <vTaskStartScheduler+0xb0>)
 800c602:	f7ff fd8d 	bl	800c120 <xTaskCreateStatic>
 800c606:	4602      	mov	r2, r0
 800c608:	4b1e      	ldr	r3, [pc, #120]	; (800c684 <vTaskStartScheduler+0xb4>)
 800c60a:	601a      	str	r2, [r3, #0]
=======
 800dce6:	463a      	mov	r2, r7
 800dce8:	1d39      	adds	r1, r7, #4
 800dcea:	f107 0308 	add.w	r3, r7, #8
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f2 fc78 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	9202      	str	r2, [sp, #8]
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	2300      	movs	r3, #0
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	2300      	movs	r3, #0
 800dd04:	460a      	mov	r2, r1
 800dd06:	491f      	ldr	r1, [pc, #124]	; (800dd84 <vTaskStartScheduler+0xac>)
 800dd08:	481f      	ldr	r0, [pc, #124]	; (800dd88 <vTaskStartScheduler+0xb0>)
 800dd0a:	f7ff fd8d 	bl	800d828 <xTaskCreateStatic>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	4b1e      	ldr	r3, [pc, #120]	; (800dd8c <vTaskStartScheduler+0xb4>)
 800dd12:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< Updated upstream
 800c60c:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <vTaskStartScheduler+0xb4>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c614:	2301      	movs	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
 800c618:	e001      	b.n	800c61e <vTaskStartScheduler+0x4e>
=======
 800dd14:	4b1d      	ldr	r3, [pc, #116]	; (800dd8c <vTaskStartScheduler+0xb4>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	617b      	str	r3, [r7, #20]
 800dd20:	e001      	b.n	800dd26 <vTaskStartScheduler+0x4e>
>>>>>>> Stashed changes
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< Updated upstream
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]
=======
 800dd22:	2300      	movs	r3, #0
 800dd24:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< Updated upstream
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d117      	bne.n	800c654 <vTaskStartScheduler+0x84>
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	b672      	cpsid	i
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	b662      	cpsie	i
 800c638:	613b      	str	r3, [r7, #16]
=======
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d117      	bne.n	800dd5c <vTaskStartScheduler+0x84>
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	b672      	cpsid	i
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	b662      	cpsie	i
 800dd40:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800c63a:	4b13      	ldr	r3, [pc, #76]	; (800c688 <vTaskStartScheduler+0xb8>)
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295
 800c640:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c642:	4b12      	ldr	r3, [pc, #72]	; (800c68c <vTaskStartScheduler+0xbc>)
 800c644:	2201      	movs	r2, #1
 800c646:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c648:	4b11      	ldr	r3, [pc, #68]	; (800c690 <vTaskStartScheduler+0xc0>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
=======
 800dd42:	4b13      	ldr	r3, [pc, #76]	; (800dd90 <vTaskStartScheduler+0xb8>)
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295
 800dd48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <vTaskStartScheduler+0xbc>)
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd50:	4b11      	ldr	r3, [pc, #68]	; (800dd98 <vTaskStartScheduler+0xc0>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< Updated upstream
 800c64e:	f000 fd97 	bl	800d180 <xPortStartScheduler>
=======
 800dd56:	f000 fecb 	bl	800eaf0 <xPortStartScheduler>
>>>>>>> Stashed changes
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< Updated upstream
 800c652:	e00f      	b.n	800c674 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d10b      	bne.n	800c674 <vTaskStartScheduler+0xa4>
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	60fb      	str	r3, [r7, #12]
 800c672:	e7fe      	b.n	800c672 <vTaskStartScheduler+0xa2>
}
 800c674:	bf00      	nop
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	0800e1c8 	.word	0x0800e1c8
 800c680:	0800cca5 	.word	0x0800cca5
 800c684:	20000694 	.word	0x20000694
 800c688:	20000690 	.word	0x20000690
 800c68c:	2000067c 	.word	0x2000067c
 800c690:	20000674 	.word	0x20000674

0800c694 <vTaskSuspendAll>:
=======
 800dd5a:	e00f      	b.n	800dd7c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd62:	d10b      	bne.n	800dd7c <vTaskStartScheduler+0xa4>
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	b672      	cpsid	i
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	b662      	cpsie	i
 800dd78:	60fb      	str	r3, [r7, #12]
 800dd7a:	e7fe      	b.n	800dd7a <vTaskStartScheduler+0xa2>
}
 800dd7c:	bf00      	nop
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0800fc60 	.word	0x0800fc60
 800dd88:	0800e3ad 	.word	0x0800e3ad
 800dd8c:	200016bc 	.word	0x200016bc
 800dd90:	200016b8 	.word	0x200016b8
 800dd94:	200016a4 	.word	0x200016a4
 800dd98:	2000169c 	.word	0x2000169c

0800dd9c <vTaskSuspendAll>:
>>>>>>> Stashed changes
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< Updated upstream
 800c694:	b480      	push	{r7}
 800c696:	af00      	add	r7, sp, #0
=======
 800dd9c:	b480      	push	{r7}
 800dd9e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< Updated upstream
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <vTaskSuspendAll+0x18>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3301      	adds	r3, #1
 800c69e:	4a03      	ldr	r2, [pc, #12]	; (800c6ac <vTaskSuspendAll+0x18>)
 800c6a0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c6a2:	bf00      	nop
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	20000698 	.word	0x20000698

0800c6b0 <xTaskResumeAll>:
=======
 800dda0:	4b04      	ldr	r3, [pc, #16]	; (800ddb4 <vTaskSuspendAll+0x18>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3301      	adds	r3, #1
 800dda6:	4a03      	ldr	r2, [pc, #12]	; (800ddb4 <vTaskSuspendAll+0x18>)
 800dda8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ddaa:	bf00      	nop
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	200016c0 	.word	0x200016c0

0800ddb8 <xTaskResumeAll>:
>>>>>>> Stashed changes

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< Updated upstream
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]
=======
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< Updated upstream
 800c6be:	4b42      	ldr	r3, [pc, #264]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10b      	bne.n	800c6de <xTaskResumeAll+0x2e>
 800c6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ca:	b672      	cpsid	i
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	b662      	cpsie	i
 800c6da:	603b      	str	r3, [r7, #0]
 800c6dc:	e7fe      	b.n	800c6dc <xTaskResumeAll+0x2c>
=======
 800ddc6:	4b42      	ldr	r3, [pc, #264]	; (800ded0 <xTaskResumeAll+0x118>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10b      	bne.n	800dde6 <xTaskResumeAll+0x2e>
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	b672      	cpsid	i
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	b662      	cpsie	i
 800dde2:	603b      	str	r3, [r7, #0]
 800dde4:	e7fe      	b.n	800dde4 <xTaskResumeAll+0x2c>
>>>>>>> Stashed changes
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< Updated upstream
 800c6de:	f000 fdcb 	bl	800d278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c6e2:	4b39      	ldr	r3, [pc, #228]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	4a37      	ldr	r2, [pc, #220]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ec:	4b36      	ldr	r3, [pc, #216]	; (800c7c8 <xTaskResumeAll+0x118>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d161      	bne.n	800c7b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c6f4:	4b35      	ldr	r3, [pc, #212]	; (800c7cc <xTaskResumeAll+0x11c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d05d      	beq.n	800c7b8 <xTaskResumeAll+0x108>
=======
 800dde6:	f000 feff 	bl	800ebe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddea:	4b39      	ldr	r3, [pc, #228]	; (800ded0 <xTaskResumeAll+0x118>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	4a37      	ldr	r2, [pc, #220]	; (800ded0 <xTaskResumeAll+0x118>)
 800ddf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddf4:	4b36      	ldr	r3, [pc, #216]	; (800ded0 <xTaskResumeAll+0x118>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d161      	bne.n	800dec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddfc:	4b35      	ldr	r3, [pc, #212]	; (800ded4 <xTaskResumeAll+0x11c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d05d      	beq.n	800dec0 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< Updated upstream
 800c6fc:	e02e      	b.n	800c75c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6fe:	4b34      	ldr	r3, [pc, #208]	; (800c7d0 <xTaskResumeAll+0x120>)
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3318      	adds	r3, #24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe ffba 	bl	800b684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3304      	adds	r3, #4
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe ffb5 	bl	800b684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71e:	2201      	movs	r2, #1
 800c720:	409a      	lsls	r2, r3
 800c722:	4b2c      	ldr	r3, [pc, #176]	; (800c7d4 <xTaskResumeAll+0x124>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4313      	orrs	r3, r2
 800c728:	4a2a      	ldr	r2, [pc, #168]	; (800c7d4 <xTaskResumeAll+0x124>)
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c730:	4613      	mov	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4a27      	ldr	r2, [pc, #156]	; (800c7d8 <xTaskResumeAll+0x128>)
 800c73a:	441a      	add	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3304      	adds	r3, #4
 800c740:	4619      	mov	r1, r3
 800c742:	4610      	mov	r0, r2
 800c744:	f7fe ff41 	bl	800b5ca <vListInsertEnd>
=======
 800de04:	e02e      	b.n	800de64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de06:	4b34      	ldr	r3, [pc, #208]	; (800ded8 <xTaskResumeAll+0x120>)
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3318      	adds	r3, #24
 800de12:	4618      	mov	r0, r3
 800de14:	f7fe ff9a 	bl	800cd4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3304      	adds	r3, #4
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fe ff95 	bl	800cd4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	2201      	movs	r2, #1
 800de28:	409a      	lsls	r2, r3
 800de2a:	4b2c      	ldr	r3, [pc, #176]	; (800dedc <xTaskResumeAll+0x124>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4313      	orrs	r3, r2
 800de30:	4a2a      	ldr	r2, [pc, #168]	; (800dedc <xTaskResumeAll+0x124>)
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de38:	4613      	mov	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4a27      	ldr	r2, [pc, #156]	; (800dee0 <xTaskResumeAll+0x128>)
 800de42:	441a      	add	r2, r3
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3304      	adds	r3, #4
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f7fe ff21 	bl	800cc92 <vListInsertEnd>
>>>>>>> Stashed changes

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74c:	4b23      	ldr	r3, [pc, #140]	; (800c7dc <xTaskResumeAll+0x12c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	429a      	cmp	r2, r3
 800c754:	d302      	bcc.n	800c75c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c756:	4b22      	ldr	r3, [pc, #136]	; (800c7e0 <xTaskResumeAll+0x130>)
 800c758:	2201      	movs	r2, #1
 800c75a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c75c:	4b1c      	ldr	r3, [pc, #112]	; (800c7d0 <xTaskResumeAll+0x120>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1cc      	bne.n	800c6fe <xTaskResumeAll+0x4e>
=======
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de54:	4b23      	ldr	r3, [pc, #140]	; (800dee4 <xTaskResumeAll+0x12c>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d302      	bcc.n	800de64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de5e:	4b22      	ldr	r3, [pc, #136]	; (800dee8 <xTaskResumeAll+0x130>)
 800de60:	2201      	movs	r2, #1
 800de62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de64:	4b1c      	ldr	r3, [pc, #112]	; (800ded8 <xTaskResumeAll+0x120>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1cc      	bne.n	800de06 <xTaskResumeAll+0x4e>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< Updated upstream
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <xTaskResumeAll+0xbe>
=======
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d001      	beq.n	800de76 <xTaskResumeAll+0xbe>
>>>>>>> Stashed changes
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< Updated upstream
 800c76a:	f000 fb51 	bl	800ce10 <prvResetNextTaskUnblockTime>
=======
 800de72:	f000 fb51 	bl	800e518 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< Updated upstream
 800c76e:	4b1d      	ldr	r3, [pc, #116]	; (800c7e4 <xTaskResumeAll+0x134>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d010      	beq.n	800c79c <xTaskResumeAll+0xec>
=======
 800de76:	4b1d      	ldr	r3, [pc, #116]	; (800deec <xTaskResumeAll+0x134>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d010      	beq.n	800dea4 <xTaskResumeAll+0xec>
>>>>>>> Stashed changes
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800c77a:	f000 f847 	bl	800c80c <xTaskIncrementTick>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c784:	4b16      	ldr	r3, [pc, #88]	; (800c7e0 <xTaskResumeAll+0x130>)
 800c786:	2201      	movs	r2, #1
 800c788:	601a      	str	r2, [r3, #0]
=======
 800de82:	f000 f847 	bl	800df14 <xTaskIncrementTick>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de8c:	4b16      	ldr	r3, [pc, #88]	; (800dee8 <xTaskResumeAll+0x130>)
 800de8e:	2201      	movs	r2, #1
 800de90:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< Updated upstream
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1f1      	bne.n	800c77a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c796:	4b13      	ldr	r3, [pc, #76]	; (800c7e4 <xTaskResumeAll+0x134>)
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]
=======
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	3b01      	subs	r3, #1
 800de96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1f1      	bne.n	800de82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800de9e:	4b13      	ldr	r3, [pc, #76]	; (800deec <xTaskResumeAll+0x134>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800c79c:	4b10      	ldr	r3, [pc, #64]	; (800c7e0 <xTaskResumeAll+0x130>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d009      	beq.n	800c7b8 <xTaskResumeAll+0x108>
=======
 800dea4:	4b10      	ldr	r3, [pc, #64]	; (800dee8 <xTaskResumeAll+0x130>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d009      	beq.n	800dec0 <xTaskResumeAll+0x108>
>>>>>>> Stashed changes
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< Updated upstream
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	; (800c7e8 <xTaskResumeAll+0x138>)
 800c7aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	f3bf 8f6f 	isb	sy
=======
 800deac:	2301      	movs	r3, #1
 800deae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800deb0:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <xTaskResumeAll+0x138>)
 800deb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< Updated upstream
 800c7b8:	f000 fd90 	bl	800d2dc <vPortExitCritical>

	return xAlreadyYielded;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000698 	.word	0x20000698
 800c7cc:	20000670 	.word	0x20000670
 800c7d0:	20000630 	.word	0x20000630
 800c7d4:	20000678 	.word	0x20000678
 800c7d8:	20000574 	.word	0x20000574
 800c7dc:	20000570 	.word	0x20000570
 800c7e0:	20000684 	.word	0x20000684
 800c7e4:	20000680 	.word	0x20000680
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <xTaskGetTickCount>:
=======
 800dec0:	f000 fec4 	bl	800ec4c <vPortExitCritical>

	return xAlreadyYielded;
 800dec4:	68bb      	ldr	r3, [r7, #8]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	200016c0 	.word	0x200016c0
 800ded4:	20001698 	.word	0x20001698
 800ded8:	20001658 	.word	0x20001658
 800dedc:	200016a0 	.word	0x200016a0
 800dee0:	2000159c 	.word	0x2000159c
 800dee4:	20001598 	.word	0x20001598
 800dee8:	200016ac 	.word	0x200016ac
 800deec:	200016a8 	.word	0x200016a8
 800def0:	e000ed04 	.word	0xe000ed04

0800def4 <xTaskGetTickCount>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< Updated upstream
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
=======
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< Updated upstream
 800c7f2:	4b05      	ldr	r3, [pc, #20]	; (800c808 <xTaskGetTickCount+0x1c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	607b      	str	r3, [r7, #4]
=======
 800defa:	4b05      	ldr	r3, [pc, #20]	; (800df10 <xTaskGetTickCount+0x1c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< Updated upstream
 800c7f8:	687b      	ldr	r3, [r7, #4]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	20000674 	.word	0x20000674

0800c80c <xTaskIncrementTick>:
=======
 800df00:	687b      	ldr	r3, [r7, #4]
}
 800df02:	4618      	mov	r0, r3
 800df04:	370c      	adds	r7, #12
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	2000169c 	.word	0x2000169c

0800df14 <xTaskIncrementTick>:
>>>>>>> Stashed changes

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< Updated upstream
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c812:	2300      	movs	r3, #0
 800c814:	617b      	str	r3, [r7, #20]
=======
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800c816:	4b4f      	ldr	r3, [pc, #316]	; (800c954 <xTaskIncrementTick+0x148>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f040 8089 	bne.w	800c932 <xTaskIncrementTick+0x126>
=======
 800df1e:	4b4f      	ldr	r3, [pc, #316]	; (800e05c <xTaskIncrementTick+0x148>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	f040 8089 	bne.w	800e03a <xTaskIncrementTick+0x126>
>>>>>>> Stashed changes
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< Updated upstream
 800c820:	4b4d      	ldr	r3, [pc, #308]	; (800c958 <xTaskIncrementTick+0x14c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	613b      	str	r3, [r7, #16]
=======
 800df28:	4b4d      	ldr	r3, [pc, #308]	; (800e060 <xTaskIncrementTick+0x14c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3301      	adds	r3, #1
 800df2e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< Updated upstream
 800c828:	4a4b      	ldr	r2, [pc, #300]	; (800c958 <xTaskIncrementTick+0x14c>)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d121      	bne.n	800c878 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c834:	4b49      	ldr	r3, [pc, #292]	; (800c95c <xTaskIncrementTick+0x150>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <xTaskIncrementTick+0x4a>
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	b672      	cpsid	i
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	b662      	cpsie	i
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	e7fe      	b.n	800c854 <xTaskIncrementTick+0x48>
 800c856:	4b41      	ldr	r3, [pc, #260]	; (800c95c <xTaskIncrementTick+0x150>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	4b40      	ldr	r3, [pc, #256]	; (800c960 <xTaskIncrementTick+0x154>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a3e      	ldr	r2, [pc, #248]	; (800c95c <xTaskIncrementTick+0x150>)
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	4a3e      	ldr	r2, [pc, #248]	; (800c960 <xTaskIncrementTick+0x154>)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	4b3e      	ldr	r3, [pc, #248]	; (800c964 <xTaskIncrementTick+0x158>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3301      	adds	r3, #1
 800c870:	4a3c      	ldr	r2, [pc, #240]	; (800c964 <xTaskIncrementTick+0x158>)
 800c872:	6013      	str	r3, [r2, #0]
 800c874:	f000 facc 	bl	800ce10 <prvResetNextTaskUnblockTime>
=======
 800df30:	4a4b      	ldr	r2, [pc, #300]	; (800e060 <xTaskIncrementTick+0x14c>)
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d121      	bne.n	800df80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800df3c:	4b49      	ldr	r3, [pc, #292]	; (800e064 <xTaskIncrementTick+0x150>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00b      	beq.n	800df5e <xTaskIncrementTick+0x4a>
 800df46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4a:	b672      	cpsid	i
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	b662      	cpsie	i
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	e7fe      	b.n	800df5c <xTaskIncrementTick+0x48>
 800df5e:	4b41      	ldr	r3, [pc, #260]	; (800e064 <xTaskIncrementTick+0x150>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	4b40      	ldr	r3, [pc, #256]	; (800e068 <xTaskIncrementTick+0x154>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a3e      	ldr	r2, [pc, #248]	; (800e064 <xTaskIncrementTick+0x150>)
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	4a3e      	ldr	r2, [pc, #248]	; (800e068 <xTaskIncrementTick+0x154>)
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	4b3e      	ldr	r3, [pc, #248]	; (800e06c <xTaskIncrementTick+0x158>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	4a3c      	ldr	r2, [pc, #240]	; (800e06c <xTaskIncrementTick+0x158>)
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	f000 facc 	bl	800e518 <prvResetNextTaskUnblockTime>
>>>>>>> Stashed changes

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< Updated upstream
 800c878:	4b3b      	ldr	r3, [pc, #236]	; (800c968 <xTaskIncrementTick+0x15c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d348      	bcc.n	800c914 <xTaskIncrementTick+0x108>
=======
 800df80:	4b3b      	ldr	r3, [pc, #236]	; (800e070 <xTaskIncrementTick+0x15c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	429a      	cmp	r2, r3
 800df88:	d348      	bcc.n	800e01c <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< Updated upstream
 800c882:	4b36      	ldr	r3, [pc, #216]	; (800c95c <xTaskIncrementTick+0x150>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d104      	bne.n	800c896 <xTaskIncrementTick+0x8a>
=======
 800df8a:	4b36      	ldr	r3, [pc, #216]	; (800e064 <xTaskIncrementTick+0x150>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d104      	bne.n	800df9e <xTaskIncrementTick+0x8a>
>>>>>>> Stashed changes
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800c88c:	4b36      	ldr	r3, [pc, #216]	; (800c968 <xTaskIncrementTick+0x15c>)
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	601a      	str	r2, [r3, #0]
					break;
 800c894:	e03e      	b.n	800c914 <xTaskIncrementTick+0x108>
=======
 800df94:	4b36      	ldr	r3, [pc, #216]	; (800e070 <xTaskIncrementTick+0x15c>)
 800df96:	f04f 32ff 	mov.w	r2, #4294967295
 800df9a:	601a      	str	r2, [r3, #0]
					break;
 800df9c:	e03e      	b.n	800e01c <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800c896:	4b31      	ldr	r3, [pc, #196]	; (800c95c <xTaskIncrementTick+0x150>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d203      	bcs.n	800c8b6 <xTaskIncrementTick+0xaa>
=======
 800df9e:	4b31      	ldr	r3, [pc, #196]	; (800e064 <xTaskIncrementTick+0x150>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d203      	bcs.n	800dfbe <xTaskIncrementTick+0xaa>
>>>>>>> Stashed changes
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< Updated upstream
 800c8ae:	4a2e      	ldr	r2, [pc, #184]	; (800c968 <xTaskIncrementTick+0x15c>)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c8b4:	e02e      	b.n	800c914 <xTaskIncrementTick+0x108>
=======
 800dfb6:	4a2e      	ldr	r2, [pc, #184]	; (800e070 <xTaskIncrementTick+0x15c>)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dfbc:	e02e      	b.n	800e01c <xTaskIncrementTick+0x108>
>>>>>>> Stashed changes
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fee2 	bl	800b684 <uxListRemove>
=======
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fe fec2 	bl	800cd4c <uxListRemove>
>>>>>>> Stashed changes

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< Updated upstream
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d004      	beq.n	800c8d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	3318      	adds	r3, #24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fe fed9 	bl	800b684 <uxListRemove>
=======
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d004      	beq.n	800dfda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	3318      	adds	r3, #24
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe feb9 	bl	800cd4c <uxListRemove>
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< Updated upstream
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	409a      	lsls	r2, r3
 800c8da:	4b24      	ldr	r3, [pc, #144]	; (800c96c <xTaskIncrementTick+0x160>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	4a22      	ldr	r2, [pc, #136]	; (800c96c <xTaskIncrementTick+0x160>)
 800c8e2:	6013      	str	r3, [r2, #0]
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <xTaskIncrementTick+0x164>)
 800c8f2:	441a      	add	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4610      	mov	r0, r2
 800c8fc:	f7fe fe65 	bl	800b5ca <vListInsertEnd>
=======
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfde:	2201      	movs	r2, #1
 800dfe0:	409a      	lsls	r2, r3
 800dfe2:	4b24      	ldr	r3, [pc, #144]	; (800e074 <xTaskIncrementTick+0x160>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	4a22      	ldr	r2, [pc, #136]	; (800e074 <xTaskIncrementTick+0x160>)
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff0:	4613      	mov	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4a1f      	ldr	r2, [pc, #124]	; (800e078 <xTaskIncrementTick+0x164>)
 800dffa:	441a      	add	r2, r3
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	3304      	adds	r3, #4
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f7fe fe45 	bl	800cc92 <vListInsertEnd>
>>>>>>> Stashed changes
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< Updated upstream
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c904:	4b1b      	ldr	r3, [pc, #108]	; (800c974 <xTaskIncrementTick+0x168>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d3b9      	bcc.n	800c882 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c90e:	2301      	movs	r3, #1
 800c910:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c912:	e7b6      	b.n	800c882 <xTaskIncrementTick+0x76>
=======
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00c:	4b1b      	ldr	r3, [pc, #108]	; (800e07c <xTaskIncrementTick+0x168>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e012:	429a      	cmp	r2, r3
 800e014:	d3b9      	bcc.n	800df8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e016:	2301      	movs	r3, #1
 800e018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e01a:	e7b6      	b.n	800df8a <xTaskIncrementTick+0x76>
>>>>>>> Stashed changes
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800c914:	4b17      	ldr	r3, [pc, #92]	; (800c974 <xTaskIncrementTick+0x168>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c91a:	4915      	ldr	r1, [pc, #84]	; (800c970 <xTaskIncrementTick+0x164>)
 800c91c:	4613      	mov	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	440b      	add	r3, r1
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d907      	bls.n	800c93c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800c92c:	2301      	movs	r3, #1
 800c92e:	617b      	str	r3, [r7, #20]
 800c930:	e004      	b.n	800c93c <xTaskIncrementTick+0x130>
=======
 800e01c:	4b17      	ldr	r3, [pc, #92]	; (800e07c <xTaskIncrementTick+0x168>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e022:	4915      	ldr	r1, [pc, #84]	; (800e078 <xTaskIncrementTick+0x164>)
 800e024:	4613      	mov	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	440b      	add	r3, r1
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d907      	bls.n	800e044 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e034:	2301      	movs	r3, #1
 800e036:	617b      	str	r3, [r7, #20]
 800e038:	e004      	b.n	800e044 <xTaskIncrementTick+0x130>
>>>>>>> Stashed changes
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< Updated upstream
 800c932:	4b11      	ldr	r3, [pc, #68]	; (800c978 <xTaskIncrementTick+0x16c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	4a0f      	ldr	r2, [pc, #60]	; (800c978 <xTaskIncrementTick+0x16c>)
 800c93a:	6013      	str	r3, [r2, #0]
=======
 800e03a:	4b11      	ldr	r3, [pc, #68]	; (800e080 <xTaskIncrementTick+0x16c>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3301      	adds	r3, #1
 800e040:	4a0f      	ldr	r2, [pc, #60]	; (800e080 <xTaskIncrementTick+0x16c>)
 800e042:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< Updated upstream
 800c93c:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <xTaskIncrementTick+0x170>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d001      	beq.n	800c948 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800c944:	2301      	movs	r3, #1
 800c946:	617b      	str	r3, [r7, #20]
=======
 800e044:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <xTaskIncrementTick+0x170>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d001      	beq.n	800e050 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e04c:	2301      	movs	r3, #1
 800e04e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< Updated upstream
 800c948:	697b      	ldr	r3, [r7, #20]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20000698 	.word	0x20000698
 800c958:	20000674 	.word	0x20000674
 800c95c:	20000628 	.word	0x20000628
 800c960:	2000062c 	.word	0x2000062c
 800c964:	20000688 	.word	0x20000688
 800c968:	20000690 	.word	0x20000690
 800c96c:	20000678 	.word	0x20000678
 800c970:	20000574 	.word	0x20000574
 800c974:	20000570 	.word	0x20000570
 800c978:	20000680 	.word	0x20000680
 800c97c:	20000684 	.word	0x20000684

0800c980 <vTaskSwitchContext>:
=======
 800e050:	697b      	ldr	r3, [r7, #20]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3718      	adds	r7, #24
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	200016c0 	.word	0x200016c0
 800e060:	2000169c 	.word	0x2000169c
 800e064:	20001650 	.word	0x20001650
 800e068:	20001654 	.word	0x20001654
 800e06c:	200016b0 	.word	0x200016b0
 800e070:	200016b8 	.word	0x200016b8
 800e074:	200016a0 	.word	0x200016a0
 800e078:	2000159c 	.word	0x2000159c
 800e07c:	20001598 	.word	0x20001598
 800e080:	200016a8 	.word	0x200016a8
 800e084:	200016ac 	.word	0x200016ac

0800e088 <vTaskSwitchContext>:
>>>>>>> Stashed changes

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< Updated upstream
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c986:	4b3a      	ldr	r3, [pc, #232]	; (800ca70 <vTaskSwitchContext+0xf0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d003      	beq.n	800c996 <vTaskSwitchContext+0x16>
=======
 800e088:	b580      	push	{r7, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e08e:	4b3a      	ldr	r3, [pc, #232]	; (800e178 <vTaskSwitchContext+0xf0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d003      	beq.n	800e09e <vTaskSwitchContext+0x16>
>>>>>>> Stashed changes
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800c98e:	4b39      	ldr	r3, [pc, #228]	; (800ca74 <vTaskSwitchContext+0xf4>)
 800c990:	2201      	movs	r2, #1
 800c992:	601a      	str	r2, [r3, #0]
=======
 800e096:	4b39      	ldr	r3, [pc, #228]	; (800e17c <vTaskSwitchContext+0xf4>)
 800e098:	2201      	movs	r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< Updated upstream
 800c994:	e067      	b.n	800ca66 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800c996:	4b37      	ldr	r3, [pc, #220]	; (800ca74 <vTaskSwitchContext+0xf4>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a2:	61fb      	str	r3, [r7, #28]
 800c9a4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c9a8:	61bb      	str	r3, [r7, #24]
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d111      	bne.n	800c9d8 <vTaskSwitchContext+0x58>
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69ba      	ldr	r2, [r7, #24]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d10b      	bne.n	800c9d8 <vTaskSwitchContext+0x58>
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d105      	bne.n	800c9d8 <vTaskSwitchContext+0x58>
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	330c      	adds	r3, #12
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d008      	beq.n	800c9ea <vTaskSwitchContext+0x6a>
 800c9d8:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b26      	ldr	r3, [pc, #152]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3334      	adds	r3, #52	; 0x34
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f7f3 fdea 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ea:	4b24      	ldr	r3, [pc, #144]	; (800ca7c <vTaskSwitchContext+0xfc>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	fab3 f383 	clz	r3, r3
 800c9f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c9f8:	7afb      	ldrb	r3, [r7, #11]
 800c9fa:	f1c3 031f 	rsb	r3, r3, #31
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	491f      	ldr	r1, [pc, #124]	; (800ca80 <vTaskSwitchContext+0x100>)
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	4613      	mov	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10b      	bne.n	800ca2c <vTaskSwitchContext+0xac>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	b672      	cpsid	i
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	b662      	cpsie	i
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	e7fe      	b.n	800ca2a <vTaskSwitchContext+0xaa>
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4a12      	ldr	r2, [pc, #72]	; (800ca80 <vTaskSwitchContext+0x100>)
 800ca38:	4413      	add	r3, r2
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	605a      	str	r2, [r3, #4]
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d104      	bne.n	800ca5c <vTaskSwitchContext+0xdc>
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	605a      	str	r2, [r3, #4]
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	4a05      	ldr	r2, [pc, #20]	; (800ca78 <vTaskSwitchContext+0xf8>)
 800ca64:	6013      	str	r3, [r2, #0]
}
 800ca66:	bf00      	nop
 800ca68:	3720      	adds	r7, #32
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000698 	.word	0x20000698
 800ca74:	20000684 	.word	0x20000684
 800ca78:	20000570 	.word	0x20000570
 800ca7c:	20000678 	.word	0x20000678
 800ca80:	20000574 	.word	0x20000574

0800ca84 <vTaskPlaceOnEventList>:
=======
 800e09c:	e067      	b.n	800e16e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e09e:	4b37      	ldr	r3, [pc, #220]	; (800e17c <vTaskSwitchContext+0xf4>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e0a4:	4b36      	ldr	r3, [pc, #216]	; (800e180 <vTaskSwitchContext+0xf8>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0aa:	61fb      	str	r3, [r7, #28]
 800e0ac:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e0b0:	61bb      	str	r3, [r7, #24]
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	69ba      	ldr	r2, [r7, #24]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d111      	bne.n	800e0e0 <vTaskSwitchContext+0x58>
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d10b      	bne.n	800e0e0 <vTaskSwitchContext+0x58>
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	69ba      	ldr	r2, [r7, #24]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d105      	bne.n	800e0e0 <vTaskSwitchContext+0x58>
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	69ba      	ldr	r2, [r7, #24]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d008      	beq.n	800e0f2 <vTaskSwitchContext+0x6a>
 800e0e0:	4b27      	ldr	r3, [pc, #156]	; (800e180 <vTaskSwitchContext+0xf8>)
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	4b26      	ldr	r3, [pc, #152]	; (800e180 <vTaskSwitchContext+0xf8>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	3334      	adds	r3, #52	; 0x34
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	f7f2 fa66 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f2:	4b24      	ldr	r3, [pc, #144]	; (800e184 <vTaskSwitchContext+0xfc>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	fab3 f383 	clz	r3, r3
 800e0fe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e100:	7afb      	ldrb	r3, [r7, #11]
 800e102:	f1c3 031f 	rsb	r3, r3, #31
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	491f      	ldr	r1, [pc, #124]	; (800e188 <vTaskSwitchContext+0x100>)
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	4613      	mov	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4413      	add	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	440b      	add	r3, r1
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10b      	bne.n	800e134 <vTaskSwitchContext+0xac>
	__asm volatile
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	b672      	cpsid	i
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	b662      	cpsie	i
 800e130:	607b      	str	r3, [r7, #4]
 800e132:	e7fe      	b.n	800e132 <vTaskSwitchContext+0xaa>
 800e134:	697a      	ldr	r2, [r7, #20]
 800e136:	4613      	mov	r3, r2
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4a12      	ldr	r2, [pc, #72]	; (800e188 <vTaskSwitchContext+0x100>)
 800e140:	4413      	add	r3, r2
 800e142:	613b      	str	r3, [r7, #16]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	605a      	str	r2, [r3, #4]
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	685a      	ldr	r2, [r3, #4]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	3308      	adds	r3, #8
 800e156:	429a      	cmp	r2, r3
 800e158:	d104      	bne.n	800e164 <vTaskSwitchContext+0xdc>
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	605a      	str	r2, [r3, #4]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	4a05      	ldr	r2, [pc, #20]	; (800e180 <vTaskSwitchContext+0xf8>)
 800e16c:	6013      	str	r3, [r2, #0]
}
 800e16e:	bf00      	nop
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	200016c0 	.word	0x200016c0
 800e17c:	200016ac 	.word	0x200016ac
 800e180:	20001598 	.word	0x20001598
 800e184:	200016a0 	.word	0x200016a0
 800e188:	2000159c 	.word	0x2000159c

0800e18c <vTaskPlaceOnEventList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< Updated upstream
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10b      	bne.n	800caac <vTaskPlaceOnEventList+0x28>
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	b672      	cpsid	i
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	b662      	cpsie	i
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	e7fe      	b.n	800caaa <vTaskPlaceOnEventList+0x26>
=======
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10b      	bne.n	800e1b4 <vTaskPlaceOnEventList+0x28>
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	b672      	cpsid	i
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	b662      	cpsie	i
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	e7fe      	b.n	800e1b2 <vTaskPlaceOnEventList+0x26>
>>>>>>> Stashed changes

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800caac:	4b07      	ldr	r3, [pc, #28]	; (800cacc <vTaskPlaceOnEventList+0x48>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3318      	adds	r3, #24
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7fe fdac 	bl	800b612 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800caba:	2101      	movs	r1, #1
 800cabc:	6838      	ldr	r0, [r7, #0]
 800cabe:	f000 fa6d 	bl	800cf9c <prvAddCurrentTaskToDelayedList>
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000570 	.word	0x20000570

0800cad0 <xTaskRemoveFromEventList>:
=======
 800e1b4:	4b07      	ldr	r3, [pc, #28]	; (800e1d4 <vTaskPlaceOnEventList+0x48>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3318      	adds	r3, #24
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7fe fd8c 	bl	800ccda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1c2:	2101      	movs	r1, #1
 800e1c4:	6838      	ldr	r0, [r7, #0]
 800e1c6:	f000 fb9d 	bl	800e904 <prvAddCurrentTaskToDelayedList>
}
 800e1ca:	bf00      	nop
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20001598 	.word	0x20001598

0800e1d8 <xTaskRemoveFromEventList>:
>>>>>>> Stashed changes

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< Updated upstream
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
=======
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< Updated upstream
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10b      	bne.n	800cafe <xTaskRemoveFromEventList+0x2e>
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	b672      	cpsid	i
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	b662      	cpsie	i
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	e7fe      	b.n	800cafc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	3318      	adds	r3, #24
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fdbe 	bl	800b684 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb08:	4b1d      	ldr	r3, [pc, #116]	; (800cb80 <xTaskRemoveFromEventList+0xb0>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d11c      	bne.n	800cb4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	3304      	adds	r3, #4
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe fdb5 	bl	800b684 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1e:	2201      	movs	r2, #1
 800cb20:	409a      	lsls	r2, r3
 800cb22:	4b18      	ldr	r3, [pc, #96]	; (800cb84 <xTaskRemoveFromEventList+0xb4>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	4a16      	ldr	r2, [pc, #88]	; (800cb84 <xTaskRemoveFromEventList+0xb4>)
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	4613      	mov	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <xTaskRemoveFromEventList+0xb8>)
 800cb3a:	441a      	add	r2, r3
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7fe fd41 	bl	800b5ca <vListInsertEnd>
 800cb48:	e005      	b.n	800cb56 <xTaskRemoveFromEventList+0x86>
=======
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10b      	bne.n	800e206 <xTaskRemoveFromEventList+0x2e>
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	b672      	cpsid	i
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	b662      	cpsie	i
 800e202:	60fb      	str	r3, [r7, #12]
 800e204:	e7fe      	b.n	800e204 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	3318      	adds	r3, #24
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fd9e 	bl	800cd4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e210:	4b1d      	ldr	r3, [pc, #116]	; (800e288 <xTaskRemoveFromEventList+0xb0>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d11c      	bne.n	800e252 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	3304      	adds	r3, #4
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fe fd95 	bl	800cd4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e226:	2201      	movs	r2, #1
 800e228:	409a      	lsls	r2, r3
 800e22a:	4b18      	ldr	r3, [pc, #96]	; (800e28c <xTaskRemoveFromEventList+0xb4>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4313      	orrs	r3, r2
 800e230:	4a16      	ldr	r2, [pc, #88]	; (800e28c <xTaskRemoveFromEventList+0xb4>)
 800e232:	6013      	str	r3, [r2, #0]
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e238:	4613      	mov	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4413      	add	r3, r2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4a13      	ldr	r2, [pc, #76]	; (800e290 <xTaskRemoveFromEventList+0xb8>)
 800e242:	441a      	add	r2, r3
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	3304      	adds	r3, #4
 800e248:	4619      	mov	r1, r3
 800e24a:	4610      	mov	r0, r2
 800e24c:	f7fe fd21 	bl	800cc92 <vListInsertEnd>
 800e250:	e005      	b.n	800e25e <xTaskRemoveFromEventList+0x86>
>>>>>>> Stashed changes
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< Updated upstream
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	3318      	adds	r3, #24
 800cb4e:	4619      	mov	r1, r3
 800cb50:	480e      	ldr	r0, [pc, #56]	; (800cb8c <xTaskRemoveFromEventList+0xbc>)
 800cb52:	f7fe fd3a 	bl	800b5ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <xTaskRemoveFromEventList+0xc0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d905      	bls.n	800cb70 <xTaskRemoveFromEventList+0xa0>
=======
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	3318      	adds	r3, #24
 800e256:	4619      	mov	r1, r3
 800e258:	480e      	ldr	r0, [pc, #56]	; (800e294 <xTaskRemoveFromEventList+0xbc>)
 800e25a:	f7fe fd1a 	bl	800cc92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e262:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <xTaskRemoveFromEventList+0xc0>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e268:	429a      	cmp	r2, r3
 800e26a:	d905      	bls.n	800e278 <xTaskRemoveFromEventList+0xa0>
>>>>>>> Stashed changes
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< Updated upstream
 800cb64:	2301      	movs	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]
=======
 800e26c:	2301      	movs	r3, #1
 800e26e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< Updated upstream
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <xTaskRemoveFromEventList+0xc4>)
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	e001      	b.n	800cb74 <xTaskRemoveFromEventList+0xa4>
=======
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <xTaskRemoveFromEventList+0xc4>)
 800e272:	2201      	movs	r2, #1
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	e001      	b.n	800e27c <xTaskRemoveFromEventList+0xa4>
>>>>>>> Stashed changes
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< Updated upstream
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cb74:	697b      	ldr	r3, [r7, #20]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20000698 	.word	0x20000698
 800cb84:	20000678 	.word	0x20000678
 800cb88:	20000574 	.word	0x20000574
 800cb8c:	20000630 	.word	0x20000630
 800cb90:	20000570 	.word	0x20000570
 800cb94:	20000684 	.word	0x20000684

0800cb98 <vTaskInternalSetTimeOutState>:
=======
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e27c:	697b      	ldr	r3, [r7, #20]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3718      	adds	r7, #24
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	200016c0 	.word	0x200016c0
 800e28c:	200016a0 	.word	0x200016a0
 800e290:	2000159c 	.word	0x2000159c
 800e294:	20001658 	.word	0x20001658
 800e298:	20001598 	.word	0x20001598
 800e29c:	200016ac 	.word	0x200016ac

0800e2a0 <vTaskInternalSetTimeOutState>:
>>>>>>> Stashed changes
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< Updated upstream
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <vTaskInternalSetTimeOutState+0x24>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cba8:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <vTaskInternalSetTimeOutState+0x28>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	605a      	str	r2, [r3, #4]
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000688 	.word	0x20000688
 800cbc0:	20000674 	.word	0x20000674

0800cbc4 <xTaskCheckForTimeOut>:
=======
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2a8:	4b06      	ldr	r3, [pc, #24]	; (800e2c4 <vTaskInternalSetTimeOutState+0x24>)
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2b0:	4b05      	ldr	r3, [pc, #20]	; (800e2c8 <vTaskInternalSetTimeOutState+0x28>)
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	605a      	str	r2, [r3, #4]
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	200016b0 	.word	0x200016b0
 800e2c8:	2000169c 	.word	0x2000169c

0800e2cc <xTaskCheckForTimeOut>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< Updated upstream
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10b      	bne.n	800cbec <xTaskCheckForTimeOut+0x28>
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	b672      	cpsid	i
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	b662      	cpsie	i
 800cbe8:	613b      	str	r3, [r7, #16]
 800cbea:	e7fe      	b.n	800cbea <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10b      	bne.n	800cc0a <xTaskCheckForTimeOut+0x46>
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	b672      	cpsid	i
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	b662      	cpsie	i
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	e7fe      	b.n	800cc08 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800cc0a:	f000 fb35 	bl	800d278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc0e:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <xTaskCheckForTimeOut+0xc0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	617b      	str	r3, [r7, #20]
=======
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d10b      	bne.n	800e2f4 <xTaskCheckForTimeOut+0x28>
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	b672      	cpsid	i
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	b662      	cpsie	i
 800e2f0:	613b      	str	r3, [r7, #16]
 800e2f2:	e7fe      	b.n	800e2f2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10b      	bne.n	800e312 <xTaskCheckForTimeOut+0x46>
 800e2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fe:	b672      	cpsid	i
 800e300:	f383 8811 	msr	BASEPRI, r3
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	f3bf 8f4f 	dsb	sy
 800e30c:	b662      	cpsie	i
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	e7fe      	b.n	800e310 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e312:	f000 fc69 	bl	800ebe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e316:	4b1d      	ldr	r3, [pc, #116]	; (800e38c <xTaskCheckForTimeOut+0xc0>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	69ba      	ldr	r2, [r7, #24]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< Updated upstream
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d102      	bne.n	800cc2e <xTaskCheckForTimeOut+0x6a>
=======
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32e:	d102      	bne.n	800e336 <xTaskCheckForTimeOut+0x6a>
>>>>>>> Stashed changes
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< Updated upstream
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	e023      	b.n	800cc76 <xTaskCheckForTimeOut+0xb2>
=======
 800e330:	2300      	movs	r3, #0
 800e332:	61fb      	str	r3, [r7, #28]
 800e334:	e023      	b.n	800e37e <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< Updated upstream
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <xTaskCheckForTimeOut+0xc4>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d007      	beq.n	800cc4a <xTaskCheckForTimeOut+0x86>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d302      	bcc.n	800cc4a <xTaskCheckForTimeOut+0x86>
=======
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	4b15      	ldr	r3, [pc, #84]	; (800e390 <xTaskCheckForTimeOut+0xc4>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d007      	beq.n	800e352 <xTaskCheckForTimeOut+0x86>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	69ba      	ldr	r2, [r7, #24]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d302      	bcc.n	800e352 <xTaskCheckForTimeOut+0x86>
>>>>>>> Stashed changes
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< Updated upstream
 800cc44:	2301      	movs	r3, #1
 800cc46:	61fb      	str	r3, [r7, #28]
 800cc48:	e015      	b.n	800cc76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d20b      	bcs.n	800cc6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff ff99 	bl	800cb98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cc66:	2300      	movs	r3, #0
 800cc68:	61fb      	str	r3, [r7, #28]
 800cc6a:	e004      	b.n	800cc76 <xTaskCheckForTimeOut+0xb2>
=======
 800e34c:	2301      	movs	r3, #1
 800e34e:	61fb      	str	r3, [r7, #28]
 800e350:	e015      	b.n	800e37e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	697a      	ldr	r2, [r7, #20]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d20b      	bcs.n	800e374 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	1ad2      	subs	r2, r2, r3
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ff99 	bl	800e2a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e36e:	2300      	movs	r3, #0
 800e370:	61fb      	str	r3, [r7, #28]
 800e372:	e004      	b.n	800e37e <xTaskCheckForTimeOut+0xb2>
>>>>>>> Stashed changes
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< Updated upstream
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cc72:	2301      	movs	r3, #1
 800cc74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cc76:	f000 fb31 	bl	800d2dc <vPortExitCritical>

	return xReturn;
 800cc7a:	69fb      	ldr	r3, [r7, #28]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3720      	adds	r7, #32
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	20000674 	.word	0x20000674
 800cc88:	20000688 	.word	0x20000688

0800cc8c <vTaskMissedYield>:
=======
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	2200      	movs	r2, #0
 800e378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e37a:	2301      	movs	r3, #1
 800e37c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e37e:	f000 fc65 	bl	800ec4c <vPortExitCritical>

	return xReturn;
 800e382:	69fb      	ldr	r3, [r7, #28]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3720      	adds	r7, #32
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	2000169c 	.word	0x2000169c
 800e390:	200016b0 	.word	0x200016b0

0800e394 <vTaskMissedYield>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< Updated upstream
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <vTaskMissedYield+0x14>)
 800cc92:	2201      	movs	r2, #1
 800cc94:	601a      	str	r2, [r3, #0]
}
 800cc96:	bf00      	nop
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	20000684 	.word	0x20000684

0800cca4 <prvIdleTask>:
=======
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e398:	4b03      	ldr	r3, [pc, #12]	; (800e3a8 <vTaskMissedYield+0x14>)
 800e39a:	2201      	movs	r2, #1
 800e39c:	601a      	str	r2, [r3, #0]
}
 800e39e:	bf00      	nop
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	200016ac 	.word	0x200016ac

0800e3ac <prvIdleTask>:
>>>>>>> Stashed changes
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< Updated upstream
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
=======
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< Updated upstream
 800ccac:	f000 f854 	bl	800cd58 <prvCheckTasksWaitingTermination>
=======
 800e3b4:	f000 f854 	bl	800e460 <prvCheckTasksWaitingTermination>
>>>>>>> Stashed changes

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< Updated upstream
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <prvIdleTask+0x2c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d907      	bls.n	800ccc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ccb8:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <prvIdleTask+0x30>)
 800ccba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	f3bf 8f6f 	isb	sy
=======
 800e3b8:	4b07      	ldr	r3, [pc, #28]	; (800e3d8 <prvIdleTask+0x2c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d907      	bls.n	800e3d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e3c0:	4b06      	ldr	r3, [pc, #24]	; (800e3dc <prvIdleTask+0x30>)
 800e3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	f3bf 8f6f 	isb	sy
>>>>>>> Stashed changes
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
<<<<<<< Updated upstream
 800ccc8:	f7f3 fc72 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cccc:	e7ee      	b.n	800ccac <prvIdleTask+0x8>
 800ccce:	bf00      	nop
 800ccd0:	20000574 	.word	0x20000574
 800ccd4:	e000ed04 	.word	0xe000ed04

0800ccd8 <prvInitialiseTaskLists>:
=======
 800e3d0:	f7f2 f8ee 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e3d4:	e7ee      	b.n	800e3b4 <prvIdleTask+0x8>
 800e3d6:	bf00      	nop
 800e3d8:	2000159c 	.word	0x2000159c
 800e3dc:	e000ed04 	.word	0xe000ed04

0800e3e0 <prvInitialiseTaskLists>:
>>>>>>> Stashed changes

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< Updated upstream
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccde:	2300      	movs	r3, #0
 800cce0:	607b      	str	r3, [r7, #4]
 800cce2:	e00c      	b.n	800ccfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4a12      	ldr	r2, [pc, #72]	; (800cd38 <prvInitialiseTaskLists+0x60>)
 800ccf0:	4413      	add	r3, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe fc3c 	bl	800b570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	607b      	str	r3, [r7, #4]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b06      	cmp	r3, #6
 800cd02:	d9ef      	bls.n	800cce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd04:	480d      	ldr	r0, [pc, #52]	; (800cd3c <prvInitialiseTaskLists+0x64>)
 800cd06:	f7fe fc33 	bl	800b570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd0a:	480d      	ldr	r0, [pc, #52]	; (800cd40 <prvInitialiseTaskLists+0x68>)
 800cd0c:	f7fe fc30 	bl	800b570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd10:	480c      	ldr	r0, [pc, #48]	; (800cd44 <prvInitialiseTaskLists+0x6c>)
 800cd12:	f7fe fc2d 	bl	800b570 <vListInitialise>
=======
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	607b      	str	r3, [r7, #4]
 800e3ea:	e00c      	b.n	800e406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4a12      	ldr	r2, [pc, #72]	; (800e440 <prvInitialiseTaskLists+0x60>)
 800e3f8:	4413      	add	r3, r2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe fc1c 	bl	800cc38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	3301      	adds	r3, #1
 800e404:	607b      	str	r3, [r7, #4]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b06      	cmp	r3, #6
 800e40a:	d9ef      	bls.n	800e3ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e40c:	480d      	ldr	r0, [pc, #52]	; (800e444 <prvInitialiseTaskLists+0x64>)
 800e40e:	f7fe fc13 	bl	800cc38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e412:	480d      	ldr	r0, [pc, #52]	; (800e448 <prvInitialiseTaskLists+0x68>)
 800e414:	f7fe fc10 	bl	800cc38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e418:	480c      	ldr	r0, [pc, #48]	; (800e44c <prvInitialiseTaskLists+0x6c>)
 800e41a:	f7fe fc0d 	bl	800cc38 <vListInitialise>
>>>>>>> Stashed changes

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< Updated upstream
 800cd16:	480c      	ldr	r0, [pc, #48]	; (800cd48 <prvInitialiseTaskLists+0x70>)
 800cd18:	f7fe fc2a 	bl	800b570 <vListInitialise>
=======
 800e41e:	480c      	ldr	r0, [pc, #48]	; (800e450 <prvInitialiseTaskLists+0x70>)
 800e420:	f7fe fc0a 	bl	800cc38 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< Updated upstream
 800cd1c:	480b      	ldr	r0, [pc, #44]	; (800cd4c <prvInitialiseTaskLists+0x74>)
 800cd1e:	f7fe fc27 	bl	800b570 <vListInitialise>
=======
 800e424:	480b      	ldr	r0, [pc, #44]	; (800e454 <prvInitialiseTaskLists+0x74>)
 800e426:	f7fe fc07 	bl	800cc38 <vListInitialise>
>>>>>>> Stashed changes
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< Updated upstream
 800cd22:	4b0b      	ldr	r3, [pc, #44]	; (800cd50 <prvInitialiseTaskLists+0x78>)
 800cd24:	4a05      	ldr	r2, [pc, #20]	; (800cd3c <prvInitialiseTaskLists+0x64>)
 800cd26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd28:	4b0a      	ldr	r3, [pc, #40]	; (800cd54 <prvInitialiseTaskLists+0x7c>)
 800cd2a:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <prvInitialiseTaskLists+0x68>)
 800cd2c:	601a      	str	r2, [r3, #0]
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20000574 	.word	0x20000574
 800cd3c:	20000600 	.word	0x20000600
 800cd40:	20000614 	.word	0x20000614
 800cd44:	20000630 	.word	0x20000630
 800cd48:	20000644 	.word	0x20000644
 800cd4c:	2000065c 	.word	0x2000065c
 800cd50:	20000628 	.word	0x20000628
 800cd54:	2000062c 	.word	0x2000062c

0800cd58 <prvCheckTasksWaitingTermination>:
=======
 800e42a:	4b0b      	ldr	r3, [pc, #44]	; (800e458 <prvInitialiseTaskLists+0x78>)
 800e42c:	4a05      	ldr	r2, [pc, #20]	; (800e444 <prvInitialiseTaskLists+0x64>)
 800e42e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e430:	4b0a      	ldr	r3, [pc, #40]	; (800e45c <prvInitialiseTaskLists+0x7c>)
 800e432:	4a05      	ldr	r2, [pc, #20]	; (800e448 <prvInitialiseTaskLists+0x68>)
 800e434:	601a      	str	r2, [r3, #0]
}
 800e436:	bf00      	nop
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	2000159c 	.word	0x2000159c
 800e444:	20001628 	.word	0x20001628
 800e448:	2000163c 	.word	0x2000163c
 800e44c:	20001658 	.word	0x20001658
 800e450:	2000166c 	.word	0x2000166c
 800e454:	20001684 	.word	0x20001684
 800e458:	20001650 	.word	0x20001650
 800e45c:	20001654 	.word	0x20001654

0800e460 <prvCheckTasksWaitingTermination>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< Updated upstream
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
=======
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< Updated upstream
 800cd5e:	e019      	b.n	800cd94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cd60:	f000 fa8a 	bl	800d278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <prvCheckTasksWaitingTermination+0x4c>)
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fc87 	bl	800b684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cd76:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <prvCheckTasksWaitingTermination+0x50>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	4a0a      	ldr	r2, [pc, #40]	; (800cda8 <prvCheckTasksWaitingTermination+0x50>)
 800cd7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cd80:	4b0a      	ldr	r3, [pc, #40]	; (800cdac <prvCheckTasksWaitingTermination+0x54>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <prvCheckTasksWaitingTermination+0x54>)
 800cd88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cd8a:	f000 faa7 	bl	800d2dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f80e 	bl	800cdb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cd94:	4b05      	ldr	r3, [pc, #20]	; (800cdac <prvCheckTasksWaitingTermination+0x54>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e1      	bne.n	800cd60 <prvCheckTasksWaitingTermination+0x8>
=======
 800e466:	e019      	b.n	800e49c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e468:	f000 fbbe 	bl	800ebe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e46c:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <prvCheckTasksWaitingTermination+0x4c>)
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3304      	adds	r3, #4
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe fc67 	bl	800cd4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e47e:	4b0c      	ldr	r3, [pc, #48]	; (800e4b0 <prvCheckTasksWaitingTermination+0x50>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	3b01      	subs	r3, #1
 800e484:	4a0a      	ldr	r2, [pc, #40]	; (800e4b0 <prvCheckTasksWaitingTermination+0x50>)
 800e486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e488:	4b0a      	ldr	r3, [pc, #40]	; (800e4b4 <prvCheckTasksWaitingTermination+0x54>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	4a09      	ldr	r2, [pc, #36]	; (800e4b4 <prvCheckTasksWaitingTermination+0x54>)
 800e490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e492:	f000 fbdb 	bl	800ec4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f80e 	bl	800e4b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e49c:	4b05      	ldr	r3, [pc, #20]	; (800e4b4 <prvCheckTasksWaitingTermination+0x54>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1e1      	bne.n	800e468 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> Stashed changes
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< Updated upstream
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20000644 	.word	0x20000644
 800cda8:	20000670 	.word	0x20000670
 800cdac:	20000658 	.word	0x20000658

0800cdb0 <prvDeleteTCB>:
=======
 800e4a4:	bf00      	nop
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	2000166c 	.word	0x2000166c
 800e4b0:	20001698 	.word	0x20001698
 800e4b4:	20001680 	.word	0x20001680

0800e4b8 <prvDeleteTCB>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< Updated upstream
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
=======
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< Updated upstream
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d108      	bne.n	800cdd4 <prvDeleteTCB+0x24>
=======
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d108      	bne.n	800e4dc <prvDeleteTCB+0x24>
>>>>>>> Stashed changes
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< Updated upstream
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 fc44 	bl	800d654 <vPortFree>
				vPortFree( pxTCB );
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fc41 	bl	800d654 <vPortFree>
=======
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 fd78 	bl	800efc4 <vPortFree>
				vPortFree( pxTCB );
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fd75 	bl	800efc4 <vPortFree>
>>>>>>> Stashed changes
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< Updated upstream
 800cdd2:	e019      	b.n	800ce08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d103      	bne.n	800cde6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fc38 	bl	800d654 <vPortFree>
	}
 800cde4:	e010      	b.n	800ce08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d00b      	beq.n	800ce08 <prvDeleteTCB+0x58>
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	b672      	cpsid	i
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	b662      	cpsie	i
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e7fe      	b.n	800ce06 <prvDeleteTCB+0x56>
	}
 800ce08:	bf00      	nop
 800ce0a:	3710      	adds	r7, #16
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <prvResetNextTaskUnblockTime>:
=======
 800e4da:	e019      	b.n	800e510 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d103      	bne.n	800e4ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fd6c 	bl	800efc4 <vPortFree>
	}
 800e4ec:	e010      	b.n	800e510 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e4f4:	2b02      	cmp	r3, #2
 800e4f6:	d00b      	beq.n	800e510 <prvDeleteTCB+0x58>
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	b672      	cpsid	i
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	b662      	cpsie	i
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	e7fe      	b.n	800e50e <prvDeleteTCB+0x56>
	}
 800e510:	bf00      	nop
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <prvResetNextTaskUnblockTime>:
>>>>>>> Stashed changes

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< Updated upstream
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce16:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <prvResetNextTaskUnblockTime+0x38>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d104      	bne.n	800ce2a <prvResetNextTaskUnblockTime+0x1a>
=======
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e51e:	4b0c      	ldr	r3, [pc, #48]	; (800e550 <prvResetNextTaskUnblockTime+0x38>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d104      	bne.n	800e532 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> Stashed changes
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< Updated upstream
 800ce20:	4b0a      	ldr	r3, [pc, #40]	; (800ce4c <prvResetNextTaskUnblockTime+0x3c>)
 800ce22:	f04f 32ff 	mov.w	r2, #4294967295
 800ce26:	601a      	str	r2, [r3, #0]
=======
 800e528:	4b0a      	ldr	r3, [pc, #40]	; (800e554 <prvResetNextTaskUnblockTime+0x3c>)
 800e52a:	f04f 32ff 	mov.w	r2, #4294967295
 800e52e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< Updated upstream
 800ce28:	e008      	b.n	800ce3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <prvResetNextTaskUnblockTime+0x38>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	4a04      	ldr	r2, [pc, #16]	; (800ce4c <prvResetNextTaskUnblockTime+0x3c>)
 800ce3a:	6013      	str	r3, [r2, #0]
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	20000628 	.word	0x20000628
 800ce4c:	20000690 	.word	0x20000690

0800ce50 <xTaskGetSchedulerState>:
=======
 800e530:	e008      	b.n	800e544 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e532:	4b07      	ldr	r3, [pc, #28]	; (800e550 <prvResetNextTaskUnblockTime+0x38>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	4a04      	ldr	r2, [pc, #16]	; (800e554 <prvResetNextTaskUnblockTime+0x3c>)
 800e542:	6013      	str	r3, [r2, #0]
}
 800e544:	bf00      	nop
 800e546:	370c      	adds	r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr
 800e550:	20001650 	.word	0x20001650
 800e554:	200016b8 	.word	0x200016b8

0800e558 <xTaskGetSchedulerState>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< Updated upstream
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <xTaskGetSchedulerState+0x34>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d102      	bne.n	800ce64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	607b      	str	r3, [r7, #4]
 800ce62:	e008      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
=======
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e55e:	4b0b      	ldr	r3, [pc, #44]	; (800e58c <xTaskGetSchedulerState+0x34>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d102      	bne.n	800e56c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e566:	2301      	movs	r3, #1
 800e568:	607b      	str	r3, [r7, #4]
 800e56a:	e008      	b.n	800e57e <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< Updated upstream
 800ce64:	4b08      	ldr	r3, [pc, #32]	; (800ce88 <xTaskGetSchedulerState+0x38>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	607b      	str	r3, [r7, #4]
 800ce70:	e001      	b.n	800ce76 <xTaskGetSchedulerState+0x26>
=======
 800e56c:	4b08      	ldr	r3, [pc, #32]	; (800e590 <xTaskGetSchedulerState+0x38>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d102      	bne.n	800e57a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e574:	2302      	movs	r3, #2
 800e576:	607b      	str	r3, [r7, #4]
 800e578:	e001      	b.n	800e57e <xTaskGetSchedulerState+0x26>
>>>>>>> Stashed changes
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< Updated upstream
 800ce72:	2300      	movs	r3, #0
 800ce74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ce76:	687b      	ldr	r3, [r7, #4]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	2000067c 	.word	0x2000067c
 800ce88:	20000698 	.word	0x20000698

0800ce8c <xTaskPriorityDisinherit>:
=======
 800e57a:	2300      	movs	r3, #0
 800e57c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e57e:	687b      	ldr	r3, [r7, #4]
	}
 800e580:	4618      	mov	r0, r3
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	200016a4 	.word	0x200016a4
 800e590:	200016c0 	.word	0x200016c0

0800e594 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d069      	beq.n	800e67e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ae:	4b36      	ldr	r3, [pc, #216]	; (800e688 <xTaskPriorityInherit+0xf4>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d259      	bcs.n	800e66c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	699b      	ldr	r3, [r3, #24]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	db06      	blt.n	800e5ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c0:	4b31      	ldr	r3, [pc, #196]	; (800e688 <xTaskPriorityInherit+0xf4>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c6:	f1c3 0207 	rsb	r2, r3, #7
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6959      	ldr	r1, [r3, #20]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4413      	add	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4a2b      	ldr	r2, [pc, #172]	; (800e68c <xTaskPriorityInherit+0xf8>)
 800e5e0:	4413      	add	r3, r2
 800e5e2:	4299      	cmp	r1, r3
 800e5e4:	d13a      	bne.n	800e65c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fe fbae 	bl	800cd4c <uxListRemove>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d115      	bne.n	800e622 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fa:	4924      	ldr	r1, [pc, #144]	; (800e68c <xTaskPriorityInherit+0xf8>)
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	440b      	add	r3, r1
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <xTaskPriorityInherit+0x8e>
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e610:	2201      	movs	r2, #1
 800e612:	fa02 f303 	lsl.w	r3, r2, r3
 800e616:	43da      	mvns	r2, r3
 800e618:	4b1d      	ldr	r3, [pc, #116]	; (800e690 <xTaskPriorityInherit+0xfc>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4013      	ands	r3, r2
 800e61e:	4a1c      	ldr	r2, [pc, #112]	; (800e690 <xTaskPriorityInherit+0xfc>)
 800e620:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e622:	4b19      	ldr	r3, [pc, #100]	; (800e688 <xTaskPriorityInherit+0xf4>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e630:	2201      	movs	r2, #1
 800e632:	409a      	lsls	r2, r3
 800e634:	4b16      	ldr	r3, [pc, #88]	; (800e690 <xTaskPriorityInherit+0xfc>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4313      	orrs	r3, r2
 800e63a:	4a15      	ldr	r2, [pc, #84]	; (800e690 <xTaskPriorityInherit+0xfc>)
 800e63c:	6013      	str	r3, [r2, #0]
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e642:	4613      	mov	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4413      	add	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4a10      	ldr	r2, [pc, #64]	; (800e68c <xTaskPriorityInherit+0xf8>)
 800e64c:	441a      	add	r2, r3
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	3304      	adds	r3, #4
 800e652:	4619      	mov	r1, r3
 800e654:	4610      	mov	r0, r2
 800e656:	f7fe fb1c 	bl	800cc92 <vListInsertEnd>
 800e65a:	e004      	b.n	800e666 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e65c:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <xTaskPriorityInherit+0xf4>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e666:	2301      	movs	r3, #1
 800e668:	60fb      	str	r3, [r7, #12]
 800e66a:	e008      	b.n	800e67e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e670:	4b05      	ldr	r3, [pc, #20]	; (800e688 <xTaskPriorityInherit+0xf4>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e676:	429a      	cmp	r2, r3
 800e678:	d201      	bcs.n	800e67e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e67a:	2301      	movs	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e67e:	68fb      	ldr	r3, [r7, #12]
	}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	20001598 	.word	0x20001598
 800e68c:	2000159c 	.word	0x2000159c
 800e690:	200016a0 	.word	0x200016a0

0800e694 <xTaskPriorityDisinherit>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< Updated upstream
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d070      	beq.n	800cf84 <xTaskPriorityDisinherit+0xf8>
=======
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d070      	beq.n	800e78c <xTaskPriorityDisinherit+0xf8>
>>>>>>> Stashed changes
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< Updated upstream
 800cea2:	4b3b      	ldr	r3, [pc, #236]	; (800cf90 <xTaskPriorityDisinherit+0x104>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d00b      	beq.n	800cec4 <xTaskPriorityDisinherit+0x38>
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	b672      	cpsid	i
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	b662      	cpsie	i
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	e7fe      	b.n	800cec2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10b      	bne.n	800cee4 <xTaskPriorityDisinherit+0x58>
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	b672      	cpsid	i
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	b662      	cpsie	i
 800cee0:	60bb      	str	r3, [r7, #8]
 800cee2:	e7fe      	b.n	800cee2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cee8:	1e5a      	subs	r2, r3, #1
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	649a      	str	r2, [r3, #72]	; 0x48
=======
 800e6aa:	4b3b      	ldr	r3, [pc, #236]	; (800e798 <xTaskPriorityDisinherit+0x104>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	693a      	ldr	r2, [r7, #16]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d00b      	beq.n	800e6cc <xTaskPriorityDisinherit+0x38>
 800e6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b8:	b672      	cpsid	i
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	b662      	cpsie	i
 800e6c8:	60fb      	str	r3, [r7, #12]
 800e6ca:	e7fe      	b.n	800e6ca <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10b      	bne.n	800e6ec <xTaskPriorityDisinherit+0x58>
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	b672      	cpsid	i
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	b662      	cpsie	i
 800e6e8:	60bb      	str	r3, [r7, #8]
 800e6ea:	e7fe      	b.n	800e6ea <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f0:	1e5a      	subs	r2, r3, #1
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> Stashed changes

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< Updated upstream
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d044      	beq.n	800cf84 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d140      	bne.n	800cf84 <xTaskPriorityDisinherit+0xf8>
=======
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d044      	beq.n	800e78c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e706:	2b00      	cmp	r3, #0
 800e708:	d140      	bne.n	800e78c <xTaskPriorityDisinherit+0xf8>
>>>>>>> Stashed changes
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	3304      	adds	r3, #4
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fbbc 	bl	800b684 <uxListRemove>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d115      	bne.n	800cf3e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf16:	491f      	ldr	r1, [pc, #124]	; (800cf94 <xTaskPriorityDisinherit+0x108>)
 800cf18:	4613      	mov	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	440b      	add	r3, r1
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10a      	bne.n	800cf3e <xTaskPriorityDisinherit+0xb2>
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf32:	43da      	mvns	r2, r3
 800cf34:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4013      	ands	r3, r2
 800cf3a:	4a17      	ldr	r2, [pc, #92]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf3c:	6013      	str	r3, [r2, #0]
=======
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	3304      	adds	r3, #4
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fe fb1c 	bl	800cd4c <uxListRemove>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d115      	bne.n	800e746 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71e:	491f      	ldr	r1, [pc, #124]	; (800e79c <xTaskPriorityDisinherit+0x108>)
 800e720:	4613      	mov	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	440b      	add	r3, r1
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xTaskPriorityDisinherit+0xb2>
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	2201      	movs	r2, #1
 800e736:	fa02 f303 	lsl.w	r3, r2, r3
 800e73a:	43da      	mvns	r2, r3
 800e73c:	4b18      	ldr	r3, [pc, #96]	; (800e7a0 <xTaskPriorityDisinherit+0x10c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4013      	ands	r3, r2
 800e742:	4a17      	ldr	r2, [pc, #92]	; (800e7a0 <xTaskPriorityDisinherit+0x10c>)
 800e744:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< Updated upstream
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< Updated upstream
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4a:	f1c3 0207 	rsb	r2, r3, #7
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf56:	2201      	movs	r2, #1
 800cf58:	409a      	lsls	r2, r3
 800cf5a:	4b0f      	ldr	r3, [pc, #60]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	4a0d      	ldr	r2, [pc, #52]	; (800cf98 <xTaskPriorityDisinherit+0x10c>)
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf68:	4613      	mov	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4a08      	ldr	r2, [pc, #32]	; (800cf94 <xTaskPriorityDisinherit+0x108>)
 800cf72:	441a      	add	r2, r3
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4610      	mov	r0, r2
 800cf7c:	f7fe fb25 	bl	800b5ca <vListInsertEnd>
=======
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e752:	f1c3 0207 	rsb	r2, r3, #7
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e75e:	2201      	movs	r2, #1
 800e760:	409a      	lsls	r2, r3
 800e762:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <xTaskPriorityDisinherit+0x10c>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4313      	orrs	r3, r2
 800e768:	4a0d      	ldr	r2, [pc, #52]	; (800e7a0 <xTaskPriorityDisinherit+0x10c>)
 800e76a:	6013      	str	r3, [r2, #0]
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e770:	4613      	mov	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4a08      	ldr	r2, [pc, #32]	; (800e79c <xTaskPriorityDisinherit+0x108>)
 800e77a:	441a      	add	r2, r3
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	3304      	adds	r3, #4
 800e780:	4619      	mov	r1, r3
 800e782:	4610      	mov	r0, r2
 800e784:	f7fe fa85 	bl	800cc92 <vListInsertEnd>
>>>>>>> Stashed changes
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< Updated upstream
 800cf80:	2301      	movs	r3, #1
 800cf82:	617b      	str	r3, [r7, #20]
=======
 800e788:	2301      	movs	r3, #1
 800e78a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< Updated upstream
 800cf84:	697b      	ldr	r3, [r7, #20]
	}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000570 	.word	0x20000570
 800cf94:	20000574 	.word	0x20000574
 800cf98:	20000678 	.word	0x20000678

0800cf9c <prvAddCurrentTaskToDelayedList>:
=======
 800e78c:	697b      	ldr	r3, [r7, #20]
	}
 800e78e:	4618      	mov	r0, r3
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	20001598 	.word	0x20001598
 800e79c:	2000159c 	.word	0x2000159c
 800e7a0:	200016a0 	.word	0x200016a0

0800e7a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	f000 8085 	beq.w	800e8c8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d10b      	bne.n	800e7de <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ca:	b672      	cpsid	i
 800e7cc:	f383 8811 	msr	BASEPRI, r3
 800e7d0:	f3bf 8f6f 	isb	sy
 800e7d4:	f3bf 8f4f 	dsb	sy
 800e7d8:	b662      	cpsie	i
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e7fe      	b.n	800e7dc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d902      	bls.n	800e7ee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	61fb      	str	r3, [r7, #28]
 800e7ec:	e002      	b.n	800e7f4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f8:	69fa      	ldr	r2, [r7, #28]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d064      	beq.n	800e8c8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e802:	697a      	ldr	r2, [r7, #20]
 800e804:	429a      	cmp	r2, r3
 800e806:	d15f      	bne.n	800e8c8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e808:	4b31      	ldr	r3, [pc, #196]	; (800e8d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	69ba      	ldr	r2, [r7, #24]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d10b      	bne.n	800e82a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e816:	b672      	cpsid	i
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	b662      	cpsie	i
 800e826:	60bb      	str	r3, [r7, #8]
 800e828:	e7fe      	b.n	800e828 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	69fa      	ldr	r2, [r7, #28]
 800e834:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	db04      	blt.n	800e848 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	f1c3 0207 	rsb	r2, r3, #7
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	6959      	ldr	r1, [r3, #20]
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	4613      	mov	r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	4413      	add	r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4a1f      	ldr	r2, [pc, #124]	; (800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e858:	4413      	add	r3, r2
 800e85a:	4299      	cmp	r1, r3
 800e85c:	d134      	bne.n	800e8c8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	3304      	adds	r3, #4
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe fa72 	bl	800cd4c <uxListRemove>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d115      	bne.n	800e89a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e872:	4918      	ldr	r1, [pc, #96]	; (800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e874:	4613      	mov	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	4413      	add	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	440b      	add	r3, r1
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d10a      	bne.n	800e89a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e888:	2201      	movs	r2, #1
 800e88a:	fa02 f303 	lsl.w	r3, r2, r3
 800e88e:	43da      	mvns	r2, r3
 800e890:	4b11      	ldr	r3, [pc, #68]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4013      	ands	r3, r2
 800e896:	4a10      	ldr	r2, [pc, #64]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e898:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89e:	2201      	movs	r2, #1
 800e8a0:	409a      	lsls	r2, r3
 800e8a2:	4b0d      	ldr	r3, [pc, #52]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	4a0b      	ldr	r2, [pc, #44]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b0:	4613      	mov	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4413      	add	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4a06      	ldr	r2, [pc, #24]	; (800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e8ba:	441a      	add	r2, r3
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	f7fe f9e5 	bl	800cc92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8c8:	bf00      	nop
 800e8ca:	3720      	adds	r7, #32
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	20001598 	.word	0x20001598
 800e8d4:	2000159c 	.word	0x2000159c
 800e8d8:	200016a0 	.word	0x200016a0

0800e8dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8dc:	b480      	push	{r7}
 800e8de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8e0:	4b07      	ldr	r3, [pc, #28]	; (800e900 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d004      	beq.n	800e8f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8e8:	4b05      	ldr	r3, [pc, #20]	; (800e900 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8ee:	3201      	adds	r2, #1
 800e8f0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e8f2:	4b03      	ldr	r3, [pc, #12]	; (800e900 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
	}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	20001598 	.word	0x20001598

0800e904 <prvAddCurrentTaskToDelayedList>:
>>>>>>> Stashed changes
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< Updated upstream
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfa6:	4b29      	ldr	r3, [pc, #164]	; (800d04c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
=======
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e90e:	4b29      	ldr	r3, [pc, #164]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< Updated upstream
 800cfac:	4b28      	ldr	r3, [pc, #160]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fb66 	bl	800b684 <uxListRemove>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800e914:	4b28      	ldr	r3, [pc, #160]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3304      	adds	r3, #4
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fe fa16 	bl	800cd4c <uxListRemove>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d10b      	bne.n	800e93e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> Stashed changes
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< Updated upstream
 800cfbe:	4b24      	ldr	r3, [pc, #144]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfca:	43da      	mvns	r2, r3
 800cfcc:	4b21      	ldr	r3, [pc, #132]	; (800d054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	4a20      	ldr	r2, [pc, #128]	; (800d054 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfd4:	6013      	str	r3, [r2, #0]
=======
 800e926:	4b24      	ldr	r3, [pc, #144]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e92c:	2201      	movs	r2, #1
 800e92e:	fa02 f303 	lsl.w	r3, r2, r3
 800e932:	43da      	mvns	r2, r3
 800e934:	4b21      	ldr	r3, [pc, #132]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4013      	ands	r3, r2
 800e93a:	4a20      	ldr	r2, [pc, #128]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e93c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< Updated upstream
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfdc:	d10a      	bne.n	800cff4 <prvAddCurrentTaskToDelayedList+0x58>
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <prvAddCurrentTaskToDelayedList+0x58>
=======
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e944:	d10a      	bne.n	800e95c <prvAddCurrentTaskToDelayedList+0x58>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d007      	beq.n	800e95c <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> Stashed changes
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< Updated upstream
 800cfe4:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	4619      	mov	r1, r3
 800cfec:	481a      	ldr	r0, [pc, #104]	; (800d058 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cfee:	f7fe faec 	bl	800b5ca <vListInsertEnd>
=======
 800e94c:	4b1a      	ldr	r3, [pc, #104]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3304      	adds	r3, #4
 800e952:	4619      	mov	r1, r3
 800e954:	481a      	ldr	r0, [pc, #104]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e956:	f7fe f99c 	bl	800cc92 <vListInsertEnd>
>>>>>>> Stashed changes

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< Updated upstream
 800cff2:	e026      	b.n	800d042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4413      	add	r3, r2
 800cffa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cffc:	4b14      	ldr	r3, [pc, #80]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d004:	68ba      	ldr	r2, [r7, #8]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d209      	bcs.n	800d020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d00c:	4b13      	ldr	r3, [pc, #76]	; (800d05c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3304      	adds	r3, #4
 800d016:	4619      	mov	r1, r3
 800d018:	4610      	mov	r0, r2
 800d01a:	f7fe fafa 	bl	800b612 <vListInsert>
}
 800d01e:	e010      	b.n	800d042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d020:	4b0f      	ldr	r3, [pc, #60]	; (800d060 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	3304      	adds	r3, #4
 800d02a:	4619      	mov	r1, r3
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7fe faf0 	bl	800b612 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d032:	4b0c      	ldr	r3, [pc, #48]	; (800d064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d202      	bcs.n	800d042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d03c:	4a09      	ldr	r2, [pc, #36]	; (800d064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	6013      	str	r3, [r2, #0]
}
 800d042:	bf00      	nop
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	20000674 	.word	0x20000674
 800d050:	20000570 	.word	0x20000570
 800d054:	20000678 	.word	0x20000678
 800d058:	2000065c 	.word	0x2000065c
 800d05c:	2000062c 	.word	0x2000062c
 800d060:	20000628 	.word	0x20000628
 800d064:	20000690 	.word	0x20000690

0800d068 <pxPortInitialiseStack>:
=======
 800e95a:	e026      	b.n	800e9aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4413      	add	r3, r2
 800e962:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e964:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	429a      	cmp	r2, r3
 800e972:	d209      	bcs.n	800e988 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e974:	4b13      	ldr	r3, [pc, #76]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	4b0f      	ldr	r3, [pc, #60]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3304      	adds	r3, #4
 800e97e:	4619      	mov	r1, r3
 800e980:	4610      	mov	r0, r2
 800e982:	f7fe f9aa 	bl	800ccda <vListInsert>
}
 800e986:	e010      	b.n	800e9aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e988:	4b0f      	ldr	r3, [pc, #60]	; (800e9c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3304      	adds	r3, #4
 800e992:	4619      	mov	r1, r3
 800e994:	4610      	mov	r0, r2
 800e996:	f7fe f9a0 	bl	800ccda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e99a:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d202      	bcs.n	800e9aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e9a4:	4a09      	ldr	r2, [pc, #36]	; (800e9cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	6013      	str	r3, [r2, #0]
}
 800e9aa:	bf00      	nop
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000169c 	.word	0x2000169c
 800e9b8:	20001598 	.word	0x20001598
 800e9bc:	200016a0 	.word	0x200016a0
 800e9c0:	20001684 	.word	0x20001684
 800e9c4:	20001654 	.word	0x20001654
 800e9c8:	20001650 	.word	0x20001650
 800e9cc:	200016b8 	.word	0x200016b8

0800e9d0 <pxPortInitialiseStack>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< Updated upstream
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
=======
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3b04      	subs	r3, #4
 800d078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3b04      	subs	r3, #4
 800d086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f023 0201 	bic.w	r2, r3, #1
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3b04      	subs	r3, #4
 800d096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d098:	4a0c      	ldr	r2, [pc, #48]	; (800d0cc <pxPortInitialiseStack+0x64>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3b14      	subs	r3, #20
 800d0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	601a      	str	r2, [r3, #0]
=======
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	3b04      	subs	r3, #4
 800e9e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3b04      	subs	r3, #4
 800e9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	f023 0201 	bic.w	r2, r3, #1
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3b04      	subs	r3, #4
 800e9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea00:	4a0c      	ldr	r2, [pc, #48]	; (800ea34 <pxPortInitialiseStack+0x64>)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	3b14      	subs	r3, #20
 800ea0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< Updated upstream
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3b04      	subs	r3, #4
 800d0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f06f 0202 	mvn.w	r2, #2
 800d0b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3b20      	subs	r3, #32
 800d0bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0be:	68fb      	ldr	r3, [r7, #12]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	0800d0d1 	.word	0x0800d0d1

0800d0d0 <prvTaskExitError>:
=======
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	3b04      	subs	r3, #4
 800ea16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f06f 0202 	mvn.w	r2, #2
 800ea1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	3b20      	subs	r3, #32
 800ea24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea26:	68fb      	ldr	r3, [r7, #12]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3714      	adds	r7, #20
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	0800ea39 	.word	0x0800ea39

0800ea38 <prvTaskExitError>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< Updated upstream
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	607b      	str	r3, [r7, #4]
=======
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< Updated upstream
 800d0da:	4b13      	ldr	r3, [pc, #76]	; (800d128 <prvTaskExitError+0x58>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e2:	d00b      	beq.n	800d0fc <prvTaskExitError+0x2c>
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	b672      	cpsid	i
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	b662      	cpsie	i
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e7fe      	b.n	800d0fa <prvTaskExitError+0x2a>
 800d0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d100:	b672      	cpsid	i
 800d102:	f383 8811 	msr	BASEPRI, r3
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	b662      	cpsie	i
 800d110:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d112:	bf00      	nop
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0fc      	beq.n	800d114 <prvTaskExitError+0x44>
=======
 800ea42:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <prvTaskExitError+0x58>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4a:	d00b      	beq.n	800ea64 <prvTaskExitError+0x2c>
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	b672      	cpsid	i
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	b662      	cpsie	i
 800ea60:	60fb      	str	r3, [r7, #12]
 800ea62:	e7fe      	b.n	800ea62 <prvTaskExitError+0x2a>
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	b672      	cpsid	i
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	b662      	cpsie	i
 800ea78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea7a:	bf00      	nop
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d0fc      	beq.n	800ea7c <prvTaskExitError+0x44>
>>>>>>> Stashed changes
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< Updated upstream
 800d11a:	bf00      	nop
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	20000040 	.word	0x20000040
 800d12c:	00000000 	.word	0x00000000

0800d130 <SVC_Handler>:
=======
 800ea82:	bf00      	nop
 800ea84:	3714      	adds	r7, #20
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	2000103c 	.word	0x2000103c
	...

0800eaa0 <SVC_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< Updated upstream
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <pxCurrentTCBConst2>)
 800d132:	6819      	ldr	r1, [r3, #0]
 800d134:	6808      	ldr	r0, [r1, #0]
 800d136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13a:	f380 8809 	msr	PSP, r0
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8811 	msr	BASEPRI, r0
 800d14a:	4770      	bx	lr
 800d14c:	f3af 8000 	nop.w

0800d150 <pxCurrentTCBConst2>:
 800d150:	20000570 	.word	0x20000570
=======
 800eaa0:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <pxCurrentTCBConst2>)
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	6808      	ldr	r0, [r1, #0]
 800eaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaaa:	f380 8809 	msr	PSP, r0
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8811 	msr	BASEPRI, r0
 800eaba:	4770      	bx	lr
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst2>:
 800eac0:	20001598 	.word	0x20001598
>>>>>>> Stashed changes
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< Updated upstream
 800d154:	bf00      	nop
 800d156:	bf00      	nop

0800d158 <prvPortStartFirstTask>:
=======
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <prvPortStartFirstTask>:
>>>>>>> Stashed changes
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< Updated upstream
 800d158:	4808      	ldr	r0, [pc, #32]	; (800d17c <prvPortStartFirstTask+0x24>)
 800d15a:	6800      	ldr	r0, [r0, #0]
 800d15c:	6800      	ldr	r0, [r0, #0]
 800d15e:	f380 8808 	msr	MSP, r0
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	f380 8814 	msr	CONTROL, r0
 800d16a:	b662      	cpsie	i
 800d16c:	b661      	cpsie	f
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	df00      	svc	0
 800d178:	bf00      	nop
=======
 800eac8:	4808      	ldr	r0, [pc, #32]	; (800eaec <prvPortStartFirstTask+0x24>)
 800eaca:	6800      	ldr	r0, [r0, #0]
 800eacc:	6800      	ldr	r0, [r0, #0]
 800eace:	f380 8808 	msr	MSP, r0
 800ead2:	f04f 0000 	mov.w	r0, #0
 800ead6:	f380 8814 	msr	CONTROL, r0
 800eada:	b662      	cpsie	i
 800eadc:	b661      	cpsie	f
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	df00      	svc	0
 800eae8:	bf00      	nop
>>>>>>> Stashed changes
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< Updated upstream
 800d17a:	bf00      	nop
 800d17c:	e000ed08 	.word	0xe000ed08

0800d180 <xPortStartScheduler>:
=======
 800eaea:	bf00      	nop
 800eaec:	e000ed08 	.word	0xe000ed08

0800eaf0 <xPortStartScheduler>:
>>>>>>> Stashed changes

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< Updated upstream
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
=======
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< Updated upstream
 800d186:	4b36      	ldr	r3, [pc, #216]	; (800d260 <xPortStartScheduler+0xe0>)
 800d188:	60fb      	str	r3, [r7, #12]
=======
 800eaf6:	4b36      	ldr	r3, [pc, #216]	; (800ebd0 <xPortStartScheduler+0xe0>)
 800eaf8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< Updated upstream
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	607b      	str	r3, [r7, #4]
=======
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< Updated upstream
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	22ff      	movs	r2, #255	; 0xff
 800d196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	4b2e      	ldr	r3, [pc, #184]	; (800d264 <xPortStartScheduler+0xe4>)
 800d1ac:	701a      	strb	r2, [r3, #0]
=======
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	22ff      	movs	r2, #255	; 0xff
 800eb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	4b2e      	ldr	r3, [pc, #184]	; (800ebd4 <xPortStartScheduler+0xe4>)
 800eb1c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< Updated upstream
 800d1ae:	4b2e      	ldr	r3, [pc, #184]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1b0:	2207      	movs	r2, #7
 800d1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1b4:	e009      	b.n	800d1ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d1b6:	4b2c      	ldr	r3, [pc, #176]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	4a2a      	ldr	r2, [pc, #168]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ca:	78fb      	ldrb	r3, [r7, #3]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1d2:	2b80      	cmp	r3, #128	; 0x80
 800d1d4:	d0ef      	beq.n	800d1b6 <xPortStartScheduler+0x36>
=======
 800eb1e:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb20:	2207      	movs	r2, #7
 800eb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb24:	e009      	b.n	800eb3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb26:	4b2c      	ldr	r3, [pc, #176]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	4a2a      	ldr	r2, [pc, #168]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb3a:	78fb      	ldrb	r3, [r7, #3]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb42:	2b80      	cmp	r3, #128	; 0x80
 800eb44:	d0ef      	beq.n	800eb26 <xPortStartScheduler+0x36>
>>>>>>> Stashed changes
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< Updated upstream
 800d1d6:	4b24      	ldr	r3, [pc, #144]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f1c3 0307 	rsb	r3, r3, #7
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	d00b      	beq.n	800d1fa <xPortStartScheduler+0x7a>
 800d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e6:	b672      	cpsid	i
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	b662      	cpsie	i
 800d1f6:	60bb      	str	r3, [r7, #8]
 800d1f8:	e7fe      	b.n	800d1f8 <xPortStartScheduler+0x78>
=======
 800eb46:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f1c3 0307 	rsb	r3, r3, #7
 800eb4e:	2b04      	cmp	r3, #4
 800eb50:	d00b      	beq.n	800eb6a <xPortStartScheduler+0x7a>
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	b672      	cpsid	i
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	b662      	cpsie	i
 800eb66:	60bb      	str	r3, [r7, #8]
 800eb68:	e7fe      	b.n	800eb68 <xPortStartScheduler+0x78>
>>>>>>> Stashed changes
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< Updated upstream
 800d1fa:	4b1b      	ldr	r3, [pc, #108]	; (800d268 <xPortStartScheduler+0xe8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	021b      	lsls	r3, r3, #8
 800d200:	4a19      	ldr	r2, [pc, #100]	; (800d268 <xPortStartScheduler+0xe8>)
 800d202:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d204:	4b18      	ldr	r3, [pc, #96]	; (800d268 <xPortStartScheduler+0xe8>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d20c:	4a16      	ldr	r2, [pc, #88]	; (800d268 <xPortStartScheduler+0xe8>)
 800d20e:	6013      	str	r3, [r2, #0]
=======
 800eb6a:	4b1b      	ldr	r3, [pc, #108]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	4a19      	ldr	r2, [pc, #100]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb74:	4b18      	ldr	r3, [pc, #96]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb7c:	4a16      	ldr	r2, [pc, #88]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb7e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< Updated upstream
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	b2da      	uxtb	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	701a      	strb	r2, [r3, #0]
=======
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< Updated upstream
 800d218:	4b14      	ldr	r3, [pc, #80]	; (800d26c <xPortStartScheduler+0xec>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a13      	ldr	r2, [pc, #76]	; (800d26c <xPortStartScheduler+0xec>)
 800d21e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d222:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d224:	4b11      	ldr	r3, [pc, #68]	; (800d26c <xPortStartScheduler+0xec>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a10      	ldr	r2, [pc, #64]	; (800d26c <xPortStartScheduler+0xec>)
 800d22a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d22e:	6013      	str	r3, [r2, #0]
=======
 800eb88:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a13      	ldr	r2, [pc, #76]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb94:	4b11      	ldr	r3, [pc, #68]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a10      	ldr	r2, [pc, #64]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb9e:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< Updated upstream
 800d230:	f000 f8d4 	bl	800d3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d234:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <xPortStartScheduler+0xf0>)
 800d236:	2200      	movs	r2, #0
 800d238:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d23a:	f000 f8f3 	bl	800d424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d23e:	4b0d      	ldr	r3, [pc, #52]	; (800d274 <xPortStartScheduler+0xf4>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a0c      	ldr	r2, [pc, #48]	; (800d274 <xPortStartScheduler+0xf4>)
 800d244:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d248:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d24a:	f7ff ff85 	bl	800d158 <prvPortStartFirstTask>
=======
 800eba0:	f000 f8d4 	bl	800ed4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eba4:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <xPortStartScheduler+0xf0>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebaa:	f000 f8f3 	bl	800ed94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebae:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <xPortStartScheduler+0xf4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a0c      	ldr	r2, [pc, #48]	; (800ebe4 <xPortStartScheduler+0xf4>)
 800ebb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebba:	f7ff ff85 	bl	800eac8 <prvPortStartFirstTask>
>>>>>>> Stashed changes
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< Updated upstream
 800d24e:	f7ff fb97 	bl	800c980 <vTaskSwitchContext>
	prvTaskExitError();
 800d252:	f7ff ff3d 	bl	800d0d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	e000e400 	.word	0xe000e400
 800d264:	2000069c 	.word	0x2000069c
 800d268:	200006a0 	.word	0x200006a0
 800d26c:	e000ed20 	.word	0xe000ed20
 800d270:	20000040 	.word	0x20000040
 800d274:	e000ef34 	.word	0xe000ef34

0800d278 <vPortEnterCritical>:
=======
 800ebbe:	f7ff fa63 	bl	800e088 <vTaskSwitchContext>
	prvTaskExitError();
 800ebc2:	f7ff ff39 	bl	800ea38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	e000e400 	.word	0xe000e400
 800ebd4:	200016c4 	.word	0x200016c4
 800ebd8:	200016c8 	.word	0x200016c8
 800ebdc:	e000ed20 	.word	0xe000ed20
 800ebe0:	2000103c 	.word	0x2000103c
 800ebe4:	e000ef34 	.word	0xe000ef34

0800ebe8 <vPortEnterCritical>:
>>>>>>> Stashed changes
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< Updated upstream
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	b672      	cpsid	i
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	b662      	cpsie	i
 800d292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d294:	4b0f      	ldr	r3, [pc, #60]	; (800d2d4 <vPortEnterCritical+0x5c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3301      	adds	r3, #1
 800d29a:	4a0e      	ldr	r2, [pc, #56]	; (800d2d4 <vPortEnterCritical+0x5c>)
 800d29c:	6013      	str	r3, [r2, #0]
=======
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf2:	b672      	cpsid	i
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	b662      	cpsie	i
 800ec02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec04:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <vPortEnterCritical+0x5c>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	4a0e      	ldr	r2, [pc, #56]	; (800ec44 <vPortEnterCritical+0x5c>)
 800ec0c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< Updated upstream
 800d29e:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <vPortEnterCritical+0x5c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d110      	bne.n	800d2c8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <vPortEnterCritical+0x60>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00b      	beq.n	800d2c8 <vPortEnterCritical+0x50>
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	b672      	cpsid	i
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	b662      	cpsie	i
 800d2c4:	603b      	str	r3, [r7, #0]
 800d2c6:	e7fe      	b.n	800d2c6 <vPortEnterCritical+0x4e>
	}
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	20000040 	.word	0x20000040
 800d2d8:	e000ed04 	.word	0xe000ed04

0800d2dc <vPortExitCritical>:
=======
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	; (800ec44 <vPortEnterCritical+0x5c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d110      	bne.n	800ec38 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec16:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <vPortEnterCritical+0x60>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <vPortEnterCritical+0x50>
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	b672      	cpsid	i
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	b662      	cpsie	i
 800ec34:	603b      	str	r3, [r7, #0]
 800ec36:	e7fe      	b.n	800ec36 <vPortEnterCritical+0x4e>
	}
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	2000103c 	.word	0x2000103c
 800ec48:	e000ed04 	.word	0xe000ed04

0800ec4c <vPortExitCritical>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< Updated upstream
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2e2:	4b12      	ldr	r3, [pc, #72]	; (800d32c <vPortExitCritical+0x50>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <vPortExitCritical+0x26>
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	b672      	cpsid	i
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	b662      	cpsie	i
 800d2fe:	607b      	str	r3, [r7, #4]
 800d300:	e7fe      	b.n	800d300 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d302:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <vPortExitCritical+0x50>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3b01      	subs	r3, #1
 800d308:	4a08      	ldr	r2, [pc, #32]	; (800d32c <vPortExitCritical+0x50>)
 800d30a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <vPortExitCritical+0x50>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d104      	bne.n	800d31e <vPortExitCritical+0x42>
 800d314:	2300      	movs	r3, #0
 800d316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	f383 8811 	msr	BASEPRI, r3
=======
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec52:	4b12      	ldr	r3, [pc, #72]	; (800ec9c <vPortExitCritical+0x50>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10b      	bne.n	800ec72 <vPortExitCritical+0x26>
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	b672      	cpsid	i
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	b662      	cpsie	i
 800ec6e:	607b      	str	r3, [r7, #4]
 800ec70:	e7fe      	b.n	800ec70 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ec72:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <vPortExitCritical+0x50>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	3b01      	subs	r3, #1
 800ec78:	4a08      	ldr	r2, [pc, #32]	; (800ec9c <vPortExitCritical+0x50>)
 800ec7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec7c:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <vPortExitCritical+0x50>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d104      	bne.n	800ec8e <vPortExitCritical+0x42>
 800ec84:	2300      	movs	r3, #0
 800ec86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< Updated upstream
 800d31e:	bf00      	nop
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20000040 	.word	0x20000040

0800d330 <PendSV_Handler>:
=======
 800ec8e:	bf00      	nop
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	2000103c 	.word	0x2000103c

0800eca0 <PendSV_Handler>:
>>>>>>> Stashed changes

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< Updated upstream
 800d330:	f3ef 8009 	mrs	r0, PSP
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	4b15      	ldr	r3, [pc, #84]	; (800d390 <pxCurrentTCBConst>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	f01e 0f10 	tst.w	lr, #16
 800d340:	bf08      	it	eq
 800d342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	6010      	str	r0, [r2, #0]
 800d34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d350:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d354:	b672      	cpsid	i
 800d356:	f380 8811 	msr	BASEPRI, r0
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	b662      	cpsie	i
 800d364:	f7ff fb0c 	bl	800c980 <vTaskSwitchContext>
 800d368:	f04f 0000 	mov.w	r0, #0
 800d36c:	f380 8811 	msr	BASEPRI, r0
 800d370:	bc09      	pop	{r0, r3}
 800d372:	6819      	ldr	r1, [r3, #0]
 800d374:	6808      	ldr	r0, [r1, #0]
 800d376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37a:	f01e 0f10 	tst.w	lr, #16
 800d37e:	bf08      	it	eq
 800d380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d384:	f380 8809 	msr	PSP, r0
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop

0800d390 <pxCurrentTCBConst>:
 800d390:	20000570 	.word	0x20000570
=======
 800eca0:	f3ef 8009 	mrs	r0, PSP
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <pxCurrentTCBConst>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	f01e 0f10 	tst.w	lr, #16
 800ecb0:	bf08      	it	eq
 800ecb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecba:	6010      	str	r0, [r2, #0]
 800ecbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecc4:	b672      	cpsid	i
 800ecc6:	f380 8811 	msr	BASEPRI, r0
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	b662      	cpsie	i
 800ecd4:	f7ff f9d8 	bl	800e088 <vTaskSwitchContext>
 800ecd8:	f04f 0000 	mov.w	r0, #0
 800ecdc:	f380 8811 	msr	BASEPRI, r0
 800ece0:	bc09      	pop	{r0, r3}
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	6808      	ldr	r0, [r1, #0]
 800ece6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	f01e 0f10 	tst.w	lr, #16
 800ecee:	bf08      	it	eq
 800ecf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ecf4:	f380 8809 	msr	PSP, r0
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop

0800ed00 <pxCurrentTCBConst>:
 800ed00:	20001598 	.word	0x20001598
>>>>>>> Stashed changes
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< Updated upstream
 800d394:	bf00      	nop
 800d396:	bf00      	nop

0800d398 <SysTick_Handler>:
=======
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop

0800ed08 <SysTick_Handler>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< Updated upstream
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
	__asm volatile
 800d39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a2:	b672      	cpsid	i
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	b662      	cpsie	i
 800d3b2:	607b      	str	r3, [r7, #4]
=======
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	b672      	cpsid	i
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	b662      	cpsie	i
 800ed22:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< Updated upstream
 800d3b4:	f7ff fa2a 	bl	800c80c <xTaskIncrementTick>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <SysTick_Handler+0x2e>
=======
 800ed24:	f7ff f8f6 	bl	800df14 <xTaskIncrementTick>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <SysTick_Handler+0x2e>
>>>>>>> Stashed changes
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< Updated upstream
 800d3be:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <SysTick_Handler+0x40>)
 800d3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	f383 8811 	msr	BASEPRI, r3
=======
 800ed2e:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <SysTick_Handler+0x40>)
 800ed30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	2300      	movs	r3, #0
 800ed38:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	f383 8811 	msr	BASEPRI, r3
>>>>>>> Stashed changes
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< Updated upstream
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	e000ed04 	.word	0xe000ed04

0800d3dc <vPortSetupTimerInterrupt>:
=======
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	e000ed04 	.word	0xe000ed04

0800ed4c <vPortSetupTimerInterrupt>:
>>>>>>> Stashed changes
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< Updated upstream
 800d3dc:	b480      	push	{r7}
 800d3de:	af00      	add	r7, sp, #0
=======
 800ed4c:	b480      	push	{r7}
 800ed4e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< Updated upstream
 800d3e0:	4b0b      	ldr	r3, [pc, #44]	; (800d410 <vPortSetupTimerInterrupt+0x34>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <vPortSetupTimerInterrupt+0x38>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <vPortSetupTimerInterrupt+0x3c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a0a      	ldr	r2, [pc, #40]	; (800d41c <vPortSetupTimerInterrupt+0x40>)
 800d3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f6:	099b      	lsrs	r3, r3, #6
 800d3f8:	4a09      	ldr	r2, [pc, #36]	; (800d420 <vPortSetupTimerInterrupt+0x44>)
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3fe:	4b04      	ldr	r3, [pc, #16]	; (800d410 <vPortSetupTimerInterrupt+0x34>)
 800d400:	2207      	movs	r2, #7
 800d402:	601a      	str	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	e000e010 	.word	0xe000e010
 800d414:	e000e018 	.word	0xe000e018
 800d418:	20000034 	.word	0x20000034
 800d41c:	10624dd3 	.word	0x10624dd3
 800d420:	e000e014 	.word	0xe000e014

0800d424 <vPortEnableVFP>:
=======
 800ed50:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <vPortSetupTimerInterrupt+0x34>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed56:	4b0b      	ldr	r3, [pc, #44]	; (800ed84 <vPortSetupTimerInterrupt+0x38>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed5c:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <vPortSetupTimerInterrupt+0x3c>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a0a      	ldr	r2, [pc, #40]	; (800ed8c <vPortSetupTimerInterrupt+0x40>)
 800ed62:	fba2 2303 	umull	r2, r3, r2, r3
 800ed66:	099b      	lsrs	r3, r3, #6
 800ed68:	4a09      	ldr	r2, [pc, #36]	; (800ed90 <vPortSetupTimerInterrupt+0x44>)
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed6e:	4b04      	ldr	r3, [pc, #16]	; (800ed80 <vPortSetupTimerInterrupt+0x34>)
 800ed70:	2207      	movs	r2, #7
 800ed72:	601a      	str	r2, [r3, #0]
}
 800ed74:	bf00      	nop
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	e000e010 	.word	0xe000e010
 800ed84:	e000e018 	.word	0xe000e018
 800ed88:	20001030 	.word	0x20001030
 800ed8c:	10624dd3 	.word	0x10624dd3
 800ed90:	e000e014 	.word	0xe000e014

0800ed94 <vPortEnableVFP>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< Updated upstream
 800d424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d434 <vPortEnableVFP+0x10>
 800d428:	6801      	ldr	r1, [r0, #0]
 800d42a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d42e:	6001      	str	r1, [r0, #0]
 800d430:	4770      	bx	lr
=======
 800ed94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eda4 <vPortEnableVFP+0x10>
 800ed98:	6801      	ldr	r1, [r0, #0]
 800ed9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed9e:	6001      	str	r1, [r0, #0]
 800eda0:	4770      	bx	lr
>>>>>>> Stashed changes
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< Updated upstream
 800d432:	bf00      	nop
 800d434:	e000ed88 	.word	0xe000ed88

0800d438 <vPortValidateInterruptPriority>:
=======
 800eda2:	bf00      	nop
 800eda4:	e000ed88 	.word	0xe000ed88

0800eda8 <vPortValidateInterruptPriority>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< Updated upstream
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
=======
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< Updated upstream
 800d43e:	f3ef 8305 	mrs	r3, IPSR
 800d442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2b0f      	cmp	r3, #15
 800d448:	d915      	bls.n	800d476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d44a:	4a18      	ldr	r2, [pc, #96]	; (800d4ac <vPortValidateInterruptPriority+0x74>)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	72fb      	strb	r3, [r7, #11]
=======
 800edae:	f3ef 8305 	mrs	r3, IPSR
 800edb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b0f      	cmp	r3, #15
 800edb8:	d915      	bls.n	800ede6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edba:	4a18      	ldr	r2, [pc, #96]	; (800ee1c <vPortValidateInterruptPriority+0x74>)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	4413      	add	r3, r2
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< Updated upstream
 800d454:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <vPortValidateInterruptPriority+0x78>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	7afa      	ldrb	r2, [r7, #11]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d20b      	bcs.n	800d476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	b672      	cpsid	i
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	b662      	cpsie	i
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	e7fe      	b.n	800d474 <vPortValidateInterruptPriority+0x3c>
=======
 800edc4:	4b16      	ldr	r3, [pc, #88]	; (800ee20 <vPortValidateInterruptPriority+0x78>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	7afa      	ldrb	r2, [r7, #11]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d20b      	bcs.n	800ede6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	b672      	cpsid	i
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	b662      	cpsie	i
 800ede2:	607b      	str	r3, [r7, #4]
 800ede4:	e7fe      	b.n	800ede4 <vPortValidateInterruptPriority+0x3c>
>>>>>>> Stashed changes
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< Updated upstream
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <vPortValidateInterruptPriority+0x7c>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d47e:	4b0e      	ldr	r3, [pc, #56]	; (800d4b8 <vPortValidateInterruptPriority+0x80>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d90b      	bls.n	800d49e <vPortValidateInterruptPriority+0x66>
 800d486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48a:	b672      	cpsid	i
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	b662      	cpsie	i
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	e7fe      	b.n	800d49c <vPortValidateInterruptPriority+0x64>
	}
 800d49e:	bf00      	nop
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	e000e3f0 	.word	0xe000e3f0
 800d4b0:	2000069c 	.word	0x2000069c
 800d4b4:	e000ed0c 	.word	0xe000ed0c
 800d4b8:	200006a0 	.word	0x200006a0

0800d4bc <pvPortMalloc>:
=======
 800ede6:	4b0f      	ldr	r3, [pc, #60]	; (800ee24 <vPortValidateInterruptPriority+0x7c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <vPortValidateInterruptPriority+0x80>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d90b      	bls.n	800ee0e <vPortValidateInterruptPriority+0x66>
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	b672      	cpsid	i
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	b662      	cpsie	i
 800ee0a:	603b      	str	r3, [r7, #0]
 800ee0c:	e7fe      	b.n	800ee0c <vPortValidateInterruptPriority+0x64>
	}
 800ee0e:	bf00      	nop
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	e000e3f0 	.word	0xe000e3f0
 800ee20:	200016c4 	.word	0x200016c4
 800ee24:	e000ed0c 	.word	0xe000ed0c
 800ee28:	200016c8 	.word	0x200016c8

0800ee2c <pvPortMalloc>:
>>>>>>> Stashed changes
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< Updated upstream
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b08a      	sub	sp, #40	; 0x28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4c8:	f7ff f8e4 	bl	800c694 <vTaskSuspendAll>
=======
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b08a      	sub	sp, #40	; 0x28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee38:	f7fe ffb0 	bl	800dd9c <vTaskSuspendAll>
>>>>>>> Stashed changes
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< Updated upstream
 800d4cc:	4b5c      	ldr	r3, [pc, #368]	; (800d640 <pvPortMalloc+0x184>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4d4:	f000 f91a 	bl	800d70c <prvHeapInit>
=======
 800ee3c:	4b5c      	ldr	r3, [pc, #368]	; (800efb0 <pvPortMalloc+0x184>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee44:	f000 f91a 	bl	800f07c <prvHeapInit>
>>>>>>> Stashed changes

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< Updated upstream
 800d4d8:	4b5a      	ldr	r3, [pc, #360]	; (800d644 <pvPortMalloc+0x188>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4013      	ands	r3, r2
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f040 8090 	bne.w	800d606 <pvPortMalloc+0x14a>
=======
 800ee48:	4b5a      	ldr	r3, [pc, #360]	; (800efb4 <pvPortMalloc+0x188>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4013      	ands	r3, r2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f040 8090 	bne.w	800ef76 <pvPortMalloc+0x14a>
>>>>>>> Stashed changes
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< Updated upstream
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d01e      	beq.n	800d52a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d4ec:	2208      	movs	r2, #8
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	607b      	str	r3, [r7, #4]
=======
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01e      	beq.n	800ee9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ee5c:	2208      	movs	r2, #8
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4413      	add	r3, r2
 800ee62:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< Updated upstream
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f003 0307 	and.w	r3, r3, #7
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d015      	beq.n	800d52a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f023 0307 	bic.w	r3, r3, #7
 800d504:	3308      	adds	r3, #8
 800d506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f003 0307 	and.w	r3, r3, #7
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00b      	beq.n	800d52a <pvPortMalloc+0x6e>
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	b672      	cpsid	i
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	b662      	cpsie	i
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	e7fe      	b.n	800d528 <pvPortMalloc+0x6c>
=======
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f003 0307 	and.w	r3, r3, #7
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d015      	beq.n	800ee9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f023 0307 	bic.w	r3, r3, #7
 800ee74:	3308      	adds	r3, #8
 800ee76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f003 0307 	and.w	r3, r3, #7
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00b      	beq.n	800ee9a <pvPortMalloc+0x6e>
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	b672      	cpsid	i
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	b662      	cpsie	i
 800ee96:	617b      	str	r3, [r7, #20]
 800ee98:	e7fe      	b.n	800ee98 <pvPortMalloc+0x6c>
>>>>>>> Stashed changes
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< Updated upstream
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d06a      	beq.n	800d606 <pvPortMalloc+0x14a>
 800d530:	4b45      	ldr	r3, [pc, #276]	; (800d648 <pvPortMalloc+0x18c>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d865      	bhi.n	800d606 <pvPortMalloc+0x14a>
=======
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d06a      	beq.n	800ef76 <pvPortMalloc+0x14a>
 800eea0:	4b45      	ldr	r3, [pc, #276]	; (800efb8 <pvPortMalloc+0x18c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d865      	bhi.n	800ef76 <pvPortMalloc+0x14a>
>>>>>>> Stashed changes
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< Updated upstream
 800d53a:	4b44      	ldr	r3, [pc, #272]	; (800d64c <pvPortMalloc+0x190>)
 800d53c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d53e:	4b43      	ldr	r3, [pc, #268]	; (800d64c <pvPortMalloc+0x190>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d544:	e004      	b.n	800d550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	d903      	bls.n	800d562 <pvPortMalloc+0xa6>
 800d55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1f1      	bne.n	800d546 <pvPortMalloc+0x8a>
=======
 800eeaa:	4b44      	ldr	r3, [pc, #272]	; (800efbc <pvPortMalloc+0x190>)
 800eeac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eeae:	4b43      	ldr	r3, [pc, #268]	; (800efbc <pvPortMalloc+0x190>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeb4:	e004      	b.n	800eec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d903      	bls.n	800eed2 <pvPortMalloc+0xa6>
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1f1      	bne.n	800eeb6 <pvPortMalloc+0x8a>
>>>>>>> Stashed changes
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< Updated upstream
 800d562:	4b37      	ldr	r3, [pc, #220]	; (800d640 <pvPortMalloc+0x184>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d568:	429a      	cmp	r2, r3
 800d56a:	d04c      	beq.n	800d606 <pvPortMalloc+0x14a>
=======
 800eed2:	4b37      	ldr	r3, [pc, #220]	; (800efb0 <pvPortMalloc+0x184>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d04c      	beq.n	800ef76 <pvPortMalloc+0x14a>
>>>>>>> Stashed changes
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< Updated upstream
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2208      	movs	r2, #8
 800d572:	4413      	add	r3, r2
 800d574:	61fb      	str	r3, [r7, #28]
=======
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2208      	movs	r2, #8
 800eee2:	4413      	add	r3, r2
 800eee4:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< Updated upstream
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	601a      	str	r2, [r3, #0]
=======
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< Updated upstream
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	1ad2      	subs	r2, r2, r3
 800d586:	2308      	movs	r3, #8
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d920      	bls.n	800d5d0 <pvPortMalloc+0x114>
=======
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	1ad2      	subs	r2, r2, r3
 800eef6:	2308      	movs	r3, #8
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d920      	bls.n	800ef40 <pvPortMalloc+0x114>
>>>>>>> Stashed changes
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< Updated upstream
 800d58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4413      	add	r3, r2
 800d594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	f003 0307 	and.w	r3, r3, #7
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00b      	beq.n	800d5b8 <pvPortMalloc+0xfc>
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	b672      	cpsid	i
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	b662      	cpsie	i
 800d5b4:	613b      	str	r3, [r7, #16]
 800d5b6:	e7fe      	b.n	800d5b6 <pvPortMalloc+0xfa>
=======
 800eefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4413      	add	r3, r2
 800ef04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	f003 0307 	and.w	r3, r3, #7
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <pvPortMalloc+0xfc>
 800ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef14:	b672      	cpsid	i
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	b662      	cpsie	i
 800ef24:	613b      	str	r3, [r7, #16]
 800ef26:	e7fe      	b.n	800ef26 <pvPortMalloc+0xfa>
>>>>>>> Stashed changes

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< Updated upstream
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5ca:	69b8      	ldr	r0, [r7, #24]
 800d5cc:	f000 f900 	bl	800d7d0 <prvInsertBlockIntoFreeList>
=======
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	1ad2      	subs	r2, r2, r3
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef3a:	69b8      	ldr	r0, [r7, #24]
 800ef3c:	f000 f900 	bl	800f140 <prvInsertBlockIntoFreeList>
>>>>>>> Stashed changes
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< Updated upstream
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <pvPortMalloc+0x18c>)
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	4a1b      	ldr	r2, [pc, #108]	; (800d648 <pvPortMalloc+0x18c>)
 800d5dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5de:	4b1a      	ldr	r3, [pc, #104]	; (800d648 <pvPortMalloc+0x18c>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <pvPortMalloc+0x194>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d203      	bcs.n	800d5f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5ea:	4b17      	ldr	r3, [pc, #92]	; (800d648 <pvPortMalloc+0x18c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a18      	ldr	r2, [pc, #96]	; (800d650 <pvPortMalloc+0x194>)
 800d5f0:	6013      	str	r3, [r2, #0]
=======
 800ef40:	4b1d      	ldr	r3, [pc, #116]	; (800efb8 <pvPortMalloc+0x18c>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	4a1b      	ldr	r2, [pc, #108]	; (800efb8 <pvPortMalloc+0x18c>)
 800ef4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef4e:	4b1a      	ldr	r3, [pc, #104]	; (800efb8 <pvPortMalloc+0x18c>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	4b1b      	ldr	r3, [pc, #108]	; (800efc0 <pvPortMalloc+0x194>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d203      	bcs.n	800ef62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef5a:	4b17      	ldr	r3, [pc, #92]	; (800efb8 <pvPortMalloc+0x18c>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a18      	ldr	r2, [pc, #96]	; (800efc0 <pvPortMalloc+0x194>)
 800ef60:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< Updated upstream
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	4b13      	ldr	r3, [pc, #76]	; (800d644 <pvPortMalloc+0x188>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
=======
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	4b13      	ldr	r3, [pc, #76]	; (800efb4 <pvPortMalloc+0x188>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	431a      	orrs	r2, r3
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< Updated upstream
 800d606:	f7ff f853 	bl	800c6b0 <xTaskResumeAll>
=======
 800ef76:	f7fe ff1f 	bl	800ddb8 <xTaskResumeAll>
>>>>>>> Stashed changes

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
<<<<<<< Updated upstream
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d610:	f7f2 ffe0 	bl	80005d4 <vApplicationMallocFailedHook>
=======
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ef80:	f7f1 fb28 	bl	80005d4 <vApplicationMallocFailedHook>
>>>>>>> Stashed changes
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< Updated upstream
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	f003 0307 	and.w	r3, r3, #7
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00b      	beq.n	800d636 <pvPortMalloc+0x17a>
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	b672      	cpsid	i
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	b662      	cpsie	i
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	e7fe      	b.n	800d634 <pvPortMalloc+0x178>
	return pvReturn;
 800d636:	69fb      	ldr	r3, [r7, #28]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3728      	adds	r7, #40	; 0x28
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	200086ac 	.word	0x200086ac
 800d644:	200086b8 	.word	0x200086b8
 800d648:	200086b0 	.word	0x200086b0
 800d64c:	200086a4 	.word	0x200086a4
 800d650:	200086b4 	.word	0x200086b4

0800d654 <vPortFree>:
=======
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	f003 0307 	and.w	r3, r3, #7
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00b      	beq.n	800efa6 <pvPortMalloc+0x17a>
 800ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef92:	b672      	cpsid	i
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	b662      	cpsie	i
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	e7fe      	b.n	800efa4 <pvPortMalloc+0x178>
	return pvReturn;
 800efa6:	69fb      	ldr	r3, [r7, #28]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3728      	adds	r7, #40	; 0x28
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	200096d4 	.word	0x200096d4
 800efb4:	200096e0 	.word	0x200096e0
 800efb8:	200096d8 	.word	0x200096d8
 800efbc:	200096cc 	.word	0x200096cc
 800efc0:	200096dc 	.word	0x200096dc

0800efc4 <vPortFree>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< Updated upstream
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d04a      	beq.n	800d6fc <vPortFree+0xa8>
=======
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d04a      	beq.n	800f06c <vPortFree+0xa8>
>>>>>>> Stashed changes
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< Updated upstream
 800d666:	2308      	movs	r3, #8
 800d668:	425b      	negs	r3, r3
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	4b22      	ldr	r3, [pc, #136]	; (800d704 <vPortFree+0xb0>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10b      	bne.n	800d69a <vPortFree+0x46>
 800d682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d686:	b672      	cpsid	i
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	b662      	cpsie	i
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	e7fe      	b.n	800d698 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00b      	beq.n	800d6ba <vPortFree+0x66>
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	b672      	cpsid	i
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	b662      	cpsie	i
 800d6b6:	60bb      	str	r3, [r7, #8]
 800d6b8:	e7fe      	b.n	800d6b8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	4b11      	ldr	r3, [pc, #68]	; (800d704 <vPortFree+0xb0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d019      	beq.n	800d6fc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d115      	bne.n	800d6fc <vPortFree+0xa8>
=======
 800efd6:	2308      	movs	r3, #8
 800efd8:	425b      	negs	r3, r3
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	4413      	add	r3, r2
 800efde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	4b22      	ldr	r3, [pc, #136]	; (800f074 <vPortFree+0xb0>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4013      	ands	r3, r2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d10b      	bne.n	800f00a <vPortFree+0x46>
 800eff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff6:	b672      	cpsid	i
 800eff8:	f383 8811 	msr	BASEPRI, r3
 800effc:	f3bf 8f6f 	isb	sy
 800f000:	f3bf 8f4f 	dsb	sy
 800f004:	b662      	cpsie	i
 800f006:	60fb      	str	r3, [r7, #12]
 800f008:	e7fe      	b.n	800f008 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00b      	beq.n	800f02a <vPortFree+0x66>
 800f012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f016:	b672      	cpsid	i
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	b662      	cpsie	i
 800f026:	60bb      	str	r3, [r7, #8]
 800f028:	e7fe      	b.n	800f028 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	4b11      	ldr	r3, [pc, #68]	; (800f074 <vPortFree+0xb0>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4013      	ands	r3, r2
 800f034:	2b00      	cmp	r3, #0
 800f036:	d019      	beq.n	800f06c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d115      	bne.n	800f06c <vPortFree+0xa8>
>>>>>>> Stashed changes
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< Updated upstream
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	685a      	ldr	r2, [r3, #4]
 800d6d4:	4b0b      	ldr	r3, [pc, #44]	; (800d704 <vPortFree+0xb0>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	43db      	mvns	r3, r3
 800d6da:	401a      	ands	r2, r3
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6e0:	f7fe ffd8 	bl	800c694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	4b07      	ldr	r3, [pc, #28]	; (800d708 <vPortFree+0xb4>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	4a06      	ldr	r2, [pc, #24]	; (800d708 <vPortFree+0xb4>)
 800d6f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6f2:	6938      	ldr	r0, [r7, #16]
 800d6f4:	f000 f86c 	bl	800d7d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d6f8:	f7fe ffda 	bl	800c6b0 <xTaskResumeAll>
=======
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	4b0b      	ldr	r3, [pc, #44]	; (800f074 <vPortFree+0xb0>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	43db      	mvns	r3, r3
 800f04a:	401a      	ands	r2, r3
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f050:	f7fe fea4 	bl	800dd9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	4b07      	ldr	r3, [pc, #28]	; (800f078 <vPortFree+0xb4>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4413      	add	r3, r2
 800f05e:	4a06      	ldr	r2, [pc, #24]	; (800f078 <vPortFree+0xb4>)
 800f060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f062:	6938      	ldr	r0, [r7, #16]
 800f064:	f000 f86c 	bl	800f140 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f068:	f7fe fea6 	bl	800ddb8 <xTaskResumeAll>
>>>>>>> Stashed changes
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< Updated upstream
 800d6fc:	bf00      	nop
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	200086b8 	.word	0x200086b8
 800d708:	200086b0 	.word	0x200086b0

0800d70c <prvHeapInit>:
=======
 800f06c:	bf00      	nop
 800f06e:	3718      	adds	r7, #24
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	200096e0 	.word	0x200096e0
 800f078:	200096d8 	.word	0x200096d8

0800f07c <prvHeapInit>:
>>>>>>> Stashed changes
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< Updated upstream
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
=======
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< Updated upstream
 800d712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d716:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d718:	4b27      	ldr	r3, [pc, #156]	; (800d7b8 <prvHeapInit+0xac>)
 800d71a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f003 0307 	and.w	r3, r3, #7
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00c      	beq.n	800d740 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3307      	adds	r3, #7
 800d72a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f023 0307 	bic.w	r3, r3, #7
 800d732:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	4a1f      	ldr	r2, [pc, #124]	; (800d7b8 <prvHeapInit+0xac>)
 800d73c:	4413      	add	r3, r2
 800d73e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	607b      	str	r3, [r7, #4]
=======
 800f082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f086:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f088:	4b27      	ldr	r3, [pc, #156]	; (800f128 <prvHeapInit+0xac>)
 800f08a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	2b00      	cmp	r3, #0
 800f094:	d00c      	beq.n	800f0b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	3307      	adds	r3, #7
 800f09a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f023 0307 	bic.w	r3, r3, #7
 800f0a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	4a1f      	ldr	r2, [pc, #124]	; (800f128 <prvHeapInit+0xac>)
 800f0ac:	4413      	add	r3, r2
 800f0ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 800d744:	4a1d      	ldr	r2, [pc, #116]	; (800d7bc <prvHeapInit+0xb0>)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d74a:	4b1c      	ldr	r3, [pc, #112]	; (800d7bc <prvHeapInit+0xb0>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	605a      	str	r2, [r3, #4]
=======
 800f0b4:	4a1d      	ldr	r2, [pc, #116]	; (800f12c <prvHeapInit+0xb0>)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0ba:	4b1c      	ldr	r3, [pc, #112]	; (800f12c <prvHeapInit+0xb0>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< Updated upstream
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	4413      	add	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d758:	2208      	movs	r2, #8
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	1a9b      	subs	r3, r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f023 0307 	bic.w	r3, r3, #7
 800d766:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4a15      	ldr	r2, [pc, #84]	; (800d7c0 <prvHeapInit+0xb4>)
 800d76c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d76e:	4b14      	ldr	r3, [pc, #80]	; (800d7c0 <prvHeapInit+0xb4>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2200      	movs	r2, #0
 800d774:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d776:	4b12      	ldr	r3, [pc, #72]	; (800d7c0 <prvHeapInit+0xb4>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]
=======
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0c8:	2208      	movs	r2, #8
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	1a9b      	subs	r3, r3, r2
 800f0ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f023 0307 	bic.w	r3, r3, #7
 800f0d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4a15      	ldr	r2, [pc, #84]	; (800f130 <prvHeapInit+0xb4>)
 800f0dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0de:	4b14      	ldr	r3, [pc, #80]	; (800f130 <prvHeapInit+0xb4>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0e6:	4b12      	ldr	r3, [pc, #72]	; (800f130 <prvHeapInit+0xb4>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< Updated upstream
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	1ad2      	subs	r2, r2, r3
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <prvHeapInit+0xb4>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	4a0a      	ldr	r2, [pc, #40]	; (800d7c4 <prvHeapInit+0xb8>)
 800d79a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4a09      	ldr	r2, [pc, #36]	; (800d7c8 <prvHeapInit+0xbc>)
 800d7a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7a4:	4b09      	ldr	r3, [pc, #36]	; (800d7cc <prvHeapInit+0xc0>)
 800d7a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7aa:	601a      	str	r2, [r3, #0]
}
 800d7ac:	bf00      	nop
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	200006a4 	.word	0x200006a4
 800d7bc:	200086a4 	.word	0x200086a4
 800d7c0:	200086ac 	.word	0x200086ac
 800d7c4:	200086b4 	.word	0x200086b4
 800d7c8:	200086b0 	.word	0x200086b0
 800d7cc:	200086b8 	.word	0x200086b8

0800d7d0 <prvInsertBlockIntoFreeList>:
=======
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	1ad2      	subs	r2, r2, r3
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f0fc:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <prvHeapInit+0xb4>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	4a0a      	ldr	r2, [pc, #40]	; (800f134 <prvHeapInit+0xb8>)
 800f10a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	4a09      	ldr	r2, [pc, #36]	; (800f138 <prvHeapInit+0xbc>)
 800f112:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f114:	4b09      	ldr	r3, [pc, #36]	; (800f13c <prvHeapInit+0xc0>)
 800f116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f11a:	601a      	str	r2, [r3, #0]
}
 800f11c:	bf00      	nop
 800f11e:	3714      	adds	r7, #20
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	200016cc 	.word	0x200016cc
 800f12c:	200096cc 	.word	0x200096cc
 800f130:	200096d4 	.word	0x200096d4
 800f134:	200096dc 	.word	0x200096dc
 800f138:	200096d8 	.word	0x200096d8
 800f13c:	200096e0 	.word	0x200096e0

0800f140 <prvInsertBlockIntoFreeList>:
>>>>>>> Stashed changes
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< Updated upstream
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
=======
 800f140:	b480      	push	{r7}
 800f142:	b085      	sub	sp, #20
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< Updated upstream
 800d7d8:	4b28      	ldr	r3, [pc, #160]	; (800d87c <prvInsertBlockIntoFreeList+0xac>)
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	e002      	b.n	800d7e4 <prvInsertBlockIntoFreeList+0x14>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d8f7      	bhi.n	800d7de <prvInsertBlockIntoFreeList+0xe>
=======
 800f148:	4b28      	ldr	r3, [pc, #160]	; (800f1ec <prvInsertBlockIntoFreeList+0xac>)
 800f14a:	60fb      	str	r3, [r7, #12]
 800f14c:	e002      	b.n	800f154 <prvInsertBlockIntoFreeList+0x14>
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d8f7      	bhi.n	800f14e <prvInsertBlockIntoFreeList+0xe>
>>>>>>> Stashed changes
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< Updated upstream
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d108      	bne.n	800d812 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	441a      	add	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	607b      	str	r3, [r7, #4]
=======
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	4413      	add	r3, r2
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d108      	bne.n	800f182 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	441a      	add	r2, r3
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< Updated upstream
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	441a      	add	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d118      	bne.n	800d858 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	4b15      	ldr	r3, [pc, #84]	; (800d880 <prvInsertBlockIntoFreeList+0xb0>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d00d      	beq.n	800d84e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	441a      	add	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	601a      	str	r2, [r3, #0]
 800d84c:	e008      	b.n	800d860 <prvInsertBlockIntoFreeList+0x90>
=======
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	68ba      	ldr	r2, [r7, #8]
 800f18c:	441a      	add	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	429a      	cmp	r2, r3
 800f194:	d118      	bne.n	800f1c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	4b15      	ldr	r3, [pc, #84]	; (800f1f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d00d      	beq.n	800f1be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	441a      	add	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	601a      	str	r2, [r3, #0]
 800f1bc:	e008      	b.n	800f1d0 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< Updated upstream
 800d84e:	4b0c      	ldr	r3, [pc, #48]	; (800d880 <prvInsertBlockIntoFreeList+0xb0>)
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	e003      	b.n	800d860 <prvInsertBlockIntoFreeList+0x90>
=======
 800f1be:	4b0c      	ldr	r3, [pc, #48]	; (800f1f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	e003      	b.n	800f1d0 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> Stashed changes
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< Updated upstream
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	601a      	str	r2, [r3, #0]
=======
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< Updated upstream
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	429a      	cmp	r2, r3
 800d866:	d002      	beq.n	800d86e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	601a      	str	r2, [r3, #0]
=======
 800f1d0:	68fa      	ldr	r2, [r7, #12]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d002      	beq.n	800f1de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< Updated upstream
 800d86e:	bf00      	nop
 800d870:	3714      	adds	r7, #20
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	200086a4 	.word	0x200086a4
 800d880:	200086ac 	.word	0x200086ac

0800d884 <__errno>:
 800d884:	4b01      	ldr	r3, [pc, #4]	; (800d88c <__errno+0x8>)
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	20000044 	.word	0x20000044

0800d890 <__libc_init_array>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	4e0d      	ldr	r6, [pc, #52]	; (800d8c8 <__libc_init_array+0x38>)
 800d894:	4c0d      	ldr	r4, [pc, #52]	; (800d8cc <__libc_init_array+0x3c>)
 800d896:	1ba4      	subs	r4, r4, r6
 800d898:	10a4      	asrs	r4, r4, #2
 800d89a:	2500      	movs	r5, #0
 800d89c:	42a5      	cmp	r5, r4
 800d89e:	d109      	bne.n	800d8b4 <__libc_init_array+0x24>
 800d8a0:	4e0b      	ldr	r6, [pc, #44]	; (800d8d0 <__libc_init_array+0x40>)
 800d8a2:	4c0c      	ldr	r4, [pc, #48]	; (800d8d4 <__libc_init_array+0x44>)
 800d8a4:	f000 fc28 	bl	800e0f8 <_init>
 800d8a8:	1ba4      	subs	r4, r4, r6
 800d8aa:	10a4      	asrs	r4, r4, #2
 800d8ac:	2500      	movs	r5, #0
 800d8ae:	42a5      	cmp	r5, r4
 800d8b0:	d105      	bne.n	800d8be <__libc_init_array+0x2e>
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8b8:	4798      	blx	r3
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	e7ee      	b.n	800d89c <__libc_init_array+0xc>
 800d8be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8c2:	4798      	blx	r3
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	e7f2      	b.n	800d8ae <__libc_init_array+0x1e>
 800d8c8:	0800fce4 	.word	0x0800fce4
 800d8cc:	0800fce4 	.word	0x0800fce4
 800d8d0:	0800fce4 	.word	0x0800fce4
 800d8d4:	0800fce8 	.word	0x0800fce8

0800d8d8 <memcpy>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	1e43      	subs	r3, r0, #1
 800d8dc:	440a      	add	r2, r1
 800d8de:	4291      	cmp	r1, r2
 800d8e0:	d100      	bne.n	800d8e4 <memcpy+0xc>
 800d8e2:	bd10      	pop	{r4, pc}
 800d8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ec:	e7f7      	b.n	800d8de <memcpy+0x6>

0800d8ee <memset>:
 800d8ee:	4402      	add	r2, r0
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d100      	bne.n	800d8f8 <memset+0xa>
 800d8f6:	4770      	bx	lr
 800d8f8:	f803 1b01 	strb.w	r1, [r3], #1
 800d8fc:	e7f9      	b.n	800d8f2 <memset+0x4>
	...

0800d900 <siprintf>:
 800d900:	b40e      	push	{r1, r2, r3}
 800d902:	b500      	push	{lr}
 800d904:	b09c      	sub	sp, #112	; 0x70
 800d906:	ab1d      	add	r3, sp, #116	; 0x74
 800d908:	9002      	str	r0, [sp, #8]
 800d90a:	9006      	str	r0, [sp, #24]
 800d90c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d910:	4809      	ldr	r0, [pc, #36]	; (800d938 <siprintf+0x38>)
 800d912:	9107      	str	r1, [sp, #28]
 800d914:	9104      	str	r1, [sp, #16]
 800d916:	4909      	ldr	r1, [pc, #36]	; (800d93c <siprintf+0x3c>)
 800d918:	f853 2b04 	ldr.w	r2, [r3], #4
 800d91c:	9105      	str	r1, [sp, #20]
 800d91e:	6800      	ldr	r0, [r0, #0]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	a902      	add	r1, sp, #8
 800d924:	f000 f866 	bl	800d9f4 <_svfiprintf_r>
 800d928:	9b02      	ldr	r3, [sp, #8]
 800d92a:	2200      	movs	r2, #0
 800d92c:	701a      	strb	r2, [r3, #0]
 800d92e:	b01c      	add	sp, #112	; 0x70
 800d930:	f85d eb04 	ldr.w	lr, [sp], #4
 800d934:	b003      	add	sp, #12
 800d936:	4770      	bx	lr
 800d938:	20000044 	.word	0x20000044
 800d93c:	ffff0208 	.word	0xffff0208

0800d940 <__ssputs_r>:
 800d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	688e      	ldr	r6, [r1, #8]
 800d946:	429e      	cmp	r6, r3
 800d948:	4682      	mov	sl, r0
 800d94a:	460c      	mov	r4, r1
 800d94c:	4690      	mov	r8, r2
 800d94e:	4699      	mov	r9, r3
 800d950:	d837      	bhi.n	800d9c2 <__ssputs_r+0x82>
 800d952:	898a      	ldrh	r2, [r1, #12]
 800d954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d958:	d031      	beq.n	800d9be <__ssputs_r+0x7e>
 800d95a:	6825      	ldr	r5, [r4, #0]
 800d95c:	6909      	ldr	r1, [r1, #16]
 800d95e:	1a6f      	subs	r7, r5, r1
 800d960:	6965      	ldr	r5, [r4, #20]
 800d962:	2302      	movs	r3, #2
 800d964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d968:	fb95 f5f3 	sdiv	r5, r5, r3
 800d96c:	f109 0301 	add.w	r3, r9, #1
 800d970:	443b      	add	r3, r7
 800d972:	429d      	cmp	r5, r3
 800d974:	bf38      	it	cc
 800d976:	461d      	movcc	r5, r3
 800d978:	0553      	lsls	r3, r2, #21
 800d97a:	d530      	bpl.n	800d9de <__ssputs_r+0x9e>
 800d97c:	4629      	mov	r1, r5
 800d97e:	f000 fb21 	bl	800dfc4 <_malloc_r>
 800d982:	4606      	mov	r6, r0
 800d984:	b950      	cbnz	r0, 800d99c <__ssputs_r+0x5c>
 800d986:	230c      	movs	r3, #12
 800d988:	f8ca 3000 	str.w	r3, [sl]
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d992:	81a3      	strh	r3, [r4, #12]
 800d994:	f04f 30ff 	mov.w	r0, #4294967295
 800d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99c:	463a      	mov	r2, r7
 800d99e:	6921      	ldr	r1, [r4, #16]
 800d9a0:	f7ff ff9a 	bl	800d8d8 <memcpy>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	6126      	str	r6, [r4, #16]
 800d9b2:	6165      	str	r5, [r4, #20]
 800d9b4:	443e      	add	r6, r7
 800d9b6:	1bed      	subs	r5, r5, r7
 800d9b8:	6026      	str	r6, [r4, #0]
 800d9ba:	60a5      	str	r5, [r4, #8]
 800d9bc:	464e      	mov	r6, r9
 800d9be:	454e      	cmp	r6, r9
 800d9c0:	d900      	bls.n	800d9c4 <__ssputs_r+0x84>
 800d9c2:	464e      	mov	r6, r9
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	4641      	mov	r1, r8
 800d9c8:	6820      	ldr	r0, [r4, #0]
 800d9ca:	f000 fa93 	bl	800def4 <memmove>
 800d9ce:	68a3      	ldr	r3, [r4, #8]
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	60a3      	str	r3, [r4, #8]
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	441e      	add	r6, r3
 800d9d8:	6026      	str	r6, [r4, #0]
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e7dc      	b.n	800d998 <__ssputs_r+0x58>
 800d9de:	462a      	mov	r2, r5
 800d9e0:	f000 fb4a 	bl	800e078 <_realloc_r>
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1e2      	bne.n	800d9b0 <__ssputs_r+0x70>
 800d9ea:	6921      	ldr	r1, [r4, #16]
 800d9ec:	4650      	mov	r0, sl
 800d9ee:	f000 fa9b 	bl	800df28 <_free_r>
 800d9f2:	e7c8      	b.n	800d986 <__ssputs_r+0x46>

0800d9f4 <_svfiprintf_r>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	461d      	mov	r5, r3
 800d9fa:	898b      	ldrh	r3, [r1, #12]
 800d9fc:	061f      	lsls	r7, r3, #24
 800d9fe:	b09d      	sub	sp, #116	; 0x74
 800da00:	4680      	mov	r8, r0
 800da02:	460c      	mov	r4, r1
 800da04:	4616      	mov	r6, r2
 800da06:	d50f      	bpl.n	800da28 <_svfiprintf_r+0x34>
 800da08:	690b      	ldr	r3, [r1, #16]
 800da0a:	b96b      	cbnz	r3, 800da28 <_svfiprintf_r+0x34>
 800da0c:	2140      	movs	r1, #64	; 0x40
 800da0e:	f000 fad9 	bl	800dfc4 <_malloc_r>
 800da12:	6020      	str	r0, [r4, #0]
 800da14:	6120      	str	r0, [r4, #16]
 800da16:	b928      	cbnz	r0, 800da24 <_svfiprintf_r+0x30>
 800da18:	230c      	movs	r3, #12
 800da1a:	f8c8 3000 	str.w	r3, [r8]
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295
 800da22:	e0c8      	b.n	800dbb6 <_svfiprintf_r+0x1c2>
 800da24:	2340      	movs	r3, #64	; 0x40
 800da26:	6163      	str	r3, [r4, #20]
 800da28:	2300      	movs	r3, #0
 800da2a:	9309      	str	r3, [sp, #36]	; 0x24
 800da2c:	2320      	movs	r3, #32
 800da2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da32:	2330      	movs	r3, #48	; 0x30
 800da34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da38:	9503      	str	r5, [sp, #12]
 800da3a:	f04f 0b01 	mov.w	fp, #1
 800da3e:	4637      	mov	r7, r6
 800da40:	463d      	mov	r5, r7
 800da42:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da46:	b10b      	cbz	r3, 800da4c <_svfiprintf_r+0x58>
 800da48:	2b25      	cmp	r3, #37	; 0x25
 800da4a:	d13e      	bne.n	800daca <_svfiprintf_r+0xd6>
 800da4c:	ebb7 0a06 	subs.w	sl, r7, r6
 800da50:	d00b      	beq.n	800da6a <_svfiprintf_r+0x76>
 800da52:	4653      	mov	r3, sl
 800da54:	4632      	mov	r2, r6
 800da56:	4621      	mov	r1, r4
 800da58:	4640      	mov	r0, r8
 800da5a:	f7ff ff71 	bl	800d940 <__ssputs_r>
 800da5e:	3001      	adds	r0, #1
 800da60:	f000 80a4 	beq.w	800dbac <_svfiprintf_r+0x1b8>
 800da64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da66:	4453      	add	r3, sl
 800da68:	9309      	str	r3, [sp, #36]	; 0x24
 800da6a:	783b      	ldrb	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 809d 	beq.w	800dbac <_svfiprintf_r+0x1b8>
 800da72:	2300      	movs	r3, #0
 800da74:	f04f 32ff 	mov.w	r2, #4294967295
 800da78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da7c:	9304      	str	r3, [sp, #16]
 800da7e:	9307      	str	r3, [sp, #28]
 800da80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da84:	931a      	str	r3, [sp, #104]	; 0x68
 800da86:	462f      	mov	r7, r5
 800da88:	2205      	movs	r2, #5
 800da8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800da8e:	4850      	ldr	r0, [pc, #320]	; (800dbd0 <_svfiprintf_r+0x1dc>)
 800da90:	f7f2 fbbe 	bl	8000210 <memchr>
 800da94:	9b04      	ldr	r3, [sp, #16]
 800da96:	b9d0      	cbnz	r0, 800dace <_svfiprintf_r+0xda>
 800da98:	06d9      	lsls	r1, r3, #27
 800da9a:	bf44      	itt	mi
 800da9c:	2220      	movmi	r2, #32
 800da9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800daa2:	071a      	lsls	r2, r3, #28
 800daa4:	bf44      	itt	mi
 800daa6:	222b      	movmi	r2, #43	; 0x2b
 800daa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800daac:	782a      	ldrb	r2, [r5, #0]
 800daae:	2a2a      	cmp	r2, #42	; 0x2a
 800dab0:	d015      	beq.n	800dade <_svfiprintf_r+0xea>
 800dab2:	9a07      	ldr	r2, [sp, #28]
 800dab4:	462f      	mov	r7, r5
 800dab6:	2000      	movs	r0, #0
 800dab8:	250a      	movs	r5, #10
 800daba:	4639      	mov	r1, r7
 800dabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dac0:	3b30      	subs	r3, #48	; 0x30
 800dac2:	2b09      	cmp	r3, #9
 800dac4:	d94d      	bls.n	800db62 <_svfiprintf_r+0x16e>
 800dac6:	b1b8      	cbz	r0, 800daf8 <_svfiprintf_r+0x104>
 800dac8:	e00f      	b.n	800daea <_svfiprintf_r+0xf6>
 800daca:	462f      	mov	r7, r5
 800dacc:	e7b8      	b.n	800da40 <_svfiprintf_r+0x4c>
 800dace:	4a40      	ldr	r2, [pc, #256]	; (800dbd0 <_svfiprintf_r+0x1dc>)
 800dad0:	1a80      	subs	r0, r0, r2
 800dad2:	fa0b f000 	lsl.w	r0, fp, r0
 800dad6:	4318      	orrs	r0, r3
 800dad8:	9004      	str	r0, [sp, #16]
 800dada:	463d      	mov	r5, r7
 800dadc:	e7d3      	b.n	800da86 <_svfiprintf_r+0x92>
 800dade:	9a03      	ldr	r2, [sp, #12]
 800dae0:	1d11      	adds	r1, r2, #4
 800dae2:	6812      	ldr	r2, [r2, #0]
 800dae4:	9103      	str	r1, [sp, #12]
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	db01      	blt.n	800daee <_svfiprintf_r+0xfa>
 800daea:	9207      	str	r2, [sp, #28]
 800daec:	e004      	b.n	800daf8 <_svfiprintf_r+0x104>
 800daee:	4252      	negs	r2, r2
 800daf0:	f043 0302 	orr.w	r3, r3, #2
 800daf4:	9207      	str	r2, [sp, #28]
 800daf6:	9304      	str	r3, [sp, #16]
 800daf8:	783b      	ldrb	r3, [r7, #0]
 800dafa:	2b2e      	cmp	r3, #46	; 0x2e
 800dafc:	d10c      	bne.n	800db18 <_svfiprintf_r+0x124>
 800dafe:	787b      	ldrb	r3, [r7, #1]
 800db00:	2b2a      	cmp	r3, #42	; 0x2a
 800db02:	d133      	bne.n	800db6c <_svfiprintf_r+0x178>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	9203      	str	r2, [sp, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bfb8      	it	lt
 800db10:	f04f 33ff 	movlt.w	r3, #4294967295
 800db14:	3702      	adds	r7, #2
 800db16:	9305      	str	r3, [sp, #20]
 800db18:	4d2e      	ldr	r5, [pc, #184]	; (800dbd4 <_svfiprintf_r+0x1e0>)
 800db1a:	7839      	ldrb	r1, [r7, #0]
 800db1c:	2203      	movs	r2, #3
 800db1e:	4628      	mov	r0, r5
 800db20:	f7f2 fb76 	bl	8000210 <memchr>
 800db24:	b138      	cbz	r0, 800db36 <_svfiprintf_r+0x142>
 800db26:	2340      	movs	r3, #64	; 0x40
 800db28:	1b40      	subs	r0, r0, r5
 800db2a:	fa03 f000 	lsl.w	r0, r3, r0
 800db2e:	9b04      	ldr	r3, [sp, #16]
 800db30:	4303      	orrs	r3, r0
 800db32:	3701      	adds	r7, #1
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	7839      	ldrb	r1, [r7, #0]
 800db38:	4827      	ldr	r0, [pc, #156]	; (800dbd8 <_svfiprintf_r+0x1e4>)
 800db3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db3e:	2206      	movs	r2, #6
 800db40:	1c7e      	adds	r6, r7, #1
 800db42:	f7f2 fb65 	bl	8000210 <memchr>
 800db46:	2800      	cmp	r0, #0
 800db48:	d038      	beq.n	800dbbc <_svfiprintf_r+0x1c8>
 800db4a:	4b24      	ldr	r3, [pc, #144]	; (800dbdc <_svfiprintf_r+0x1e8>)
 800db4c:	bb13      	cbnz	r3, 800db94 <_svfiprintf_r+0x1a0>
 800db4e:	9b03      	ldr	r3, [sp, #12]
 800db50:	3307      	adds	r3, #7
 800db52:	f023 0307 	bic.w	r3, r3, #7
 800db56:	3308      	adds	r3, #8
 800db58:	9303      	str	r3, [sp, #12]
 800db5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5c:	444b      	add	r3, r9
 800db5e:	9309      	str	r3, [sp, #36]	; 0x24
 800db60:	e76d      	b.n	800da3e <_svfiprintf_r+0x4a>
 800db62:	fb05 3202 	mla	r2, r5, r2, r3
 800db66:	2001      	movs	r0, #1
 800db68:	460f      	mov	r7, r1
 800db6a:	e7a6      	b.n	800daba <_svfiprintf_r+0xc6>
 800db6c:	2300      	movs	r3, #0
 800db6e:	3701      	adds	r7, #1
 800db70:	9305      	str	r3, [sp, #20]
 800db72:	4619      	mov	r1, r3
 800db74:	250a      	movs	r5, #10
 800db76:	4638      	mov	r0, r7
 800db78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db7c:	3a30      	subs	r2, #48	; 0x30
 800db7e:	2a09      	cmp	r2, #9
 800db80:	d903      	bls.n	800db8a <_svfiprintf_r+0x196>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0c8      	beq.n	800db18 <_svfiprintf_r+0x124>
 800db86:	9105      	str	r1, [sp, #20]
 800db88:	e7c6      	b.n	800db18 <_svfiprintf_r+0x124>
 800db8a:	fb05 2101 	mla	r1, r5, r1, r2
 800db8e:	2301      	movs	r3, #1
 800db90:	4607      	mov	r7, r0
 800db92:	e7f0      	b.n	800db76 <_svfiprintf_r+0x182>
 800db94:	ab03      	add	r3, sp, #12
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	4622      	mov	r2, r4
 800db9a:	4b11      	ldr	r3, [pc, #68]	; (800dbe0 <_svfiprintf_r+0x1ec>)
 800db9c:	a904      	add	r1, sp, #16
 800db9e:	4640      	mov	r0, r8
 800dba0:	f3af 8000 	nop.w
 800dba4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dba8:	4681      	mov	r9, r0
 800dbaa:	d1d6      	bne.n	800db5a <_svfiprintf_r+0x166>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	065b      	lsls	r3, r3, #25
 800dbb0:	f53f af35 	bmi.w	800da1e <_svfiprintf_r+0x2a>
 800dbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb6:	b01d      	add	sp, #116	; 0x74
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	ab03      	add	r3, sp, #12
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <_svfiprintf_r+0x1ec>)
 800dbc4:	a904      	add	r1, sp, #16
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	f000 f882 	bl	800dcd0 <_printf_i>
 800dbcc:	e7ea      	b.n	800dba4 <_svfiprintf_r+0x1b0>
 800dbce:	bf00      	nop
 800dbd0:	0800fca8 	.word	0x0800fca8
 800dbd4:	0800fcae 	.word	0x0800fcae
 800dbd8:	0800fcb2 	.word	0x0800fcb2
 800dbdc:	00000000 	.word	0x00000000
 800dbe0:	0800d941 	.word	0x0800d941

0800dbe4 <_printf_common>:
 800dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe8:	4691      	mov	r9, r2
 800dbea:	461f      	mov	r7, r3
 800dbec:	688a      	ldr	r2, [r1, #8]
 800dbee:	690b      	ldr	r3, [r1, #16]
 800dbf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	bfb8      	it	lt
 800dbf8:	4613      	movlt	r3, r2
 800dbfa:	f8c9 3000 	str.w	r3, [r9]
 800dbfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc02:	4606      	mov	r6, r0
 800dc04:	460c      	mov	r4, r1
 800dc06:	b112      	cbz	r2, 800dc0e <_printf_common+0x2a>
 800dc08:	3301      	adds	r3, #1
 800dc0a:	f8c9 3000 	str.w	r3, [r9]
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	0699      	lsls	r1, r3, #26
 800dc12:	bf42      	ittt	mi
 800dc14:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dc18:	3302      	addmi	r3, #2
 800dc1a:	f8c9 3000 	strmi.w	r3, [r9]
 800dc1e:	6825      	ldr	r5, [r4, #0]
 800dc20:	f015 0506 	ands.w	r5, r5, #6
 800dc24:	d107      	bne.n	800dc36 <_printf_common+0x52>
 800dc26:	f104 0a19 	add.w	sl, r4, #25
 800dc2a:	68e3      	ldr	r3, [r4, #12]
 800dc2c:	f8d9 2000 	ldr.w	r2, [r9]
 800dc30:	1a9b      	subs	r3, r3, r2
 800dc32:	42ab      	cmp	r3, r5
 800dc34:	dc28      	bgt.n	800dc88 <_printf_common+0xa4>
 800dc36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dc3a:	6822      	ldr	r2, [r4, #0]
 800dc3c:	3300      	adds	r3, #0
 800dc3e:	bf18      	it	ne
 800dc40:	2301      	movne	r3, #1
 800dc42:	0692      	lsls	r2, r2, #26
 800dc44:	d42d      	bmi.n	800dca2 <_printf_common+0xbe>
 800dc46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	47c0      	blx	r8
 800dc50:	3001      	adds	r0, #1
 800dc52:	d020      	beq.n	800dc96 <_printf_common+0xb2>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	68e5      	ldr	r5, [r4, #12]
 800dc58:	f8d9 2000 	ldr.w	r2, [r9]
 800dc5c:	f003 0306 	and.w	r3, r3, #6
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	bf08      	it	eq
 800dc64:	1aad      	subeq	r5, r5, r2
 800dc66:	68a3      	ldr	r3, [r4, #8]
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	bf0c      	ite	eq
 800dc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc70:	2500      	movne	r5, #0
 800dc72:	4293      	cmp	r3, r2
 800dc74:	bfc4      	itt	gt
 800dc76:	1a9b      	subgt	r3, r3, r2
 800dc78:	18ed      	addgt	r5, r5, r3
 800dc7a:	f04f 0900 	mov.w	r9, #0
 800dc7e:	341a      	adds	r4, #26
 800dc80:	454d      	cmp	r5, r9
 800dc82:	d11a      	bne.n	800dcba <_printf_common+0xd6>
 800dc84:	2000      	movs	r0, #0
 800dc86:	e008      	b.n	800dc9a <_printf_common+0xb6>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4652      	mov	r2, sl
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	4630      	mov	r0, r6
 800dc90:	47c0      	blx	r8
 800dc92:	3001      	adds	r0, #1
 800dc94:	d103      	bne.n	800dc9e <_printf_common+0xba>
 800dc96:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc9e:	3501      	adds	r5, #1
 800dca0:	e7c3      	b.n	800dc2a <_printf_common+0x46>
 800dca2:	18e1      	adds	r1, r4, r3
 800dca4:	1c5a      	adds	r2, r3, #1
 800dca6:	2030      	movs	r0, #48	; 0x30
 800dca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcac:	4422      	add	r2, r4
 800dcae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcb6:	3302      	adds	r3, #2
 800dcb8:	e7c5      	b.n	800dc46 <_printf_common+0x62>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	47c0      	blx	r8
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d0e6      	beq.n	800dc96 <_printf_common+0xb2>
 800dcc8:	f109 0901 	add.w	r9, r9, #1
 800dccc:	e7d8      	b.n	800dc80 <_printf_common+0x9c>
	...

0800dcd0 <_printf_i>:
 800dcd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dcd8:	460c      	mov	r4, r1
 800dcda:	7e09      	ldrb	r1, [r1, #24]
 800dcdc:	b085      	sub	sp, #20
 800dcde:	296e      	cmp	r1, #110	; 0x6e
 800dce0:	4617      	mov	r7, r2
 800dce2:	4606      	mov	r6, r0
 800dce4:	4698      	mov	r8, r3
 800dce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dce8:	f000 80b3 	beq.w	800de52 <_printf_i+0x182>
 800dcec:	d822      	bhi.n	800dd34 <_printf_i+0x64>
 800dcee:	2963      	cmp	r1, #99	; 0x63
 800dcf0:	d036      	beq.n	800dd60 <_printf_i+0x90>
 800dcf2:	d80a      	bhi.n	800dd0a <_printf_i+0x3a>
 800dcf4:	2900      	cmp	r1, #0
 800dcf6:	f000 80b9 	beq.w	800de6c <_printf_i+0x19c>
 800dcfa:	2958      	cmp	r1, #88	; 0x58
 800dcfc:	f000 8083 	beq.w	800de06 <_printf_i+0x136>
 800dd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dd08:	e032      	b.n	800dd70 <_printf_i+0xa0>
 800dd0a:	2964      	cmp	r1, #100	; 0x64
 800dd0c:	d001      	beq.n	800dd12 <_printf_i+0x42>
 800dd0e:	2969      	cmp	r1, #105	; 0x69
 800dd10:	d1f6      	bne.n	800dd00 <_printf_i+0x30>
 800dd12:	6820      	ldr	r0, [r4, #0]
 800dd14:	6813      	ldr	r3, [r2, #0]
 800dd16:	0605      	lsls	r5, r0, #24
 800dd18:	f103 0104 	add.w	r1, r3, #4
 800dd1c:	d52a      	bpl.n	800dd74 <_printf_i+0xa4>
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6011      	str	r1, [r2, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	da03      	bge.n	800dd2e <_printf_i+0x5e>
 800dd26:	222d      	movs	r2, #45	; 0x2d
 800dd28:	425b      	negs	r3, r3
 800dd2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd2e:	486f      	ldr	r0, [pc, #444]	; (800deec <_printf_i+0x21c>)
 800dd30:	220a      	movs	r2, #10
 800dd32:	e039      	b.n	800dda8 <_printf_i+0xd8>
 800dd34:	2973      	cmp	r1, #115	; 0x73
 800dd36:	f000 809d 	beq.w	800de74 <_printf_i+0x1a4>
 800dd3a:	d808      	bhi.n	800dd4e <_printf_i+0x7e>
 800dd3c:	296f      	cmp	r1, #111	; 0x6f
 800dd3e:	d020      	beq.n	800dd82 <_printf_i+0xb2>
 800dd40:	2970      	cmp	r1, #112	; 0x70
 800dd42:	d1dd      	bne.n	800dd00 <_printf_i+0x30>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	f043 0320 	orr.w	r3, r3, #32
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	e003      	b.n	800dd56 <_printf_i+0x86>
 800dd4e:	2975      	cmp	r1, #117	; 0x75
 800dd50:	d017      	beq.n	800dd82 <_printf_i+0xb2>
 800dd52:	2978      	cmp	r1, #120	; 0x78
 800dd54:	d1d4      	bne.n	800dd00 <_printf_i+0x30>
 800dd56:	2378      	movs	r3, #120	; 0x78
 800dd58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd5c:	4864      	ldr	r0, [pc, #400]	; (800def0 <_printf_i+0x220>)
 800dd5e:	e055      	b.n	800de0c <_printf_i+0x13c>
 800dd60:	6813      	ldr	r3, [r2, #0]
 800dd62:	1d19      	adds	r1, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6011      	str	r1, [r2, #0]
 800dd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd70:	2301      	movs	r3, #1
 800dd72:	e08c      	b.n	800de8e <_printf_i+0x1be>
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6011      	str	r1, [r2, #0]
 800dd78:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd7c:	bf18      	it	ne
 800dd7e:	b21b      	sxthne	r3, r3
 800dd80:	e7cf      	b.n	800dd22 <_printf_i+0x52>
 800dd82:	6813      	ldr	r3, [r2, #0]
 800dd84:	6825      	ldr	r5, [r4, #0]
 800dd86:	1d18      	adds	r0, r3, #4
 800dd88:	6010      	str	r0, [r2, #0]
 800dd8a:	0628      	lsls	r0, r5, #24
 800dd8c:	d501      	bpl.n	800dd92 <_printf_i+0xc2>
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	e002      	b.n	800dd98 <_printf_i+0xc8>
 800dd92:	0668      	lsls	r0, r5, #25
 800dd94:	d5fb      	bpl.n	800dd8e <_printf_i+0xbe>
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	4854      	ldr	r0, [pc, #336]	; (800deec <_printf_i+0x21c>)
 800dd9a:	296f      	cmp	r1, #111	; 0x6f
 800dd9c:	bf14      	ite	ne
 800dd9e:	220a      	movne	r2, #10
 800dda0:	2208      	moveq	r2, #8
 800dda2:	2100      	movs	r1, #0
 800dda4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dda8:	6865      	ldr	r5, [r4, #4]
 800ddaa:	60a5      	str	r5, [r4, #8]
 800ddac:	2d00      	cmp	r5, #0
 800ddae:	f2c0 8095 	blt.w	800dedc <_printf_i+0x20c>
 800ddb2:	6821      	ldr	r1, [r4, #0]
 800ddb4:	f021 0104 	bic.w	r1, r1, #4
 800ddb8:	6021      	str	r1, [r4, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d13d      	bne.n	800de3a <_printf_i+0x16a>
 800ddbe:	2d00      	cmp	r5, #0
 800ddc0:	f040 808e 	bne.w	800dee0 <_printf_i+0x210>
 800ddc4:	4665      	mov	r5, ip
 800ddc6:	2a08      	cmp	r2, #8
 800ddc8:	d10b      	bne.n	800dde2 <_printf_i+0x112>
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	07db      	lsls	r3, r3, #31
 800ddce:	d508      	bpl.n	800dde2 <_printf_i+0x112>
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	6862      	ldr	r2, [r4, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	bfde      	ittt	le
 800ddd8:	2330      	movle	r3, #48	; 0x30
 800ddda:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddde:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dde2:	ebac 0305 	sub.w	r3, ip, r5
 800dde6:	6123      	str	r3, [r4, #16]
 800dde8:	f8cd 8000 	str.w	r8, [sp]
 800ddec:	463b      	mov	r3, r7
 800ddee:	aa03      	add	r2, sp, #12
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7ff fef6 	bl	800dbe4 <_printf_common>
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d14d      	bne.n	800de98 <_printf_i+0x1c8>
 800ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 800de00:	b005      	add	sp, #20
 800de02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de06:	4839      	ldr	r0, [pc, #228]	; (800deec <_printf_i+0x21c>)
 800de08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800de0c:	6813      	ldr	r3, [r2, #0]
 800de0e:	6821      	ldr	r1, [r4, #0]
 800de10:	1d1d      	adds	r5, r3, #4
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6015      	str	r5, [r2, #0]
 800de16:	060a      	lsls	r2, r1, #24
 800de18:	d50b      	bpl.n	800de32 <_printf_i+0x162>
 800de1a:	07ca      	lsls	r2, r1, #31
 800de1c:	bf44      	itt	mi
 800de1e:	f041 0120 	orrmi.w	r1, r1, #32
 800de22:	6021      	strmi	r1, [r4, #0]
 800de24:	b91b      	cbnz	r3, 800de2e <_printf_i+0x15e>
 800de26:	6822      	ldr	r2, [r4, #0]
 800de28:	f022 0220 	bic.w	r2, r2, #32
 800de2c:	6022      	str	r2, [r4, #0]
 800de2e:	2210      	movs	r2, #16
 800de30:	e7b7      	b.n	800dda2 <_printf_i+0xd2>
 800de32:	064d      	lsls	r5, r1, #25
 800de34:	bf48      	it	mi
 800de36:	b29b      	uxthmi	r3, r3
 800de38:	e7ef      	b.n	800de1a <_printf_i+0x14a>
 800de3a:	4665      	mov	r5, ip
 800de3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800de40:	fb02 3311 	mls	r3, r2, r1, r3
 800de44:	5cc3      	ldrb	r3, [r0, r3]
 800de46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800de4a:	460b      	mov	r3, r1
 800de4c:	2900      	cmp	r1, #0
 800de4e:	d1f5      	bne.n	800de3c <_printf_i+0x16c>
 800de50:	e7b9      	b.n	800ddc6 <_printf_i+0xf6>
 800de52:	6813      	ldr	r3, [r2, #0]
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	6961      	ldr	r1, [r4, #20]
 800de58:	1d18      	adds	r0, r3, #4
 800de5a:	6010      	str	r0, [r2, #0]
 800de5c:	0628      	lsls	r0, r5, #24
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	d501      	bpl.n	800de66 <_printf_i+0x196>
 800de62:	6019      	str	r1, [r3, #0]
 800de64:	e002      	b.n	800de6c <_printf_i+0x19c>
 800de66:	066a      	lsls	r2, r5, #25
 800de68:	d5fb      	bpl.n	800de62 <_printf_i+0x192>
 800de6a:	8019      	strh	r1, [r3, #0]
 800de6c:	2300      	movs	r3, #0
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	4665      	mov	r5, ip
 800de72:	e7b9      	b.n	800dde8 <_printf_i+0x118>
 800de74:	6813      	ldr	r3, [r2, #0]
 800de76:	1d19      	adds	r1, r3, #4
 800de78:	6011      	str	r1, [r2, #0]
 800de7a:	681d      	ldr	r5, [r3, #0]
 800de7c:	6862      	ldr	r2, [r4, #4]
 800de7e:	2100      	movs	r1, #0
 800de80:	4628      	mov	r0, r5
 800de82:	f7f2 f9c5 	bl	8000210 <memchr>
 800de86:	b108      	cbz	r0, 800de8c <_printf_i+0x1bc>
 800de88:	1b40      	subs	r0, r0, r5
 800de8a:	6060      	str	r0, [r4, #4]
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	2300      	movs	r3, #0
 800de92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de96:	e7a7      	b.n	800dde8 <_printf_i+0x118>
 800de98:	6923      	ldr	r3, [r4, #16]
 800de9a:	462a      	mov	r2, r5
 800de9c:	4639      	mov	r1, r7
 800de9e:	4630      	mov	r0, r6
 800dea0:	47c0      	blx	r8
 800dea2:	3001      	adds	r0, #1
 800dea4:	d0aa      	beq.n	800ddfc <_printf_i+0x12c>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	079b      	lsls	r3, r3, #30
 800deaa:	d413      	bmi.n	800ded4 <_printf_i+0x204>
 800deac:	68e0      	ldr	r0, [r4, #12]
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	4298      	cmp	r0, r3
 800deb2:	bfb8      	it	lt
 800deb4:	4618      	movlt	r0, r3
 800deb6:	e7a3      	b.n	800de00 <_printf_i+0x130>
 800deb8:	2301      	movs	r3, #1
 800deba:	464a      	mov	r2, r9
 800debc:	4639      	mov	r1, r7
 800debe:	4630      	mov	r0, r6
 800dec0:	47c0      	blx	r8
 800dec2:	3001      	adds	r0, #1
 800dec4:	d09a      	beq.n	800ddfc <_printf_i+0x12c>
 800dec6:	3501      	adds	r5, #1
 800dec8:	68e3      	ldr	r3, [r4, #12]
 800deca:	9a03      	ldr	r2, [sp, #12]
 800decc:	1a9b      	subs	r3, r3, r2
 800dece:	42ab      	cmp	r3, r5
 800ded0:	dcf2      	bgt.n	800deb8 <_printf_i+0x1e8>
 800ded2:	e7eb      	b.n	800deac <_printf_i+0x1dc>
 800ded4:	2500      	movs	r5, #0
 800ded6:	f104 0919 	add.w	r9, r4, #25
 800deda:	e7f5      	b.n	800dec8 <_printf_i+0x1f8>
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1ac      	bne.n	800de3a <_printf_i+0x16a>
 800dee0:	7803      	ldrb	r3, [r0, #0]
 800dee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800deea:	e76c      	b.n	800ddc6 <_printf_i+0xf6>
 800deec:	0800fcb9 	.word	0x0800fcb9
 800def0:	0800fcca 	.word	0x0800fcca

0800def4 <memmove>:
 800def4:	4288      	cmp	r0, r1
 800def6:	b510      	push	{r4, lr}
 800def8:	eb01 0302 	add.w	r3, r1, r2
 800defc:	d807      	bhi.n	800df0e <memmove+0x1a>
 800defe:	1e42      	subs	r2, r0, #1
 800df00:	4299      	cmp	r1, r3
 800df02:	d00a      	beq.n	800df1a <memmove+0x26>
 800df04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df08:	f802 4f01 	strb.w	r4, [r2, #1]!
 800df0c:	e7f8      	b.n	800df00 <memmove+0xc>
 800df0e:	4283      	cmp	r3, r0
 800df10:	d9f5      	bls.n	800defe <memmove+0xa>
 800df12:	1881      	adds	r1, r0, r2
 800df14:	1ad2      	subs	r2, r2, r3
 800df16:	42d3      	cmn	r3, r2
 800df18:	d100      	bne.n	800df1c <memmove+0x28>
 800df1a:	bd10      	pop	{r4, pc}
 800df1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800df24:	e7f7      	b.n	800df16 <memmove+0x22>
	...

0800df28 <_free_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4605      	mov	r5, r0
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d045      	beq.n	800dfbc <_free_r+0x94>
 800df30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df34:	1f0c      	subs	r4, r1, #4
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfb8      	it	lt
 800df3a:	18e4      	addlt	r4, r4, r3
 800df3c:	f000 f8d2 	bl	800e0e4 <__malloc_lock>
 800df40:	4a1f      	ldr	r2, [pc, #124]	; (800dfc0 <_free_r+0x98>)
 800df42:	6813      	ldr	r3, [r2, #0]
 800df44:	4610      	mov	r0, r2
 800df46:	b933      	cbnz	r3, 800df56 <_free_r+0x2e>
 800df48:	6063      	str	r3, [r4, #4]
 800df4a:	6014      	str	r4, [r2, #0]
 800df4c:	4628      	mov	r0, r5
 800df4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df52:	f000 b8c8 	b.w	800e0e6 <__malloc_unlock>
 800df56:	42a3      	cmp	r3, r4
 800df58:	d90c      	bls.n	800df74 <_free_r+0x4c>
 800df5a:	6821      	ldr	r1, [r4, #0]
 800df5c:	1862      	adds	r2, r4, r1
 800df5e:	4293      	cmp	r3, r2
 800df60:	bf04      	itt	eq
 800df62:	681a      	ldreq	r2, [r3, #0]
 800df64:	685b      	ldreq	r3, [r3, #4]
 800df66:	6063      	str	r3, [r4, #4]
 800df68:	bf04      	itt	eq
 800df6a:	1852      	addeq	r2, r2, r1
 800df6c:	6022      	streq	r2, [r4, #0]
 800df6e:	6004      	str	r4, [r0, #0]
 800df70:	e7ec      	b.n	800df4c <_free_r+0x24>
 800df72:	4613      	mov	r3, r2
 800df74:	685a      	ldr	r2, [r3, #4]
 800df76:	b10a      	cbz	r2, 800df7c <_free_r+0x54>
 800df78:	42a2      	cmp	r2, r4
 800df7a:	d9fa      	bls.n	800df72 <_free_r+0x4a>
 800df7c:	6819      	ldr	r1, [r3, #0]
 800df7e:	1858      	adds	r0, r3, r1
 800df80:	42a0      	cmp	r0, r4
 800df82:	d10b      	bne.n	800df9c <_free_r+0x74>
 800df84:	6820      	ldr	r0, [r4, #0]
 800df86:	4401      	add	r1, r0
 800df88:	1858      	adds	r0, r3, r1
 800df8a:	4282      	cmp	r2, r0
 800df8c:	6019      	str	r1, [r3, #0]
 800df8e:	d1dd      	bne.n	800df4c <_free_r+0x24>
 800df90:	6810      	ldr	r0, [r2, #0]
 800df92:	6852      	ldr	r2, [r2, #4]
 800df94:	605a      	str	r2, [r3, #4]
 800df96:	4401      	add	r1, r0
 800df98:	6019      	str	r1, [r3, #0]
 800df9a:	e7d7      	b.n	800df4c <_free_r+0x24>
 800df9c:	d902      	bls.n	800dfa4 <_free_r+0x7c>
 800df9e:	230c      	movs	r3, #12
 800dfa0:	602b      	str	r3, [r5, #0]
 800dfa2:	e7d3      	b.n	800df4c <_free_r+0x24>
 800dfa4:	6820      	ldr	r0, [r4, #0]
 800dfa6:	1821      	adds	r1, r4, r0
 800dfa8:	428a      	cmp	r2, r1
 800dfaa:	bf04      	itt	eq
 800dfac:	6811      	ldreq	r1, [r2, #0]
 800dfae:	6852      	ldreq	r2, [r2, #4]
 800dfb0:	6062      	str	r2, [r4, #4]
 800dfb2:	bf04      	itt	eq
 800dfb4:	1809      	addeq	r1, r1, r0
 800dfb6:	6021      	streq	r1, [r4, #0]
 800dfb8:	605c      	str	r4, [r3, #4]
 800dfba:	e7c7      	b.n	800df4c <_free_r+0x24>
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	200086bc 	.word	0x200086bc

0800dfc4 <_malloc_r>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	1ccd      	adds	r5, r1, #3
 800dfc8:	f025 0503 	bic.w	r5, r5, #3
 800dfcc:	3508      	adds	r5, #8
 800dfce:	2d0c      	cmp	r5, #12
 800dfd0:	bf38      	it	cc
 800dfd2:	250c      	movcc	r5, #12
 800dfd4:	2d00      	cmp	r5, #0
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	db01      	blt.n	800dfde <_malloc_r+0x1a>
 800dfda:	42a9      	cmp	r1, r5
 800dfdc:	d903      	bls.n	800dfe6 <_malloc_r+0x22>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	6033      	str	r3, [r6, #0]
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	bd70      	pop	{r4, r5, r6, pc}
 800dfe6:	f000 f87d 	bl	800e0e4 <__malloc_lock>
 800dfea:	4a21      	ldr	r2, [pc, #132]	; (800e070 <_malloc_r+0xac>)
 800dfec:	6814      	ldr	r4, [r2, #0]
 800dfee:	4621      	mov	r1, r4
 800dff0:	b991      	cbnz	r1, 800e018 <_malloc_r+0x54>
 800dff2:	4c20      	ldr	r4, [pc, #128]	; (800e074 <_malloc_r+0xb0>)
 800dff4:	6823      	ldr	r3, [r4, #0]
 800dff6:	b91b      	cbnz	r3, 800e000 <_malloc_r+0x3c>
 800dff8:	4630      	mov	r0, r6
 800dffa:	f000 f863 	bl	800e0c4 <_sbrk_r>
 800dffe:	6020      	str	r0, [r4, #0]
 800e000:	4629      	mov	r1, r5
 800e002:	4630      	mov	r0, r6
 800e004:	f000 f85e 	bl	800e0c4 <_sbrk_r>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d124      	bne.n	800e056 <_malloc_r+0x92>
 800e00c:	230c      	movs	r3, #12
 800e00e:	6033      	str	r3, [r6, #0]
 800e010:	4630      	mov	r0, r6
 800e012:	f000 f868 	bl	800e0e6 <__malloc_unlock>
 800e016:	e7e4      	b.n	800dfe2 <_malloc_r+0x1e>
 800e018:	680b      	ldr	r3, [r1, #0]
 800e01a:	1b5b      	subs	r3, r3, r5
 800e01c:	d418      	bmi.n	800e050 <_malloc_r+0x8c>
 800e01e:	2b0b      	cmp	r3, #11
 800e020:	d90f      	bls.n	800e042 <_malloc_r+0x7e>
 800e022:	600b      	str	r3, [r1, #0]
 800e024:	50cd      	str	r5, [r1, r3]
 800e026:	18cc      	adds	r4, r1, r3
 800e028:	4630      	mov	r0, r6
 800e02a:	f000 f85c 	bl	800e0e6 <__malloc_unlock>
 800e02e:	f104 000b 	add.w	r0, r4, #11
 800e032:	1d23      	adds	r3, r4, #4
 800e034:	f020 0007 	bic.w	r0, r0, #7
 800e038:	1ac3      	subs	r3, r0, r3
 800e03a:	d0d3      	beq.n	800dfe4 <_malloc_r+0x20>
 800e03c:	425a      	negs	r2, r3
 800e03e:	50e2      	str	r2, [r4, r3]
 800e040:	e7d0      	b.n	800dfe4 <_malloc_r+0x20>
 800e042:	428c      	cmp	r4, r1
 800e044:	684b      	ldr	r3, [r1, #4]
 800e046:	bf16      	itet	ne
 800e048:	6063      	strne	r3, [r4, #4]
 800e04a:	6013      	streq	r3, [r2, #0]
 800e04c:	460c      	movne	r4, r1
 800e04e:	e7eb      	b.n	800e028 <_malloc_r+0x64>
 800e050:	460c      	mov	r4, r1
 800e052:	6849      	ldr	r1, [r1, #4]
 800e054:	e7cc      	b.n	800dff0 <_malloc_r+0x2c>
 800e056:	1cc4      	adds	r4, r0, #3
 800e058:	f024 0403 	bic.w	r4, r4, #3
 800e05c:	42a0      	cmp	r0, r4
 800e05e:	d005      	beq.n	800e06c <_malloc_r+0xa8>
 800e060:	1a21      	subs	r1, r4, r0
 800e062:	4630      	mov	r0, r6
 800e064:	f000 f82e 	bl	800e0c4 <_sbrk_r>
 800e068:	3001      	adds	r0, #1
 800e06a:	d0cf      	beq.n	800e00c <_malloc_r+0x48>
 800e06c:	6025      	str	r5, [r4, #0]
 800e06e:	e7db      	b.n	800e028 <_malloc_r+0x64>
 800e070:	200086bc 	.word	0x200086bc
 800e074:	200086c0 	.word	0x200086c0

0800e078 <_realloc_r>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	4607      	mov	r7, r0
 800e07c:	4614      	mov	r4, r2
 800e07e:	460e      	mov	r6, r1
 800e080:	b921      	cbnz	r1, 800e08c <_realloc_r+0x14>
 800e082:	4611      	mov	r1, r2
 800e084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e088:	f7ff bf9c 	b.w	800dfc4 <_malloc_r>
 800e08c:	b922      	cbnz	r2, 800e098 <_realloc_r+0x20>
 800e08e:	f7ff ff4b 	bl	800df28 <_free_r>
 800e092:	4625      	mov	r5, r4
 800e094:	4628      	mov	r0, r5
 800e096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e098:	f000 f826 	bl	800e0e8 <_malloc_usable_size_r>
 800e09c:	42a0      	cmp	r0, r4
 800e09e:	d20f      	bcs.n	800e0c0 <_realloc_r+0x48>
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f7ff ff8e 	bl	800dfc4 <_malloc_r>
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0f2      	beq.n	800e094 <_realloc_r+0x1c>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	f7ff fc11 	bl	800d8d8 <memcpy>
 800e0b6:	4631      	mov	r1, r6
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f7ff ff35 	bl	800df28 <_free_r>
 800e0be:	e7e9      	b.n	800e094 <_realloc_r+0x1c>
 800e0c0:	4635      	mov	r5, r6
 800e0c2:	e7e7      	b.n	800e094 <_realloc_r+0x1c>

0800e0c4 <_sbrk_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4c06      	ldr	r4, [pc, #24]	; (800e0e0 <_sbrk_r+0x1c>)
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	f7f6 fac0 	bl	8004654 <_sbrk>
 800e0d4:	1c43      	adds	r3, r0, #1
 800e0d6:	d102      	bne.n	800e0de <_sbrk_r+0x1a>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	b103      	cbz	r3, 800e0de <_sbrk_r+0x1a>
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	bd38      	pop	{r3, r4, r5, pc}
 800e0e0:	20008d9c 	.word	0x20008d9c

0800e0e4 <__malloc_lock>:
 800e0e4:	4770      	bx	lr

0800e0e6 <__malloc_unlock>:
 800e0e6:	4770      	bx	lr

0800e0e8 <_malloc_usable_size_r>:
 800e0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ec:	1f18      	subs	r0, r3, #4
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	bfbc      	itt	lt
 800e0f2:	580b      	ldrlt	r3, [r1, r0]
 800e0f4:	18c0      	addlt	r0, r0, r3
 800e0f6:	4770      	bx	lr

0800e0f8 <_init>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	bf00      	nop
 800e0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fe:	bc08      	pop	{r3}
 800e100:	469e      	mov	lr, r3
 800e102:	4770      	bx	lr

0800e104 <_fini>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	bf00      	nop
 800e108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10a:	bc08      	pop	{r3}
 800e10c:	469e      	mov	lr, r3
 800e10e:	4770      	bx	lr
=======
 800f1de:	bf00      	nop
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	200096cc 	.word	0x200096cc
 800f1f0:	200096d4 	.word	0x200096d4

0800f1f4 <__errno>:
 800f1f4:	4b01      	ldr	r3, [pc, #4]	; (800f1fc <__errno+0x8>)
 800f1f6:	6818      	ldr	r0, [r3, #0]
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	20001040 	.word	0x20001040

0800f200 <__libc_init_array>:
 800f200:	b570      	push	{r4, r5, r6, lr}
 800f202:	4e0d      	ldr	r6, [pc, #52]	; (800f238 <__libc_init_array+0x38>)
 800f204:	4c0d      	ldr	r4, [pc, #52]	; (800f23c <__libc_init_array+0x3c>)
 800f206:	1ba4      	subs	r4, r4, r6
 800f208:	10a4      	asrs	r4, r4, #2
 800f20a:	2500      	movs	r5, #0
 800f20c:	42a5      	cmp	r5, r4
 800f20e:	d109      	bne.n	800f224 <__libc_init_array+0x24>
 800f210:	4e0b      	ldr	r6, [pc, #44]	; (800f240 <__libc_init_array+0x40>)
 800f212:	4c0c      	ldr	r4, [pc, #48]	; (800f244 <__libc_init_array+0x44>)
 800f214:	f000 fc28 	bl	800fa68 <_init>
 800f218:	1ba4      	subs	r4, r4, r6
 800f21a:	10a4      	asrs	r4, r4, #2
 800f21c:	2500      	movs	r5, #0
 800f21e:	42a5      	cmp	r5, r4
 800f220:	d105      	bne.n	800f22e <__libc_init_array+0x2e>
 800f222:	bd70      	pop	{r4, r5, r6, pc}
 800f224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f228:	4798      	blx	r3
 800f22a:	3501      	adds	r5, #1
 800f22c:	e7ee      	b.n	800f20c <__libc_init_array+0xc>
 800f22e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f232:	4798      	blx	r3
 800f234:	3501      	adds	r5, #1
 800f236:	e7f2      	b.n	800f21e <__libc_init_array+0x1e>
 800f238:	08011bf0 	.word	0x08011bf0
 800f23c:	08011bf0 	.word	0x08011bf0
 800f240:	08011bf0 	.word	0x08011bf0
 800f244:	08011bf4 	.word	0x08011bf4

0800f248 <memcpy>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	1e43      	subs	r3, r0, #1
 800f24c:	440a      	add	r2, r1
 800f24e:	4291      	cmp	r1, r2
 800f250:	d100      	bne.n	800f254 <memcpy+0xc>
 800f252:	bd10      	pop	{r4, pc}
 800f254:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f25c:	e7f7      	b.n	800f24e <memcpy+0x6>

0800f25e <memset>:
 800f25e:	4402      	add	r2, r0
 800f260:	4603      	mov	r3, r0
 800f262:	4293      	cmp	r3, r2
 800f264:	d100      	bne.n	800f268 <memset+0xa>
 800f266:	4770      	bx	lr
 800f268:	f803 1b01 	strb.w	r1, [r3], #1
 800f26c:	e7f9      	b.n	800f262 <memset+0x4>
	...

0800f270 <siprintf>:
 800f270:	b40e      	push	{r1, r2, r3}
 800f272:	b500      	push	{lr}
 800f274:	b09c      	sub	sp, #112	; 0x70
 800f276:	ab1d      	add	r3, sp, #116	; 0x74
 800f278:	9002      	str	r0, [sp, #8]
 800f27a:	9006      	str	r0, [sp, #24]
 800f27c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f280:	4809      	ldr	r0, [pc, #36]	; (800f2a8 <siprintf+0x38>)
 800f282:	9107      	str	r1, [sp, #28]
 800f284:	9104      	str	r1, [sp, #16]
 800f286:	4909      	ldr	r1, [pc, #36]	; (800f2ac <siprintf+0x3c>)
 800f288:	f853 2b04 	ldr.w	r2, [r3], #4
 800f28c:	9105      	str	r1, [sp, #20]
 800f28e:	6800      	ldr	r0, [r0, #0]
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	a902      	add	r1, sp, #8
 800f294:	f000 f866 	bl	800f364 <_svfiprintf_r>
 800f298:	9b02      	ldr	r3, [sp, #8]
 800f29a:	2200      	movs	r2, #0
 800f29c:	701a      	strb	r2, [r3, #0]
 800f29e:	b01c      	add	sp, #112	; 0x70
 800f2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2a4:	b003      	add	sp, #12
 800f2a6:	4770      	bx	lr
 800f2a8:	20001040 	.word	0x20001040
 800f2ac:	ffff0208 	.word	0xffff0208

0800f2b0 <__ssputs_r>:
 800f2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b4:	688e      	ldr	r6, [r1, #8]
 800f2b6:	429e      	cmp	r6, r3
 800f2b8:	4682      	mov	sl, r0
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	4690      	mov	r8, r2
 800f2be:	4699      	mov	r9, r3
 800f2c0:	d837      	bhi.n	800f332 <__ssputs_r+0x82>
 800f2c2:	898a      	ldrh	r2, [r1, #12]
 800f2c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2c8:	d031      	beq.n	800f32e <__ssputs_r+0x7e>
 800f2ca:	6825      	ldr	r5, [r4, #0]
 800f2cc:	6909      	ldr	r1, [r1, #16]
 800f2ce:	1a6f      	subs	r7, r5, r1
 800f2d0:	6965      	ldr	r5, [r4, #20]
 800f2d2:	2302      	movs	r3, #2
 800f2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800f2dc:	f109 0301 	add.w	r3, r9, #1
 800f2e0:	443b      	add	r3, r7
 800f2e2:	429d      	cmp	r5, r3
 800f2e4:	bf38      	it	cc
 800f2e6:	461d      	movcc	r5, r3
 800f2e8:	0553      	lsls	r3, r2, #21
 800f2ea:	d530      	bpl.n	800f34e <__ssputs_r+0x9e>
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	f000 fb21 	bl	800f934 <_malloc_r>
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	b950      	cbnz	r0, 800f30c <__ssputs_r+0x5c>
 800f2f6:	230c      	movs	r3, #12
 800f2f8:	f8ca 3000 	str.w	r3, [sl]
 800f2fc:	89a3      	ldrh	r3, [r4, #12]
 800f2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f302:	81a3      	strh	r3, [r4, #12]
 800f304:	f04f 30ff 	mov.w	r0, #4294967295
 800f308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f30c:	463a      	mov	r2, r7
 800f30e:	6921      	ldr	r1, [r4, #16]
 800f310:	f7ff ff9a 	bl	800f248 <memcpy>
 800f314:	89a3      	ldrh	r3, [r4, #12]
 800f316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f31e:	81a3      	strh	r3, [r4, #12]
 800f320:	6126      	str	r6, [r4, #16]
 800f322:	6165      	str	r5, [r4, #20]
 800f324:	443e      	add	r6, r7
 800f326:	1bed      	subs	r5, r5, r7
 800f328:	6026      	str	r6, [r4, #0]
 800f32a:	60a5      	str	r5, [r4, #8]
 800f32c:	464e      	mov	r6, r9
 800f32e:	454e      	cmp	r6, r9
 800f330:	d900      	bls.n	800f334 <__ssputs_r+0x84>
 800f332:	464e      	mov	r6, r9
 800f334:	4632      	mov	r2, r6
 800f336:	4641      	mov	r1, r8
 800f338:	6820      	ldr	r0, [r4, #0]
 800f33a:	f000 fa93 	bl	800f864 <memmove>
 800f33e:	68a3      	ldr	r3, [r4, #8]
 800f340:	1b9b      	subs	r3, r3, r6
 800f342:	60a3      	str	r3, [r4, #8]
 800f344:	6823      	ldr	r3, [r4, #0]
 800f346:	441e      	add	r6, r3
 800f348:	6026      	str	r6, [r4, #0]
 800f34a:	2000      	movs	r0, #0
 800f34c:	e7dc      	b.n	800f308 <__ssputs_r+0x58>
 800f34e:	462a      	mov	r2, r5
 800f350:	f000 fb4a 	bl	800f9e8 <_realloc_r>
 800f354:	4606      	mov	r6, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	d1e2      	bne.n	800f320 <__ssputs_r+0x70>
 800f35a:	6921      	ldr	r1, [r4, #16]
 800f35c:	4650      	mov	r0, sl
 800f35e:	f000 fa9b 	bl	800f898 <_free_r>
 800f362:	e7c8      	b.n	800f2f6 <__ssputs_r+0x46>

0800f364 <_svfiprintf_r>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	461d      	mov	r5, r3
 800f36a:	898b      	ldrh	r3, [r1, #12]
 800f36c:	061f      	lsls	r7, r3, #24
 800f36e:	b09d      	sub	sp, #116	; 0x74
 800f370:	4680      	mov	r8, r0
 800f372:	460c      	mov	r4, r1
 800f374:	4616      	mov	r6, r2
 800f376:	d50f      	bpl.n	800f398 <_svfiprintf_r+0x34>
 800f378:	690b      	ldr	r3, [r1, #16]
 800f37a:	b96b      	cbnz	r3, 800f398 <_svfiprintf_r+0x34>
 800f37c:	2140      	movs	r1, #64	; 0x40
 800f37e:	f000 fad9 	bl	800f934 <_malloc_r>
 800f382:	6020      	str	r0, [r4, #0]
 800f384:	6120      	str	r0, [r4, #16]
 800f386:	b928      	cbnz	r0, 800f394 <_svfiprintf_r+0x30>
 800f388:	230c      	movs	r3, #12
 800f38a:	f8c8 3000 	str.w	r3, [r8]
 800f38e:	f04f 30ff 	mov.w	r0, #4294967295
 800f392:	e0c8      	b.n	800f526 <_svfiprintf_r+0x1c2>
 800f394:	2340      	movs	r3, #64	; 0x40
 800f396:	6163      	str	r3, [r4, #20]
 800f398:	2300      	movs	r3, #0
 800f39a:	9309      	str	r3, [sp, #36]	; 0x24
 800f39c:	2320      	movs	r3, #32
 800f39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3a2:	2330      	movs	r3, #48	; 0x30
 800f3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3a8:	9503      	str	r5, [sp, #12]
 800f3aa:	f04f 0b01 	mov.w	fp, #1
 800f3ae:	4637      	mov	r7, r6
 800f3b0:	463d      	mov	r5, r7
 800f3b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f3b6:	b10b      	cbz	r3, 800f3bc <_svfiprintf_r+0x58>
 800f3b8:	2b25      	cmp	r3, #37	; 0x25
 800f3ba:	d13e      	bne.n	800f43a <_svfiprintf_r+0xd6>
 800f3bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f3c0:	d00b      	beq.n	800f3da <_svfiprintf_r+0x76>
 800f3c2:	4653      	mov	r3, sl
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4640      	mov	r0, r8
 800f3ca:	f7ff ff71 	bl	800f2b0 <__ssputs_r>
 800f3ce:	3001      	adds	r0, #1
 800f3d0:	f000 80a4 	beq.w	800f51c <_svfiprintf_r+0x1b8>
 800f3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3d6:	4453      	add	r3, sl
 800f3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3da:	783b      	ldrb	r3, [r7, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 809d 	beq.w	800f51c <_svfiprintf_r+0x1b8>
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3ec:	9304      	str	r3, [sp, #16]
 800f3ee:	9307      	str	r3, [sp, #28]
 800f3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3f4:	931a      	str	r3, [sp, #104]	; 0x68
 800f3f6:	462f      	mov	r7, r5
 800f3f8:	2205      	movs	r2, #5
 800f3fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f3fe:	4850      	ldr	r0, [pc, #320]	; (800f540 <_svfiprintf_r+0x1dc>)
 800f400:	f7f0 ff06 	bl	8000210 <memchr>
 800f404:	9b04      	ldr	r3, [sp, #16]
 800f406:	b9d0      	cbnz	r0, 800f43e <_svfiprintf_r+0xda>
 800f408:	06d9      	lsls	r1, r3, #27
 800f40a:	bf44      	itt	mi
 800f40c:	2220      	movmi	r2, #32
 800f40e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f412:	071a      	lsls	r2, r3, #28
 800f414:	bf44      	itt	mi
 800f416:	222b      	movmi	r2, #43	; 0x2b
 800f418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f41c:	782a      	ldrb	r2, [r5, #0]
 800f41e:	2a2a      	cmp	r2, #42	; 0x2a
 800f420:	d015      	beq.n	800f44e <_svfiprintf_r+0xea>
 800f422:	9a07      	ldr	r2, [sp, #28]
 800f424:	462f      	mov	r7, r5
 800f426:	2000      	movs	r0, #0
 800f428:	250a      	movs	r5, #10
 800f42a:	4639      	mov	r1, r7
 800f42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f430:	3b30      	subs	r3, #48	; 0x30
 800f432:	2b09      	cmp	r3, #9
 800f434:	d94d      	bls.n	800f4d2 <_svfiprintf_r+0x16e>
 800f436:	b1b8      	cbz	r0, 800f468 <_svfiprintf_r+0x104>
 800f438:	e00f      	b.n	800f45a <_svfiprintf_r+0xf6>
 800f43a:	462f      	mov	r7, r5
 800f43c:	e7b8      	b.n	800f3b0 <_svfiprintf_r+0x4c>
 800f43e:	4a40      	ldr	r2, [pc, #256]	; (800f540 <_svfiprintf_r+0x1dc>)
 800f440:	1a80      	subs	r0, r0, r2
 800f442:	fa0b f000 	lsl.w	r0, fp, r0
 800f446:	4318      	orrs	r0, r3
 800f448:	9004      	str	r0, [sp, #16]
 800f44a:	463d      	mov	r5, r7
 800f44c:	e7d3      	b.n	800f3f6 <_svfiprintf_r+0x92>
 800f44e:	9a03      	ldr	r2, [sp, #12]
 800f450:	1d11      	adds	r1, r2, #4
 800f452:	6812      	ldr	r2, [r2, #0]
 800f454:	9103      	str	r1, [sp, #12]
 800f456:	2a00      	cmp	r2, #0
 800f458:	db01      	blt.n	800f45e <_svfiprintf_r+0xfa>
 800f45a:	9207      	str	r2, [sp, #28]
 800f45c:	e004      	b.n	800f468 <_svfiprintf_r+0x104>
 800f45e:	4252      	negs	r2, r2
 800f460:	f043 0302 	orr.w	r3, r3, #2
 800f464:	9207      	str	r2, [sp, #28]
 800f466:	9304      	str	r3, [sp, #16]
 800f468:	783b      	ldrb	r3, [r7, #0]
 800f46a:	2b2e      	cmp	r3, #46	; 0x2e
 800f46c:	d10c      	bne.n	800f488 <_svfiprintf_r+0x124>
 800f46e:	787b      	ldrb	r3, [r7, #1]
 800f470:	2b2a      	cmp	r3, #42	; 0x2a
 800f472:	d133      	bne.n	800f4dc <_svfiprintf_r+0x178>
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	1d1a      	adds	r2, r3, #4
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	9203      	str	r2, [sp, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	bfb8      	it	lt
 800f480:	f04f 33ff 	movlt.w	r3, #4294967295
 800f484:	3702      	adds	r7, #2
 800f486:	9305      	str	r3, [sp, #20]
 800f488:	4d2e      	ldr	r5, [pc, #184]	; (800f544 <_svfiprintf_r+0x1e0>)
 800f48a:	7839      	ldrb	r1, [r7, #0]
 800f48c:	2203      	movs	r2, #3
 800f48e:	4628      	mov	r0, r5
 800f490:	f7f0 febe 	bl	8000210 <memchr>
 800f494:	b138      	cbz	r0, 800f4a6 <_svfiprintf_r+0x142>
 800f496:	2340      	movs	r3, #64	; 0x40
 800f498:	1b40      	subs	r0, r0, r5
 800f49a:	fa03 f000 	lsl.w	r0, r3, r0
 800f49e:	9b04      	ldr	r3, [sp, #16]
 800f4a0:	4303      	orrs	r3, r0
 800f4a2:	3701      	adds	r7, #1
 800f4a4:	9304      	str	r3, [sp, #16]
 800f4a6:	7839      	ldrb	r1, [r7, #0]
 800f4a8:	4827      	ldr	r0, [pc, #156]	; (800f548 <_svfiprintf_r+0x1e4>)
 800f4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4ae:	2206      	movs	r2, #6
 800f4b0:	1c7e      	adds	r6, r7, #1
 800f4b2:	f7f0 fead 	bl	8000210 <memchr>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d038      	beq.n	800f52c <_svfiprintf_r+0x1c8>
 800f4ba:	4b24      	ldr	r3, [pc, #144]	; (800f54c <_svfiprintf_r+0x1e8>)
 800f4bc:	bb13      	cbnz	r3, 800f504 <_svfiprintf_r+0x1a0>
 800f4be:	9b03      	ldr	r3, [sp, #12]
 800f4c0:	3307      	adds	r3, #7
 800f4c2:	f023 0307 	bic.w	r3, r3, #7
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	9303      	str	r3, [sp, #12]
 800f4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4cc:	444b      	add	r3, r9
 800f4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f4d0:	e76d      	b.n	800f3ae <_svfiprintf_r+0x4a>
 800f4d2:	fb05 3202 	mla	r2, r5, r2, r3
 800f4d6:	2001      	movs	r0, #1
 800f4d8:	460f      	mov	r7, r1
 800f4da:	e7a6      	b.n	800f42a <_svfiprintf_r+0xc6>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	3701      	adds	r7, #1
 800f4e0:	9305      	str	r3, [sp, #20]
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	250a      	movs	r5, #10
 800f4e6:	4638      	mov	r0, r7
 800f4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4ec:	3a30      	subs	r2, #48	; 0x30
 800f4ee:	2a09      	cmp	r2, #9
 800f4f0:	d903      	bls.n	800f4fa <_svfiprintf_r+0x196>
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d0c8      	beq.n	800f488 <_svfiprintf_r+0x124>
 800f4f6:	9105      	str	r1, [sp, #20]
 800f4f8:	e7c6      	b.n	800f488 <_svfiprintf_r+0x124>
 800f4fa:	fb05 2101 	mla	r1, r5, r1, r2
 800f4fe:	2301      	movs	r3, #1
 800f500:	4607      	mov	r7, r0
 800f502:	e7f0      	b.n	800f4e6 <_svfiprintf_r+0x182>
 800f504:	ab03      	add	r3, sp, #12
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	4622      	mov	r2, r4
 800f50a:	4b11      	ldr	r3, [pc, #68]	; (800f550 <_svfiprintf_r+0x1ec>)
 800f50c:	a904      	add	r1, sp, #16
 800f50e:	4640      	mov	r0, r8
 800f510:	f3af 8000 	nop.w
 800f514:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f518:	4681      	mov	r9, r0
 800f51a:	d1d6      	bne.n	800f4ca <_svfiprintf_r+0x166>
 800f51c:	89a3      	ldrh	r3, [r4, #12]
 800f51e:	065b      	lsls	r3, r3, #25
 800f520:	f53f af35 	bmi.w	800f38e <_svfiprintf_r+0x2a>
 800f524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f526:	b01d      	add	sp, #116	; 0x74
 800f528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52c:	ab03      	add	r3, sp, #12
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	4622      	mov	r2, r4
 800f532:	4b07      	ldr	r3, [pc, #28]	; (800f550 <_svfiprintf_r+0x1ec>)
 800f534:	a904      	add	r1, sp, #16
 800f536:	4640      	mov	r0, r8
 800f538:	f000 f882 	bl	800f640 <_printf_i>
 800f53c:	e7ea      	b.n	800f514 <_svfiprintf_r+0x1b0>
 800f53e:	bf00      	nop
 800f540:	08011bb4 	.word	0x08011bb4
 800f544:	08011bba 	.word	0x08011bba
 800f548:	08011bbe 	.word	0x08011bbe
 800f54c:	00000000 	.word	0x00000000
 800f550:	0800f2b1 	.word	0x0800f2b1

0800f554 <_printf_common>:
 800f554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f558:	4691      	mov	r9, r2
 800f55a:	461f      	mov	r7, r3
 800f55c:	688a      	ldr	r2, [r1, #8]
 800f55e:	690b      	ldr	r3, [r1, #16]
 800f560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f564:	4293      	cmp	r3, r2
 800f566:	bfb8      	it	lt
 800f568:	4613      	movlt	r3, r2
 800f56a:	f8c9 3000 	str.w	r3, [r9]
 800f56e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f572:	4606      	mov	r6, r0
 800f574:	460c      	mov	r4, r1
 800f576:	b112      	cbz	r2, 800f57e <_printf_common+0x2a>
 800f578:	3301      	adds	r3, #1
 800f57a:	f8c9 3000 	str.w	r3, [r9]
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	0699      	lsls	r1, r3, #26
 800f582:	bf42      	ittt	mi
 800f584:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f588:	3302      	addmi	r3, #2
 800f58a:	f8c9 3000 	strmi.w	r3, [r9]
 800f58e:	6825      	ldr	r5, [r4, #0]
 800f590:	f015 0506 	ands.w	r5, r5, #6
 800f594:	d107      	bne.n	800f5a6 <_printf_common+0x52>
 800f596:	f104 0a19 	add.w	sl, r4, #25
 800f59a:	68e3      	ldr	r3, [r4, #12]
 800f59c:	f8d9 2000 	ldr.w	r2, [r9]
 800f5a0:	1a9b      	subs	r3, r3, r2
 800f5a2:	42ab      	cmp	r3, r5
 800f5a4:	dc28      	bgt.n	800f5f8 <_printf_common+0xa4>
 800f5a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f5aa:	6822      	ldr	r2, [r4, #0]
 800f5ac:	3300      	adds	r3, #0
 800f5ae:	bf18      	it	ne
 800f5b0:	2301      	movne	r3, #1
 800f5b2:	0692      	lsls	r2, r2, #26
 800f5b4:	d42d      	bmi.n	800f612 <_printf_common+0xbe>
 800f5b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5ba:	4639      	mov	r1, r7
 800f5bc:	4630      	mov	r0, r6
 800f5be:	47c0      	blx	r8
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d020      	beq.n	800f606 <_printf_common+0xb2>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	68e5      	ldr	r5, [r4, #12]
 800f5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800f5cc:	f003 0306 	and.w	r3, r3, #6
 800f5d0:	2b04      	cmp	r3, #4
 800f5d2:	bf08      	it	eq
 800f5d4:	1aad      	subeq	r5, r5, r2
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	6922      	ldr	r2, [r4, #16]
 800f5da:	bf0c      	ite	eq
 800f5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5e0:	2500      	movne	r5, #0
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	bfc4      	itt	gt
 800f5e6:	1a9b      	subgt	r3, r3, r2
 800f5e8:	18ed      	addgt	r5, r5, r3
 800f5ea:	f04f 0900 	mov.w	r9, #0
 800f5ee:	341a      	adds	r4, #26
 800f5f0:	454d      	cmp	r5, r9
 800f5f2:	d11a      	bne.n	800f62a <_printf_common+0xd6>
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	e008      	b.n	800f60a <_printf_common+0xb6>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	4652      	mov	r2, sl
 800f5fc:	4639      	mov	r1, r7
 800f5fe:	4630      	mov	r0, r6
 800f600:	47c0      	blx	r8
 800f602:	3001      	adds	r0, #1
 800f604:	d103      	bne.n	800f60e <_printf_common+0xba>
 800f606:	f04f 30ff 	mov.w	r0, #4294967295
 800f60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60e:	3501      	adds	r5, #1
 800f610:	e7c3      	b.n	800f59a <_printf_common+0x46>
 800f612:	18e1      	adds	r1, r4, r3
 800f614:	1c5a      	adds	r2, r3, #1
 800f616:	2030      	movs	r0, #48	; 0x30
 800f618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f61c:	4422      	add	r2, r4
 800f61e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f626:	3302      	adds	r3, #2
 800f628:	e7c5      	b.n	800f5b6 <_printf_common+0x62>
 800f62a:	2301      	movs	r3, #1
 800f62c:	4622      	mov	r2, r4
 800f62e:	4639      	mov	r1, r7
 800f630:	4630      	mov	r0, r6
 800f632:	47c0      	blx	r8
 800f634:	3001      	adds	r0, #1
 800f636:	d0e6      	beq.n	800f606 <_printf_common+0xb2>
 800f638:	f109 0901 	add.w	r9, r9, #1
 800f63c:	e7d8      	b.n	800f5f0 <_printf_common+0x9c>
	...

0800f640 <_printf_i>:
 800f640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f644:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f648:	460c      	mov	r4, r1
 800f64a:	7e09      	ldrb	r1, [r1, #24]
 800f64c:	b085      	sub	sp, #20
 800f64e:	296e      	cmp	r1, #110	; 0x6e
 800f650:	4617      	mov	r7, r2
 800f652:	4606      	mov	r6, r0
 800f654:	4698      	mov	r8, r3
 800f656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f658:	f000 80b3 	beq.w	800f7c2 <_printf_i+0x182>
 800f65c:	d822      	bhi.n	800f6a4 <_printf_i+0x64>
 800f65e:	2963      	cmp	r1, #99	; 0x63
 800f660:	d036      	beq.n	800f6d0 <_printf_i+0x90>
 800f662:	d80a      	bhi.n	800f67a <_printf_i+0x3a>
 800f664:	2900      	cmp	r1, #0
 800f666:	f000 80b9 	beq.w	800f7dc <_printf_i+0x19c>
 800f66a:	2958      	cmp	r1, #88	; 0x58
 800f66c:	f000 8083 	beq.w	800f776 <_printf_i+0x136>
 800f670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f678:	e032      	b.n	800f6e0 <_printf_i+0xa0>
 800f67a:	2964      	cmp	r1, #100	; 0x64
 800f67c:	d001      	beq.n	800f682 <_printf_i+0x42>
 800f67e:	2969      	cmp	r1, #105	; 0x69
 800f680:	d1f6      	bne.n	800f670 <_printf_i+0x30>
 800f682:	6820      	ldr	r0, [r4, #0]
 800f684:	6813      	ldr	r3, [r2, #0]
 800f686:	0605      	lsls	r5, r0, #24
 800f688:	f103 0104 	add.w	r1, r3, #4
 800f68c:	d52a      	bpl.n	800f6e4 <_printf_i+0xa4>
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	6011      	str	r1, [r2, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	da03      	bge.n	800f69e <_printf_i+0x5e>
 800f696:	222d      	movs	r2, #45	; 0x2d
 800f698:	425b      	negs	r3, r3
 800f69a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f69e:	486f      	ldr	r0, [pc, #444]	; (800f85c <_printf_i+0x21c>)
 800f6a0:	220a      	movs	r2, #10
 800f6a2:	e039      	b.n	800f718 <_printf_i+0xd8>
 800f6a4:	2973      	cmp	r1, #115	; 0x73
 800f6a6:	f000 809d 	beq.w	800f7e4 <_printf_i+0x1a4>
 800f6aa:	d808      	bhi.n	800f6be <_printf_i+0x7e>
 800f6ac:	296f      	cmp	r1, #111	; 0x6f
 800f6ae:	d020      	beq.n	800f6f2 <_printf_i+0xb2>
 800f6b0:	2970      	cmp	r1, #112	; 0x70
 800f6b2:	d1dd      	bne.n	800f670 <_printf_i+0x30>
 800f6b4:	6823      	ldr	r3, [r4, #0]
 800f6b6:	f043 0320 	orr.w	r3, r3, #32
 800f6ba:	6023      	str	r3, [r4, #0]
 800f6bc:	e003      	b.n	800f6c6 <_printf_i+0x86>
 800f6be:	2975      	cmp	r1, #117	; 0x75
 800f6c0:	d017      	beq.n	800f6f2 <_printf_i+0xb2>
 800f6c2:	2978      	cmp	r1, #120	; 0x78
 800f6c4:	d1d4      	bne.n	800f670 <_printf_i+0x30>
 800f6c6:	2378      	movs	r3, #120	; 0x78
 800f6c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6cc:	4864      	ldr	r0, [pc, #400]	; (800f860 <_printf_i+0x220>)
 800f6ce:	e055      	b.n	800f77c <_printf_i+0x13c>
 800f6d0:	6813      	ldr	r3, [r2, #0]
 800f6d2:	1d19      	adds	r1, r3, #4
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6011      	str	r1, [r2, #0]
 800f6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e08c      	b.n	800f7fe <_printf_i+0x1be>
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	6011      	str	r1, [r2, #0]
 800f6e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6ec:	bf18      	it	ne
 800f6ee:	b21b      	sxthne	r3, r3
 800f6f0:	e7cf      	b.n	800f692 <_printf_i+0x52>
 800f6f2:	6813      	ldr	r3, [r2, #0]
 800f6f4:	6825      	ldr	r5, [r4, #0]
 800f6f6:	1d18      	adds	r0, r3, #4
 800f6f8:	6010      	str	r0, [r2, #0]
 800f6fa:	0628      	lsls	r0, r5, #24
 800f6fc:	d501      	bpl.n	800f702 <_printf_i+0xc2>
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	e002      	b.n	800f708 <_printf_i+0xc8>
 800f702:	0668      	lsls	r0, r5, #25
 800f704:	d5fb      	bpl.n	800f6fe <_printf_i+0xbe>
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	4854      	ldr	r0, [pc, #336]	; (800f85c <_printf_i+0x21c>)
 800f70a:	296f      	cmp	r1, #111	; 0x6f
 800f70c:	bf14      	ite	ne
 800f70e:	220a      	movne	r2, #10
 800f710:	2208      	moveq	r2, #8
 800f712:	2100      	movs	r1, #0
 800f714:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f718:	6865      	ldr	r5, [r4, #4]
 800f71a:	60a5      	str	r5, [r4, #8]
 800f71c:	2d00      	cmp	r5, #0
 800f71e:	f2c0 8095 	blt.w	800f84c <_printf_i+0x20c>
 800f722:	6821      	ldr	r1, [r4, #0]
 800f724:	f021 0104 	bic.w	r1, r1, #4
 800f728:	6021      	str	r1, [r4, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d13d      	bne.n	800f7aa <_printf_i+0x16a>
 800f72e:	2d00      	cmp	r5, #0
 800f730:	f040 808e 	bne.w	800f850 <_printf_i+0x210>
 800f734:	4665      	mov	r5, ip
 800f736:	2a08      	cmp	r2, #8
 800f738:	d10b      	bne.n	800f752 <_printf_i+0x112>
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	07db      	lsls	r3, r3, #31
 800f73e:	d508      	bpl.n	800f752 <_printf_i+0x112>
 800f740:	6923      	ldr	r3, [r4, #16]
 800f742:	6862      	ldr	r2, [r4, #4]
 800f744:	429a      	cmp	r2, r3
 800f746:	bfde      	ittt	le
 800f748:	2330      	movle	r3, #48	; 0x30
 800f74a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f74e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f752:	ebac 0305 	sub.w	r3, ip, r5
 800f756:	6123      	str	r3, [r4, #16]
 800f758:	f8cd 8000 	str.w	r8, [sp]
 800f75c:	463b      	mov	r3, r7
 800f75e:	aa03      	add	r2, sp, #12
 800f760:	4621      	mov	r1, r4
 800f762:	4630      	mov	r0, r6
 800f764:	f7ff fef6 	bl	800f554 <_printf_common>
 800f768:	3001      	adds	r0, #1
 800f76a:	d14d      	bne.n	800f808 <_printf_i+0x1c8>
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	b005      	add	sp, #20
 800f772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f776:	4839      	ldr	r0, [pc, #228]	; (800f85c <_printf_i+0x21c>)
 800f778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f77c:	6813      	ldr	r3, [r2, #0]
 800f77e:	6821      	ldr	r1, [r4, #0]
 800f780:	1d1d      	adds	r5, r3, #4
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6015      	str	r5, [r2, #0]
 800f786:	060a      	lsls	r2, r1, #24
 800f788:	d50b      	bpl.n	800f7a2 <_printf_i+0x162>
 800f78a:	07ca      	lsls	r2, r1, #31
 800f78c:	bf44      	itt	mi
 800f78e:	f041 0120 	orrmi.w	r1, r1, #32
 800f792:	6021      	strmi	r1, [r4, #0]
 800f794:	b91b      	cbnz	r3, 800f79e <_printf_i+0x15e>
 800f796:	6822      	ldr	r2, [r4, #0]
 800f798:	f022 0220 	bic.w	r2, r2, #32
 800f79c:	6022      	str	r2, [r4, #0]
 800f79e:	2210      	movs	r2, #16
 800f7a0:	e7b7      	b.n	800f712 <_printf_i+0xd2>
 800f7a2:	064d      	lsls	r5, r1, #25
 800f7a4:	bf48      	it	mi
 800f7a6:	b29b      	uxthmi	r3, r3
 800f7a8:	e7ef      	b.n	800f78a <_printf_i+0x14a>
 800f7aa:	4665      	mov	r5, ip
 800f7ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800f7b0:	fb02 3311 	mls	r3, r2, r1, r3
 800f7b4:	5cc3      	ldrb	r3, [r0, r3]
 800f7b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	2900      	cmp	r1, #0
 800f7be:	d1f5      	bne.n	800f7ac <_printf_i+0x16c>
 800f7c0:	e7b9      	b.n	800f736 <_printf_i+0xf6>
 800f7c2:	6813      	ldr	r3, [r2, #0]
 800f7c4:	6825      	ldr	r5, [r4, #0]
 800f7c6:	6961      	ldr	r1, [r4, #20]
 800f7c8:	1d18      	adds	r0, r3, #4
 800f7ca:	6010      	str	r0, [r2, #0]
 800f7cc:	0628      	lsls	r0, r5, #24
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	d501      	bpl.n	800f7d6 <_printf_i+0x196>
 800f7d2:	6019      	str	r1, [r3, #0]
 800f7d4:	e002      	b.n	800f7dc <_printf_i+0x19c>
 800f7d6:	066a      	lsls	r2, r5, #25
 800f7d8:	d5fb      	bpl.n	800f7d2 <_printf_i+0x192>
 800f7da:	8019      	strh	r1, [r3, #0]
 800f7dc:	2300      	movs	r3, #0
 800f7de:	6123      	str	r3, [r4, #16]
 800f7e0:	4665      	mov	r5, ip
 800f7e2:	e7b9      	b.n	800f758 <_printf_i+0x118>
 800f7e4:	6813      	ldr	r3, [r2, #0]
 800f7e6:	1d19      	adds	r1, r3, #4
 800f7e8:	6011      	str	r1, [r2, #0]
 800f7ea:	681d      	ldr	r5, [r3, #0]
 800f7ec:	6862      	ldr	r2, [r4, #4]
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f7f0 fd0d 	bl	8000210 <memchr>
 800f7f6:	b108      	cbz	r0, 800f7fc <_printf_i+0x1bc>
 800f7f8:	1b40      	subs	r0, r0, r5
 800f7fa:	6060      	str	r0, [r4, #4]
 800f7fc:	6863      	ldr	r3, [r4, #4]
 800f7fe:	6123      	str	r3, [r4, #16]
 800f800:	2300      	movs	r3, #0
 800f802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f806:	e7a7      	b.n	800f758 <_printf_i+0x118>
 800f808:	6923      	ldr	r3, [r4, #16]
 800f80a:	462a      	mov	r2, r5
 800f80c:	4639      	mov	r1, r7
 800f80e:	4630      	mov	r0, r6
 800f810:	47c0      	blx	r8
 800f812:	3001      	adds	r0, #1
 800f814:	d0aa      	beq.n	800f76c <_printf_i+0x12c>
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	079b      	lsls	r3, r3, #30
 800f81a:	d413      	bmi.n	800f844 <_printf_i+0x204>
 800f81c:	68e0      	ldr	r0, [r4, #12]
 800f81e:	9b03      	ldr	r3, [sp, #12]
 800f820:	4298      	cmp	r0, r3
 800f822:	bfb8      	it	lt
 800f824:	4618      	movlt	r0, r3
 800f826:	e7a3      	b.n	800f770 <_printf_i+0x130>
 800f828:	2301      	movs	r3, #1
 800f82a:	464a      	mov	r2, r9
 800f82c:	4639      	mov	r1, r7
 800f82e:	4630      	mov	r0, r6
 800f830:	47c0      	blx	r8
 800f832:	3001      	adds	r0, #1
 800f834:	d09a      	beq.n	800f76c <_printf_i+0x12c>
 800f836:	3501      	adds	r5, #1
 800f838:	68e3      	ldr	r3, [r4, #12]
 800f83a:	9a03      	ldr	r2, [sp, #12]
 800f83c:	1a9b      	subs	r3, r3, r2
 800f83e:	42ab      	cmp	r3, r5
 800f840:	dcf2      	bgt.n	800f828 <_printf_i+0x1e8>
 800f842:	e7eb      	b.n	800f81c <_printf_i+0x1dc>
 800f844:	2500      	movs	r5, #0
 800f846:	f104 0919 	add.w	r9, r4, #25
 800f84a:	e7f5      	b.n	800f838 <_printf_i+0x1f8>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1ac      	bne.n	800f7aa <_printf_i+0x16a>
 800f850:	7803      	ldrb	r3, [r0, #0]
 800f852:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f856:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f85a:	e76c      	b.n	800f736 <_printf_i+0xf6>
 800f85c:	08011bc5 	.word	0x08011bc5
 800f860:	08011bd6 	.word	0x08011bd6

0800f864 <memmove>:
 800f864:	4288      	cmp	r0, r1
 800f866:	b510      	push	{r4, lr}
 800f868:	eb01 0302 	add.w	r3, r1, r2
 800f86c:	d807      	bhi.n	800f87e <memmove+0x1a>
 800f86e:	1e42      	subs	r2, r0, #1
 800f870:	4299      	cmp	r1, r3
 800f872:	d00a      	beq.n	800f88a <memmove+0x26>
 800f874:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f878:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f87c:	e7f8      	b.n	800f870 <memmove+0xc>
 800f87e:	4283      	cmp	r3, r0
 800f880:	d9f5      	bls.n	800f86e <memmove+0xa>
 800f882:	1881      	adds	r1, r0, r2
 800f884:	1ad2      	subs	r2, r2, r3
 800f886:	42d3      	cmn	r3, r2
 800f888:	d100      	bne.n	800f88c <memmove+0x28>
 800f88a:	bd10      	pop	{r4, pc}
 800f88c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f890:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f894:	e7f7      	b.n	800f886 <memmove+0x22>
	...

0800f898 <_free_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4605      	mov	r5, r0
 800f89c:	2900      	cmp	r1, #0
 800f89e:	d045      	beq.n	800f92c <_free_r+0x94>
 800f8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8a4:	1f0c      	subs	r4, r1, #4
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	bfb8      	it	lt
 800f8aa:	18e4      	addlt	r4, r4, r3
 800f8ac:	f000 f8d2 	bl	800fa54 <__malloc_lock>
 800f8b0:	4a1f      	ldr	r2, [pc, #124]	; (800f930 <_free_r+0x98>)
 800f8b2:	6813      	ldr	r3, [r2, #0]
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	b933      	cbnz	r3, 800f8c6 <_free_r+0x2e>
 800f8b8:	6063      	str	r3, [r4, #4]
 800f8ba:	6014      	str	r4, [r2, #0]
 800f8bc:	4628      	mov	r0, r5
 800f8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8c2:	f000 b8c8 	b.w	800fa56 <__malloc_unlock>
 800f8c6:	42a3      	cmp	r3, r4
 800f8c8:	d90c      	bls.n	800f8e4 <_free_r+0x4c>
 800f8ca:	6821      	ldr	r1, [r4, #0]
 800f8cc:	1862      	adds	r2, r4, r1
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	bf04      	itt	eq
 800f8d2:	681a      	ldreq	r2, [r3, #0]
 800f8d4:	685b      	ldreq	r3, [r3, #4]
 800f8d6:	6063      	str	r3, [r4, #4]
 800f8d8:	bf04      	itt	eq
 800f8da:	1852      	addeq	r2, r2, r1
 800f8dc:	6022      	streq	r2, [r4, #0]
 800f8de:	6004      	str	r4, [r0, #0]
 800f8e0:	e7ec      	b.n	800f8bc <_free_r+0x24>
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	b10a      	cbz	r2, 800f8ec <_free_r+0x54>
 800f8e8:	42a2      	cmp	r2, r4
 800f8ea:	d9fa      	bls.n	800f8e2 <_free_r+0x4a>
 800f8ec:	6819      	ldr	r1, [r3, #0]
 800f8ee:	1858      	adds	r0, r3, r1
 800f8f0:	42a0      	cmp	r0, r4
 800f8f2:	d10b      	bne.n	800f90c <_free_r+0x74>
 800f8f4:	6820      	ldr	r0, [r4, #0]
 800f8f6:	4401      	add	r1, r0
 800f8f8:	1858      	adds	r0, r3, r1
 800f8fa:	4282      	cmp	r2, r0
 800f8fc:	6019      	str	r1, [r3, #0]
 800f8fe:	d1dd      	bne.n	800f8bc <_free_r+0x24>
 800f900:	6810      	ldr	r0, [r2, #0]
 800f902:	6852      	ldr	r2, [r2, #4]
 800f904:	605a      	str	r2, [r3, #4]
 800f906:	4401      	add	r1, r0
 800f908:	6019      	str	r1, [r3, #0]
 800f90a:	e7d7      	b.n	800f8bc <_free_r+0x24>
 800f90c:	d902      	bls.n	800f914 <_free_r+0x7c>
 800f90e:	230c      	movs	r3, #12
 800f910:	602b      	str	r3, [r5, #0]
 800f912:	e7d3      	b.n	800f8bc <_free_r+0x24>
 800f914:	6820      	ldr	r0, [r4, #0]
 800f916:	1821      	adds	r1, r4, r0
 800f918:	428a      	cmp	r2, r1
 800f91a:	bf04      	itt	eq
 800f91c:	6811      	ldreq	r1, [r2, #0]
 800f91e:	6852      	ldreq	r2, [r2, #4]
 800f920:	6062      	str	r2, [r4, #4]
 800f922:	bf04      	itt	eq
 800f924:	1809      	addeq	r1, r1, r0
 800f926:	6021      	streq	r1, [r4, #0]
 800f928:	605c      	str	r4, [r3, #4]
 800f92a:	e7c7      	b.n	800f8bc <_free_r+0x24>
 800f92c:	bd38      	pop	{r3, r4, r5, pc}
 800f92e:	bf00      	nop
 800f930:	200096e4 	.word	0x200096e4

0800f934 <_malloc_r>:
 800f934:	b570      	push	{r4, r5, r6, lr}
 800f936:	1ccd      	adds	r5, r1, #3
 800f938:	f025 0503 	bic.w	r5, r5, #3
 800f93c:	3508      	adds	r5, #8
 800f93e:	2d0c      	cmp	r5, #12
 800f940:	bf38      	it	cc
 800f942:	250c      	movcc	r5, #12
 800f944:	2d00      	cmp	r5, #0
 800f946:	4606      	mov	r6, r0
 800f948:	db01      	blt.n	800f94e <_malloc_r+0x1a>
 800f94a:	42a9      	cmp	r1, r5
 800f94c:	d903      	bls.n	800f956 <_malloc_r+0x22>
 800f94e:	230c      	movs	r3, #12
 800f950:	6033      	str	r3, [r6, #0]
 800f952:	2000      	movs	r0, #0
 800f954:	bd70      	pop	{r4, r5, r6, pc}
 800f956:	f000 f87d 	bl	800fa54 <__malloc_lock>
 800f95a:	4a21      	ldr	r2, [pc, #132]	; (800f9e0 <_malloc_r+0xac>)
 800f95c:	6814      	ldr	r4, [r2, #0]
 800f95e:	4621      	mov	r1, r4
 800f960:	b991      	cbnz	r1, 800f988 <_malloc_r+0x54>
 800f962:	4c20      	ldr	r4, [pc, #128]	; (800f9e4 <_malloc_r+0xb0>)
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	b91b      	cbnz	r3, 800f970 <_malloc_r+0x3c>
 800f968:	4630      	mov	r0, r6
 800f96a:	f000 f863 	bl	800fa34 <_sbrk_r>
 800f96e:	6020      	str	r0, [r4, #0]
 800f970:	4629      	mov	r1, r5
 800f972:	4630      	mov	r0, r6
 800f974:	f000 f85e 	bl	800fa34 <_sbrk_r>
 800f978:	1c43      	adds	r3, r0, #1
 800f97a:	d124      	bne.n	800f9c6 <_malloc_r+0x92>
 800f97c:	230c      	movs	r3, #12
 800f97e:	6033      	str	r3, [r6, #0]
 800f980:	4630      	mov	r0, r6
 800f982:	f000 f868 	bl	800fa56 <__malloc_unlock>
 800f986:	e7e4      	b.n	800f952 <_malloc_r+0x1e>
 800f988:	680b      	ldr	r3, [r1, #0]
 800f98a:	1b5b      	subs	r3, r3, r5
 800f98c:	d418      	bmi.n	800f9c0 <_malloc_r+0x8c>
 800f98e:	2b0b      	cmp	r3, #11
 800f990:	d90f      	bls.n	800f9b2 <_malloc_r+0x7e>
 800f992:	600b      	str	r3, [r1, #0]
 800f994:	50cd      	str	r5, [r1, r3]
 800f996:	18cc      	adds	r4, r1, r3
 800f998:	4630      	mov	r0, r6
 800f99a:	f000 f85c 	bl	800fa56 <__malloc_unlock>
 800f99e:	f104 000b 	add.w	r0, r4, #11
 800f9a2:	1d23      	adds	r3, r4, #4
 800f9a4:	f020 0007 	bic.w	r0, r0, #7
 800f9a8:	1ac3      	subs	r3, r0, r3
 800f9aa:	d0d3      	beq.n	800f954 <_malloc_r+0x20>
 800f9ac:	425a      	negs	r2, r3
 800f9ae:	50e2      	str	r2, [r4, r3]
 800f9b0:	e7d0      	b.n	800f954 <_malloc_r+0x20>
 800f9b2:	428c      	cmp	r4, r1
 800f9b4:	684b      	ldr	r3, [r1, #4]
 800f9b6:	bf16      	itet	ne
 800f9b8:	6063      	strne	r3, [r4, #4]
 800f9ba:	6013      	streq	r3, [r2, #0]
 800f9bc:	460c      	movne	r4, r1
 800f9be:	e7eb      	b.n	800f998 <_malloc_r+0x64>
 800f9c0:	460c      	mov	r4, r1
 800f9c2:	6849      	ldr	r1, [r1, #4]
 800f9c4:	e7cc      	b.n	800f960 <_malloc_r+0x2c>
 800f9c6:	1cc4      	adds	r4, r0, #3
 800f9c8:	f024 0403 	bic.w	r4, r4, #3
 800f9cc:	42a0      	cmp	r0, r4
 800f9ce:	d005      	beq.n	800f9dc <_malloc_r+0xa8>
 800f9d0:	1a21      	subs	r1, r4, r0
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	f000 f82e 	bl	800fa34 <_sbrk_r>
 800f9d8:	3001      	adds	r0, #1
 800f9da:	d0cf      	beq.n	800f97c <_malloc_r+0x48>
 800f9dc:	6025      	str	r5, [r4, #0]
 800f9de:	e7db      	b.n	800f998 <_malloc_r+0x64>
 800f9e0:	200096e4 	.word	0x200096e4
 800f9e4:	200096e8 	.word	0x200096e8

0800f9e8 <_realloc_r>:
 800f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ea:	4607      	mov	r7, r0
 800f9ec:	4614      	mov	r4, r2
 800f9ee:	460e      	mov	r6, r1
 800f9f0:	b921      	cbnz	r1, 800f9fc <_realloc_r+0x14>
 800f9f2:	4611      	mov	r1, r2
 800f9f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9f8:	f7ff bf9c 	b.w	800f934 <_malloc_r>
 800f9fc:	b922      	cbnz	r2, 800fa08 <_realloc_r+0x20>
 800f9fe:	f7ff ff4b 	bl	800f898 <_free_r>
 800fa02:	4625      	mov	r5, r4
 800fa04:	4628      	mov	r0, r5
 800fa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa08:	f000 f826 	bl	800fa58 <_malloc_usable_size_r>
 800fa0c:	42a0      	cmp	r0, r4
 800fa0e:	d20f      	bcs.n	800fa30 <_realloc_r+0x48>
 800fa10:	4621      	mov	r1, r4
 800fa12:	4638      	mov	r0, r7
 800fa14:	f7ff ff8e 	bl	800f934 <_malloc_r>
 800fa18:	4605      	mov	r5, r0
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	d0f2      	beq.n	800fa04 <_realloc_r+0x1c>
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4622      	mov	r2, r4
 800fa22:	f7ff fc11 	bl	800f248 <memcpy>
 800fa26:	4631      	mov	r1, r6
 800fa28:	4638      	mov	r0, r7
 800fa2a:	f7ff ff35 	bl	800f898 <_free_r>
 800fa2e:	e7e9      	b.n	800fa04 <_realloc_r+0x1c>
 800fa30:	4635      	mov	r5, r6
 800fa32:	e7e7      	b.n	800fa04 <_realloc_r+0x1c>

0800fa34 <_sbrk_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4c06      	ldr	r4, [pc, #24]	; (800fa50 <_sbrk_r+0x1c>)
 800fa38:	2300      	movs	r3, #0
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	4608      	mov	r0, r1
 800fa3e:	6023      	str	r3, [r4, #0]
 800fa40:	f7f6 fa1c 	bl	8005e7c <_sbrk>
 800fa44:	1c43      	adds	r3, r0, #1
 800fa46:	d102      	bne.n	800fa4e <_sbrk_r+0x1a>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	b103      	cbz	r3, 800fa4e <_sbrk_r+0x1a>
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	bd38      	pop	{r3, r4, r5, pc}
 800fa50:	20009dd0 	.word	0x20009dd0

0800fa54 <__malloc_lock>:
 800fa54:	4770      	bx	lr

0800fa56 <__malloc_unlock>:
 800fa56:	4770      	bx	lr

0800fa58 <_malloc_usable_size_r>:
 800fa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa5c:	1f18      	subs	r0, r3, #4
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	bfbc      	itt	lt
 800fa62:	580b      	ldrlt	r3, [r1, r0]
 800fa64:	18c0      	addlt	r0, r0, r3
 800fa66:	4770      	bx	lr

0800fa68 <_init>:
 800fa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa6a:	bf00      	nop
 800fa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa6e:	bc08      	pop	{r3}
 800fa70:	469e      	mov	lr, r3
 800fa72:	4770      	bx	lr

0800fa74 <_fini>:
 800fa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa76:	bf00      	nop
 800fa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa7a:	bc08      	pop	{r3}
 800fa7c:	469e      	mov	lr, r3
 800fa7e:	4770      	bx	lr
>>>>>>> Stashed changes
