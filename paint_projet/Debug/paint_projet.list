
paint_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e620  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b4  0800e7f0  0800e7f0  0001e7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108a4  080108a4  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  080108a4  080108a4  000208a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108ac  080108ac  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108ac  080108ac  000208ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108b0  080108b0  000208b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080108b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008cfc  200000b8  0801096c  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008db4  0801096c  00038db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c910  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005560  00000000  00000000  0005c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025f0  00000000  00000000  00061f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002358  00000000  00000000  00064548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e276  00000000  00000000  000668a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f446  00000000  00000000  00094b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114a15  00000000  00000000  000b3f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c8971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a390  00000000  00000000  001c89ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e7d8 	.word	0x0800e7d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800e7d8 	.word	0x0800e7d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000d4 	.word	0x200000d4
 8000614:	2000012c 	.word	0x2000012c

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f001 fffa 	bl	800261c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f001 ffb5 	bl	80025e0 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ff7f 	bl	80025e0 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000032c 	.word	0x2000032c

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fecc 	bl	80025e0 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 febe 	bl	80025e0 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fea3 	bl	80025e0 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fe95 	bl	80025e0 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000032c 	.word	0x2000032c
 80008f8:	20000330 	.word	0x20000330

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fe48 	bl	80025ac <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fe34 	bl	80025ac <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fe25 	bl	80025e0 <TS_IO_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
      break;
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
      break;
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
      break;
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
      break;
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fd9a 	bl	80025e0 <TS_IO_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fd8a 	bl	80025e0 <TS_IO_Read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fd7c 	bl	80025e0 <TS_IO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000032c 	.word	0x2000032c

08000b08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000032c 	.word	0x2000032c

08000b20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b2e:	f001 fd33 	bl	8002598 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000032c 	.word	0x2000032c

08000b40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0b2      	sub	sp, #200	; 0xc8
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
   	char text[50]={};
 8000b62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00d fa2f 	bl	800dfce <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	673b      	str	r3, [r7, #112]	; 0x70
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b82:	2300      	movs	r3, #0
 8000b84:	677b      	str	r3, [r7, #116]	; 0x74
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f003 ff24 	bl	80049d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f99f 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f001 f839 	bl	8001c04 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b92:	f000 fa9d 	bl	80010d0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b96:	f000 fb49 	bl	800122c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b9a:	f000 fb87 	bl	80012ac <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b9e:	f000 fbc5 	bl	800132c <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba2:	f000 fc45 	bl	8001430 <MX_RTC_Init>
  MX_SPI2_Init();
 8000ba6:	f000 fce9 	bl	800157c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000baa:	f000 fd25 	bl	80015f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bae:	f000 fd77 	bl	80016a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb2:	f000 fdc3 	bl	800173c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bb6:	f000 fe4f 	bl	8001858 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bba:	f000 fe9b 	bl	80018f4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 ff73 	bl	8001aa8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc2:	f000 ffa1 	bl	8001b08 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bc6:	f000 fa31 	bl	800102c <MX_ADC1_Init>
  MX_DAC_Init();
 8000bca:	f000 fad3 	bl	8001174 <MX_DAC_Init>
  MX_UART7_Init();
 8000bce:	f000 ff3b 	bl	8001a48 <MX_UART7_Init>
  MX_FMC_Init();
 8000bd2:	f000 ffc9 	bl	8001b68 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000bd6:	f000 faf7 	bl	80011c8 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000bda:	f001 fd2b 	bl	8002634 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bde:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be2:	2000      	movs	r0, #0
 8000be4:	f001 fdbe 	bl	8002764 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000be8:	f001 fd94 	bl	8002714 <BSP_LCD_GetXSize>
 8000bec:	4604      	mov	r4, r0
 8000bee:	f001 fda5 	bl	800273c <BSP_LCD_GetYSize>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	fb03 f304 	mul.w	r3, r3, r4
 8000bf8:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	f001 fdaf 	bl	8002764 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c06:	f002 fa77 	bl	80030f8 <BSP_LCD_DisplayOn>
  BSP_LCD_SetFont(&Font12);
 8000c0a:	489b      	ldr	r0, [pc, #620]	; (8000e78 <main+0x31c>)
 8000c0c:	f001 fe4c 	bl	80028a8 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f001 fe2e 	bl	8002874 <BSP_LCD_SetBackColor>
  BSP_LCD_SelectLayer(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f001 fe03 	bl	8002824 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f001 fe72 	bl	8002908 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c28:	f001 fe0c 	bl	8002844 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 245, 480, 5);
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c32:	21f5      	movs	r1, #245	; 0xf5
 8000c34:	2000      	movs	r0, #0
 8000c36:	f002 f945 	bl	8002ec4 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(435, 0, 5, 245);
 8000c3a:	23f5      	movs	r3, #245	; 0xf5
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f240 10b3 	movw	r0, #435	; 0x1b3
 8000c44:	f002 f93e 	bl	8002ec4 <BSP_LCD_FillRect>
  BSP_LCD_SelectLayer(0);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f001 fdeb 	bl	8002824 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c52:	f001 fe59 	bl	8002908 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c56:	4889      	ldr	r0, [pc, #548]	; (8000e7c <main+0x320>)
 8000c58:	f001 fdf4 	bl	8002844 <BSP_LCD_SetTextColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c5c:	f001 fd5a 	bl	8002714 <BSP_LCD_GetXSize>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b29c      	uxth	r4, r3
 8000c64:	f001 fd6a 	bl	800273c <BSP_LCD_GetYSize>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f002 fe10 	bl	8003894 <BSP_TS_Init>
  HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	4982      	ldr	r1, [pc, #520]	; (8000e80 <main+0x324>)
 8000c78:	4882      	ldr	r0, [pc, #520]	; (8000e84 <main+0x328>)
 8000c7a:	f009 fcd3 	bl	800a624 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	667b      	str	r3, [r7, #100]	; 0x64
 8000c82:	2300      	movs	r3, #0
 8000c84:	66bb      	str	r3, [r7, #104]	; 0x68
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
 8000c86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00a fd43 	bl	800b716 <osMutexCreate>
 8000c90:	4602      	mov	r2, r0
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <main+0x32c>)
 8000c94:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueUART */
  osMessageQDef(myQueueUART, 16, uint8_t);
 8000c96:	4b7d      	ldr	r3, [pc, #500]	; (8000e8c <main+0x330>)
 8000c98:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueUARTHandle = osMessageCreate(osMessageQ(myQueueUART), NULL);
 8000ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00a fd4c 	bl	800b746 <osMessageCreate>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4b77      	ldr	r3, [pc, #476]	; (8000e90 <main+0x334>)
 8000cb2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000cb4:	4b77      	ldr	r3, [pc, #476]	; (8000e94 <main+0x338>)
 8000cb6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00a fcc1 	bl	800b656 <osThreadCreate>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b70      	ldr	r3, [pc, #448]	; (8000e98 <main+0x33c>)
 8000cd8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mode */
  osThreadDef(Mode, StartMode, osPriorityIdle, 0, 512);
 8000cda:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <main+0x340>)
 8000cdc:	f107 041c 	add.w	r4, r7, #28
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModeHandle = osThreadCreate(osThread(Mode), NULL);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00a fcae 	bl	800b656 <osThreadCreate>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <main+0x344>)
 8000cfe:	601a      	str	r2, [r3, #0]

  /* definition and creation of Peindre */
  osThreadDef(Peindre, StartPeindre, osPriorityIdle, 0, 1024);
 8000d00:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <main+0x348>)
 8000d02:	463c      	mov	r4, r7
 8000d04:	461d      	mov	r5, r3
 8000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeindreHandle = osThreadCreate(osThread(Peindre), NULL);
 8000d12:	463b      	mov	r3, r7
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00a fc9d 	bl	800b656 <osThreadCreate>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <main+0x34c>)
 8000d20:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d22:	f00a fc91 	bl	800b648 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2a:	4860      	ldr	r0, [pc, #384]	; (8000eac <main+0x350>)
 8000d2c:	f005 fb48 	bl	80063c0 <HAL_GPIO_ReadPin>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d38:	485d      	ldr	r0, [pc, #372]	; (8000eb0 <main+0x354>)
 8000d3a:	f005 fb59 	bl	80063f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d42:	485a      	ldr	r0, [pc, #360]	; (8000eac <main+0x350>)
 8000d44:	f005 fb3c 	bl	80063c0 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	4859      	ldr	r0, [pc, #356]	; (8000eb4 <main+0x358>)
 8000d50:	f005 fb4e 	bl	80063f0 <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4854      	ldr	r0, [pc, #336]	; (8000eac <main+0x350>)
 8000d5a:	f005 fb31 	bl	80063c0 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d66:	4954      	ldr	r1, [pc, #336]	; (8000eb8 <main+0x35c>)
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f00d f939 	bl	800dfe0 <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d72:	4619      	mov	r1, r3
 8000d74:	2005      	movs	r0, #5
 8000d76:	f001 fef7 	bl	8002b68 <BSP_LCD_DisplayStringAtLine>

	  sConfig.Channel = ADC_CHANNEL_6;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000d7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d82:	4619      	mov	r1, r3
 8000d84:	484d      	ldr	r0, [pc, #308]	; (8000ebc <main+0x360>)
 8000d86:	f004 f809 	bl	8004d9c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000d8a:	484c      	ldr	r0, [pc, #304]	; (8000ebc <main+0x360>)
 8000d8c:	f003 feb4 	bl	8004af8 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000d90:	bf00      	nop
 8000d92:	2164      	movs	r1, #100	; 0x64
 8000d94:	4849      	ldr	r0, [pc, #292]	; (8000ebc <main+0x360>)
 8000d96:	f003 ff6f 	bl	8004c78 <HAL_ADC_PollForConversion>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f8      	bne.n	8000d92 <main+0x236>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000da0:	4846      	ldr	r0, [pc, #280]	; (8000ebc <main+0x360>)
 8000da2:	f003 ffed 	bl	8004d80 <HAL_ADC_GetValue>
 8000da6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	  sConfig.Channel = ADC_CHANNEL_7;
 8000daa:	2307      	movs	r3, #7
 8000dac:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000dae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4841      	ldr	r0, [pc, #260]	; (8000ebc <main+0x360>)
 8000db6:	f003 fff1 	bl	8004d9c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dba:	4840      	ldr	r0, [pc, #256]	; (8000ebc <main+0x360>)
 8000dbc:	f003 fe9c 	bl	8004af8 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc0:	bf00      	nop
 8000dc2:	2164      	movs	r1, #100	; 0x64
 8000dc4:	483d      	ldr	r0, [pc, #244]	; (8000ebc <main+0x360>)
 8000dc6:	f003 ff57 	bl	8004c78 <HAL_ADC_PollForConversion>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f8      	bne.n	8000dc2 <main+0x266>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000dd0:	483a      	ldr	r0, [pc, #232]	; (8000ebc <main+0x360>)
 8000dd2:	f003 ffd5 	bl	8004d80 <HAL_ADC_GetValue>
 8000dd6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	  sConfig.Channel = ADC_CHANNEL_8;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000dde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000de2:	4619      	mov	r1, r3
 8000de4:	4835      	ldr	r0, [pc, #212]	; (8000ebc <main+0x360>)
 8000de6:	f003 ffd9 	bl	8004d9c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dea:	4834      	ldr	r0, [pc, #208]	; (8000ebc <main+0x360>)
 8000dec:	f003 fe84 	bl	8004af8 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000df0:	bf00      	nop
 8000df2:	2164      	movs	r1, #100	; 0x64
 8000df4:	4831      	ldr	r0, [pc, #196]	; (8000ebc <main+0x360>)
 8000df6:	f003 ff3f 	bl	8004c78 <HAL_ADC_PollForConversion>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f8      	bne.n	8000df2 <main+0x296>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e00:	482e      	ldr	r0, [pc, #184]	; (8000ebc <main+0x360>)
 8000e02:	f003 ffbd 	bl	8004d80 <HAL_ADC_GetValue>
 8000e06:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

	  HAL_ADC_Start(&hadc1);
 8000e0a:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <main+0x364>)
 8000e0c:	f003 fe74 	bl	8004af8 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e10:	bf00      	nop
 8000e12:	2164      	movs	r1, #100	; 0x64
 8000e14:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <main+0x364>)
 8000e16:	f003 ff2f 	bl	8004c78 <HAL_ADC_PollForConversion>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1f8      	bne.n	8000e12 <main+0x2b6>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e20:	4827      	ldr	r0, [pc, #156]	; (8000ec0 <main+0x364>)
 8000e22:	f003 ffad 	bl	8004d80 <HAL_ADC_GetValue>
 8000e26:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e2a:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000e2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000e3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000e42:	4920      	ldr	r1, [pc, #128]	; (8000ec4 <main+0x368>)
 8000e44:	f00d f8cc 	bl	800dfe0 <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2009      	movs	r0, #9
 8000e50:	f001 fe8a 	bl	8002b68 <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <main+0x36c>)
 8000e56:	f002 fd5d 	bl	8003914 <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <main+0x36c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f43f af61 	beq.w	8000d26 <main+0x1ca>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <main+0x36c>)
 8000e66:	8858      	ldrh	r0, [r3, #2]
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <main+0x36c>)
 8000e6a:	899b      	ldrh	r3, [r3, #12]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f002 f8a2 	bl	8002fb8 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000e74:	e757      	b.n	8000d26 <main+0x1ca>
 8000e76:	bf00      	nop
 8000e78:	20000038 	.word	0x20000038
 8000e7c:	ffff0000 	.word	0xffff0000
 8000e80:	20008c84 	.word	0x20008c84
 8000e84:	20008a58 	.word	0x20008a58
 8000e88:	20008898 	.word	0x20008898
 8000e8c:	0800e82c 	.word	0x0800e82c
 8000e90:	2000891c 	.word	0x2000891c
 8000e94:	0800e848 	.word	0x0800e848
 8000e98:	200086d4 	.word	0x200086d4
 8000e9c:	0800e86c 	.word	0x0800e86c
 8000ea0:	20008c80 	.word	0x20008c80
 8000ea4:	0800e890 	.word	0x0800e890
 8000ea8:	20008808 	.word	0x20008808
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40021c00 	.word	0x40021c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	0800e7f0 	.word	0x0800e7f0
 8000ebc:	20008a10 	.word	0x20008a10
 8000ec0:	200089c8 	.word	0x200089c8
 8000ec4:	0800e7fc 	.word	0x0800e7fc
 8000ec8:	20000334 	.word	0x20000334

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0b4      	sub	sp, #208	; 0xd0
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ed6:	2230      	movs	r2, #48	; 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00d f877 	bl	800dfce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2284      	movs	r2, #132	; 0x84
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00d f868 	bl	800dfce <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000efe:	f006 fbb9 	bl	8007674 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b47      	ldr	r3, [pc, #284]	; (8001020 <SystemClock_Config+0x154>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a46      	ldr	r2, [pc, #280]	; (8001020 <SystemClock_Config+0x154>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b44      	ldr	r3, [pc, #272]	; (8001020 <SystemClock_Config+0x154>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1a:	4b42      	ldr	r3, [pc, #264]	; (8001024 <SystemClock_Config+0x158>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a41      	ldr	r2, [pc, #260]	; (8001024 <SystemClock_Config+0x158>)
 8000f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <SystemClock_Config+0x158>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f32:	2309      	movs	r3, #9
 8000f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f54:	2319      	movs	r3, #25
 8000f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f006 fbde 	bl	8007734 <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f7e:	f001 f9b1 	bl	80022e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f82:	f006 fb87 	bl	8007694 <HAL_PWREx_EnableOverDrive>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f8c:	f001 f9aa 	bl	80022e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fb2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fb6:	2106      	movs	r1, #6
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fe5f 	bl	8007c7c <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000fc4:	f001 f98e 	bl	80022e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <SystemClock_Config+0x15c>)
 8000fca:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fcc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4618      	mov	r0, r3
 8001008:	f007 f83c 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001012:	f001 f967 	bl	80022e4 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	37d0      	adds	r7, #208	; 0xd0
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000
 8001028:	00015868 	.word	0x00015868

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_ADC1_Init+0x98>)
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC1_Init+0xa0>)
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_ADC1_Init+0x98>)
 800107a:	2201      	movs	r2, #1
 800107c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001088:	2201      	movs	r2, #1
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_ADC1_Init+0x98>)
 800108e:	f003 fcef 	bl	8004a70 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001098:	f001 f924 	bl	80022e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC1_Init+0x98>)
 80010ae:	f003 fe75 	bl	8004d9c <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f001 f914 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200089c8 	.word	0x200089c8
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_ADC3_Init+0x98>)
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <MX_ADC3_Init+0x9c>)
 80010e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_ADC3_Init+0x98>)
 80010ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC3_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_ADC3_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ADC3_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ADC3_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC3_Init+0x98>)
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <MX_ADC3_Init+0xa0>)
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC3_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC3_Init+0x98>)
 800111e:	2201      	movs	r2, #1
 8001120:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_ADC3_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_ADC3_Init+0x98>)
 800112c:	2201      	movs	r2, #1
 800112e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_ADC3_Init+0x98>)
 8001132:	f003 fc9d 	bl	8004a70 <HAL_ADC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800113c:	f001 f8d2 	bl	80022e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001140:	2307      	movs	r3, #7
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC3_Init+0x98>)
 8001152:	f003 fe23 	bl	8004d9c <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800115c:	f001 f8c2 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20008a10 	.word	0x20008a10
 800116c:	40012200 	.word	0x40012200
 8001170:	0f000001 	.word	0x0f000001

08001174 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_DAC_Init+0x4c>)
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <MX_DAC_Init+0x50>)
 8001186:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_DAC_Init+0x4c>)
 800118a:	f004 f92d 	bl	80053e8 <HAL_DAC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001194:	f001 f8a6 	bl	80022e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_DAC_Init+0x4c>)
 80011a8:	f004 f994 	bl	80054d4 <HAL_DAC_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011b2:	f001 f897 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20008ad8 	.word	0x20008ad8
 80011c4:	40007400 	.word	0x40007400

080011c8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <MX_DMA2D_Init+0x60>)
 80011d0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <MX_DMA2D_Init+0x5c>)
 80011fe:	f004 fb9f 	bl	8005940 <HAL_DMA2D_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001208:	f001 f86c 	bl	80022e4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800120c:	2101      	movs	r1, #1
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_DMA2D_Init+0x5c>)
 8001210:	f004 fcf4 	bl	8005bfc <HAL_DMA2D_ConfigLayer>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800121a:	f001 f863 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20008bcc 	.word	0x20008bcc
 8001228:	4002b000 	.word	0x4002b000

0800122c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_I2C1_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <MX_I2C1_Init+0x7c>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001244:	2201      	movs	r2, #1
 8001246:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001266:	480e      	ldr	r0, [pc, #56]	; (80012a0 <MX_I2C1_Init+0x74>)
 8001268:	f005 f8dc 	bl	8006424 <HAL_I2C_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001272:	f001 f837 	bl	80022e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <MX_I2C1_Init+0x74>)
 800127a:	f005 fdeb 	bl	8006e54 <HAL_I2CEx_ConfigAnalogFilter>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001284:	f001 f82e 	bl	80022e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001288:	2100      	movs	r1, #0
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_I2C1_Init+0x74>)
 800128c:	f005 fe2d 	bl	8006eea <HAL_I2CEx_ConfigDigitalFilter>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f001 f825 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000884c 	.word	0x2000884c
 80012a4:	40005400 	.word	0x40005400
 80012a8:	00c0eaff 	.word	0x00c0eaff

080012ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_I2C3_Init+0x74>)
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_I2C3_Init+0x78>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_I2C3_Init+0x74>)
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <MX_I2C3_Init+0x7c>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_I2C3_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_I2C3_Init+0x74>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_I2C3_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_I2C3_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_I2C3_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_I2C3_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_I2C3_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_I2C3_Init+0x74>)
 80012e8:	f005 f89c 	bl	8006424 <HAL_I2C_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012f2:	f000 fff7 	bl	80022e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <MX_I2C3_Init+0x74>)
 80012fa:	f005 fdab 	bl	8006e54 <HAL_I2CEx_ConfigAnalogFilter>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001304:	f000 ffee 	bl	80022e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001308:	2100      	movs	r1, #0
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_I2C3_Init+0x74>)
 800130c:	f005 fded 	bl	8006eea <HAL_I2CEx_ConfigDigitalFilter>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001316:	f000 ffe5 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200086d8 	.word	0x200086d8
 8001324:	40005c00 	.word	0x40005c00
 8001328:	00c0eaff 	.word	0x00c0eaff

0800132c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2234      	movs	r2, #52	; 0x34
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00c fe48 	bl	800dfce <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800133e:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001340:	4a3a      	ldr	r2, [pc, #232]	; (800142c <MX_LTDC_Init+0x100>)
 8001342:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <MX_LTDC_Init+0xfc>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001356:	4b34      	ldr	r3, [pc, #208]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <MX_LTDC_Init+0xfc>)
 800135e:	2228      	movs	r2, #40	; 0x28
 8001360:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001364:	2209      	movs	r2, #9
 8001366:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <MX_LTDC_Init+0xfc>)
 800136a:	2235      	movs	r2, #53	; 0x35
 800136c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001370:	220b      	movs	r2, #11
 8001372:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001376:	f240 2215 	movw	r2, #533	; 0x215
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <MX_LTDC_Init+0xfc>)
 800137e:	f240 121b 	movw	r2, #283	; 0x11b
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001384:	4b28      	ldr	r3, [pc, #160]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001386:	f240 2235 	movw	r2, #565	; 0x235
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <MX_LTDC_Init+0xfc>)
 800138e:	f240 121d 	movw	r2, #285	; 0x11d
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <MX_LTDC_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <MX_LTDC_Init+0xfc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <MX_LTDC_Init+0xfc>)
 80013ae:	f005 fde9 	bl	8006f84 <HAL_LTDC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013b8:	f000 ff94 	bl	80022e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013c4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013ce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013d4:	23ff      	movs	r3, #255	; 0xff
 80013d6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013e2:	2307      	movs	r3, #7
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013e6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_LTDC_Init+0xfc>)
 8001412:	f005 ff49 	bl	80072a8 <HAL_LTDC_ConfigLayer>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800141c:	f000 ff62 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20008920 	.word	0x20008920
 800142c:	40016800 	.word	0x40016800

08001430 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b092      	sub	sp, #72	; 0x48
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	222c      	movs	r2, #44	; 0x2c
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00c fdbb 	bl	800dfce <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001458:	4b46      	ldr	r3, [pc, #280]	; (8001574 <MX_RTC_Init+0x144>)
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <MX_RTC_Init+0x148>)
 800145c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800145e:	4b45      	ldr	r3, [pc, #276]	; (8001574 <MX_RTC_Init+0x144>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <MX_RTC_Init+0x144>)
 8001466:	227f      	movs	r2, #127	; 0x7f
 8001468:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <MX_RTC_Init+0x144>)
 800146c:	22ff      	movs	r2, #255	; 0xff
 800146e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <MX_RTC_Init+0x144>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <MX_RTC_Init+0x144>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <MX_RTC_Init+0x144>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001482:	483c      	ldr	r0, [pc, #240]	; (8001574 <MX_RTC_Init+0x144>)
 8001484:	f007 f9ec 	bl	8008860 <HAL_RTC_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800148e:	f000 ff29 	bl	80022e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	482f      	ldr	r0, [pc, #188]	; (8001574 <MX_RTC_Init+0x144>)
 80014b6:	f007 fa4f 	bl	8008958 <HAL_RTC_SetTime>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014c0:	f000 ff10 	bl	80022e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_RTC_Init+0x144>)
 80014e6:	f007 faf5 	bl	8008ad4 <HAL_RTC_SetDate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80014f0:	f000 fef8 	bl	80022e4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800151e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	2201      	movs	r2, #1
 8001528:	4619      	mov	r1, r3
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_RTC_Init+0x144>)
 800152c:	f007 fb7a 	bl	8008c24 <HAL_RTC_SetAlarm>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001536:	f000 fed5 	bl	80022e4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800153a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	2201      	movs	r2, #1
 8001544:	4619      	mov	r1, r3
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <MX_RTC_Init+0x144>)
 8001548:	f007 fb6c 	bl	8008c24 <HAL_RTC_SetAlarm>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001552:	f000 fec7 	bl	80022e4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001556:	2202      	movs	r2, #2
 8001558:	2100      	movs	r1, #0
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_RTC_Init+0x144>)
 800155c:	f007 fcec 	bl	8008f38 <HAL_RTCEx_SetTimeStamp>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001566:	f000 febd 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3748      	adds	r7, #72	; 0x48
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20008aec 	.word	0x20008aec
 8001578:	40002800 	.word	0x40002800

0800157c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_SPI2_Init+0x74>)
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <MX_SPI2_Init+0x78>)
 8001584:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_SPI2_Init+0x74>)
 8001588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800158c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_SPI2_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_SPI2_Init+0x74>)
 8001596:	f44f 7240 	mov.w	r2, #768	; 0x300
 800159a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_SPI2_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015d6:	2208      	movs	r2, #8
 80015d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_SPI2_Init+0x74>)
 80015dc:	f007 fd81 	bl	80090e2 <HAL_SPI_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f000 fe7d 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20008724 	.word	0x20008724
 80015f4:	40003800 	.word	0x40003800

080015f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001618:	4a20      	ldr	r2, [pc, #128]	; (800169c <MX_TIM1_Init+0xa4>)
 800161a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_TIM1_Init+0xa0>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_TIM1_Init+0xa0>)
 800162a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_TIM1_Init+0xa0>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001644:	f007 fddf 	bl	8009206 <HAL_TIM_Base_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800164e:	f000 fe49 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4619      	mov	r1, r3
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001660:	f008 f892 	bl	8009788 <HAL_TIM_ConfigClockSource>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800166a:	f000 fe3b 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_TIM1_Init+0xa0>)
 8001680:	f008 fdc6 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800168a:	f000 fe2b 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20008b0c 	.word	0x20008b0c
 800169c:	40010000 	.word	0x40010000

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_TIM2_Init+0x98>)
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_TIM2_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_TIM2_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_TIM2_Init+0x98>)
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_TIM2_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_TIM2_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <MX_TIM2_Init+0x98>)
 80016e8:	f007 fd8d 	bl	8009206 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016f2:	f000 fdf7 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <MX_TIM2_Init+0x98>)
 8001704:	f008 f840 	bl	8009788 <HAL_TIM_ConfigClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800170e:	f000 fde9 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_TIM2_Init+0x98>)
 8001720:	f008 fd76 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800172a:	f000 fddb 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20008c0c 	.word	0x20008c0c

0800173c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	; 0x50
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <MX_TIM3_Init+0x114>)
 8001780:	4a34      	ldr	r2, [pc, #208]	; (8001854 <MX_TIM3_Init+0x118>)
 8001782:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001784:	4b32      	ldr	r3, [pc, #200]	; (8001850 <MX_TIM3_Init+0x114>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <MX_TIM3_Init+0x114>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <MX_TIM3_Init+0x114>)
 8001792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001796:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_TIM3_Init+0x114>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <MX_TIM3_Init+0x114>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017a4:	482a      	ldr	r0, [pc, #168]	; (8001850 <MX_TIM3_Init+0x114>)
 80017a6:	f007 fd2e 	bl	8009206 <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017b0:	f000 fd98 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017be:	4619      	mov	r1, r3
 80017c0:	4823      	ldr	r0, [pc, #140]	; (8001850 <MX_TIM3_Init+0x114>)
 80017c2:	f007 ffe1 	bl	8009788 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017cc:	f000 fd8a 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d0:	481f      	ldr	r0, [pc, #124]	; (8001850 <MX_TIM3_Init+0x114>)
 80017d2:	f007 fd6d 	bl	80092b0 <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80017dc:	f000 fd82 	bl	80022e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80017e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ec:	4619      	mov	r1, r3
 80017ee:	4818      	ldr	r0, [pc, #96]	; (8001850 <MX_TIM3_Init+0x114>)
 80017f0:	f008 f884 	bl	80098fc <HAL_TIM_SlaveConfigSynchro>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80017fa:	f000 fd73 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4619      	mov	r1, r3
 800180c:	4810      	ldr	r0, [pc, #64]	; (8001850 <MX_TIM3_Init+0x114>)
 800180e:	f008 fcff 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001818:	f000 fd64 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181c:	2360      	movs	r3, #96	; 0x60
 800181e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <MX_TIM3_Init+0x114>)
 8001834:	f007 fe90 	bl	8009558 <HAL_TIM_PWM_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800183e:	f000 fd51 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <MX_TIM3_Init+0x114>)
 8001844:	f002 fdfa 	bl	800443c <HAL_TIM_MspPostInit>

}
 8001848:	bf00      	nop
 800184a:	3750      	adds	r7, #80	; 0x50
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200088dc 	.word	0x200088dc
 8001854:	40000400 	.word	0x40000400

08001858 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_TIM5_Init+0x94>)
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <MX_TIM5_Init+0x98>)
 800187a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_TIM5_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_TIM5_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_TIM5_Init+0x94>)
 800188a:	f04f 32ff 	mov.w	r2, #4294967295
 800188e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_TIM5_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_TIM5_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <MX_TIM5_Init+0x94>)
 800189e:	f007 fcb2 	bl	8009206 <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018a8:	f000 fd1c 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_TIM5_Init+0x94>)
 80018ba:	f007 ff65 	bl	8009788 <HAL_TIM_ConfigClockSource>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80018c4:	f000 fd0e 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_TIM5_Init+0x94>)
 80018d6:	f008 fc9b 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f000 fd00 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000889c 	.word	0x2000889c
 80018f0:	40000c00 	.word	0x40000c00

080018f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b09a      	sub	sp, #104	; 0x68
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	615a      	str	r2, [r3, #20]
 8001926:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	222c      	movs	r2, #44	; 0x2c
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f00c fb4d 	bl	800dfce <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001936:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <MX_TIM8_Init+0x150>)
 8001938:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <MX_TIM8_Init+0x14c>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <MX_TIM8_Init+0x14c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001960:	4837      	ldr	r0, [pc, #220]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001962:	f007 fc50 	bl	8009206 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 fcba 	bl	80022e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800197a:	4619      	mov	r1, r3
 800197c:	4830      	ldr	r0, [pc, #192]	; (8001a40 <MX_TIM8_Init+0x14c>)
 800197e:	f007 ff03 	bl	8009788 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001988:	f000 fcac 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800198c:	482c      	ldr	r0, [pc, #176]	; (8001a40 <MX_TIM8_Init+0x14c>)
 800198e:	f007 fc8f 	bl	80092b0 <HAL_TIM_PWM_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001998:	f000 fca4 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4824      	ldr	r0, [pc, #144]	; (8001a40 <MX_TIM8_Init+0x14c>)
 80019b0:	f008 fc2e 	bl	800a210 <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019ba:	f000 fc93 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019be:	2360      	movs	r3, #96	; 0x60
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019da:	220c      	movs	r2, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	4818      	ldr	r0, [pc, #96]	; (8001a40 <MX_TIM8_Init+0x14c>)
 80019e0:	f007 fdba 	bl	8009558 <HAL_TIM_PWM_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80019ea:	f000 fc7b 	bl	80022e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001a24:	f008 fc82 	bl	800a32c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a2e:	f000 fc59 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_TIM8_Init+0x14c>)
 8001a34:	f002 fd02 	bl	800443c <HAL_TIM_MspPostInit>

}
 8001a38:	bf00      	nop
 8001a3a:	3768      	adds	r7, #104	; 0x68
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000880c 	.word	0x2000880c
 8001a44:	40010400 	.word	0x40010400

08001a48 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <MX_UART7_Init+0x5c>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_UART7_Init+0x58>)
 8001a8c:	f008 fcea 	bl	800a464 <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001a96:	f000 fc25 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20008788 	.word	0x20008788
 8001aa4:	40007800 	.word	0x40007800

08001aa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <MX_USART1_UART_Init+0x5c>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART1_UART_Init+0x58>)
 8001aec:	f008 fcba 	bl	800a464 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001af6:	f000 fbf5 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20008a58 	.word	0x20008a58
 8001b04:	40011000 	.word	0x40011000

08001b08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <MX_USART6_UART_Init+0x5c>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b12:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_USART6_UART_Init+0x58>)
 8001b4c:	f008 fc8a 	bl	800a464 <HAL_UART_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b56:	f000 fbc5 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20008b4c 	.word	0x20008b4c
 8001b64:	40011400 	.word	0x40011400

08001b68 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <MX_FMC_Init+0x98>)
 8001b84:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b94:	2204      	movs	r2, #4
 8001b96:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_FMC_Init+0x94>)
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_FMC_Init+0x94>)
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_FMC_Init+0x94>)
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_FMC_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001bda:	2310      	movs	r3, #16
 8001bdc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_FMC_Init+0x94>)
 8001be4:	f007 f9fe 	bl	8008fe4 <HAL_SDRAM_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001bee:	f000 fb79 	bl	80022e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20008c4c 	.word	0x20008c4c
 8001c00:	a0000140 	.word	0xa0000140

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b090      	sub	sp, #64	; 0x40
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4bb0      	ldr	r3, [pc, #704]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4aaf      	ldr	r2, [pc, #700]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4bad      	ldr	r3, [pc, #692]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	4baa      	ldr	r3, [pc, #680]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4aa9      	ldr	r2, [pc, #676]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4ba7      	ldr	r3, [pc, #668]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4ba4      	ldr	r3, [pc, #656]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4aa3      	ldr	r2, [pc, #652]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4ba1      	ldr	r3, [pc, #644]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c62:	4b9e      	ldr	r3, [pc, #632]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a9d      	ldr	r2, [pc, #628]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b9b      	ldr	r3, [pc, #620]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c7a:	4b98      	ldr	r3, [pc, #608]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a97      	ldr	r2, [pc, #604]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b95      	ldr	r3, [pc, #596]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b92      	ldr	r3, [pc, #584]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a91      	ldr	r2, [pc, #580]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b8f      	ldr	r3, [pc, #572]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001caa:	4b8c      	ldr	r3, [pc, #560]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a8b      	ldr	r2, [pc, #556]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b89      	ldr	r3, [pc, #548]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cc2:	4b86      	ldr	r3, [pc, #536]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a85      	ldr	r2, [pc, #532]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b83      	ldr	r3, [pc, #524]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b80      	ldr	r3, [pc, #512]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a7f      	ldr	r2, [pc, #508]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b7d      	ldr	r3, [pc, #500]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf2:	4b7a      	ldr	r3, [pc, #488]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a79      	ldr	r2, [pc, #484]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001cf8:	f043 0320 	orr.w	r3, r3, #32
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b77      	ldr	r3, [pc, #476]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	4b74      	ldr	r3, [pc, #464]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a73      	ldr	r2, [pc, #460]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b71      	ldr	r3, [pc, #452]	; (8001edc <MX_GPIO_Init+0x2d8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2160      	movs	r1, #96	; 0x60
 8001d26:	486e      	ldr	r0, [pc, #440]	; (8001ee0 <MX_GPIO_Init+0x2dc>)
 8001d28:	f004 fb62 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2120      	movs	r1, #32
 8001d30:	486c      	ldr	r0, [pc, #432]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001d32:	f004 fb5d 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2108      	movs	r1, #8
 8001d3a:	486a      	ldr	r0, [pc, #424]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001d3c:	f004 fb58 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2108      	movs	r1, #8
 8001d44:	4868      	ldr	r0, [pc, #416]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001d46:	f004 fb53 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2108      	movs	r1, #8
 8001d4e:	4867      	ldr	r0, [pc, #412]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001d50:	f004 fb4e 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d5a:	4863      	ldr	r0, [pc, #396]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001d5c:	f004 fb48 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d60:	2200      	movs	r2, #0
 8001d62:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001d66:	4862      	ldr	r0, [pc, #392]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001d68:	f004 fb42 	bl	80063f0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2108      	movs	r1, #8
 8001d70:	4860      	ldr	r0, [pc, #384]	; (8001ef4 <MX_GPIO_Init+0x2f0>)
 8001d72:	f004 fb3d 	bl	80063f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d76:	2308      	movs	r3, #8
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d86:	4619      	mov	r1, r3
 8001d88:	4855      	ldr	r0, [pc, #340]	; (8001ee0 <MX_GPIO_Init+0x2dc>)
 8001d8a:	f004 f865 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001d8e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001da0:	230a      	movs	r3, #10
 8001da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da8:	4619      	mov	r1, r3
 8001daa:	4853      	ldr	r0, [pc, #332]	; (8001ef8 <MX_GPIO_Init+0x2f4>)
 8001dac:	f004 f854 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001db0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	484d      	ldr	r0, [pc, #308]	; (8001efc <MX_GPIO_Init+0x2f8>)
 8001dc6:	f004 f847 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001dca:	2360      	movs	r3, #96	; 0x60
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	483f      	ldr	r0, [pc, #252]	; (8001ee0 <MX_GPIO_Init+0x2dc>)
 8001de2:	f004 f839 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4841      	ldr	r0, [pc, #260]	; (8001f00 <MX_GPIO_Init+0x2fc>)
 8001dfc:	f004 f82c 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e00:	2340      	movs	r3, #64	; 0x40
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <MX_GPIO_Init+0x300>)
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	4834      	ldr	r0, [pc, #208]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001e14:	f004 f820 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e18:	2328      	movs	r3, #40	; 0x28
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001e30:	f004 f812 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001e34:	f241 0308 	movw	r3, #4104	; 0x1008
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <MX_GPIO_Init+0x2e4>)
 8001e4e:	f004 f803 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e64:	4619      	mov	r1, r3
 8001e66:	4828      	ldr	r0, [pc, #160]	; (8001f08 <MX_GPIO_Init+0x304>)
 8001e68:	f003 fff6 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4619      	mov	r1, r3
 8001e82:	481a      	ldr	r0, [pc, #104]	; (8001eec <MX_GPIO_Init+0x2e8>)
 8001e84:	f003 ffe8 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4812      	ldr	r0, [pc, #72]	; (8001ee4 <MX_GPIO_Init+0x2e0>)
 8001e9c:	f003 ffdc 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ea0:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001eb6:	f003 ffcf 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001eba:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <MX_GPIO_Init+0x2ec>)
 8001ed4:	f003 ffc0 	bl	8005e58 <HAL_GPIO_Init>
 8001ed8:	e018      	b.n	8001f0c <MX_GPIO_Init+0x308>
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40022800 	.word	0x40022800
 8001ef0:	40021c00 	.word	0x40021c00
 8001ef4:	40021800 	.word	0x40021800
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40022400 	.word	0x40022400
 8001f04:	10120000 	.word	0x10120000
 8001f08:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <MX_GPIO_Init+0x3c0>)
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4829      	ldr	r0, [pc, #164]	; (8001fc8 <MX_GPIO_Init+0x3c4>)
 8001f22:	f003 ff99 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f26:	2310      	movs	r3, #16
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f36:	230a      	movs	r3, #10
 8001f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4822      	ldr	r0, [pc, #136]	; (8001fcc <MX_GPIO_Init+0x3c8>)
 8001f42:	f003 ff89 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001f46:	2384      	movs	r3, #132	; 0x84
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	481d      	ldr	r0, [pc, #116]	; (8001fd0 <MX_GPIO_Init+0x3cc>)
 8001f5a:	f003 ff7d 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f5e:	2305      	movs	r3, #5
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f6e:	230a      	movs	r3, #10
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f76:	4619      	mov	r1, r3
 8001f78:	4816      	ldr	r0, [pc, #88]	; (8001fd4 <MX_GPIO_Init+0x3d0>)
 8001f7a:	f003 ff6d 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <MX_GPIO_Init+0x3cc>)
 8001f96:	f003 ff5f 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001f9a:	2328      	movs	r3, #40	; 0x28
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001faa:	230a      	movs	r3, #10
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <MX_GPIO_Init+0x3d4>)
 8001fb6:	f003 ff4f 	bl	8005e58 <HAL_GPIO_Init>

}
 8001fba:	bf00      	nop
 8001fbc:	3740      	adds	r7, #64	; 0x40
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	10120000 	.word	0x10120000
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021c00 	.word	0x40021c00
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
uint8_t Message;
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	480d      	ldr	r0, [pc, #52]	; (8002020 <HAL_UART_RxCpltCallback+0x44>)
 8001fea:	f004 fa01 	bl	80063f0 <HAL_GPIO_WritePin>
HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	490c      	ldr	r1, [pc, #48]	; (8002024 <HAL_UART_RxCpltCallback+0x48>)
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <HAL_UART_RxCpltCallback+0x4c>)
 8001ff4:	f008 fb16 	bl	800a624 <HAL_UART_Receive_IT>
Message = rxbuffer[0];
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_UART_RxCpltCallback+0x48>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	73fb      	strb	r3, [r7, #15]
xQueueSendFromISR(myQueueUARTHandle, &Message, 0);
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_UART_RxCpltCallback+0x50>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	f107 010f 	add.w	r1, r7, #15
 8002006:	2300      	movs	r3, #0
 8002008:	2200      	movs	r2, #0
 800200a:	f009 ff0f 	bl	800be2c <xQueueGenericSendFromISR>
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,0);
 800200e:	2200      	movs	r2, #0
 8002010:	2120      	movs	r1, #32
 8002012:	4803      	ldr	r0, [pc, #12]	; (8002020 <HAL_UART_RxCpltCallback+0x44>)
 8002014:	f004 f9ec 	bl	80063f0 <HAL_GPIO_WritePin>
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	20008c84 	.word	0x20008c84
 8002028:	20008a58 	.word	0x20008a58
 800202c:	2000891c 	.word	0x2000891c

08002030 <TestConditionBord>:
/*
test les condition de bord en un point pour ne pas ecrire
hors de l'écran.
*/
char TestConditionBord(uint16_t x, uint16_t y, uint16_t rad)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
 800203a:	460b      	mov	r3, r1
 800203c:	80bb      	strh	r3, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	807b      	strh	r3, [r7, #2]
	char bool = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
	if(((x-rad)>=0) && ((x+rad)<=435) && ((y-rad)>=0) && ((y+rad)<246))
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	db11      	blt.n	8002074 <TestConditionBord+0x44>
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	4413      	add	r3, r2
 8002056:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 800205a:	da0b      	bge.n	8002074 <TestConditionBord+0x44>
 800205c:	88ba      	ldrh	r2, [r7, #4]
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	db06      	blt.n	8002074 <TestConditionBord+0x44>
 8002066:	88ba      	ldrh	r2, [r7, #4]
 8002068:	887b      	ldrh	r3, [r7, #2]
 800206a:	4413      	add	r3, r2
 800206c:	2bf5      	cmp	r3, #245	; 0xf5
 800206e:	dc01      	bgt.n	8002074 <TestConditionBord+0x44>
	{
		bool = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
	}
	return bool;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <LCD_PAINTBRUSH>:

void LCD_PAINTBRUSH(uint16_t x, uint16_t y,uint16_t rad)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
 800208e:	460b      	mov	r3, r1
 8002090:	80bb      	strh	r3, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	807b      	strh	r3, [r7, #2]
	if(brush == 0)
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <LCD_PAINTBRUSH+0x38>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <LCD_PAINTBRUSH+0x2e>
	{
	   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800209e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020a2:	f000 fbcf 	bl	8002844 <BSP_LCD_SetTextColor>
	   BSP_LCD_FillCircle(x, y, rad);
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	88b9      	ldrh	r1, [r7, #4]
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 ff83 	bl	8002fb8 <BSP_LCD_FillCircle>
	}
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000332 	.word	0x20000332

080020c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f009 fb10 	bl	800b6ee <osDelay>
 80020ce:	e7fb      	b.n	80020c8 <StartDefaultTask+0x8>

080020d0 <StartMode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMode */
void StartMode(void const * argument)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b0a2      	sub	sp, #136	; 0x88
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMode */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 80020d8:	f00a fdc4 	bl	800cc64 <xTaskGetTickCount>
 80020dc:	4603      	mov	r3, r0
 80020de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  char etat = 'm'; // On commence à l'état du menu
 80020e2:	236d      	movs	r3, #109	; 0x6d
 80020e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  char layer = '0';
 80020e8:	2330      	movs	r3, #48	; 0x30
 80020ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  char message[] = "deplacer vous avec 'q' et 'd', valider avec 'enter'";
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <StartMode+0x144>)
 80020f0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80020f4:	461d      	mov	r5, r3
 80020f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	6023      	str	r3, [r4, #0]
  char text[] = "	layer  |  pinceau  |  transparence  |  couleur  |  taille";
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <StartMode+0x148>)
 8002108:	f107 040c 	add.w	r4, r7, #12
 800210c:	461d      	mov	r5, r3
 800210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800211a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800211e:	c403      	stmia	r4!, {r0, r1}
 8002120:	8022      	strh	r2, [r4, #0]
 8002122:	3402      	adds	r4, #2
 8002124:	0c13      	lsrs	r3, r2, #16
 8002126:	7023      	strb	r3, [r4, #0]
  for(;;)
  {
	  //xQueueReceive(myQueueUARTHandle, &etat, 25);
	  switch(etat)
 8002128:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800212c:	2b6d      	cmp	r3, #109	; 0x6d
 800212e:	d004      	beq.n	800213a <StartMode+0x6a>
 8002130:	2b72      	cmp	r3, #114	; 0x72
 8002132:	d065      	beq.n	8002200 <StartMode+0x130>
 8002134:	2b6c      	cmp	r3, #108	; 0x6c
 8002136:	d033      	beq.n	80021a0 <StartMode+0xd0>
 8002138:	e065      	b.n	8002206 <StartMode+0x136>
	  {
	  case 'r' :
		  break; //etat de repos aucun mode n'est changé
	  case 'm' : //etat d'affichage du menu
		  if(myMutexLCDHandle != NULL)
 800213a:	4b38      	ldr	r3, [pc, #224]	; (800221c <StartMode+0x14c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d02a      	beq.n	8002198 <StartMode+0xc8>
		  {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <StartMode+0x14c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f009 ffed 	bl	800c128 <xQueueSemaphoreTake>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	d121      	bne.n	8002198 <StartMode+0xc8>
			   {
				   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002154:	4832      	ldr	r0, [pc, #200]	; (8002220 <StartMode+0x150>)
 8002156:	f000 fb75 	bl	8002844 <BSP_LCD_SetTextColor>
				   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text, CENTER_MODE);
 800215a:	f107 020c 	add.w	r2, r7, #12
 800215e:	2301      	movs	r3, #1
 8002160:	21fc      	movs	r1, #252	; 0xfc
 8002162:	2000      	movs	r0, #0
 8002164:	f000 fc3c 	bl	80029e0 <BSP_LCD_DisplayStringAt>
				   BSP_LCD_SetTextColor(couleur);
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <StartMode+0x154>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fb69 	bl	8002844 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(460, 20, 15);
 8002172:	220f      	movs	r2, #15
 8002174:	2114      	movs	r1, #20
 8002176:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800217a:	f000 ff1d 	bl	8002fb8 <BSP_LCD_FillCircle>
				   LCD_PAINTBRUSH(460, 60, 15);
 800217e:	220f      	movs	r2, #15
 8002180:	213c      	movs	r1, #60	; 0x3c
 8002182:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8002186:	f7ff ff7d 	bl	8002084 <LCD_PAINTBRUSH>
				   xSemaphoreGive(myMutexLCDHandle);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <StartMode+0x14c>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	f009 fd48 	bl	800bc28 <xQueueGenericSend>
			   }
		   }
		  etat = 'r';
 8002198:	2372      	movs	r3, #114	; 0x72
 800219a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  break;
 800219e:	e032      	b.n	8002206 <StartMode+0x136>
	  case 'l' :
		  HAL_UART_Transmit(&huart1, message, 52, 20);
 80021a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80021a4:	2314      	movs	r3, #20
 80021a6:	2234      	movs	r2, #52	; 0x34
 80021a8:	481f      	ldr	r0, [pc, #124]	; (8002228 <StartMode+0x158>)
 80021aa:	f008 f9a9 	bl	800a500 <HAL_UART_Transmit>
		  xQueueReceive(myQueueUARTHandle, &layer, 2000);
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <StartMode+0x15c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f107 017f 	add.w	r1, r7, #127	; 0x7f
 80021b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f009 fed2 	bl	800bf64 <xQueueReceive>
		  layer = layer - 48;
 80021c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80021c4:	3b30      	subs	r3, #48	; 0x30
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		  if(layer==0)
 80021cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <StartMode+0x114>
		  {
			  BSP_LCD_SelectLayer(layer);
 80021d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fb23 	bl	8002824 <BSP_LCD_SelectLayer>
			  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80021de:	4810      	ldr	r0, [pc, #64]	; (8002220 <StartMode+0x150>)
 80021e0:	f000 fb30 	bl	8002844 <BSP_LCD_SetTextColor>
		  }
		  if(layer==1)
 80021e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10b      	bne.n	8002204 <StartMode+0x134>
		  {
			  BSP_LCD_SelectLayer(layer);
 80021ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fb17 	bl	8002824 <BSP_LCD_SelectLayer>
			  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80021f6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80021fa:	f000 fb23 	bl	8002844 <BSP_LCD_SetTextColor>
		  }
		  break;
 80021fe:	e001      	b.n	8002204 <StartMode+0x134>
		  break; //etat de repos aucun mode n'est changé
 8002200:	bf00      	nop
 8002202:	e000      	b.n	8002206 <StartMode+0x136>
		  break;
 8002204:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 8002206:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800220a:	2164      	movs	r1, #100	; 0x64
 800220c:	4618      	mov	r0, r3
 800220e:	f00a fb65 	bl	800c8dc <vTaskDelayUntil>
	  switch(etat)
 8002212:	e789      	b.n	8002128 <StartMode+0x58>
 8002214:	0800e8ac 	.word	0x0800e8ac
 8002218:	0800e8e0 	.word	0x0800e8e0
 800221c:	20008898 	.word	0x20008898
 8002220:	ffff0000 	.word	0xffff0000
 8002224:	2000002c 	.word	0x2000002c
 8002228:	20008a58 	.word	0x20008a58
 800222c:	2000891c 	.word	0x2000891c

08002230 <StartPeindre>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPeindre */
void StartPeindre(void const * argument)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPeindre */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 8002238:	f00a fd14 	bl	800cc64 <xTaskGetTickCount>
 800223c:	4603      	mov	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]
  static TS_StateTypeDef  TS_State;
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 8002240:	481c      	ldr	r0, [pc, #112]	; (80022b4 <StartPeindre+0x84>)
 8002242:	f001 fb67 	bl	8003914 <BSP_TS_GetState>
	  if(TS_State.touchDetected && (TestConditionBord(TS_State.touchX[0], TS_State.touchY[0], radius)))
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <StartPeindre+0x84>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d02a      	beq.n	80022a4 <StartPeindre+0x74>
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <StartPeindre+0x84>)
 8002250:	8858      	ldrh	r0, [r3, #2]
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <StartPeindre+0x84>)
 8002254:	8999      	ldrh	r1, [r3, #12]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <StartPeindre+0x88>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	f7ff fee7 	bl	8002030 <TestConditionBord>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01d      	beq.n	80022a4 <StartPeindre+0x74>
	  {
		  if(myMutexLCDHandle != NULL)
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <StartPeindre+0x8c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d019      	beq.n	80022a4 <StartPeindre+0x74>
		   {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <StartPeindre+0x8c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f009 ff56 	bl	800c128 <xQueueSemaphoreTake>
 800227c:	4603      	mov	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d110      	bne.n	80022a4 <StartPeindre+0x74>
			   {
				   BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],radius);
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <StartPeindre+0x84>)
 8002284:	8858      	ldrh	r0, [r3, #2]
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <StartPeindre+0x84>)
 8002288:	8999      	ldrh	r1, [r3, #12]
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <StartPeindre+0x88>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	f000 fe91 	bl	8002fb8 <BSP_LCD_FillCircle>
				   xSemaphoreGive(myMutexLCDHandle);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <StartPeindre+0x8c>)
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	f009 fcc2 	bl	800bc28 <xQueueGenericSend>
			   }
		   }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 1);
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2101      	movs	r1, #1
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00a fb16 	bl	800c8dc <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 80022b0:	e7c6      	b.n	8002240 <StartPeindre+0x10>
 80022b2:	bf00      	nop
 80022b4:	20000360 	.word	0x20000360
 80022b8:	20000028 	.word	0x20000028
 80022bc:	20008898 	.word	0x20008898

080022c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022d2:	f002 fb8b 	bl	80049ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40001000 	.word	0x40001000

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ea:	e7fe      	b.n	80022ea <Error_Handler+0x6>

080022ec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	; 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a51      	ldr	r2, [pc, #324]	; (800243c <I2Cx_MspInit+0x150>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d14d      	bne.n	8002398 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <I2Cx_MspInit+0x154>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a4f      	ldr	r2, [pc, #316]	; (8002440 <I2Cx_MspInit+0x154>)
 8002302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <I2Cx_MspInit+0x154>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002318:	2312      	movs	r3, #18
 800231a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002320:	2302      	movs	r3, #2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002324:	2304      	movs	r3, #4
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4845      	ldr	r0, [pc, #276]	; (8002444 <I2Cx_MspInit+0x158>)
 8002330:	f003 fd92 	bl	8005e58 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	4840      	ldr	r0, [pc, #256]	; (8002444 <I2Cx_MspInit+0x158>)
 8002342:	f003 fd89 	bl	8005e58 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <I2Cx_MspInit+0x154>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a3d      	ldr	r2, [pc, #244]	; (8002440 <I2Cx_MspInit+0x154>)
 800234c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <I2Cx_MspInit+0x154>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <I2Cx_MspInit+0x154>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <I2Cx_MspInit+0x154>)
 8002364:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002368:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800236a:	4b35      	ldr	r3, [pc, #212]	; (8002440 <I2Cx_MspInit+0x154>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a34      	ldr	r2, [pc, #208]	; (8002440 <I2Cx_MspInit+0x154>)
 8002370:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002374:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	210f      	movs	r1, #15
 800237a:	2048      	movs	r0, #72	; 0x48
 800237c:	f003 f80a 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002380:	2048      	movs	r0, #72	; 0x48
 8002382:	f003 f823 	bl	80053cc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	210f      	movs	r1, #15
 800238a:	2049      	movs	r0, #73	; 0x49
 800238c:	f003 f802 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002390:	2049      	movs	r0, #73	; 0x49
 8002392:	f003 f81b 	bl	80053cc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002396:	e04d      	b.n	8002434 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <I2Cx_MspInit+0x154>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <I2Cx_MspInit+0x154>)
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <I2Cx_MspInit+0x154>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80023b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023b6:	2312      	movs	r3, #18
 80023b8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80023c2:	2304      	movs	r3, #4
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023c6:	f107 031c 	add.w	r3, r7, #28
 80023ca:	4619      	mov	r1, r3
 80023cc:	481e      	ldr	r0, [pc, #120]	; (8002448 <I2Cx_MspInit+0x15c>)
 80023ce:	f003 fd43 	bl	8005e58 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80023d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	481a      	ldr	r0, [pc, #104]	; (8002448 <I2Cx_MspInit+0x15c>)
 80023e0:	f003 fd3a 	bl	8005e58 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <I2Cx_MspInit+0x154>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a15      	ldr	r2, [pc, #84]	; (8002440 <I2Cx_MspInit+0x154>)
 80023ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <I2Cx_MspInit+0x154>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <I2Cx_MspInit+0x154>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <I2Cx_MspInit+0x154>)
 8002402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002406:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <I2Cx_MspInit+0x154>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <I2Cx_MspInit+0x154>)
 800240e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002412:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	210f      	movs	r1, #15
 8002418:	201f      	movs	r0, #31
 800241a:	f002 ffbb 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800241e:	201f      	movs	r0, #31
 8002420:	f002 ffd4 	bl	80053cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	210f      	movs	r1, #15
 8002428:	2020      	movs	r0, #32
 800242a:	f002 ffb3 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800242e:	2020      	movs	r0, #32
 8002430:	f002 ffcc 	bl	80053cc <HAL_NVIC_EnableIRQ>
}
 8002434:	bf00      	nop
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2000038c 	.word	0x2000038c
 8002440:	40023800 	.word	0x40023800
 8002444:	40021c00 	.word	0x40021c00
 8002448:	40020400 	.word	0x40020400

0800244c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f004 fad3 	bl	8006a00 <HAL_I2C_GetState>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d125      	bne.n	80024ac <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <I2Cx_Init+0x68>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d103      	bne.n	8002470 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <I2Cx_Init+0x6c>)
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e002      	b.n	8002476 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <I2Cx_Init+0x70>)
 8002474:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <I2Cx_Init+0x74>)
 800247a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff23 	bl	80022ec <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f003 ffbc 	bl	8006424 <HAL_I2C_Init>
  }
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000038c 	.word	0x2000038c
 80024b8:	40005c00 	.word	0x40005c00
 80024bc:	40005400 	.word	0x40005400
 80024c0:	40912732 	.word	0x40912732

080024c4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	72fb      	strb	r3, [r7, #11]
 80024d6:	460b      	mov	r3, r1
 80024d8:	813b      	strh	r3, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024e2:	7afb      	ldrb	r3, [r7, #11]
 80024e4:	b299      	uxth	r1, r3
 80024e6:	88f8      	ldrh	r0, [r7, #6]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f004 f966 	bl	80067cc <HAL_I2C_Mem_Read>
 8002500:	4603      	mov	r3, r0
 8002502:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	4619      	mov	r1, r3
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f832 	bl	8002578 <I2Cx_Error>
  }
  return status;    
 8002514:	7dfb      	ldrb	r3, [r7, #23]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b08a      	sub	sp, #40	; 0x28
 8002522:	af04      	add	r7, sp, #16
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	4608      	mov	r0, r1
 8002528:	4611      	mov	r1, r2
 800252a:	461a      	mov	r2, r3
 800252c:	4603      	mov	r3, r0
 800252e:	72fb      	strb	r3, [r7, #11]
 8002530:	460b      	mov	r3, r1
 8002532:	813b      	strh	r3, [r7, #8]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	b299      	uxth	r1, r3
 8002540:	88f8      	ldrh	r0, [r7, #6]
 8002542:	893a      	ldrh	r2, [r7, #8]
 8002544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f004 f825 	bl	80065a4 <HAL_I2C_Mem_Write>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	4619      	mov	r1, r3
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f805 	bl	8002578 <I2Cx_Error>
  }
  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f003 ffdd 	bl	8006544 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff5e 	bl	800244c <I2Cx_Init>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TS_IO_Init+0x10>)
 800259e:	f7ff ff55 	bl	800244c <I2Cx_Init>
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000038c 	.word	0x2000038c

080025ac <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	460b      	mov	r3, r1
 80025b8:	71bb      	strb	r3, [r7, #6]
 80025ba:	4613      	mov	r3, r2
 80025bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	79f9      	ldrb	r1, [r7, #7]
 80025c4:	2301      	movs	r3, #1
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	1d7b      	adds	r3, r7, #5
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	4803      	ldr	r0, [pc, #12]	; (80025dc <TS_IO_Write+0x30>)
 80025d0:	f7ff ffa5 	bl	800251e <I2Cx_WriteMultiple>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	2000038c 	.word	0x2000038c

080025e0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	4603      	mov	r3, r0
 80025e8:	460a      	mov	r2, r1
 80025ea:	71fb      	strb	r3, [r7, #7]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	79f9      	ldrb	r1, [r7, #7]
 80025fa:	2301      	movs	r3, #1
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	f107 030f 	add.w	r3, r7, #15
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2301      	movs	r3, #1
 8002606:	4804      	ldr	r0, [pc, #16]	; (8002618 <TS_IO_Read+0x38>)
 8002608:	f7ff ff5c 	bl	80024c4 <I2Cx_ReadMultiple>

  return read_value;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000038c 	.word	0x2000038c

0800261c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f002 fa01 	bl	8004a2c <HAL_Delay>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <BSP_LCD_Init+0xcc>)
 800263a:	2228      	movs	r2, #40	; 0x28
 800263c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002640:	2209      	movs	r2, #9
 8002642:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002646:	2235      	movs	r2, #53	; 0x35
 8002648:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <BSP_LCD_Init+0xcc>)
 800264c:	220b      	movs	r2, #11
 800264e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002652:	f240 121b 	movw	r2, #283	; 0x11b
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <BSP_LCD_Init+0xcc>)
 800265a:	f240 2215 	movw	r2, #533	; 0x215
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002662:	f240 121d 	movw	r2, #285	; 0x11d
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <BSP_LCD_Init+0xcc>)
 800266a:	f240 2235 	movw	r2, #565	; 0x235
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002670:	2100      	movs	r1, #0
 8002672:	4823      	ldr	r0, [pc, #140]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002674:	f000 fe38 	bl	80032e8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <BSP_LCD_Init+0xcc>)
 800267a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800267e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002682:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002686:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <BSP_LCD_Init+0xcc>)
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <BSP_LCD_Init+0xcc>)
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <BSP_LCD_Init+0xcc>)
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <BSP_LCD_Init+0xd0>)
 80026bc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80026be:	4810      	ldr	r0, [pc, #64]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026c0:	f004 fe30 	bl	8007324 <HAL_LTDC_GetState>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80026ca:	2100      	movs	r1, #0
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026ce:	f000 fd31 	bl	8003134 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80026d2:	480b      	ldr	r0, [pc, #44]	; (8002700 <BSP_LCD_Init+0xcc>)
 80026d4:	f004 fc56 	bl	8006f84 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026de:	480a      	ldr	r0, [pc, #40]	; (8002708 <BSP_LCD_Init+0xd4>)
 80026e0:	f003 fe86 	bl	80063f0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2108      	movs	r1, #8
 80026e8:	4808      	ldr	r0, [pc, #32]	; (800270c <BSP_LCD_Init+0xd8>)
 80026ea:	f003 fe81 	bl	80063f0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80026ee:	f000 ff1b 	bl	8003528 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026f2:	4807      	ldr	r0, [pc, #28]	; (8002710 <BSP_LCD_Init+0xdc>)
 80026f4:	f000 f8d8 	bl	80028a8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20008c90 	.word	0x20008c90
 8002704:	40016800 	.word	0x40016800
 8002708:	40022000 	.word	0x40022000
 800270c:	40022800 	.word	0x40022800
 8002710:	20000030 	.word	0x20000030

08002714 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <BSP_LCD_GetXSize+0x20>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a06      	ldr	r2, [pc, #24]	; (8002738 <BSP_LCD_GetXSize+0x24>)
 800271e:	2134      	movs	r1, #52	; 0x34
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3360      	adds	r3, #96	; 0x60
 8002728:	681b      	ldr	r3, [r3, #0]
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20000418 	.word	0x20000418
 8002738:	20008c90 	.word	0x20008c90

0800273c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <BSP_LCD_GetYSize+0x20>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <BSP_LCD_GetYSize+0x24>)
 8002746:	2134      	movs	r1, #52	; 0x34
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3364      	adds	r3, #100	; 0x64
 8002750:	681b      	ldr	r3, [r3, #0]
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	20000418 	.word	0x20000418
 8002760:	20008c90 	.word	0x20008c90

08002764 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002764:	b580      	push	{r7, lr}
 8002766:	b090      	sub	sp, #64	; 0x40
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002774:	f7ff ffce 	bl	8002714 <BSP_LCD_GetXSize>
 8002778:	4603      	mov	r3, r0
 800277a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002780:	f7ff ffdc 	bl	800273c <BSP_LCD_GetYSize>
 8002784:	4603      	mov	r3, r0
 8002786:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002790:	23ff      	movs	r3, #255	; 0xff
 8002792:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027b0:	2307      	movs	r3, #7
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80027b4:	f7ff ffae 	bl	8002714 <BSP_LCD_GetXSize>
 80027b8:	4603      	mov	r3, r0
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80027bc:	f7ff ffbe 	bl	800273c <BSP_LCD_GetYSize>
 80027c0:	4603      	mov	r3, r0
 80027c2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80027c4:	88fa      	ldrh	r2, [r7, #6]
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	4812      	ldr	r0, [pc, #72]	; (8002818 <BSP_LCD_LayerDefaultInit+0xb4>)
 80027ce:	f004 fd6b 	bl	80072a8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	4911      	ldr	r1, [pc, #68]	; (800281c <BSP_LCD_LayerDefaultInit+0xb8>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3304      	adds	r3, #4
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
 80027e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	490c      	ldr	r1, [pc, #48]	; (800281c <BSP_LCD_LayerDefaultInit+0xb8>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3308      	adds	r3, #8
 80027f8:	4a09      	ldr	r2, [pc, #36]	; (8002820 <BSP_LCD_LayerDefaultInit+0xbc>)
 80027fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	4907      	ldr	r1, [pc, #28]	; (800281c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	bf00      	nop
 8002812:	3740      	adds	r7, #64	; 0x40
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20008c90 	.word	0x20008c90
 800281c:	2000041c 	.word	0x2000041c
 8002820:	20000030 	.word	0x20000030

08002824 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <BSP_LCD_SelectLayer+0x1c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
} 
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000418 	.word	0x20000418

08002844 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <BSP_LCD_SetTextColor+0x28>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4907      	ldr	r1, [pc, #28]	; (8002870 <BSP_LCD_SetTextColor+0x2c>)
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000418 	.word	0x20000418
 8002870:	2000041c 	.word	0x2000041c

08002874 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <BSP_LCD_SetBackColor+0x2c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4908      	ldr	r1, [pc, #32]	; (80028a4 <BSP_LCD_SetBackColor+0x30>)
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3304      	adds	r3, #4
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	601a      	str	r2, [r3, #0]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000418 	.word	0x20000418
 80028a4:	2000041c 	.word	0x2000041c

080028a8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <BSP_LCD_SetFont+0x2c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4908      	ldr	r1, [pc, #32]	; (80028d8 <BSP_LCD_SetFont+0x30>)
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3308      	adds	r3, #8
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000418 	.word	0x20000418
 80028d8:	2000041c 	.word	0x2000041c

080028dc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <BSP_LCD_GetFont+0x24>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4907      	ldr	r1, [pc, #28]	; (8002904 <BSP_LCD_GetFont+0x28>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3308      	adds	r3, #8
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000418 	.word	0x20000418
 8002904:	2000041c 	.word	0x2000041c

08002908 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	b085      	sub	sp, #20
 800290c:	af02      	add	r7, sp, #8
 800290e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <BSP_LCD_Clear+0x48>)
 8002912:	681c      	ldr	r4, [r3, #0]
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <BSP_LCD_Clear+0x48>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <BSP_LCD_Clear+0x4c>)
 800291a:	2134      	movs	r1, #52	; 0x34
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461d      	mov	r5, r3
 8002928:	f7ff fef4 	bl	8002714 <BSP_LCD_GetXSize>
 800292c:	4606      	mov	r6, r0
 800292e:	f7ff ff05 	bl	800273c <BSP_LCD_GetYSize>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	4632      	mov	r2, r6
 8002940:	4629      	mov	r1, r5
 8002942:	4620      	mov	r0, r4
 8002944:	f000 fda4 	bl	8003490 <LL_FillBuffer>
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	20000418 	.word	0x20000418
 8002954:	20008c90 	.word	0x20008c90

08002958 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
 8002962:	460b      	mov	r3, r1
 8002964:	80bb      	strh	r3, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <BSP_LCD_DisplayChar+0x80>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	491b      	ldr	r1, [pc, #108]	; (80029dc <BSP_LCD_DisplayChar+0x84>)
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3308      	adds	r3, #8
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <BSP_LCD_DisplayChar+0x80>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4c14      	ldr	r4, [pc, #80]	; (80029dc <BSP_LCD_DisplayChar+0x84>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4423      	add	r3, r4
 8002996:	3308      	adds	r3, #8
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800299c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <BSP_LCD_DisplayChar+0x80>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <BSP_LCD_DisplayChar+0x84>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4423      	add	r3, r4
 80029b0:	3308      	adds	r3, #8
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	889b      	ldrh	r3, [r3, #4]
 80029b6:	3307      	adds	r3, #7
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da00      	bge.n	80029be <BSP_LCD_DisplayChar+0x66>
 80029bc:	3307      	adds	r3, #7
 80029be:	10db      	asrs	r3, r3, #3
 80029c0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029c4:	18ca      	adds	r2, r1, r3
 80029c6:	88b9      	ldrh	r1, [r7, #4]
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fca8 	bl	8003320 <DrawChar>
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd90      	pop	{r4, r7, pc}
 80029d8:	20000418 	.word	0x20000418
 80029dc:	2000041c 	.word	0x2000041c

080029e0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60ba      	str	r2, [r7, #8]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	81fb      	strh	r3, [r7, #14]
 80029ee:	460b      	mov	r3, r1
 80029f0:	81bb      	strh	r3, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80029f6:	2301      	movs	r3, #1
 80029f8:	83fb      	strh	r3, [r7, #30]
 80029fa:	2300      	movs	r3, #0
 80029fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a0a:	e002      	b.n	8002a12 <BSP_LCD_DisplayStringAt+0x32>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	617a      	str	r2, [r7, #20]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f6      	bne.n	8002a0c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a1e:	f7ff fe79 	bl	8002714 <BSP_LCD_GetXSize>
 8002a22:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <BSP_LCD_DisplayStringAt+0x180>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	494f      	ldr	r1, [pc, #316]	; (8002b64 <BSP_LCD_DisplayStringAt+0x184>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3308      	adds	r3, #8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	889b      	ldrh	r3, [r3, #4]
 8002a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d01c      	beq.n	8002a7e <BSP_LCD_DisplayStringAt+0x9e>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d017      	beq.n	8002a78 <BSP_LCD_DisplayStringAt+0x98>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d12e      	bne.n	8002aaa <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad1      	subs	r1, r2, r3
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <BSP_LCD_DisplayStringAt+0x180>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4843      	ldr	r0, [pc, #268]	; (8002b64 <BSP_LCD_DisplayStringAt+0x184>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4403      	add	r3, r0
 8002a62:	3308      	adds	r3, #8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	889b      	ldrh	r3, [r3, #4]
 8002a68:	fb03 f301 	mul.w	r3, r3, r1
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	4413      	add	r3, r2
 8002a74:	83fb      	strh	r3, [r7, #30]
      break;
 8002a76:	e01b      	b.n	8002ab0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	83fb      	strh	r3, [r7, #30]
      break;
 8002a7c:	e018      	b.n	8002ab0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	b299      	uxth	r1, r3
 8002a86:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <BSP_LCD_DisplayStringAt+0x180>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4836      	ldr	r0, [pc, #216]	; (8002b64 <BSP_LCD_DisplayStringAt+0x184>)
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4403      	add	r3, r0
 8002a96:	3308      	adds	r3, #8
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	889b      	ldrh	r3, [r3, #4]
 8002a9c:	fb11 f303 	smulbb	r3, r1, r3
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	83fb      	strh	r3, [r7, #30]
      break;
 8002aa8:	e002      	b.n	8002ab0 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	83fb      	strh	r3, [r7, #30]
      break;
 8002aae:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002ab0:	8bfb      	ldrh	r3, [r7, #30]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <BSP_LCD_DisplayStringAt+0xde>
 8002ab6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da1d      	bge.n	8002afa <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ac2:	e01a      	b.n	8002afa <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	89b9      	ldrh	r1, [r7, #12]
 8002aca:	8bfb      	ldrh	r3, [r7, #30]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff43 	bl	8002958 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <BSP_LCD_DisplayStringAt+0x180>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4923      	ldr	r1, [pc, #140]	; (8002b64 <BSP_LCD_DisplayStringAt+0x184>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	889a      	ldrh	r2, [r3, #4]
 8002ae8:	8bfb      	ldrh	r3, [r7, #30]
 8002aea:	4413      	add	r3, r2
 8002aec:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
    i++;
 8002af4:	8bbb      	ldrh	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2dc      	uxtb	r4, r3
 8002b08:	f7ff fe04 	bl	8002714 <BSP_LCD_GetXSize>
 8002b0c:	4605      	mov	r5, r0
 8002b0e:	8bb9      	ldrh	r1, [r7, #28]
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <BSP_LCD_DisplayStringAt+0x180>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4813      	ldr	r0, [pc, #76]	; (8002b64 <BSP_LCD_DisplayStringAt+0x184>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4403      	add	r3, r0
 8002b20:	3308      	adds	r3, #8
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	889b      	ldrh	r3, [r3, #4]
 8002b26:	fb03 f301 	mul.w	r3, r3, r1
 8002b2a:	1aeb      	subs	r3, r5, r3
 8002b2c:	b299      	uxth	r1, r3
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <BSP_LCD_DisplayStringAt+0x180>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <BSP_LCD_DisplayStringAt+0x184>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4403      	add	r3, r0
 8002b3e:	3308      	adds	r3, #8
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	889b      	ldrh	r3, [r3, #4]
 8002b44:	4299      	cmp	r1, r3
 8002b46:	bf2c      	ite	cs
 8002b48:	2301      	movcs	r3, #1
 8002b4a:	2300      	movcc	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4023      	ands	r3, r4
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1b6      	bne.n	8002ac4 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000418 	.word	0x20000418
 8002b64:	2000041c 	.word	0x2000041c

08002b68 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002b74:	f7ff feb2 	bl	80028dc <BSP_LCD_GetFont>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	88db      	ldrh	r3, [r3, #6]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	fb12 f303 	smulbb	r3, r2, r3
 8002b82:	b299      	uxth	r1, r3
 8002b84:	2303      	movs	r3, #3
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7ff ff29 	bl	80029e0 <BSP_LCD_DisplayStringAt>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	80bb      	strh	r3, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <BSP_LCD_DrawHLine+0xb0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <BSP_LCD_DrawHLine+0xb4>)
 8002bb4:	2134      	movs	r1, #52	; 0x34
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3348      	adds	r3, #72	; 0x48
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d114      	bne.n	8002bee <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bc4:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <BSP_LCD_DrawHLine+0xb0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <BSP_LCD_DrawHLine+0xb4>)
 8002bca:	2134      	movs	r1, #52	; 0x34
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	335c      	adds	r3, #92	; 0x5c
 8002bd4:	681c      	ldr	r4, [r3, #0]
 8002bd6:	f7ff fd9d 	bl	8002714 <BSP_LCD_GetXSize>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	88bb      	ldrh	r3, [r7, #4]
 8002bde:	fb03 f202 	mul.w	r2, r3, r2
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4413      	add	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4423      	add	r3, r4
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e013      	b.n	8002c16 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <BSP_LCD_DrawHLine+0xb0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <BSP_LCD_DrawHLine+0xb4>)
 8002bf4:	2134      	movs	r1, #52	; 0x34
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	335c      	adds	r3, #92	; 0x5c
 8002bfe:	681c      	ldr	r4, [r3, #0]
 8002c00:	f7ff fd88 	bl	8002714 <BSP_LCD_GetXSize>
 8002c04:	4602      	mov	r2, r0
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	fb03 f202 	mul.w	r2, r3, r2
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4423      	add	r3, r4
 8002c14:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <BSP_LCD_DrawHLine+0xb0>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68fc      	ldr	r4, [r7, #12]
 8002c1c:	887d      	ldrh	r5, [r7, #2]
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <BSP_LCD_DrawHLine+0xb0>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	490b      	ldr	r1, [pc, #44]	; (8002c50 <BSP_LCD_DrawHLine+0xb8>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	2300      	movs	r3, #0
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2301      	movs	r3, #1
 8002c38:	462a      	mov	r2, r5
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	f000 fc28 	bl	8003490 <LL_FillBuffer>
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdb0      	pop	{r4, r5, r7, pc}
 8002c48:	20000418 	.word	0x20000418
 8002c4c:	20008c90 	.word	0x20008c90
 8002c50:	2000041c 	.word	0x2000041c

08002c54 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	80bb      	strh	r3, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	f1c3 0303 	rsb	r3, r3, #3
 8002c6e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002c78:	e0cf      	b.n	8002e1a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4413      	add	r3, r2
 8002c82:	b298      	uxth	r0, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	88ba      	ldrh	r2, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	b29c      	uxth	r4, r3
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4967      	ldr	r1, [pc, #412]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	f000 f8c6 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	88ba      	ldrh	r2, [r7, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	b29c      	uxth	r4, r3
 8002cbc:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	495b      	ldr	r1, [pc, #364]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	f000 f8af 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	4413      	add	r3, r2
 8002cde:	b298      	uxth	r0, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b29c      	uxth	r4, r3
 8002cea:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4950      	ldr	r1, [pc, #320]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4621      	mov	r1, r4
 8002d00:	f000 f898 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	b298      	uxth	r0, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	88ba      	ldrh	r2, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	b29c      	uxth	r4, r3
 8002d18:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4944      	ldr	r1, [pc, #272]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	f000 f881 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	4413      	add	r3, r2
 8002d3a:	b298      	uxth	r0, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	b29c      	uxth	r4, r3
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4939      	ldr	r1, [pc, #228]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	f000 f86a 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b298      	uxth	r0, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	88bb      	ldrh	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	b29c      	uxth	r4, r3
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	492d      	ldr	r1, [pc, #180]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4621      	mov	r1, r4
 8002d8a:	f000 f853 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4413      	add	r3, r2
 8002d96:	b298      	uxth	r0, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	88bb      	ldrh	r3, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b29c      	uxth	r4, r3
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4922      	ldr	r1, [pc, #136]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4621      	mov	r1, r4
 8002db8:	f000 f83c 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b298      	uxth	r0, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	b29c      	uxth	r4, r3
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <BSP_LCD_DrawCircle+0x1d8>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4916      	ldr	r1, [pc, #88]	; (8002e30 <BSP_LCD_DrawCircle+0x1dc>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	4621      	mov	r1, r4
 8002de6:	f000 f825 	bl	8002e34 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	da06      	bge.n	8002dfe <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	009a      	lsls	r2, r3, #2
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4413      	add	r3, r2
 8002df8:	3306      	adds	r3, #6
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e00a      	b.n	8002e14 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	330a      	adds	r3, #10
 8002e0c:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	3301      	adds	r3, #1
 8002e18:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	f67f af2b 	bls.w	8002c7a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	20000418 	.word	0x20000418
 8002e30:	2000041c 	.word	0x2000041c

08002e34 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	603a      	str	r2, [r7, #0]
 8002e3e:	80fb      	strh	r3, [r7, #6]
 8002e40:	460b      	mov	r3, r1
 8002e42:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <BSP_LCD_DrawPixel+0x88>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <BSP_LCD_DrawPixel+0x8c>)
 8002e4a:	2134      	movs	r1, #52	; 0x34
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3348      	adds	r3, #72	; 0x48
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d116      	bne.n	8002e88 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <BSP_LCD_DrawPixel+0x88>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <BSP_LCD_DrawPixel+0x8c>)
 8002e60:	2134      	movs	r1, #52	; 0x34
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	335c      	adds	r3, #92	; 0x5c
 8002e6a:	681c      	ldr	r4, [r3, #0]
 8002e6c:	88bd      	ldrh	r5, [r7, #4]
 8002e6e:	f7ff fc51 	bl	8002714 <BSP_LCD_GetXSize>
 8002e72:	4603      	mov	r3, r0
 8002e74:	fb03 f205 	mul.w	r2, r3, r5
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4423      	add	r3, r4
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b292      	uxth	r2, r2
 8002e84:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002e86:	e015      	b.n	8002eb4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <BSP_LCD_DrawPixel+0x88>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <BSP_LCD_DrawPixel+0x8c>)
 8002e8e:	2134      	movs	r1, #52	; 0x34
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	335c      	adds	r3, #92	; 0x5c
 8002e98:	681c      	ldr	r4, [r3, #0]
 8002e9a:	88bd      	ldrh	r5, [r7, #4]
 8002e9c:	f7ff fc3a 	bl	8002714 <BSP_LCD_GetXSize>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	fb03 f205 	mul.w	r2, r3, r5
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4423      	add	r3, r4
 8002eae:	461a      	mov	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	20000418 	.word	0x20000418
 8002ec0:	20008c90 	.word	0x20008c90

08002ec4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af02      	add	r7, sp, #8
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4608      	mov	r0, r1
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	80fb      	strh	r3, [r7, #6]
 8002ed8:	4603      	mov	r3, r0
 8002eda:	80bb      	strh	r3, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <BSP_LCD_FillRect+0xe8>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4930      	ldr	r1, [pc, #192]	; (8002fb0 <BSP_LCD_FillRect+0xec>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fca2 	bl	8002844 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f00:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <BSP_LCD_FillRect+0xe8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <BSP_LCD_FillRect+0xf0>)
 8002f06:	2134      	movs	r1, #52	; 0x34
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3348      	adds	r3, #72	; 0x48
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d114      	bne.n	8002f40 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <BSP_LCD_FillRect+0xe8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <BSP_LCD_FillRect+0xf0>)
 8002f1c:	2134      	movs	r1, #52	; 0x34
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	335c      	adds	r3, #92	; 0x5c
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	f7ff fbf4 	bl	8002714 <BSP_LCD_GetXSize>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	88bb      	ldrh	r3, [r7, #4]
 8002f30:	fb03 f202 	mul.w	r2, r3, r2
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	4413      	add	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4423      	add	r3, r4
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e013      	b.n	8002f68 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <BSP_LCD_FillRect+0xe8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <BSP_LCD_FillRect+0xf0>)
 8002f46:	2134      	movs	r1, #52	; 0x34
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	335c      	adds	r3, #92	; 0x5c
 8002f50:	681c      	ldr	r4, [r3, #0]
 8002f52:	f7ff fbdf 	bl	8002714 <BSP_LCD_GetXSize>
 8002f56:	4602      	mov	r2, r0
 8002f58:	88bb      	ldrh	r3, [r7, #4]
 8002f5a:	fb03 f202 	mul.w	r2, r3, r2
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4423      	add	r3, r4
 8002f66:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <BSP_LCD_FillRect+0xe8>)
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	68fd      	ldr	r5, [r7, #12]
 8002f6e:	887e      	ldrh	r6, [r7, #2]
 8002f70:	f8b7 8000 	ldrh.w	r8, [r7]
 8002f74:	f7ff fbce 	bl	8002714 <BSP_LCD_GetXSize>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	1ad1      	subs	r1, r2, r3
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <BSP_LCD_FillRect+0xe8>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <BSP_LCD_FillRect+0xec>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4403      	add	r3, r0
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	9100      	str	r1, [sp, #0]
 8002f94:	4643      	mov	r3, r8
 8002f96:	4632      	mov	r2, r6
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 fa78 	bl	8003490 <LL_FillBuffer>
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002faa:	bf00      	nop
 8002fac:	20000418 	.word	0x20000418
 8002fb0:	2000041c 	.word	0x2000041c
 8002fb4:	20008c90 	.word	0x20008c90

08002fb8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	80bb      	strh	r3, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	f1c3 0303 	rsb	r3, r3, #3
 8002fd2:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002fdc:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <BSP_LCD_FillCircle+0x138>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4944      	ldr	r1, [pc, #272]	; (80030f4 <BSP_LCD_FillCircle+0x13c>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fc28 	bl	8002844 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002ff4:	e061      	b.n	80030ba <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d021      	beq.n	8003040 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	88fa      	ldrh	r2, [r7, #6]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	b298      	uxth	r0, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	b29a      	uxth	r2, r3
 800300a:	88bb      	ldrh	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	b299      	uxth	r1, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	b29b      	uxth	r3, r3
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	f7ff fdbd 	bl	8002b98 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	b29b      	uxth	r3, r3
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	b298      	uxth	r0, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	b29b      	uxth	r3, r3
 800302c:	88ba      	ldrh	r2, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	b299      	uxth	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	b29b      	uxth	r3, r3
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	b29b      	uxth	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	f7ff fdac 	bl	8002b98 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d021      	beq.n	800308a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	b29b      	uxth	r3, r3
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b298      	uxth	r0, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	b29b      	uxth	r3, r3
 8003054:	88ba      	ldrh	r2, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b299      	uxth	r1, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	b29b      	uxth	r3, r3
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	f7ff fd98 	bl	8002b98 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	b29b      	uxth	r3, r3
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	b298      	uxth	r0, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	b29a      	uxth	r2, r3
 8003076:	88bb      	ldrh	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	b299      	uxth	r1, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	b29b      	uxth	r3, r3
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	b29b      	uxth	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	f7ff fd87 	bl	8002b98 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	da06      	bge.n	800309e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4413      	add	r3, r2
 8003098:	3306      	adds	r3, #6
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e00a      	b.n	80030b4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	009a      	lsls	r2, r3, #2
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4413      	add	r3, r2
 80030aa:	330a      	adds	r3, #10
 80030ac:	617b      	str	r3, [r7, #20]
      current_y--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3301      	adds	r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d999      	bls.n	8002ff6 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <BSP_LCD_FillCircle+0x138>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	490b      	ldr	r1, [pc, #44]	; (80030f4 <BSP_LCD_FillCircle+0x13c>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fbb5 	bl	8002844 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	88b9      	ldrh	r1, [r7, #4]
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fdb7 	bl	8002c54 <BSP_LCD_DrawCircle>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000418 	.word	0x20000418
 80030f4:	2000041c 	.word	0x2000041c

080030f8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <BSP_LCD_DisplayOn+0x30>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <BSP_LCD_DisplayOn+0x30>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003112:	4806      	ldr	r0, [pc, #24]	; (800312c <BSP_LCD_DisplayOn+0x34>)
 8003114:	f003 f96c 	bl	80063f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003118:	2201      	movs	r2, #1
 800311a:	2108      	movs	r1, #8
 800311c:	4804      	ldr	r0, [pc, #16]	; (8003130 <BSP_LCD_DisplayOn+0x38>)
 800311e:	f003 f967 	bl	80063f0 <HAL_GPIO_WritePin>
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20008c90 	.word	0x20008c90
 800312c:	40022000 	.word	0x40022000
 8003130:	40022800 	.word	0x40022800

08003134 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b090      	sub	sp, #64	; 0x40
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800313e:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a63      	ldr	r2, [pc, #396]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003144:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003156:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a5d      	ldr	r2, [pc, #372]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 800315c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800316e:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003174:	f043 0310 	orr.w	r3, r3, #16
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003186:	4b52      	ldr	r3, [pc, #328]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 800318c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800319e:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a4b      	ldr	r2, [pc, #300]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031b6:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a45      	ldr	r2, [pc, #276]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80031ce:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a3f      	ldr	r2, [pc, #252]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a39      	ldr	r2, [pc, #228]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 8003204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <BSP_LCD_MspInit+0x19c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003216:	2310      	movs	r3, #16
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003222:	2302      	movs	r3, #2
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003226:	230e      	movs	r3, #14
 8003228:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800322a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322e:	4619      	mov	r1, r3
 8003230:	4828      	ldr	r0, [pc, #160]	; (80032d4 <BSP_LCD_MspInit+0x1a0>)
 8003232:	f002 fe11 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003240:	2309      	movs	r3, #9
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003248:	4619      	mov	r1, r3
 800324a:	4823      	ldr	r0, [pc, #140]	; (80032d8 <BSP_LCD_MspInit+0x1a4>)
 800324c:	f002 fe04 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003250:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800325a:	230e      	movs	r3, #14
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800325e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003262:	4619      	mov	r1, r3
 8003264:	481d      	ldr	r0, [pc, #116]	; (80032dc <BSP_LCD_MspInit+0x1a8>)
 8003266:	f002 fdf7 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800326a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003274:	230e      	movs	r3, #14
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327c:	4619      	mov	r1, r3
 800327e:	4818      	ldr	r0, [pc, #96]	; (80032e0 <BSP_LCD_MspInit+0x1ac>)
 8003280:	f002 fdea 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003284:	23f7      	movs	r3, #247	; 0xf7
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800328c:	230e      	movs	r3, #14
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003294:	4619      	mov	r1, r3
 8003296:	4813      	ldr	r0, [pc, #76]	; (80032e4 <BSP_LCD_MspInit+0x1b0>)
 8003298:	f002 fdde 	bl	8005e58 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800329c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032a2:	2301      	movs	r3, #1
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80032a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032aa:	4619      	mov	r1, r3
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <BSP_LCD_MspInit+0x1a8>)
 80032ae:	f002 fdd3 	bl	8005e58 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80032b2:	2308      	movs	r3, #8
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80032ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032be:	4619      	mov	r1, r3
 80032c0:	4808      	ldr	r0, [pc, #32]	; (80032e4 <BSP_LCD_MspInit+0x1b0>)
 80032c2:	f002 fdc9 	bl	8005e58 <HAL_GPIO_Init>
}
 80032c6:	bf00      	nop
 80032c8:	3740      	adds	r7, #64	; 0x40
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40021800 	.word	0x40021800
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40022400 	.word	0x40022400
 80032e4:	40022800 	.word	0x40022800

080032e8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <BSP_LCD_ClockConfig+0x34>)
 80032f4:	2208      	movs	r2, #8
 80032f6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <BSP_LCD_ClockConfig+0x34>)
 80032fa:	22c0      	movs	r2, #192	; 0xc0
 80032fc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <BSP_LCD_ClockConfig+0x34>)
 8003300:	2205      	movs	r2, #5
 8003302:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <BSP_LCD_ClockConfig+0x34>)
 8003306:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800330c:	4803      	ldr	r0, [pc, #12]	; (800331c <BSP_LCD_ClockConfig+0x34>)
 800330e:	f004 feb9 	bl	8008084 <HAL_RCCEx_PeriphCLKConfig>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000434 	.word	0x20000434

08003320 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	603a      	str	r2, [r7, #0]
 800332a:	80fb      	strh	r3, [r7, #6]
 800332c:	460b      	mov	r3, r1
 800332e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <DrawChar+0x168>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4953      	ldr	r1, [pc, #332]	; (800348c <DrawChar+0x16c>)
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3308      	adds	r3, #8
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	88db      	ldrh	r3, [r3, #6]
 800334e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <DrawChar+0x168>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	494d      	ldr	r1, [pc, #308]	; (800348c <DrawChar+0x16c>)
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3308      	adds	r3, #8
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	889b      	ldrh	r3, [r3, #4]
 8003366:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003368:	8a3b      	ldrh	r3, [r7, #16]
 800336a:	3307      	adds	r3, #7
 800336c:	2b00      	cmp	r3, #0
 800336e:	da00      	bge.n	8003372 <DrawChar+0x52>
 8003370:	3307      	adds	r3, #7
 8003372:	10db      	asrs	r3, r3, #3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8a3b      	ldrh	r3, [r7, #16]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e076      	b.n	8003476 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003388:	8a3b      	ldrh	r3, [r7, #16]
 800338a:	3307      	adds	r3, #7
 800338c:	2b00      	cmp	r3, #0
 800338e:	da00      	bge.n	8003392 <DrawChar+0x72>
 8003390:	3307      	adds	r3, #7
 8003392:	10db      	asrs	r3, r3, #3
 8003394:	461a      	mov	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fb03 f302 	mul.w	r3, r3, r2
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80033a2:	8a3b      	ldrh	r3, [r7, #16]
 80033a4:	3307      	adds	r3, #7
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da00      	bge.n	80033ac <DrawChar+0x8c>
 80033aa:	3307      	adds	r3, #7
 80033ac:	10db      	asrs	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <DrawChar+0x98>
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d004      	beq.n	80033c0 <DrawChar+0xa0>
 80033b6:	e00c      	b.n	80033d2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	617b      	str	r3, [r7, #20]
      break;
 80033be:	e016      	b.n	80033ee <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	3201      	adds	r2, #1
 80033ca:	7812      	ldrb	r2, [r2, #0]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
      break;
 80033d0:	e00d      	b.n	80033ee <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	041a      	lsls	r2, r3, #16
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3301      	adds	r3, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	4313      	orrs	r3, r2
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	3202      	adds	r2, #2
 80033e6:	7812      	ldrb	r2, [r2, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
      break;
 80033ec:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	e036      	b.n	8003462 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80033f4:	8a3a      	ldrh	r2, [r7, #16]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad2      	subs	r2, r2, r3
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	4413      	add	r3, r2
 80033fe:	3b01      	subs	r3, #1
 8003400:	2201      	movs	r2, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	461a      	mov	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	b29a      	uxth	r2, r3
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	4413      	add	r3, r2
 8003418:	b298      	uxth	r0, r3
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <DrawChar+0x168>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	491b      	ldr	r1, [pc, #108]	; (800348c <DrawChar+0x16c>)
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	88bb      	ldrh	r3, [r7, #4]
 800342e:	4619      	mov	r1, r3
 8003430:	f7ff fd00 	bl	8002e34 <BSP_LCD_DrawPixel>
 8003434:	e012      	b.n	800345c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	b29a      	uxth	r2, r3
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4413      	add	r3, r2
 800343e:	b298      	uxth	r0, r3
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <DrawChar+0x168>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4911      	ldr	r1, [pc, #68]	; (800348c <DrawChar+0x16c>)
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3304      	adds	r3, #4
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	88bb      	ldrh	r3, [r7, #4]
 8003456:	4619      	mov	r1, r3
 8003458:	f7ff fcec 	bl	8002e34 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	3301      	adds	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	8a3b      	ldrh	r3, [r7, #16]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	429a      	cmp	r2, r3
 8003468:	d3c4      	bcc.n	80033f4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800346a:	88bb      	ldrh	r3, [r7, #4]
 800346c:	3301      	adds	r3, #1
 800346e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	3301      	adds	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	8a7b      	ldrh	r3, [r7, #18]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	429a      	cmp	r2, r3
 800347c:	d384      	bcc.n	8003388 <DrawChar+0x68>
  }
}
 800347e:	bf00      	nop
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000418 	.word	0x20000418
 800348c:	2000041c 	.word	0x2000041c

08003490 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <LL_FillBuffer+0x88>)
 80034a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034a4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <LL_FillBuffer+0x8c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <LL_FillBuffer+0x90>)
 80034ac:	2134      	movs	r1, #52	; 0x34
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3348      	adds	r3, #72	; 0x48
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d103      	bne.n	80034c4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <LL_FillBuffer+0x88>)
 80034be:	2202      	movs	r2, #2
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	e002      	b.n	80034ca <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <LL_FillBuffer+0x88>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <LL_FillBuffer+0x88>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <LL_FillBuffer+0x88>)
 80034d2:	4a14      	ldr	r2, [pc, #80]	; (8003524 <LL_FillBuffer+0x94>)
 80034d4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80034d6:	4810      	ldr	r0, [pc, #64]	; (8003518 <LL_FillBuffer+0x88>)
 80034d8:	f002 fa32 	bl	8005940 <HAL_DMA2D_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d115      	bne.n	800350e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	480c      	ldr	r0, [pc, #48]	; (8003518 <LL_FillBuffer+0x88>)
 80034e6:	f002 fb89 	bl	8005bfc <HAL_DMA2D_ConfigLayer>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10e      	bne.n	800350e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69f9      	ldr	r1, [r7, #28]
 80034fa:	4807      	ldr	r0, [pc, #28]	; (8003518 <LL_FillBuffer+0x88>)
 80034fc:	f002 fa6a 	bl	80059d4 <HAL_DMA2D_Start>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003506:	210a      	movs	r1, #10
 8003508:	4803      	ldr	r0, [pc, #12]	; (8003518 <LL_FillBuffer+0x88>)
 800350a:	f002 fa8e 	bl	8005a2a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200003d8 	.word	0x200003d8
 800351c:	20000418 	.word	0x20000418
 8003520:	20008c90 	.word	0x20008c90
 8003524:	4002b000 	.word	0x4002b000

08003528 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 800352e:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <BSP_SDRAM_Init+0xb0>)
 8003530:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 8003534:	2202      	movs	r2, #2
 8003536:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 800353a:	2207      	movs	r2, #7
 800353c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 8003540:	2204      	movs	r2, #4
 8003542:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 8003546:	2207      	movs	r2, #7
 8003548:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 800354c:	2202      	movs	r2, #2
 800354e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 8003552:	2202      	movs	r2, #2
 8003554:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003556:	4b21      	ldr	r3, [pc, #132]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 8003558:	2202      	movs	r2, #2
 800355a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003562:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 800356a:	2204      	movs	r2, #4
 800356c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 8003570:	2210      	movs	r2, #16
 8003572:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 800357c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003580:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 8003584:	2200      	movs	r2, #0
 8003586:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 800358a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 8003592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003596:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 800359a:	2200      	movs	r2, #0
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800359e:	2100      	movs	r1, #0
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 80035a2:	f000 f87f 	bl	80036a4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80035a6:	490d      	ldr	r1, [pc, #52]	; (80035dc <BSP_SDRAM_Init+0xb4>)
 80035a8:	480a      	ldr	r0, [pc, #40]	; (80035d4 <BSP_SDRAM_Init+0xac>)
 80035aa:	f005 fd1b 	bl	8008fe4 <HAL_SDRAM_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <BSP_SDRAM_Init+0xb8>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <BSP_SDRAM_Init+0xb8>)
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035c2:	f240 6003 	movw	r0, #1539	; 0x603
 80035c6:	f000 f80d 	bl	80035e4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <BSP_SDRAM_Init+0xb8>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20008d38 	.word	0x20008d38
 80035d8:	a0000140 	.word	0xa0000140
 80035dc:	200004b8 	.word	0x200004b8
 80035e0:	20000040 	.word	0x20000040

080035e4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80035f0:	4b2a      	ldr	r3, [pc, #168]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80035f6:	4b29      	ldr	r3, [pc, #164]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035f8:	2210      	movs	r2, #16
 80035fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fe:	2201      	movs	r2, #1
 8003600:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360c:	4923      	ldr	r1, [pc, #140]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360e:	4824      	ldr	r0, [pc, #144]	; (80036a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003610:	f005 fd1c 	bl	800904c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003614:	2001      	movs	r0, #1
 8003616:	f001 fa09 	bl	8004a2c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800361c:	2202      	movs	r2, #2
 800361e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003622:	2210      	movs	r2, #16
 8003624:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003628:	2201      	movs	r2, #1
 800362a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003636:	4919      	ldr	r1, [pc, #100]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003638:	4819      	ldr	r0, [pc, #100]	; (80036a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800363a:	f005 fd07 	bl	800904c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003640:	2203      	movs	r2, #3
 8003642:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003646:	2210      	movs	r2, #16
 8003648:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364c:	2208      	movs	r2, #8
 800364e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365a:	4910      	ldr	r1, [pc, #64]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365c:	4810      	ldr	r0, [pc, #64]	; (80036a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800365e:	f005 fcf5 	bl	800904c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003662:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003666:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800366a:	2204      	movs	r2, #4
 800366c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003670:	2210      	movs	r2, #16
 8003672:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003676:	2201      	movs	r2, #1
 8003678:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a07      	ldr	r2, [pc, #28]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003684:	4905      	ldr	r1, [pc, #20]	; (800369c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003686:	4806      	ldr	r0, [pc, #24]	; (80036a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003688:	f005 fce0 	bl	800904c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4804      	ldr	r0, [pc, #16]	; (80036a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003690:	f005 fd07 	bl	80090a2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200004d4 	.word	0x200004d4
 80036a0:	20008d38 	.word	0x20008d38

080036a4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b090      	sub	sp, #64	; 0x40
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036ae:	4b70      	ldr	r3, [pc, #448]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	4a6f      	ldr	r2, [pc, #444]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6393      	str	r3, [r2, #56]	; 0x38
 80036ba:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80036c6:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a69      	ldr	r2, [pc, #420]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b67      	ldr	r3, [pc, #412]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036de:	4b64      	ldr	r3, [pc, #400]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a63      	ldr	r2, [pc, #396]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b61      	ldr	r3, [pc, #388]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f6:	4b5e      	ldr	r3, [pc, #376]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	4a5d      	ldr	r2, [pc, #372]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	6313      	str	r3, [r2, #48]	; 0x30
 8003702:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800370e:	4b58      	ldr	r3, [pc, #352]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a57      	ldr	r2, [pc, #348]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003714:	f043 0310 	orr.w	r3, r3, #16
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b55      	ldr	r3, [pc, #340]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003726:	4b52      	ldr	r3, [pc, #328]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a51      	ldr	r2, [pc, #324]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 800372c:	f043 0320 	orr.w	r3, r3, #32
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003756:	4b46      	ldr	r3, [pc, #280]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a45      	ldr	r2, [pc, #276]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <BSP_SDRAM_MspInit+0x1cc>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800376e:	2302      	movs	r3, #2
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003772:	2301      	movs	r3, #1
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003776:	2302      	movs	r3, #2
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800377a:	230c      	movs	r3, #12
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800377e:	2308      	movs	r3, #8
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003786:	4619      	mov	r1, r3
 8003788:	483a      	ldr	r0, [pc, #232]	; (8003874 <BSP_SDRAM_MspInit+0x1d0>)
 800378a:	f002 fb65 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800378e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003798:	4619      	mov	r1, r3
 800379a:	4837      	ldr	r0, [pc, #220]	; (8003878 <BSP_SDRAM_MspInit+0x1d4>)
 800379c:	f002 fb5c 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80037a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80037a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037aa:	4619      	mov	r1, r3
 80037ac:	4833      	ldr	r0, [pc, #204]	; (800387c <BSP_SDRAM_MspInit+0x1d8>)
 80037ae:	f002 fb53 	bl	8005e58 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80037b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80037b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037bc:	4619      	mov	r1, r3
 80037be:	4830      	ldr	r0, [pc, #192]	; (8003880 <BSP_SDRAM_MspInit+0x1dc>)
 80037c0:	f002 fb4a 	bl	8005e58 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80037c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80037ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ce:	4619      	mov	r1, r3
 80037d0:	482c      	ldr	r0, [pc, #176]	; (8003884 <BSP_SDRAM_MspInit+0x1e0>)
 80037d2:	f002 fb41 	bl	8005e58 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80037d6:	2328      	movs	r3, #40	; 0x28
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80037da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037de:	4619      	mov	r1, r3
 80037e0:	4829      	ldr	r0, [pc, #164]	; (8003888 <BSP_SDRAM_MspInit+0x1e4>)
 80037e2:	f002 fb39 	bl	8005e58 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 80037f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003802:	4b22      	ldr	r3, [pc, #136]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003804:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003808:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 800380c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003810:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003814:	2200      	movs	r2, #0
 8003816:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 800381a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800381e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003822:	2200      	movs	r2, #0
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003828:	2203      	movs	r2, #3
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 800382e:	2200      	movs	r2, #0
 8003830:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <BSP_SDRAM_MspInit+0x1ec>)
 800383c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a12      	ldr	r2, [pc, #72]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
 8003844:	4a11      	ldr	r2, [pc, #68]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800384a:	4810      	ldr	r0, [pc, #64]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 800384c:	f001 ff48 	bl	80056e0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003850:	480e      	ldr	r0, [pc, #56]	; (800388c <BSP_SDRAM_MspInit+0x1e8>)
 8003852:	f001 fe97 	bl	8005584 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	210f      	movs	r1, #15
 800385a:	2038      	movs	r0, #56	; 0x38
 800385c:	f001 fd9a 	bl	8005394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003860:	2038      	movs	r0, #56	; 0x38
 8003862:	f001 fdb3 	bl	80053cc <HAL_NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3740      	adds	r7, #64	; 0x40
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	40020800 	.word	0x40020800
 8003878:	40020c00 	.word	0x40020c00
 800387c:	40021000 	.word	0x40021000
 8003880:	40021400 	.word	0x40021400
 8003884:	40021800 	.word	0x40021800
 8003888:	40021c00 	.word	0x40021c00
 800388c:	200004e4 	.word	0x200004e4
 8003890:	40026410 	.word	0x40026410

08003894 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	460a      	mov	r2, r1
 800389e:	80fb      	strh	r3, [r7, #6]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <BSP_TS_Init+0x68>)
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <BSP_TS_Init+0x6c>)
 80038b0:	88bb      	ldrh	r3, [r7, #4]
 80038b2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <BSP_TS_Init+0x70>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2070      	movs	r0, #112	; 0x70
 80038ba:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <BSP_TS_Init+0x70>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2070      	movs	r0, #112	; 0x70
 80038c2:	4798      	blx	r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b51      	cmp	r3, #81	; 0x51
 80038c8:	d111      	bne.n	80038ee <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <BSP_TS_Init+0x74>)
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <BSP_TS_Init+0x70>)
 80038ce:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <BSP_TS_Init+0x78>)
 80038d2:	2270      	movs	r2, #112	; 0x70
 80038d4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <BSP_TS_Init+0x7c>)
 80038d8:	2208      	movs	r2, #8
 80038da:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <BSP_TS_Init+0x74>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <BSP_TS_Init+0x78>)
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	b292      	uxth	r2, r2
 80038e8:	4610      	mov	r0, r2
 80038ea:	4798      	blx	r3
 80038ec:	e001      	b.n	80038f2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80038ee:	2303      	movs	r3, #3
 80038f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000548 	.word	0x20000548
 8003900:	2000054a 	.word	0x2000054a
 8003904:	20000000 	.word	0x20000000
 8003908:	20000544 	.word	0x20000544
 800390c:	2000054d 	.word	0x2000054d
 8003910:	2000054c 	.word	0x2000054c

08003914 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b097      	sub	sp, #92	; 0x5c
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800392e:	4b97      	ldr	r3, [pc, #604]	; (8003b8c <BSP_TS_GetState+0x278>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	4a96      	ldr	r2, [pc, #600]	; (8003b90 <BSP_TS_GetState+0x27c>)
 8003936:	7812      	ldrb	r2, [r2, #0]
 8003938:	b292      	uxth	r2, r2
 800393a:	4610      	mov	r0, r2
 800393c:	4798      	blx	r3
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 81a8 	beq.w	8003ca0 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003950:	2300      	movs	r3, #0
 8003952:	64bb      	str	r3, [r7, #72]	; 0x48
 8003954:	e197      	b.n	8003c86 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003956:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <BSP_TS_GetState+0x278>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4a8c      	ldr	r2, [pc, #560]	; (8003b90 <BSP_TS_GetState+0x27c>)
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	b290      	uxth	r0, r2
 8003962:	f107 0120 	add.w	r1, r7, #32
 8003966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003968:	0052      	lsls	r2, r2, #1
 800396a:	188c      	adds	r4, r1, r2
 800396c:	f107 0114 	add.w	r1, r7, #20
 8003970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003972:	0052      	lsls	r2, r2, #1
 8003974:	440a      	add	r2, r1
 8003976:	4621      	mov	r1, r4
 8003978:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800397a:	4b86      	ldr	r3, [pc, #536]	; (8003b94 <BSP_TS_GetState+0x280>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d11b      	bne.n	80039ba <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800398a:	4413      	add	r3, r2
 800398c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003998:	440b      	add	r3, r1
 800399a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800399e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039a6:	4413      	add	r3, r2
 80039a8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80039ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80039b4:	440b      	add	r3, r1
 80039b6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <BSP_TS_GetState+0x280>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80039c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039ce:	4413      	add	r3, r2
 80039d0:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80039d4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80039e2:	440b      	add	r3, r1
 80039e4:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <BSP_TS_GetState+0x280>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80039f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039fc:	4413      	add	r3, r2
 80039fe:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003a02:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a10:	440b      	add	r3, r1
 8003a12:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003a16:	4b5f      	ldr	r3, [pc, #380]	; (8003b94 <BSP_TS_GetState+0x280>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01b      	beq.n	8003a5a <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8003a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a38:	440b      	add	r3, r1
 8003a3a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a46:	4413      	add	r3, r2
 8003a48:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a54:	440b      	add	r3, r1
 8003a56:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a62:	4413      	add	r3, r2
 8003a64:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4a4b      	ldr	r2, [pc, #300]	; (8003b98 <BSP_TS_GetState+0x284>)
 8003a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a72:	4299      	cmp	r1, r3
 8003a74:	d90e      	bls.n	8003a94 <BSP_TS_GetState+0x180>
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a7e:	4413      	add	r3, r2
 8003a80:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003a84:	4944      	ldr	r1, [pc, #272]	; (8003b98 <BSP_TS_GetState+0x284>)
 8003a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	e00d      	b.n	8003ab0 <BSP_TS_GetState+0x19c>
 8003a94:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <BSP_TS_GetState+0x284>)
 8003a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003abc:	4413      	add	r3, r2
 8003abe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4a35      	ldr	r2, [pc, #212]	; (8003b9c <BSP_TS_GetState+0x288>)
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	4299      	cmp	r1, r3
 8003ace:	d90e      	bls.n	8003aee <BSP_TS_GetState+0x1da>
 8003ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003ad8:	4413      	add	r3, r2
 8003ada:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003ade:	492f      	ldr	r1, [pc, #188]	; (8003b9c <BSP_TS_GetState+0x288>)
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	e00d      	b.n	8003b0a <BSP_TS_GetState+0x1f6>
 8003aee:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <BSP_TS_GetState+0x288>)
 8003af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003b00:	440b      	add	r3, r1
 8003b02:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003b0e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003b12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b16:	4413      	add	r3, r2
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	dd17      	ble.n	8003b4c <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b24:	4413      	add	r3, r2
 8003b26:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	; (8003b98 <BSP_TS_GetState+0x284>)
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <BSP_TS_GetState+0x288>)
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <BSP_TS_GetState+0x27c>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b70      	cmp	r3, #112	; 0x70
 8003b52:	d125      	bne.n	8003ba0 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8003b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b76:	4413      	add	r3, r2
 8003b78:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b80:	3304      	adds	r3, #4
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	460a      	mov	r2, r1
 8003b88:	809a      	strh	r2, [r3, #4]
 8003b8a:	e02c      	b.n	8003be6 <BSP_TS_GetState+0x2d2>
 8003b8c:	20000544 	.word	0x20000544
 8003b90:	2000054d 	.word	0x2000054d
 8003b94:	2000054c 	.word	0x2000054c
 8003b98:	20000550 	.word	0x20000550
 8003b9c:	20000564 	.word	0x20000564
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003ba0:	4b42      	ldr	r3, [pc, #264]	; (8003cac <BSP_TS_GetState+0x398>)
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4a42      	ldr	r2, [pc, #264]	; (8003cb0 <BSP_TS_GetState+0x39c>)
 8003ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	fb03 f301 	mul.w	r3, r3, r1
 8003bb2:	0b1b      	lsrs	r3, r3, #12
 8003bb4:	b299      	uxth	r1, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003bc2:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <BSP_TS_GetState+0x3a0>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <BSP_TS_GetState+0x3a4>)
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	fb03 f301 	mul.w	r3, r3, r1
 8003bd4:	0b1b      	lsrs	r3, r3, #12
 8003bd6:	b299      	uxth	r1, r3
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	3304      	adds	r3, #4
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	460a      	mov	r2, r1
 8003be4:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003be6:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <BSP_TS_GetState+0x3a8>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	b298      	uxth	r0, r3
 8003bec:	f107 010c 	add.w	r1, r7, #12
 8003bf0:	f107 0210 	add.w	r2, r7, #16
 8003bf4:	f107 0308 	add.w	r3, r7, #8
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003bfe:	f7fc fed5 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b2d9      	uxtb	r1, r3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3316      	adds	r3, #22
 8003c0e:	460a      	mov	r2, r1
 8003c10:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	b2d9      	uxtb	r1, r3
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	460a      	mov	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d827      	bhi.n	8003c78 <BSP_TS_GetState+0x364>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <BSP_TS_GetState+0x31c>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c4f 	.word	0x08003c4f
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c6b 	.word	0x08003c6b
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c44:	4413      	add	r3, r2
 8003c46:	331b      	adds	r3, #27
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
          break;
 8003c4c:	e018      	b.n	8003c80 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c52:	4413      	add	r3, r2
 8003c54:	331b      	adds	r3, #27
 8003c56:	2202      	movs	r2, #2
 8003c58:	701a      	strb	r2, [r3, #0]
          break;
 8003c5a:	e011      	b.n	8003c80 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c60:	4413      	add	r3, r2
 8003c62:	331b      	adds	r3, #27
 8003c64:	2203      	movs	r2, #3
 8003c66:	701a      	strb	r2, [r3, #0]
          break;
 8003c68:	e00a      	b.n	8003c80 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6e:	4413      	add	r3, r2
 8003c70:	331b      	adds	r3, #27
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
          break;
 8003c76:	e003      	b.n	8003c80 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003c7e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	3301      	adds	r3, #1
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	f4ff ae61 	bcc.w	8003956 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f813 	bl	8003cc0 <BSP_TS_Get_GestureId>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003ca0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3754      	adds	r7, #84	; 0x54
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd90      	pop	{r4, r7, pc}
 8003cac:	20000548 	.word	0x20000548
 8003cb0:	20000550 	.word	0x20000550
 8003cb4:	2000054a 	.word	0x2000054a
 8003cb8:	20000564 	.word	0x20000564
 8003cbc:	2000054d 	.word	0x2000054d

08003cc0 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <BSP_TS_Get_GestureId+0x90>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f107 0208 	add.w	r2, r7, #8
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fe4c 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b18      	cmp	r3, #24
 8003ce6:	d01b      	beq.n	8003d20 <BSP_TS_Get_GestureId+0x60>
 8003ce8:	2b18      	cmp	r3, #24
 8003cea:	d806      	bhi.n	8003cfa <BSP_TS_Get_GestureId+0x3a>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d00f      	beq.n	8003d10 <BSP_TS_Get_GestureId+0x50>
 8003cf0:	2b14      	cmp	r3, #20
 8003cf2:	d011      	beq.n	8003d18 <BSP_TS_Get_GestureId+0x58>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <BSP_TS_Get_GestureId+0x48>
 8003cf8:	e022      	b.n	8003d40 <BSP_TS_Get_GestureId+0x80>
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d018      	beq.n	8003d30 <BSP_TS_Get_GestureId+0x70>
 8003cfe:	2b49      	cmp	r3, #73	; 0x49
 8003d00:	d01a      	beq.n	8003d38 <BSP_TS_Get_GestureId+0x78>
 8003d02:	2b1c      	cmp	r3, #28
 8003d04:	d010      	beq.n	8003d28 <BSP_TS_Get_GestureId+0x68>
 8003d06:	e01b      	b.n	8003d40 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d0e:	e01a      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d16:	e016      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d1e:	e012      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d26:	e00e      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d2e:	e00a      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2205      	movs	r2, #5
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d36:	e006      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003d3e:	e002      	b.n	8003d46 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000054d 	.word	0x2000054d

08003d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_MspInit+0x4c>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	210f      	movs	r1, #15
 8003d8e:	f06f 0001 	mvn.w	r0, #1
 8003d92:	f001 faff 	bl	8005394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	; 0x30
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_ADC_MspInit+0xc8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d124      	bne.n	8003e10 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e02:	f107 031c 	add.w	r3, r7, #28
 8003e06:	4619      	mov	r1, r3
 8003e08:	481a      	ldr	r0, [pc, #104]	; (8003e74 <HAL_ADC_MspInit+0xd0>)
 8003e0a:	f002 f825 	bl	8005e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003e0e:	e029      	b.n	8003e64 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_ADC_MspInit+0xd4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d124      	bne.n	8003e64 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e24:	6453      	str	r3, [r2, #68]	; 0x44
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003e38:	f043 0320 	orr.w	r3, r3, #32
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_ADC_MspInit+0xcc>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003e4a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e50:	2303      	movs	r3, #3
 8003e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4807      	ldr	r0, [pc, #28]	; (8003e7c <HAL_ADC_MspInit+0xd8>)
 8003e60:	f001 fffa 	bl	8005e58 <HAL_GPIO_Init>
}
 8003e64:	bf00      	nop
 8003e66:	3730      	adds	r7, #48	; 0x30
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40012000 	.word	0x40012000
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40020000 	.word	0x40020000
 8003e78:	40012200 	.word	0x40012200
 8003e7c:	40021400 	.word	0x40021400

08003e80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_DAC_MspInit+0x84>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12b      	bne.n	8003efa <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_DAC_MspInit+0x88>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_DAC_MspInit+0x88>)
 8003ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <HAL_DAC_MspInit+0x88>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_DAC_MspInit+0x88>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_DAC_MspInit+0x88>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_DAC_MspInit+0x88>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ede:	f107 0314 	add.w	r3, r7, #20
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4809      	ldr	r0, [pc, #36]	; (8003f0c <HAL_DAC_MspInit+0x8c>)
 8003ee6:	f001 ffb7 	bl	8005e58 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2100      	movs	r1, #0
 8003eee:	2036      	movs	r0, #54	; 0x36
 8003ef0:	f001 fa50 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ef4:	2036      	movs	r0, #54	; 0x36
 8003ef6:	f001 fa69 	bl	80053cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003efa:	bf00      	nop
 8003efc:	3728      	adds	r7, #40	; 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40007400 	.word	0x40007400
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40020000 	.word	0x40020000

08003f10 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <HAL_DMA2D_MspInit+0x38>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10b      	bne.n	8003f3a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_DMA2D_MspInit+0x3c>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_DMA2D_MspInit+0x3c>)
 8003f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_DMA2D_MspInit+0x3c>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	4002b000 	.word	0x4002b000
 8003f4c:	40023800 	.word	0x40023800

08003f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	; 0x30
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <HAL_I2C_MspInit+0xdc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d129      	bne.n	8003fc6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f90:	2312      	movs	r3, #18
 8003f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f94:	2301      	movs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4823      	ldr	r0, [pc, #140]	; (8004034 <HAL_I2C_MspInit+0xe4>)
 8003fa8:	f001 ff56 	bl	8005e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fc4:	e02d      	b.n	8004022 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_I2C_MspInit+0xe8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d128      	bne.n	8004022 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fda:	6313      	str	r3, [r2, #48]	; 0x30
 8003fdc:	4b14      	ldr	r3, [pc, #80]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003fe8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fee:	2312      	movs	r3, #18
 8003ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ffe:	f107 031c 	add.w	r3, r7, #28
 8004002:	4619      	mov	r1, r3
 8004004:	480d      	ldr	r0, [pc, #52]	; (800403c <HAL_I2C_MspInit+0xec>)
 8004006:	f001 ff27 	bl	8005e58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8004010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_I2C_MspInit+0xe0>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	3730      	adds	r7, #48	; 0x30
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40005400 	.word	0x40005400
 8004030:	40023800 	.word	0x40023800
 8004034:	40020400 	.word	0x40020400
 8004038:	40005c00 	.word	0x40005c00
 800403c:	40021c00 	.word	0x40021c00

08004040 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_I2C_MspDeInit+0x64>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d110      	bne.n	8004074 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HAL_I2C_MspDeInit+0x68>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <HAL_I2C_MspDeInit+0x68>)
 8004058:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800405e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004062:	4812      	ldr	r0, [pc, #72]	; (80040ac <HAL_I2C_MspDeInit+0x6c>)
 8004064:	f002 f8a2 	bl	80061ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8004068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800406c:	480f      	ldr	r0, [pc, #60]	; (80040ac <HAL_I2C_MspDeInit+0x6c>)
 800406e:	f002 f89d 	bl	80061ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004072:	e013      	b.n	800409c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <HAL_I2C_MspDeInit+0x70>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10e      	bne.n	800409c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_I2C_MspDeInit+0x68>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_I2C_MspDeInit+0x68>)
 8004084:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	4809      	ldr	r0, [pc, #36]	; (80040b4 <HAL_I2C_MspDeInit+0x74>)
 800408e:	f002 f88d 	bl	80061ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004096:	4807      	ldr	r0, [pc, #28]	; (80040b4 <HAL_I2C_MspDeInit+0x74>)
 8004098:	f002 f888 	bl	80061ac <HAL_GPIO_DeInit>
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40005400 	.word	0x40005400
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40020400 	.word	0x40020400
 80040b0:	40005c00 	.word	0x40005c00
 80040b4:	40021c00 	.word	0x40021c00

080040b8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a55      	ldr	r2, [pc, #340]	; (800422c <HAL_LTDC_MspInit+0x174>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	f040 80a3 	bne.w	8004222 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80040dc:	4b54      	ldr	r3, [pc, #336]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 80040de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e0:	4a53      	ldr	r2, [pc, #332]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 80040e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040e6:	6453      	str	r3, [r2, #68]	; 0x44
 80040e8:	4b51      	ldr	r3, [pc, #324]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040f4:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	4a4d      	ldr	r2, [pc, #308]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 80040fa:	f043 0310 	orr.w	r3, r3, #16
 80040fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004100:	4b4b      	ldr	r3, [pc, #300]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	61fb      	str	r3, [r7, #28]
 800410a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800410c:	4b48      	ldr	r3, [pc, #288]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	4a47      	ldr	r2, [pc, #284]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004116:	6313      	str	r3, [r2, #48]	; 0x30
 8004118:	4b45      	ldr	r3, [pc, #276]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004124:	4b42      	ldr	r3, [pc, #264]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	4a41      	ldr	r2, [pc, #260]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 800412a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800412e:	6313      	str	r3, [r2, #48]	; 0x30
 8004130:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800413c:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004146:	6313      	str	r3, [r2, #48]	; 0x30
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	4a35      	ldr	r2, [pc, #212]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6313      	str	r3, [r2, #48]	; 0x30
 8004160:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_LTDC_MspInit+0x178>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800416c:	2310      	movs	r3, #16
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004178:	2300      	movs	r3, #0
 800417a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800417c:	230e      	movs	r3, #14
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	4619      	mov	r1, r3
 8004186:	482b      	ldr	r0, [pc, #172]	; (8004234 <HAL_LTDC_MspInit+0x17c>)
 8004188:	f001 fe66 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800418c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419a:	2300      	movs	r3, #0
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800419e:	230e      	movs	r3, #14
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80041a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a6:	4619      	mov	r1, r3
 80041a8:	4823      	ldr	r0, [pc, #140]	; (8004238 <HAL_LTDC_MspInit+0x180>)
 80041aa:	f001 fe55 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80041ae:	23f7      	movs	r3, #247	; 0xf7
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ba:	2300      	movs	r3, #0
 80041bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80041be:	230e      	movs	r3, #14
 80041c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80041c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c6:	4619      	mov	r1, r3
 80041c8:	481c      	ldr	r0, [pc, #112]	; (800423c <HAL_LTDC_MspInit+0x184>)
 80041ca:	f001 fe45 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80041ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041dc:	2300      	movs	r3, #0
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80041e0:	2309      	movs	r3, #9
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80041e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e8:	4619      	mov	r1, r3
 80041ea:	4815      	ldr	r0, [pc, #84]	; (8004240 <HAL_LTDC_MspInit+0x188>)
 80041ec:	f001 fe34 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80041f0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f6:	2302      	movs	r3, #2
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fe:	2300      	movs	r3, #0
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004202:	230e      	movs	r3, #14
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420a:	4619      	mov	r1, r3
 800420c:	480d      	ldr	r0, [pc, #52]	; (8004244 <HAL_LTDC_MspInit+0x18c>)
 800420e:	f001 fe23 	bl	8005e58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004212:	2200      	movs	r2, #0
 8004214:	2105      	movs	r1, #5
 8004216:	2058      	movs	r0, #88	; 0x58
 8004218:	f001 f8bc 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800421c:	2058      	movs	r0, #88	; 0x58
 800421e:	f001 f8d5 	bl	80053cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004222:	bf00      	nop
 8004224:	3738      	adds	r7, #56	; 0x38
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40016800 	.word	0x40016800
 8004230:	40023800 	.word	0x40023800
 8004234:	40021000 	.word	0x40021000
 8004238:	40022400 	.word	0x40022400
 800423c:	40022800 	.word	0x40022800
 8004240:	40021800 	.word	0x40021800
 8004244:	40022000 	.word	0x40022000

08004248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a07      	ldr	r2, [pc, #28]	; (8004274 <HAL_RTC_MspInit+0x2c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d105      	bne.n	8004266 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_RTC_MspInit+0x30>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a06      	ldr	r2, [pc, #24]	; (8004278 <HAL_RTC_MspInit+0x30>)
 8004260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40002800 	.word	0x40002800
 8004278:	40023800 	.word	0x40023800

0800427c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2d      	ldr	r2, [pc, #180]	; (8004350 <HAL_SPI_MspInit+0xd4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d154      	bne.n	8004348 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800429e:	4b2d      	ldr	r3, [pc, #180]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	4a26      	ldr	r2, [pc, #152]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6313      	str	r3, [r2, #48]	; 0x30
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ce:	4b21      	ldr	r3, [pc, #132]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6313      	str	r3, [r2, #48]	; 0x30
 80042da:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <HAL_SPI_MspInit+0xd8>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80042e6:	2302      	movs	r3, #2
 80042e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ea:	2302      	movs	r3, #2
 80042ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042f6:	2305      	movs	r3, #5
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80042fa:	f107 0314 	add.w	r3, r7, #20
 80042fe:	4619      	mov	r1, r3
 8004300:	4815      	ldr	r0, [pc, #84]	; (8004358 <HAL_SPI_MspInit+0xdc>)
 8004302:	f001 fda9 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004306:	2301      	movs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004312:	2303      	movs	r3, #3
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004316:	2305      	movs	r3, #5
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	480d      	ldr	r0, [pc, #52]	; (8004358 <HAL_SPI_MspInit+0xdc>)
 8004322:	f001 fd99 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004326:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800432a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004334:	2303      	movs	r3, #3
 8004336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004338:	2305      	movs	r3, #5
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4619      	mov	r1, r3
 8004342:	4806      	ldr	r0, [pc, #24]	; (800435c <HAL_SPI_MspInit+0xe0>)
 8004344:	f001 fd88 	bl	8005e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004348:	bf00      	nop
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40003800 	.word	0x40003800
 8004354:	40023800 	.word	0x40023800
 8004358:	40022000 	.word	0x40022000
 800435c:	40020400 	.word	0x40020400

08004360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004360:	b480      	push	{r7}
 8004362:	b089      	sub	sp, #36	; 0x24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <HAL_TIM_Base_MspInit+0xc8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004372:	4b2e      	ldr	r3, [pc, #184]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	4a2d      	ldr	r2, [pc, #180]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6453      	str	r3, [r2, #68]	; 0x44
 800437e:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800438a:	e046      	b.n	800441a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d10c      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	4b22      	ldr	r3, [pc, #136]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	69bb      	ldr	r3, [r7, #24]
}
 80043ae:	e034      	b.n	800441a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <HAL_TIM_Base_MspInit+0xd0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ba:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	6413      	str	r3, [r2, #64]	; 0x40
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
}
 80043d2:	e022      	b.n	800441a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a16      	ldr	r2, [pc, #88]	; (8004434 <HAL_TIM_Base_MspInit+0xd4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10c      	bne.n	80043f8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
}
 80043f6:	e010      	b.n	800441a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <HAL_TIM_Base_MspInit+0xd8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10b      	bne.n	800441a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	4a09      	ldr	r2, [pc, #36]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6453      	str	r3, [r2, #68]	; 0x44
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <HAL_TIM_Base_MspInit+0xcc>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40023800 	.word	0x40023800
 8004430:	40000400 	.word	0x40000400
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400

0800443c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <HAL_TIM_MspPostInit+0xa8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d11c      	bne.n	8004498 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_TIM_MspPostInit+0xac>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_TIM_MspPostInit+0xac>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <HAL_TIM_MspPostInit+0xac>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004476:	2310      	movs	r3, #16
 8004478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004486:	2302      	movs	r3, #2
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	4619      	mov	r1, r3
 8004490:	4816      	ldr	r0, [pc, #88]	; (80044ec <HAL_TIM_MspPostInit+0xb0>)
 8004492:	f001 fce1 	bl	8005e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004496:	e020      	b.n	80044da <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <HAL_TIM_MspPostInit+0xb4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d11b      	bne.n	80044da <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_TIM_MspPostInit+0xac>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <HAL_TIM_MspPostInit+0xac>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_TIM_MspPostInit+0xac>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044ba:	2304      	movs	r3, #4
 80044bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80044ca:	2303      	movs	r3, #3
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044ce:	f107 0314 	add.w	r3, r7, #20
 80044d2:	4619      	mov	r1, r3
 80044d4:	4807      	ldr	r0, [pc, #28]	; (80044f4 <HAL_TIM_MspPostInit+0xb8>)
 80044d6:	f001 fcbf 	bl	8005e58 <HAL_GPIO_Init>
}
 80044da:	bf00      	nop
 80044dc:	3728      	adds	r7, #40	; 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020400 	.word	0x40020400
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40022000 	.word	0x40022000

080044f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08e      	sub	sp, #56	; 0x38
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a57      	ldr	r2, [pc, #348]	; (8004674 <HAL_UART_MspInit+0x17c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d128      	bne.n	800456c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800451a:	4b57      	ldr	r3, [pc, #348]	; (8004678 <HAL_UART_MspInit+0x180>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	4a56      	ldr	r2, [pc, #344]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004524:	6413      	str	r3, [r2, #64]	; 0x40
 8004526:	4b54      	ldr	r3, [pc, #336]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004532:	4b51      	ldr	r3, [pc, #324]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	4a50      	ldr	r2, [pc, #320]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004538:	f043 0320 	orr.w	r3, r3, #32
 800453c:	6313      	str	r3, [r2, #48]	; 0x30
 800453e:	4b4e      	ldr	r3, [pc, #312]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800454a:	23c0      	movs	r3, #192	; 0xc0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800455a:	2308      	movs	r3, #8
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800455e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004562:	4619      	mov	r1, r3
 8004564:	4845      	ldr	r0, [pc, #276]	; (800467c <HAL_UART_MspInit+0x184>)
 8004566:	f001 fc77 	bl	8005e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800456a:	e07f      	b.n	800466c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a43      	ldr	r2, [pc, #268]	; (8004680 <HAL_UART_MspInit+0x188>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d14d      	bne.n	8004612 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004576:	4b40      	ldr	r3, [pc, #256]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <HAL_UART_MspInit+0x180>)
 800457c:	f043 0310 	orr.w	r3, r3, #16
 8004580:	6453      	str	r3, [r2, #68]	; 0x44
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458e:	4b3a      	ldr	r3, [pc, #232]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a39      	ldr	r2, [pc, #228]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_UART_MspInit+0x180>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a6:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_UART_MspInit+0x180>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a33      	ldr	r2, [pc, #204]	; (8004678 <HAL_UART_MspInit+0x180>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_UART_MspInit+0x180>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80045be:	2380      	movs	r3, #128	; 0x80
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	2302      	movs	r3, #2
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ca:	2300      	movs	r3, #0
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045ce:	2307      	movs	r3, #7
 80045d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80045d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d6:	4619      	mov	r1, r3
 80045d8:	482a      	ldr	r0, [pc, #168]	; (8004684 <HAL_UART_MspInit+0x18c>)
 80045da:	f001 fc3d 	bl	8005e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80045de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ec:	2300      	movs	r3, #0
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045f0:	2307      	movs	r3, #7
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80045f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f8:	4619      	mov	r1, r3
 80045fa:	4823      	ldr	r0, [pc, #140]	; (8004688 <HAL_UART_MspInit+0x190>)
 80045fc:	f001 fc2c 	bl	8005e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004600:	2200      	movs	r2, #0
 8004602:	2105      	movs	r1, #5
 8004604:	2025      	movs	r0, #37	; 0x25
 8004606:	f000 fec5 	bl	8005394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800460a:	2025      	movs	r0, #37	; 0x25
 800460c:	f000 fede 	bl	80053cc <HAL_NVIC_EnableIRQ>
}
 8004610:	e02c      	b.n	800466c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <HAL_UART_MspInit+0x194>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d127      	bne.n	800466c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 800461c:	4b16      	ldr	r3, [pc, #88]	; (8004678 <HAL_UART_MspInit+0x180>)
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004622:	f043 0320 	orr.w	r3, r3, #32
 8004626:	6453      	str	r3, [r2, #68]	; 0x44
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_UART_MspInit+0x180>)
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004634:	4b10      	ldr	r3, [pc, #64]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_UART_MspInit+0x180>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	6313      	str	r3, [r2, #48]	; 0x30
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <HAL_UART_MspInit+0x180>)
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800464c:	23c0      	movs	r3, #192	; 0xc0
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004650:	2302      	movs	r3, #2
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004658:	2303      	movs	r3, #3
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800465c:	2308      	movs	r3, #8
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004664:	4619      	mov	r1, r3
 8004666:	480a      	ldr	r0, [pc, #40]	; (8004690 <HAL_UART_MspInit+0x198>)
 8004668:	f001 fbf6 	bl	8005e58 <HAL_GPIO_Init>
}
 800466c:	bf00      	nop
 800466e:	3738      	adds	r7, #56	; 0x38
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40007800 	.word	0x40007800
 8004678:	40023800 	.word	0x40023800
 800467c:	40021400 	.word	0x40021400
 8004680:	40011000 	.word	0x40011000
 8004684:	40020400 	.word	0x40020400
 8004688:	40020000 	.word	0x40020000
 800468c:	40011400 	.word	0x40011400
 8004690:	40020800 	.word	0x40020800

08004694 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800469a:	1d3b      	adds	r3, r7, #4
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80046a8:	4b3a      	ldr	r3, [pc, #232]	; (8004794 <HAL_FMC_MspInit+0x100>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d16d      	bne.n	800478c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80046b0:	4b38      	ldr	r3, [pc, #224]	; (8004794 <HAL_FMC_MspInit+0x100>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80046b6:	4b38      	ldr	r3, [pc, #224]	; (8004798 <HAL_FMC_MspInit+0x104>)
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	4a37      	ldr	r2, [pc, #220]	; (8004798 <HAL_FMC_MspInit+0x104>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6393      	str	r3, [r2, #56]	; 0x38
 80046c2:	4b35      	ldr	r3, [pc, #212]	; (8004798 <HAL_FMC_MspInit+0x104>)
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80046ce:	f64f 7383 	movw	r3, #65411	; 0xff83
 80046d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046dc:	2303      	movs	r3, #3
 80046de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046e0:	230c      	movs	r3, #12
 80046e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	482c      	ldr	r0, [pc, #176]	; (800479c <HAL_FMC_MspInit+0x108>)
 80046ea:	f001 fbb5 	bl	8005e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80046ee:	f248 1333 	movw	r3, #33075	; 0x8133
 80046f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	2302      	movs	r3, #2
 80046f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fc:	2303      	movs	r3, #3
 80046fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004700:	230c      	movs	r3, #12
 8004702:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	4619      	mov	r1, r3
 8004708:	4825      	ldr	r0, [pc, #148]	; (80047a0 <HAL_FMC_MspInit+0x10c>)
 800470a:	f001 fba5 	bl	8005e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800470e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004712:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800471c:	2303      	movs	r3, #3
 800471e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004720:	230c      	movs	r3, #12
 8004722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	4619      	mov	r1, r3
 8004728:	481e      	ldr	r0, [pc, #120]	; (80047a4 <HAL_FMC_MspInit+0x110>)
 800472a:	f001 fb95 	bl	8005e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800472e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004732:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004734:	2302      	movs	r3, #2
 8004736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473c:	2303      	movs	r3, #3
 800473e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004740:	230c      	movs	r3, #12
 8004742:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4817      	ldr	r0, [pc, #92]	; (80047a8 <HAL_FMC_MspInit+0x114>)
 800474a:	f001 fb85 	bl	8005e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800474e:	2328      	movs	r3, #40	; 0x28
 8004750:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475a:	2303      	movs	r3, #3
 800475c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800475e:	230c      	movs	r3, #12
 8004760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4811      	ldr	r0, [pc, #68]	; (80047ac <HAL_FMC_MspInit+0x118>)
 8004768:	f001 fb76 	bl	8005e58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800476c:	2308      	movs	r3, #8
 800476e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800477c:	230c      	movs	r3, #12
 800477e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	4619      	mov	r1, r3
 8004784:	480a      	ldr	r0, [pc, #40]	; (80047b0 <HAL_FMC_MspInit+0x11c>)
 8004786:	f001 fb67 	bl	8005e58 <HAL_GPIO_Init>
 800478a:	e000      	b.n	800478e <HAL_FMC_MspInit+0xfa>
    return;
 800478c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000578 	.word	0x20000578
 8004798:	40023800 	.word	0x40023800
 800479c:	40021000 	.word	0x40021000
 80047a0:	40021800 	.word	0x40021800
 80047a4:	40020c00 	.word	0x40020c00
 80047a8:	40021400 	.word	0x40021400
 80047ac:	40021c00 	.word	0x40021c00
 80047b0:	40020800 	.word	0x40020800

080047b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80047bc:	f7ff ff6a 	bl	8004694 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80047d8:	2200      	movs	r2, #0
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	2036      	movs	r0, #54	; 0x36
 80047de:	f000 fdd9 	bl	8005394 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047e2:	2036      	movs	r0, #54	; 0x36
 80047e4:	f000 fdf2 	bl	80053cc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80047e8:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <HAL_InitTick+0xa0>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_InitTick+0xa0>)
 80047ee:	f043 0310 	orr.w	r3, r3, #16
 80047f2:	6413      	str	r3, [r2, #64]	; 0x40
 80047f4:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_InitTick+0xa0>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004800:	f107 0210 	add.w	r2, r7, #16
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f003 fc08 	bl	8008020 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004810:	f003 fbde 	bl	8007fd0 <HAL_RCC_GetPCLK1Freq>
 8004814:	4603      	mov	r3, r0
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	4a13      	ldr	r2, [pc, #76]	; (800486c <HAL_InitTick+0xa4>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0c9b      	lsrs	r3, r3, #18
 8004824:	3b01      	subs	r3, #1
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_InitTick+0xa8>)
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <HAL_InitTick+0xac>)
 800482c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800482e:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_InitTick+0xa8>)
 8004830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004834:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004836:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <HAL_InitTick+0xa8>)
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <HAL_InitTick+0xa8>)
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_InitTick+0xa8>)
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004848:	4809      	ldr	r0, [pc, #36]	; (8004870 <HAL_InitTick+0xa8>)
 800484a:	f004 fcdc 	bl	8009206 <HAL_TIM_Base_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004854:	4806      	ldr	r0, [pc, #24]	; (8004870 <HAL_InitTick+0xa8>)
 8004856:	f004 fd01 	bl	800925c <HAL_TIM_Base_Start_IT>
 800485a:	4603      	mov	r3, r0
 800485c:	e000      	b.n	8004860 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
}
 8004860:	4618      	mov	r0, r3
 8004862:	3730      	adds	r7, #48	; 0x30
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	431bde83 	.word	0x431bde83
 8004870:	20008d6c 	.word	0x20008d6c
 8004874:	40001000 	.word	0x40001000

08004878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800487c:	e7fe      	b.n	800487c <NMI_Handler+0x4>

0800487e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004882:	e7fe      	b.n	8004882 <HardFault_Handler+0x4>

08004884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004888:	e7fe      	b.n	8004888 <MemManage_Handler+0x4>

0800488a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488e:	e7fe      	b.n	800488e <BusFault_Handler+0x4>

08004890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004894:	e7fe      	b.n	8004894 <UsageFault_Handler+0x4>

08004896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <USART1_IRQHandler+0x10>)
 80048aa:	f005 ff5d 	bl	800a768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20008a58 	.word	0x20008a58

080048b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80048bc:	4803      	ldr	r0, [pc, #12]	; (80048cc <TIM6_DAC_IRQHandler+0x14>)
 80048be:	f000 fdb5 	bl	800542c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80048c2:	4803      	ldr	r0, [pc, #12]	; (80048d0 <TIM6_DAC_IRQHandler+0x18>)
 80048c4:	f004 fd29 	bl	800931a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20008ad8 	.word	0x20008ad8
 80048d0:	20008d6c 	.word	0x20008d6c

080048d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80048d8:	4802      	ldr	r0, [pc, #8]	; (80048e4 <LTDC_IRQHandler+0x10>)
 80048da:	f002 fc23 	bl	8007124 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20008920 	.word	0x20008920

080048e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <_sbrk+0x5c>)
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <_sbrk+0x60>)
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <_sbrk+0x64>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <_sbrk+0x64>)
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <_sbrk+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <_sbrk+0x64>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d207      	bcs.n	8004928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004918:	f009 fb24 	bl	800df64 <__errno>
 800491c:	4602      	mov	r2, r0
 800491e:	230c      	movs	r3, #12
 8004920:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004922:	f04f 33ff 	mov.w	r3, #4294967295
 8004926:	e009      	b.n	800493c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <_sbrk+0x64>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <_sbrk+0x64>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	4a05      	ldr	r2, [pc, #20]	; (800494c <_sbrk+0x64>)
 8004938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20050000 	.word	0x20050000
 8004948:	00000400 	.word	0x00000400
 800494c:	2000057c 	.word	0x2000057c
 8004950:	20008db8 	.word	0x20008db8

08004954 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <SystemInit+0x28>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	4a07      	ldr	r2, [pc, #28]	; (800497c <SystemInit+0x28>)
 8004960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <SystemInit+0x28>)
 800496a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800496e:	609a      	str	r2, [r3, #8]
#endif
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004986:	e003      	b.n	8004990 <LoopCopyDataInit>

08004988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800498a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800498c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800498e:	3104      	adds	r1, #4

08004990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004990:	480b      	ldr	r0, [pc, #44]	; (80049c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004998:	d3f6      	bcc.n	8004988 <CopyDataInit>
  ldr  r2, =_sbss
 800499a:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800499c:	e002      	b.n	80049a4 <LoopFillZerobss>

0800499e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800499e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049a0:	f842 3b04 	str.w	r3, [r2], #4

080049a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049a8:	d3f9      	bcc.n	800499e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049aa:	f7ff ffd3 	bl	8004954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049ae:	f009 fadf 	bl	800df70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049b2:	f7fc f8d3 	bl	8000b5c <main>
  bx  lr    
 80049b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049b8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80049bc:	080108b4 	.word	0x080108b4
  ldr  r0, =_sdata
 80049c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80049c4:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80049c8:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80049cc:	20008db4 	.word	0x20008db4

080049d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049d0:	e7fe      	b.n	80049d0 <ADC_IRQHandler>

080049d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049d6:	2003      	movs	r0, #3
 80049d8:	f000 fcd1 	bl	800537e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7ff fef3 	bl	80047c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80049e2:	f7ff f9b7 	bl	8003d54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_IncTick+0x20>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_IncTick+0x24>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <HAL_IncTick+0x24>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000004c 	.word	0x2000004c
 8004a10:	20008dac 	.word	0x20008dac

08004a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return uwTick;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_GetTick+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20008dac 	.word	0x20008dac

08004a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7ff ffee 	bl	8004a14 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d005      	beq.n	8004a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_Delay+0x40>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a52:	bf00      	nop
 8004a54:	f7ff ffde 	bl	8004a14 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d8f7      	bhi.n	8004a54 <HAL_Delay+0x28>
  {
  }
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000004c 	.word	0x2000004c

08004a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e031      	b.n	8004aea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff f988 	bl	8003da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <HAL_ADC_Init+0x84>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	f043 0202 	orr.w	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fab6 	bl	8005030 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8004ada:	e001      	b.n	8004ae0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	ffffeefd 	.word	0xffffeefd

08004af8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_Start+0x1a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0a0      	b.n	8004c54 <HAL_ADC_Start+0x15c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d018      	beq.n	8004b5a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b38:	4b49      	ldr	r3, [pc, #292]	; (8004c60 <HAL_ADC_Start+0x168>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a49      	ldr	r2, [pc, #292]	; (8004c64 <HAL_ADC_Start+0x16c>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	0c9a      	lsrs	r2, r3, #18
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004b4c:	e002      	b.n	8004b54 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f9      	bne.n	8004b4e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d174      	bne.n	8004c52 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <HAL_ADC_Start+0x170>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d106      	bne.n	8004bb2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	f023 0206 	bic.w	r2, r3, #6
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	645a      	str	r2, [r3, #68]	; 0x44
 8004bb0:	e002      	b.n	8004bb8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004bca:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_ADC_Start+0x174>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d136      	bne.n	8004c52 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	e02d      	b.n	8004c52 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_ADC_Start+0x178>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d10e      	bne.n	8004c1e <HAL_ADC_Start+0x126>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c1c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_ADC_Start+0x174>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d113      	bne.n	8004c52 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <HAL_ADC_Start+0x17c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d10e      	bne.n	8004c52 <HAL_ADC_Start+0x15a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c50:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	20000044 	.word	0x20000044
 8004c64:	431bde83 	.word	0x431bde83
 8004c68:	fffff8fe 	.word	0xfffff8fe
 8004c6c:	40012300 	.word	0x40012300
 8004c70:	40012000 	.word	0x40012000
 8004c74:	40012200 	.word	0x40012200

08004c78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c94:	d113      	bne.n	8004cbe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca4:	d10b      	bne.n	8004cbe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f043 0220 	orr.w	r2, r3, #32
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e05c      	b.n	8004d78 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004cbe:	f7ff fea9 	bl	8004a14 <HAL_GetTick>
 8004cc2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cc4:	e01a      	b.n	8004cfc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d016      	beq.n	8004cfc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_ADC_PollForConversion+0x6c>
 8004cd4:	f7ff fe9e 	bl	8004a14 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d20b      	bcs.n	8004cfc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e03d      	b.n	8004d78 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d1dd      	bne.n	8004cc6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0212 	mvn.w	r2, #18
 8004d12:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d123      	bne.n	8004d76 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11f      	bne.n	8004d76 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d006      	beq.n	8004d52 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d111      	bne.n	8004d76 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x1c>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e12a      	b.n	800500e <HAL_ADC_ConfigChannel+0x272>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b09      	cmp	r3, #9
 8004dc6:	d93a      	bls.n	8004e3e <HAL_ADC_ConfigChannel+0xa2>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd0:	d035      	beq.n	8004e3e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68d9      	ldr	r1, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	3b1e      	subs	r3, #30
 8004de8:	2207      	movs	r2, #7
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43da      	mvns	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	400a      	ands	r2, r1
 8004df6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a87      	ldr	r2, [pc, #540]	; (800501c <HAL_ADC_ConfigChannel+0x280>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10a      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68d9      	ldr	r1, [r3, #12]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	061a      	lsls	r2, r3, #24
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e16:	e035      	b.n	8004e84 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68d9      	ldr	r1, [r3, #12]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	4618      	mov	r0, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4403      	add	r3, r0
 8004e30:	3b1e      	subs	r3, #30
 8004e32:	409a      	lsls	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e3c:	e022      	b.n	8004e84 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6919      	ldr	r1, [r3, #16]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4413      	add	r3, r2
 8004e52:	2207      	movs	r2, #7
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	400a      	ands	r2, r1
 8004e60:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6919      	ldr	r1, [r3, #16]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	4618      	mov	r0, r3
 8004e74:	4603      	mov	r3, r0
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4403      	add	r3, r0
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d824      	bhi.n	8004ed6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3b05      	subs	r3, #5
 8004e9e:	221f      	movs	r2, #31
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	400a      	ands	r2, r1
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	4618      	mov	r0, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3b05      	subs	r3, #5
 8004ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed4:	e04c      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b0c      	cmp	r3, #12
 8004edc:	d824      	bhi.n	8004f28 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	3b23      	subs	r3, #35	; 0x23
 8004ef0:	221f      	movs	r2, #31
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43da      	mvns	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	400a      	ands	r2, r1
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	3b23      	subs	r3, #35	; 0x23
 8004f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
 8004f26:	e023      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	3b41      	subs	r3, #65	; 0x41
 8004f3a:	221f      	movs	r2, #31
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43da      	mvns	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	400a      	ands	r2, r1
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4618      	mov	r0, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	3b41      	subs	r3, #65	; 0x41
 8004f64:	fa00 f203 	lsl.w	r2, r0, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <HAL_ADC_ConfigChannel+0x284>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10a      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1f4>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f82:	d105      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004f84:	4b27      	ldr	r3, [pc, #156]	; (8005024 <HAL_ADC_ConfigChannel+0x288>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a26      	ldr	r2, [pc, #152]	; (8005024 <HAL_ADC_ConfigChannel+0x288>)
 8004f8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004f8e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_ADC_ConfigChannel+0x284>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d109      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x212>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b12      	cmp	r3, #18
 8004fa0:	d105      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004fa2:	4b20      	ldr	r3, [pc, #128]	; (8005024 <HAL_ADC_ConfigChannel+0x288>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <HAL_ADC_ConfigChannel+0x288>)
 8004fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <HAL_ADC_ConfigChannel+0x284>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d125      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x268>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a17      	ldr	r2, [pc, #92]	; (800501c <HAL_ADC_ConfigChannel+0x280>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <HAL_ADC_ConfigChannel+0x22e>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b11      	cmp	r3, #17
 8004fc8:	d11c      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004fca:	4b16      	ldr	r3, [pc, #88]	; (8005024 <HAL_ADC_ConfigChannel+0x288>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <HAL_ADC_ConfigChannel+0x288>)
 8004fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fd4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a10      	ldr	r2, [pc, #64]	; (800501c <HAL_ADC_ConfigChannel+0x280>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d111      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <HAL_ADC_ConfigChannel+0x28c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a11      	ldr	r2, [pc, #68]	; (800502c <HAL_ADC_ConfigChannel+0x290>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	0c9a      	lsrs	r2, r3, #18
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004ff6:	e002      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f9      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	10000012 	.word	0x10000012
 8005020:	40012000 	.word	0x40012000
 8005024:	40012300 	.word	0x40012300
 8005028:	20000044 	.word	0x20000044
 800502c:	431bde83 	.word	0x431bde83

08005030 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005038:	4b78      	ldr	r3, [pc, #480]	; (800521c <ADC_Init+0x1ec>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a77      	ldr	r2, [pc, #476]	; (800521c <ADC_Init+0x1ec>)
 800503e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005042:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005044:	4b75      	ldr	r3, [pc, #468]	; (800521c <ADC_Init+0x1ec>)
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4973      	ldr	r1, [pc, #460]	; (800521c <ADC_Init+0x1ec>)
 800504e:	4313      	orrs	r3, r2
 8005050:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	4a58      	ldr	r2, [pc, #352]	; (8005220 <ADC_Init+0x1f0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6899      	ldr	r1, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	e00f      	b.n	800512a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005128:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0202 	bic.w	r2, r2, #2
 8005138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	005a      	lsls	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01b      	beq.n	8005190 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	3b01      	subs	r3, #1
 8005184:	035a      	lsls	r2, r3, #13
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	e007      	b.n	80051a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	051a      	lsls	r2, r3, #20
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051e2:	025a      	lsls	r2, r3, #9
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6899      	ldr	r1, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	029a      	lsls	r2, r3, #10
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40012300 	.word	0x40012300
 8005220:	0f000001 	.word	0x0f000001

08005224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <__NVIC_SetPriorityGrouping+0x40>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005240:	4013      	ands	r3, r2
 8005242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <__NVIC_SetPriorityGrouping+0x44>)
 800524e:	4313      	orrs	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005252:	4a04      	ldr	r2, [pc, #16]	; (8005264 <__NVIC_SetPriorityGrouping+0x40>)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	60d3      	str	r3, [r2, #12]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000ed00 	.word	0xe000ed00
 8005268:	05fa0000 	.word	0x05fa0000

0800526c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005270:	4b04      	ldr	r3, [pc, #16]	; (8005284 <__NVIC_GetPriorityGrouping+0x18>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	f003 0307 	and.w	r3, r3, #7
}
 800527a:	4618      	mov	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000ed00 	.word	0xe000ed00

08005288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	2b00      	cmp	r3, #0
 8005298:	db0b      	blt.n	80052b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	f003 021f 	and.w	r2, r3, #31
 80052a0:	4907      	ldr	r1, [pc, #28]	; (80052c0 <__NVIC_EnableIRQ+0x38>)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2001      	movs	r0, #1
 80052aa:	fa00 f202 	lsl.w	r2, r0, r2
 80052ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e100 	.word	0xe000e100

080052c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	db0a      	blt.n	80052ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	490c      	ldr	r1, [pc, #48]	; (8005310 <__NVIC_SetPriority+0x4c>)
 80052de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e2:	0112      	lsls	r2, r2, #4
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	440b      	add	r3, r1
 80052e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052ec:	e00a      	b.n	8005304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4908      	ldr	r1, [pc, #32]	; (8005314 <__NVIC_SetPriority+0x50>)
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3b04      	subs	r3, #4
 80052fc:	0112      	lsls	r2, r2, #4
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	440b      	add	r3, r1
 8005302:	761a      	strb	r2, [r3, #24]
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000e100 	.word	0xe000e100
 8005314:	e000ed00 	.word	0xe000ed00

08005318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	; 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f1c3 0307 	rsb	r3, r3, #7
 8005332:	2b04      	cmp	r3, #4
 8005334:	bf28      	it	cs
 8005336:	2304      	movcs	r3, #4
 8005338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3304      	adds	r3, #4
 800533e:	2b06      	cmp	r3, #6
 8005340:	d902      	bls.n	8005348 <NVIC_EncodePriority+0x30>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3b03      	subs	r3, #3
 8005346:	e000      	b.n	800534a <NVIC_EncodePriority+0x32>
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43da      	mvns	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	401a      	ands	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005360:	f04f 31ff 	mov.w	r1, #4294967295
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43d9      	mvns	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005370:	4313      	orrs	r3, r2
         );
}
 8005372:	4618      	mov	r0, r3
 8005374:	3724      	adds	r7, #36	; 0x24
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ff4c 	bl	8005224 <__NVIC_SetPriorityGrouping>
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053a6:	f7ff ff61 	bl	800526c <__NVIC_GetPriorityGrouping>
 80053aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f7ff ffb1 	bl	8005318 <NVIC_EncodePriority>
 80053b6:	4602      	mov	r2, r0
 80053b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ff80 	bl	80052c4 <__NVIC_SetPriority>
}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff ff54 	bl	8005288 <__NVIC_EnableIRQ>
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e014      	b.n	8005424 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fe fd38 	bl	8003e80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d118      	bne.n	8005476 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2204      	movs	r2, #4
 8005448:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800545e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800546e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f825 	bl	80054c0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005484:	d118      	bne.n	80054b8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2204      	movs	r2, #4
 800548a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f043 0202 	orr.w	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80054a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f85b 	bl	800556e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	795b      	ldrb	r3, [r3, #5]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_DAC_ConfigChannel+0x20>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e036      	b.n	8005562 <HAL_DAC_ConfigChannel+0x8e>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2202      	movs	r2, #2
 80054fe:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005508:	f640 72fe 	movw	r2, #4094	; 0xffe
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4013      	ands	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	22c0      	movs	r2, #192	; 0xc0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43da      	mvns	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	400a      	ands	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7ff fa40 	bl	8004a14 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e099      	b.n	80056d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c0:	e00f      	b.n	80055e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c2:	f7ff fa27 	bl	8004a14 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d908      	bls.n	80055e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2203      	movs	r2, #3
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e078      	b.n	80056d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e8      	bne.n	80055c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4b38      	ldr	r3, [pc, #224]	; (80056dc <HAL_DMA_Init+0x158>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b04      	cmp	r3, #4
 800563a:	d107      	bne.n	800564c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	4313      	orrs	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b04      	cmp	r3, #4
 8005674:	d117      	bne.n	80056a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8df 	bl	800584c <DMA_CheckFifoParam>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	; 0x40
 8005698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056a2:	2301      	movs	r3, #1
 80056a4:	e016      	b.n	80056d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f896 	bl	80057e0 <DMA_CalcBaseAndBitshift>
 80056b4:	4603      	mov	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	223f      	movs	r2, #63	; 0x3f
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	f010803f 	.word	0xf010803f

080056e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e050      	b.n	8005794 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d101      	bne.n	8005702 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	e048      	b.n	8005794 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2221      	movs	r2, #33	; 0x21
 8005740:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f84c 	bl	80057e0 <DMA_CalcBaseAndBitshift>
 8005748:	4603      	mov	r3, r0
 800574a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005750:	223f      	movs	r2, #63	; 0x3f
 8005752:	409a      	lsls	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d004      	beq.n	80057ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e00c      	b.n	80057d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2205      	movs	r2, #5
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	3b10      	subs	r3, #16
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <DMA_CalcBaseAndBitshift+0x60>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057fa:	4a12      	ldr	r2, [pc, #72]	; (8005844 <DMA_CalcBaseAndBitshift+0x64>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b03      	cmp	r3, #3
 800580c:	d908      	bls.n	8005820 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <DMA_CalcBaseAndBitshift+0x68>)
 8005816:	4013      	ands	r3, r2
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	659a      	str	r2, [r3, #88]	; 0x58
 800581e:	e006      	b.n	800582e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <DMA_CalcBaseAndBitshift+0x68>)
 8005828:	4013      	ands	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	aaaaaaab 	.word	0xaaaaaaab
 8005844:	08010868 	.word	0x08010868
 8005848:	fffffc00 	.word	0xfffffc00

0800584c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11f      	bne.n	80058a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d855      	bhi.n	8005918 <DMA_CheckFifoParam+0xcc>
 800586c:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <DMA_CheckFifoParam+0x28>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005885 	.word	0x08005885
 8005878:	08005897 	.word	0x08005897
 800587c:	08005885 	.word	0x08005885
 8005880:	08005919 	.word	0x08005919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d045      	beq.n	800591c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005894:	e042      	b.n	800591c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800589e:	d13f      	bne.n	8005920 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a4:	e03c      	b.n	8005920 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ae:	d121      	bne.n	80058f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d836      	bhi.n	8005924 <DMA_CheckFifoParam+0xd8>
 80058b6:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <DMA_CheckFifoParam+0x70>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058d3 	.word	0x080058d3
 80058c4:	080058cd 	.word	0x080058cd
 80058c8:	080058e5 	.word	0x080058e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      break;
 80058d0:	e02f      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d024      	beq.n	8005928 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e2:	e021      	b.n	8005928 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ec:	d11e      	bne.n	800592c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058f2:	e01b      	b.n	800592c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d902      	bls.n	8005900 <DMA_CheckFifoParam+0xb4>
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d003      	beq.n	8005906 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058fe:	e018      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e015      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
      break;
 8005916:	e00b      	b.n	8005930 <DMA_CheckFifoParam+0xe4>
      break;
 8005918:	bf00      	nop
 800591a:	e00a      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      break;
 800591c:	bf00      	nop
 800591e:	e008      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      break;
 8005920:	bf00      	nop
 8005922:	e006      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      break;
 8005924:	bf00      	nop
 8005926:	e004      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      break;
 8005928:	bf00      	nop
 800592a:	e002      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      break;   
 800592c:	bf00      	nop
 800592e:	e000      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
      break;
 8005930:	bf00      	nop
    }
  } 
  
  return status; 
 8005932:	7bfb      	ldrb	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e039      	b.n	80059c6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fe fad2 	bl	8003f10 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	f023 0107 	bic.w	r1, r3, #7
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_DMA2D_Init+0x90>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68d1      	ldr	r1, [r2, #12]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	ffffc000 	.word	0xffffc000

080059d4 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_DMA2D_Start+0x1c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e018      	b.n	8005a22 <HAL_DMA2D_Start+0x4e>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f988 	bl	8005d20 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b086      	sub	sp, #24
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d056      	beq.n	8005af4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005a46:	f7fe ffe5 	bl	8004a14 <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005a4c:	e04b      	b.n	8005ae6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d023      	beq.n	8005aa8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	f043 0202 	orr.w	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	f043 0201 	orr.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2221      	movs	r2, #33	; 0x21
 8005a92:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2204      	movs	r2, #4
 8005a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0a5      	b.n	8005bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d01a      	beq.n	8005ae6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005ab0:	f7fe ffb0 	bl	8004a14 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d302      	bcc.n	8005ac6 <HAL_DMA2D_PollForTransfer+0x9c>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	f043 0220 	orr.w	r2, r3, #32
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e086      	b.n	8005bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ac      	beq.n	8005a4e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d061      	beq.n	8005bda <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b16:	f7fe ff7d 	bl	8004a14 <HAL_GetTick>
 8005b1a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005b1c:	e056      	b.n	8005bcc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02e      	beq.n	8005b8e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	f043 0204 	orr.w	r2, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	f043 0202 	orr.w	r2, r3, #2
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2229      	movs	r2, #41	; 0x29
 8005b78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e032      	b.n	8005bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d01a      	beq.n	8005bcc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005b96:	f7fe ff3d 	bl	8004a14 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <HAL_DMA2D_PollForTransfer+0x182>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	f043 0220 	orr.w	r2, r3, #32
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e013      	b.n	8005bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 0310 	and.w	r3, r3, #16
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0a1      	beq.n	8005b1e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2212      	movs	r2, #18
 8005be0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_DMA2D_ConfigLayer+0x20>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e079      	b.n	8005d10 <HAL_DMA2D_ConfigLayer+0x114>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	3318      	adds	r3, #24
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005c46:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <HAL_DMA2D_ConfigLayer+0x120>)
 8005c48:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b0a      	cmp	r3, #10
 8005c50:	d003      	beq.n	8005c5a <HAL_DMA2D_ConfigLayer+0x5e>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b09      	cmp	r3, #9
 8005c58:	d107      	bne.n	8005c6a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e005      	b.n	8005c76 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	061b      	lsls	r3, r3, #24
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d120      	bne.n	8005cbe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	ea02 0103 	and.w	r1, r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b0a      	cmp	r3, #10
 8005ca4:	d003      	beq.n	8005cae <HAL_DMA2D_ConfigLayer+0xb2>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	d127      	bne.n	8005cfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28
 8005cbc:	e01f      	b.n	8005cfe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	ea02 0103 	and.w	r1, r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b0a      	cmp	r3, #10
 8005ce6:	d003      	beq.n	8005cf0 <HAL_DMA2D_ConfigLayer+0xf4>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b09      	cmp	r3, #9
 8005cee:	d106      	bne.n	8005cfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005cfc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	ff03000f 	.word	0xff03000f

08005d20 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b08b      	sub	sp, #44	; 0x2c
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	041a      	lsls	r2, r3, #16
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d58:	d174      	bne.n	8005e44 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d68:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d70:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d108      	bne.n	8005d92 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d90:	e053      	b.n	8005e3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d106      	bne.n	8005da8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	e048      	b.n	8005e3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d111      	bne.n	8005dd4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	0cdb      	lsrs	r3, r3, #19
 8005db4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	0a9b      	lsrs	r3, r3, #10
 8005dba:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	08db      	lsrs	r3, r3, #3
 8005dc0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	02db      	lsls	r3, r3, #11
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	e032      	b.n	8005e3a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d117      	bne.n	8005e0c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	0fdb      	lsrs	r3, r3, #31
 8005de0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	0cdb      	lsrs	r3, r3, #19
 8005de6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	0adb      	lsrs	r3, r3, #11
 8005dec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	03db      	lsls	r3, r3, #15
 8005e02:	4313      	orrs	r3, r2
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	e016      	b.n	8005e3a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	0f1b      	lsrs	r3, r3, #28
 8005e10:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	0d1b      	lsrs	r3, r3, #20
 8005e16:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	0b1b      	lsrs	r3, r3, #12
 8005e1c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	4313      	orrs	r3, r2
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005e42:	e003      	b.n	8005e4c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	60da      	str	r2, [r3, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	372c      	adds	r7, #44	; 0x2c
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e175      	b.n	8006164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e78:	2201      	movs	r2, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	f040 8164 	bne.w	800615e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d00b      	beq.n	8005eb6 <HAL_GPIO_Init+0x5e>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d007      	beq.n	8005eb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005eaa:	2b11      	cmp	r3, #17
 8005eac:	d003      	beq.n	8005eb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b12      	cmp	r3, #18
 8005eb4:	d130      	bne.n	8005f18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eec:	2201      	movs	r2, #1
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	f003 0201 	and.w	r2, r3, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	2203      	movs	r2, #3
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d003      	beq.n	8005f58 <HAL_GPIO_Init+0x100>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b12      	cmp	r3, #18
 8005f56:	d123      	bne.n	8005fa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	08da      	lsrs	r2, r3, #3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3208      	adds	r2, #8
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	220f      	movs	r2, #15
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	08da      	lsrs	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3208      	adds	r2, #8
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	2203      	movs	r2, #3
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 0203 	and.w	r2, r3, #3
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80be 	beq.w	800615e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe2:	4b65      	ldr	r3, [pc, #404]	; (8006178 <HAL_GPIO_Init+0x320>)
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	4a64      	ldr	r2, [pc, #400]	; (8006178 <HAL_GPIO_Init+0x320>)
 8005fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fec:	6453      	str	r3, [r2, #68]	; 0x44
 8005fee:	4b62      	ldr	r3, [pc, #392]	; (8006178 <HAL_GPIO_Init+0x320>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005ffa:	4a60      	ldr	r2, [pc, #384]	; (800617c <HAL_GPIO_Init+0x324>)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	3302      	adds	r3, #2
 8006002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006006:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	220f      	movs	r2, #15
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43db      	mvns	r3, r3
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	4013      	ands	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a57      	ldr	r2, [pc, #348]	; (8006180 <HAL_GPIO_Init+0x328>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d037      	beq.n	8006096 <HAL_GPIO_Init+0x23e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a56      	ldr	r2, [pc, #344]	; (8006184 <HAL_GPIO_Init+0x32c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d031      	beq.n	8006092 <HAL_GPIO_Init+0x23a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a55      	ldr	r2, [pc, #340]	; (8006188 <HAL_GPIO_Init+0x330>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d02b      	beq.n	800608e <HAL_GPIO_Init+0x236>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <HAL_GPIO_Init+0x334>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d025      	beq.n	800608a <HAL_GPIO_Init+0x232>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a53      	ldr	r2, [pc, #332]	; (8006190 <HAL_GPIO_Init+0x338>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d01f      	beq.n	8006086 <HAL_GPIO_Init+0x22e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a52      	ldr	r2, [pc, #328]	; (8006194 <HAL_GPIO_Init+0x33c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d019      	beq.n	8006082 <HAL_GPIO_Init+0x22a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a51      	ldr	r2, [pc, #324]	; (8006198 <HAL_GPIO_Init+0x340>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_GPIO_Init+0x226>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a50      	ldr	r2, [pc, #320]	; (800619c <HAL_GPIO_Init+0x344>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00d      	beq.n	800607a <HAL_GPIO_Init+0x222>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a4f      	ldr	r2, [pc, #316]	; (80061a0 <HAL_GPIO_Init+0x348>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <HAL_GPIO_Init+0x21e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a4e      	ldr	r2, [pc, #312]	; (80061a4 <HAL_GPIO_Init+0x34c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_GPIO_Init+0x21a>
 800606e:	2309      	movs	r3, #9
 8006070:	e012      	b.n	8006098 <HAL_GPIO_Init+0x240>
 8006072:	230a      	movs	r3, #10
 8006074:	e010      	b.n	8006098 <HAL_GPIO_Init+0x240>
 8006076:	2308      	movs	r3, #8
 8006078:	e00e      	b.n	8006098 <HAL_GPIO_Init+0x240>
 800607a:	2307      	movs	r3, #7
 800607c:	e00c      	b.n	8006098 <HAL_GPIO_Init+0x240>
 800607e:	2306      	movs	r3, #6
 8006080:	e00a      	b.n	8006098 <HAL_GPIO_Init+0x240>
 8006082:	2305      	movs	r3, #5
 8006084:	e008      	b.n	8006098 <HAL_GPIO_Init+0x240>
 8006086:	2304      	movs	r3, #4
 8006088:	e006      	b.n	8006098 <HAL_GPIO_Init+0x240>
 800608a:	2303      	movs	r3, #3
 800608c:	e004      	b.n	8006098 <HAL_GPIO_Init+0x240>
 800608e:	2302      	movs	r3, #2
 8006090:	e002      	b.n	8006098 <HAL_GPIO_Init+0x240>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <HAL_GPIO_Init+0x240>
 8006096:	2300      	movs	r3, #0
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	f002 0203 	and.w	r2, r2, #3
 800609e:	0092      	lsls	r2, r2, #2
 80060a0:	4093      	lsls	r3, r2
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80060a8:	4934      	ldr	r1, [pc, #208]	; (800617c <HAL_GPIO_Init+0x324>)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	089b      	lsrs	r3, r3, #2
 80060ae:	3302      	adds	r3, #2
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060b6:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <HAL_GPIO_Init+0x350>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	43db      	mvns	r3, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4013      	ands	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060da:	4a33      	ldr	r2, [pc, #204]	; (80061a8 <HAL_GPIO_Init+0x350>)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060e0:	4b31      	ldr	r3, [pc, #196]	; (80061a8 <HAL_GPIO_Init+0x350>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	43db      	mvns	r3, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006104:	4a28      	ldr	r2, [pc, #160]	; (80061a8 <HAL_GPIO_Init+0x350>)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800610a:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <HAL_GPIO_Init+0x350>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800612e:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_GPIO_Init+0x350>)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <HAL_GPIO_Init+0x350>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006158:	4a13      	ldr	r2, [pc, #76]	; (80061a8 <HAL_GPIO_Init+0x350>)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3301      	adds	r3, #1
 8006162:	61fb      	str	r3, [r7, #28]
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b0f      	cmp	r3, #15
 8006168:	f67f ae86 	bls.w	8005e78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800616c:	bf00      	nop
 800616e:	3724      	adds	r7, #36	; 0x24
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40023800 	.word	0x40023800
 800617c:	40013800 	.word	0x40013800
 8006180:	40020000 	.word	0x40020000
 8006184:	40020400 	.word	0x40020400
 8006188:	40020800 	.word	0x40020800
 800618c:	40020c00 	.word	0x40020c00
 8006190:	40021000 	.word	0x40021000
 8006194:	40021400 	.word	0x40021400
 8006198:	40021800 	.word	0x40021800
 800619c:	40021c00 	.word	0x40021c00
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40022400 	.word	0x40022400
 80061a8:	40013c00 	.word	0x40013c00

080061ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e0d9      	b.n	800637c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80061c8:	2201      	movs	r2, #1
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4013      	ands	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	f040 80c9 	bne.w	8006376 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80061e4:	4a6a      	ldr	r2, [pc, #424]	; (8006390 <HAL_GPIO_DeInit+0x1e4>)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	3302      	adds	r3, #2
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	220f      	movs	r2, #15
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a62      	ldr	r2, [pc, #392]	; (8006394 <HAL_GPIO_DeInit+0x1e8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d037      	beq.n	800627e <HAL_GPIO_DeInit+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a61      	ldr	r2, [pc, #388]	; (8006398 <HAL_GPIO_DeInit+0x1ec>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_GPIO_DeInit+0xce>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a60      	ldr	r2, [pc, #384]	; (800639c <HAL_GPIO_DeInit+0x1f0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d02b      	beq.n	8006276 <HAL_GPIO_DeInit+0xca>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a5f      	ldr	r2, [pc, #380]	; (80063a0 <HAL_GPIO_DeInit+0x1f4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d025      	beq.n	8006272 <HAL_GPIO_DeInit+0xc6>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a5e      	ldr	r2, [pc, #376]	; (80063a4 <HAL_GPIO_DeInit+0x1f8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01f      	beq.n	800626e <HAL_GPIO_DeInit+0xc2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a5d      	ldr	r2, [pc, #372]	; (80063a8 <HAL_GPIO_DeInit+0x1fc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d019      	beq.n	800626a <HAL_GPIO_DeInit+0xbe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a5c      	ldr	r2, [pc, #368]	; (80063ac <HAL_GPIO_DeInit+0x200>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <HAL_GPIO_DeInit+0xba>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a5b      	ldr	r2, [pc, #364]	; (80063b0 <HAL_GPIO_DeInit+0x204>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00d      	beq.n	8006262 <HAL_GPIO_DeInit+0xb6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a5a      	ldr	r2, [pc, #360]	; (80063b4 <HAL_GPIO_DeInit+0x208>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <HAL_GPIO_DeInit+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a59      	ldr	r2, [pc, #356]	; (80063b8 <HAL_GPIO_DeInit+0x20c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_GPIO_DeInit+0xae>
 8006256:	2309      	movs	r3, #9
 8006258:	e012      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800625a:	230a      	movs	r3, #10
 800625c:	e010      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800625e:	2308      	movs	r3, #8
 8006260:	e00e      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006262:	2307      	movs	r3, #7
 8006264:	e00c      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006266:	2306      	movs	r3, #6
 8006268:	e00a      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800626a:	2305      	movs	r3, #5
 800626c:	e008      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800626e:	2304      	movs	r3, #4
 8006270:	e006      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006272:	2303      	movs	r3, #3
 8006274:	e004      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006276:	2302      	movs	r3, #2
 8006278:	e002      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800627e:	2300      	movs	r3, #0
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	f002 0203 	and.w	r2, r2, #3
 8006286:	0092      	lsls	r2, r2, #2
 8006288:	4093      	lsls	r3, r2
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	d132      	bne.n	80062f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006290:	4b4a      	ldr	r3, [pc, #296]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43db      	mvns	r3, r3
 8006298:	4948      	ldr	r1, [pc, #288]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 800629a:	4013      	ands	r3, r2
 800629c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800629e:	4b47      	ldr	r3, [pc, #284]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	43db      	mvns	r3, r3
 80062a6:	4945      	ldr	r1, [pc, #276]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80062ac:	4b43      	ldr	r3, [pc, #268]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	43db      	mvns	r3, r3
 80062b4:	4941      	ldr	r1, [pc, #260]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80062ba:	4b40      	ldr	r3, [pc, #256]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	493e      	ldr	r1, [pc, #248]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	220f      	movs	r2, #15
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80062d8:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <HAL_GPIO_DeInit+0x1e4>)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	3302      	adds	r3, #2
 80062e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	43da      	mvns	r2, r3
 80062e8:	4829      	ldr	r0, [pc, #164]	; (8006390 <HAL_GPIO_DeInit+0x1e4>)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	400a      	ands	r2, r1
 80062f0:	3302      	adds	r3, #2
 80062f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	2103      	movs	r1, #3
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	401a      	ands	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	08da      	lsrs	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3208      	adds	r2, #8
 8006314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	220f      	movs	r2, #15
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	08d2      	lsrs	r2, r2, #3
 800632c:	4019      	ands	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3208      	adds	r2, #8
 8006332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	2103      	movs	r1, #3
 8006340:	fa01 f303 	lsl.w	r3, r1, r3
 8006344:	43db      	mvns	r3, r3
 8006346:	401a      	ands	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	2101      	movs	r1, #1
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	401a      	ands	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	2103      	movs	r1, #3
 800636a:	fa01 f303 	lsl.w	r3, r1, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	401a      	ands	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	3301      	adds	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	f67f af22 	bls.w	80061c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40013800 	.word	0x40013800
 8006394:	40020000 	.word	0x40020000
 8006398:	40020400 	.word	0x40020400
 800639c:	40020800 	.word	0x40020800
 80063a0:	40020c00 	.word	0x40020c00
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40021400 	.word	0x40021400
 80063ac:	40021800 	.word	0x40021800
 80063b0:	40021c00 	.word	0x40021c00
 80063b4:	40022000 	.word	0x40022000
 80063b8:	40022400 	.word	0x40022400
 80063bc:	40013c00 	.word	0x40013c00

080063c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
 80063dc:	e001      	b.n	80063e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	807b      	strh	r3, [r7, #2]
 80063fc:	4613      	mov	r3, r2
 80063fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006400:	787b      	ldrb	r3, [r7, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006406:	887a      	ldrh	r2, [r7, #2]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800640c:	e003      	b.n	8006416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800640e:	887b      	ldrh	r3, [r7, #2]
 8006410:	041a      	lsls	r2, r3, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e07f      	b.n	8006536 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fd fd80 	bl	8003f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2224      	movs	r2, #36	; 0x24
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	e006      	b.n	80064ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d104      	bne.n	80064be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6859      	ldr	r1, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_I2C_Init+0x11c>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	ea42 0103 	orr.w	r1, r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	021a      	lsls	r2, r3, #8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	02008000 	.word	0x02008000

08006544 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e021      	b.n	800659a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2224      	movs	r2, #36	; 0x24
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fd fd66 	bl	8004040 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	461a      	mov	r2, r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	817b      	strh	r3, [r7, #10]
 80065b6:	460b      	mov	r3, r1
 80065b8:	813b      	strh	r3, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	f040 80f9 	bne.w	80067be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_I2C_Mem_Write+0x34>
 80065d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0ed      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_I2C_Mem_Write+0x4e>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e0e6      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065fa:	f7fe fa0b 	bl	8004a14 <HAL_GetTick>
 80065fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2319      	movs	r3, #25
 8006606:	2201      	movs	r2, #1
 8006608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fad1 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e0d1      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2221      	movs	r2, #33	; 0x21
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2240      	movs	r2, #64	; 0x40
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a3a      	ldr	r2, [r7, #32]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800663c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006644:	88f8      	ldrh	r0, [r7, #6]
 8006646:	893a      	ldrh	r2, [r7, #8]
 8006648:	8979      	ldrh	r1, [r7, #10]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	4603      	mov	r3, r0
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f9e1 	bl	8006a1c <I2C_RequestMemoryWrite>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0a9      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2bff      	cmp	r3, #255	; 0xff
 8006674:	d90e      	bls.n	8006694 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	8979      	ldrh	r1, [r7, #10]
 8006684:	2300      	movs	r3, #0
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fbb3 	bl	8006df8 <I2C_TransferConfig>
 8006692:	e00f      	b.n	80066b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	8979      	ldrh	r1, [r7, #10]
 80066a6:	2300      	movs	r3, #0
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fba2 	bl	8006df8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fabb 	bl	8006c34 <I2C_WaitOnTXISFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e07b      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d034      	beq.n	800676c <HAL_I2C_Mem_Write+0x1c8>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d130      	bne.n	800676c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	2200      	movs	r2, #0
 8006712:	2180      	movs	r1, #128	; 0x80
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fa4d 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e04d      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2bff      	cmp	r3, #255	; 0xff
 800672c:	d90e      	bls.n	800674c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006738:	b2da      	uxtb	r2, r3
 800673a:	8979      	ldrh	r1, [r7, #10]
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fb57 	bl	8006df8 <I2C_TransferConfig>
 800674a:	e00f      	b.n	800676c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675a:	b2da      	uxtb	r2, r3
 800675c:	8979      	ldrh	r1, [r7, #10]
 800675e:	2300      	movs	r3, #0
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fb46 	bl	8006df8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d19e      	bne.n	80066b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fa9a 	bl	8006cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e01a      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2220      	movs	r2, #32
 8006790:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6859      	ldr	r1, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <HAL_I2C_Mem_Write+0x224>)
 800679e:	400b      	ands	r3, r1
 80067a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e000      	b.n	80067c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80067be:	2302      	movs	r3, #2
  }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	fe00e800 	.word	0xfe00e800

080067cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	4608      	mov	r0, r1
 80067d6:	4611      	mov	r1, r2
 80067d8:	461a      	mov	r2, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	817b      	strh	r3, [r7, #10]
 80067de:	460b      	mov	r3, r1
 80067e0:	813b      	strh	r3, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	f040 80fd 	bne.w	80069ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <HAL_I2C_Mem_Read+0x34>
 80067fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d105      	bne.n	800680c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006806:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0f1      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_I2C_Mem_Read+0x4e>
 8006816:	2302      	movs	r3, #2
 8006818:	e0ea      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006822:	f7fe f8f7 	bl	8004a14 <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	2319      	movs	r3, #25
 800682e:	2201      	movs	r2, #1
 8006830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f9bd 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0d5      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2222      	movs	r2, #34	; 0x22
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2240      	movs	r2, #64	; 0x40
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a3a      	ldr	r2, [r7, #32]
 800685e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800686c:	88f8      	ldrh	r0, [r7, #6]
 800686e:	893a      	ldrh	r2, [r7, #8]
 8006870:	8979      	ldrh	r1, [r7, #10]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4603      	mov	r3, r0
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f921 	bl	8006ac4 <I2C_RequestMemoryRead>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0ad      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d90e      	bls.n	80068bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	8979      	ldrh	r1, [r7, #10]
 80068ac:	4b52      	ldr	r3, [pc, #328]	; (80069f8 <HAL_I2C_Mem_Read+0x22c>)
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 fa9f 	bl	8006df8 <I2C_TransferConfig>
 80068ba:	e00f      	b.n	80068dc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	8979      	ldrh	r1, [r7, #10]
 80068ce:	4b4a      	ldr	r3, [pc, #296]	; (80069f8 <HAL_I2C_Mem_Read+0x22c>)
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fa8e 	bl	8006df8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	2200      	movs	r2, #0
 80068e4:	2104      	movs	r1, #4
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f964 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e07c      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d034      	beq.n	800699c <HAL_I2C_Mem_Read+0x1d0>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006936:	2b00      	cmp	r3, #0
 8006938:	d130      	bne.n	800699c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f935 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e04d      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006958:	b29b      	uxth	r3, r3
 800695a:	2bff      	cmp	r3, #255	; 0xff
 800695c:	d90e      	bls.n	800697c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	b2da      	uxtb	r2, r3
 800696a:	8979      	ldrh	r1, [r7, #10]
 800696c:	2300      	movs	r3, #0
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fa3f 	bl	8006df8 <I2C_TransferConfig>
 800697a:	e00f      	b.n	800699c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698a:	b2da      	uxtb	r2, r3
 800698c:	8979      	ldrh	r1, [r7, #10]
 800698e:	2300      	movs	r3, #0
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fa2e 	bl	8006df8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d19a      	bne.n	80068dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f982 	bl	8006cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e01a      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2220      	movs	r2, #32
 80069c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_I2C_Mem_Read+0x230>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
  }
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	80002400 	.word	0x80002400
 80069fc:	fe00e800 	.word	0xfe00e800

08006a00 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a0e:	b2db      	uxtb	r3, r3
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	817b      	strh	r3, [r7, #10]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	813b      	strh	r3, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	8979      	ldrh	r1, [r7, #10]
 8006a3c:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <I2C_RequestMemoryWrite+0xa4>)
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f9d7 	bl	8006df8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f8f0 	bl	8006c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e02c      	b.n	8006ab8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d105      	bne.n	8006a70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a64:	893b      	ldrh	r3, [r7, #8]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a6e:	e015      	b.n	8006a9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a70:	893b      	ldrh	r3, [r7, #8]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	69b9      	ldr	r1, [r7, #24]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f8d6 	bl	8006c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e012      	b.n	8006ab8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2180      	movs	r1, #128	; 0x80
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f884 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	80002000 	.word	0x80002000

08006ac4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	4608      	mov	r0, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	817b      	strh	r3, [r7, #10]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	813b      	strh	r3, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	8979      	ldrh	r1, [r7, #10]
 8006ae4:	4b20      	ldr	r3, [pc, #128]	; (8006b68 <I2C_RequestMemoryRead+0xa4>)
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f984 	bl	8006df8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	69b9      	ldr	r1, [r7, #24]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f89d 	bl	8006c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e02c      	b.n	8006b5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b0a:	893b      	ldrh	r3, [r7, #8]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
 8006b14:	e015      	b.n	8006b42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b16:	893b      	ldrh	r3, [r7, #8]
 8006b18:	0a1b      	lsrs	r3, r3, #8
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	69b9      	ldr	r1, [r7, #24]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f883 	bl	8006c34 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e012      	b.n	8006b5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b38:	893b      	ldrh	r3, [r7, #8]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2140      	movs	r1, #64	; 0x40
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f831 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	80002000 	.word	0x80002000

08006b6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d103      	bne.n	8006b8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d007      	beq.n	8006ba8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	619a      	str	r2, [r3, #24]
  }
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bc4:	e022      	b.n	8006c0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d01e      	beq.n	8006c0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7fd ff21 	bl	8004a14 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d113      	bne.n	8006c0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e00f      	b.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4013      	ands	r3, r2
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2301      	moveq	r3, #1
 8006c1e:	2300      	movne	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d0cd      	beq.n	8006bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c40:	e02c      	b.n	8006c9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 f870 	bl	8006d2c <I2C_IsAcknowledgeFailed>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e02a      	b.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d01e      	beq.n	8006c9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c5e:	f7fd fed9 	bl	8004a14 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d302      	bcc.n	8006c74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d113      	bne.n	8006c9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	f043 0220 	orr.w	r2, r3, #32
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e007      	b.n	8006cac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d1cb      	bne.n	8006c42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cc0:	e028      	b.n	8006d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f830 	bl	8006d2c <I2C_IsAcknowledgeFailed>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e026      	b.n	8006d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd6:	f7fd fe9d 	bl	8004a14 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d302      	bcc.n	8006cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d113      	bne.n	8006d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e007      	b.n	8006d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d1cf      	bne.n	8006cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b10      	cmp	r3, #16
 8006d44:	d151      	bne.n	8006dea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d46:	e022      	b.n	8006d8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d01e      	beq.n	8006d8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d50:	f7fd fe60 	bl	8004a14 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d302      	bcc.n	8006d66 <I2C_IsAcknowledgeFailed+0x3a>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d113      	bne.n	8006d8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e02e      	b.n	8006dec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b20      	cmp	r3, #32
 8006d9a:	d1d5      	bne.n	8006d48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2210      	movs	r2, #16
 8006da2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2220      	movs	r2, #32
 8006daa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fedd 	bl	8006b6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <I2C_IsAcknowledgeFailed+0xc8>)
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f043 0204 	orr.w	r2, r3, #4
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	fe00e800 	.word	0xfe00e800

08006df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	817b      	strh	r3, [r7, #10]
 8006e06:	4613      	mov	r3, r2
 8006e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	0d5b      	lsrs	r3, r3, #21
 8006e14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e18:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <I2C_TransferConfig+0x58>)
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	ea02 0103 	and.w	r1, r2, r3
 8006e22:	897b      	ldrh	r3, [r7, #10]
 8006e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e28:	7a7b      	ldrb	r3, [r7, #9]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	03ff63ff 	.word	0x03ff63ff

08006e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d138      	bne.n	8006edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e032      	b.n	8006ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2224      	movs	r2, #36	; 0x24
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0201 	bic.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6819      	ldr	r1, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e000      	b.n	8006ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006edc:	2302      	movs	r3, #2
  }
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d139      	bne.n	8006f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e033      	b.n	8006f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	; 0x24
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0201 	orr.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e000      	b.n	8006f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f74:	2302      	movs	r3, #2
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0bf      	b.n	8007116 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fd f884 	bl	80040b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006fc6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fdc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6899      	ldr	r1, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b4a      	ldr	r3, [pc, #296]	; (8007120 <HAL_LTDC_Init+0x19c>)
 8006ff8:	400b      	ands	r3, r1
 8006ffa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	041b      	lsls	r3, r3, #16
 8007002:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6899      	ldr	r1, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68d9      	ldr	r1, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b3e      	ldr	r3, [pc, #248]	; (8007120 <HAL_LTDC_Init+0x19c>)
 8007026:	400b      	ands	r3, r1
 8007028:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68d9      	ldr	r1, [r3, #12]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1a      	ldr	r2, [r3, #32]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6919      	ldr	r1, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b33      	ldr	r3, [pc, #204]	; (8007120 <HAL_LTDC_Init+0x19c>)
 8007054:	400b      	ands	r3, r1
 8007056:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	041b      	lsls	r3, r3, #16
 800705e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6919      	ldr	r1, [r3, #16]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6959      	ldr	r1, [r3, #20]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b27      	ldr	r3, [pc, #156]	; (8007120 <HAL_LTDC_Init+0x19c>)
 8007082:	400b      	ands	r3, r1
 8007084:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6959      	ldr	r1, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0206 	orr.w	r2, r2, #6
 80070f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	f000f800 	.word	0xf000f800

08007124 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d023      	beq.n	800718e <HAL_LTDC_IRQHandler+0x6a>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01e      	beq.n	800718e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0204 	bic.w	r2, r2, #4
 800715e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2204      	movs	r2, #4
 8007166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800716e:	f043 0201 	orr.w	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2204      	movs	r2, #4
 800717c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f86f 	bl	800726c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d023      	beq.n	80071e0 <HAL_LTDC_IRQHandler+0xbc>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01e      	beq.n	80071e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0202 	bic.w	r2, r2, #2
 80071b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2202      	movs	r2, #2
 80071b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071c0:	f043 0202 	orr.w	r2, r3, #2
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2204      	movs	r2, #4
 80071ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f846 	bl	800726c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01b      	beq.n	8007222 <HAL_LTDC_IRQHandler+0xfe>
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d016      	beq.n	8007222 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2201      	movs	r2, #1
 800720a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f82f 	bl	8007280 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01b      	beq.n	8007264 <HAL_LTDC_IRQHandler+0x140>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0208 	bic.w	r2, r2, #8
 8007244:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2208      	movs	r2, #8
 800724c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f818 	bl	8007294 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_LTDC_ConfigLayer+0x1a>
 80072be:	2302      	movs	r3, #2
 80072c0:	e02c      	b.n	800731c <HAL_LTDC_ConfigLayer+0x74>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2134      	movs	r1, #52	; 0x34
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	4413      	add	r3, r2
 80072de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4614      	mov	r4, r2
 80072e6:	461d      	mov	r5, r3
 80072e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f81f 	bl	8007340 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2201      	movs	r2, #1
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bdb0      	pop	{r4, r5, r7, pc}

08007324 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007332:	b2db      	uxtb	r3, r3
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007340:	b480      	push	{r7}
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800735c:	4413      	add	r3, r2
 800735e:	041b      	lsls	r3, r3, #16
 8007360:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	4413      	add	r3, r2
 800736e:	3384      	adds	r3, #132	; 0x84
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	4611      	mov	r1, r2
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	01d2      	lsls	r2, r2, #7
 800737c:	440a      	add	r2, r1
 800737e:	3284      	adds	r2, #132	; 0x84
 8007380:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007384:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	0c1b      	lsrs	r3, r3, #16
 8007392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007396:	4413      	add	r3, r2
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	01db      	lsls	r3, r3, #7
 80073a4:	440b      	add	r3, r1
 80073a6:	3384      	adds	r3, #132	; 0x84
 80073a8:	4619      	mov	r1, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073be:	4413      	add	r3, r2
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	01db      	lsls	r3, r3, #7
 80073ce:	4413      	add	r3, r2
 80073d0:	3384      	adds	r3, #132	; 0x84
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	4611      	mov	r1, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	01d2      	lsls	r2, r2, #7
 80073de:	440a      	add	r2, r1
 80073e0:	3284      	adds	r2, #132	; 0x84
 80073e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80073e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073f6:	4413      	add	r3, r2
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4619      	mov	r1, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	440b      	add	r3, r1
 8007406:	3384      	adds	r3, #132	; 0x84
 8007408:	4619      	mov	r1, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4313      	orrs	r3, r2
 800740e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	01db      	lsls	r3, r3, #7
 800741a:	4413      	add	r3, r2
 800741c:	3384      	adds	r3, #132	; 0x84
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	4611      	mov	r1, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	01d2      	lsls	r2, r2, #7
 800742a:	440a      	add	r2, r1
 800742c:	3284      	adds	r2, #132	; 0x84
 800742e:	f023 0307 	bic.w	r3, r3, #7
 8007432:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	01db      	lsls	r3, r3, #7
 800743e:	4413      	add	r3, r2
 8007440:	3384      	adds	r3, #132	; 0x84
 8007442:	461a      	mov	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	061b      	lsls	r3, r3, #24
 8007464:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	01db      	lsls	r3, r3, #7
 8007470:	4413      	add	r3, r2
 8007472:	3384      	adds	r3, #132	; 0x84
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	01db      	lsls	r3, r3, #7
 8007480:	4413      	add	r3, r2
 8007482:	3384      	adds	r3, #132	; 0x84
 8007484:	461a      	mov	r2, r3
 8007486:	2300      	movs	r3, #0
 8007488:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007490:	461a      	mov	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	431a      	orrs	r2, r3
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	431a      	orrs	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4619      	mov	r1, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	01db      	lsls	r3, r3, #7
 80074a4:	440b      	add	r3, r1
 80074a6:	3384      	adds	r3, #132	; 0x84
 80074a8:	4619      	mov	r1, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	01db      	lsls	r3, r3, #7
 80074ba:	4413      	add	r3, r2
 80074bc:	3384      	adds	r3, #132	; 0x84
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	4611      	mov	r1, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	01d2      	lsls	r2, r2, #7
 80074ca:	440a      	add	r2, r1
 80074cc:	3284      	adds	r2, #132	; 0x84
 80074ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	01db      	lsls	r3, r3, #7
 80074de:	4413      	add	r3, r2
 80074e0:	3384      	adds	r3, #132	; 0x84
 80074e2:	461a      	mov	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	01db      	lsls	r3, r3, #7
 80074f4:	4413      	add	r3, r2
 80074f6:	3384      	adds	r3, #132	; 0x84
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4619      	mov	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	01db      	lsls	r3, r3, #7
 8007504:	440b      	add	r3, r1
 8007506:	3384      	adds	r3, #132	; 0x84
 8007508:	4619      	mov	r1, r3
 800750a:	4b58      	ldr	r3, [pc, #352]	; (800766c <LTDC_SetConfig+0x32c>)
 800750c:	4013      	ands	r3, r2
 800750e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	6809      	ldr	r1, [r1, #0]
 800751c:	4608      	mov	r0, r1
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	01c9      	lsls	r1, r1, #7
 8007522:	4401      	add	r1, r0
 8007524:	3184      	adds	r1, #132	; 0x84
 8007526:	4313      	orrs	r3, r2
 8007528:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	4413      	add	r3, r2
 8007536:	3384      	adds	r3, #132	; 0x84
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	01db      	lsls	r3, r3, #7
 8007544:	4413      	add	r3, r2
 8007546:	3384      	adds	r3, #132	; 0x84
 8007548:	461a      	mov	r2, r3
 800754a:	2300      	movs	r3, #0
 800754c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	01db      	lsls	r3, r3, #7
 8007558:	4413      	add	r3, r2
 800755a:	3384      	adds	r3, #132	; 0x84
 800755c:	461a      	mov	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d102      	bne.n	8007572 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800756c:	2304      	movs	r3, #4
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e01b      	b.n	80075aa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d102      	bne.n	8007580 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800757a:	2303      	movs	r3, #3
 800757c:	61fb      	str	r3, [r7, #28]
 800757e:	e014      	b.n	80075aa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b04      	cmp	r3, #4
 8007586:	d00b      	beq.n	80075a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800758c:	2b02      	cmp	r3, #2
 800758e:	d007      	beq.n	80075a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007594:	2b03      	cmp	r3, #3
 8007596:	d003      	beq.n	80075a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800759c:	2b07      	cmp	r3, #7
 800759e:	d102      	bne.n	80075a6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80075a0:	2302      	movs	r3, #2
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	e001      	b.n	80075aa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80075a6:	2301      	movs	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	4413      	add	r3, r2
 80075b6:	3384      	adds	r3, #132	; 0x84
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	4611      	mov	r1, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	01d2      	lsls	r2, r2, #7
 80075c4:	440a      	add	r2, r1
 80075c6:	3284      	adds	r2, #132	; 0x84
 80075c8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80075cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	fb02 f303 	mul.w	r3, r2, r3
 80075d8:	041a      	lsls	r2, r3, #16
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	1acb      	subs	r3, r1, r3
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	fb01 f303 	mul.w	r3, r1, r3
 80075ea:	3303      	adds	r3, #3
 80075ec:	68f9      	ldr	r1, [r7, #12]
 80075ee:	6809      	ldr	r1, [r1, #0]
 80075f0:	4608      	mov	r0, r1
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	01c9      	lsls	r1, r1, #7
 80075f6:	4401      	add	r1, r0
 80075f8:	3184      	adds	r1, #132	; 0x84
 80075fa:	4313      	orrs	r3, r2
 80075fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	01db      	lsls	r3, r3, #7
 8007608:	4413      	add	r3, r2
 800760a:	3384      	adds	r3, #132	; 0x84
 800760c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4619      	mov	r1, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	01db      	lsls	r3, r3, #7
 8007618:	440b      	add	r3, r1
 800761a:	3384      	adds	r3, #132	; 0x84
 800761c:	4619      	mov	r1, r3
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <LTDC_SetConfig+0x330>)
 8007620:	4013      	ands	r3, r2
 8007622:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	01db      	lsls	r3, r3, #7
 800762e:	4413      	add	r3, r2
 8007630:	3384      	adds	r3, #132	; 0x84
 8007632:	461a      	mov	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	01db      	lsls	r3, r3, #7
 8007644:	4413      	add	r3, r2
 8007646:	3384      	adds	r3, #132	; 0x84
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	4611      	mov	r1, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	01d2      	lsls	r2, r2, #7
 8007654:	440a      	add	r2, r1
 8007656:	3284      	adds	r2, #132	; 0x84
 8007658:	f043 0301 	orr.w	r3, r3, #1
 800765c:	6013      	str	r3, [r2, #0]
}
 800765e:	bf00      	nop
 8007660:	3724      	adds	r7, #36	; 0x24
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	fffff8f8 	.word	0xfffff8f8
 8007670:	fffff800 	.word	0xfffff800

08007674 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800767e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007682:	6013      	str	r3, [r2, #0]
}
 8007684:	bf00      	nop
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40007000 	.word	0x40007000

08007694 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <HAL_PWREx_EnableOverDrive+0x98>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	4a22      	ldr	r2, [pc, #136]	; (800772c <HAL_PWREx_EnableOverDrive+0x98>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6413      	str	r3, [r2, #64]	; 0x40
 80076aa:	4b20      	ldr	r3, [pc, #128]	; (800772c <HAL_PWREx_EnableOverDrive+0x98>)
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b2:	603b      	str	r3, [r7, #0]
 80076b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076b6:	4b1e      	ldr	r3, [pc, #120]	; (8007730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1d      	ldr	r2, [pc, #116]	; (8007730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076c2:	f7fd f9a7 	bl	8004a14 <HAL_GetTick>
 80076c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076c8:	e009      	b.n	80076de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076ca:	f7fd f9a3 	bl	8004a14 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076d8:	d901      	bls.n	80076de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e022      	b.n	8007724 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076de:	4b14      	ldr	r3, [pc, #80]	; (8007730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ea:	d1ee      	bne.n	80076ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80076ec:	4b10      	ldr	r3, [pc, #64]	; (8007730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a0f      	ldr	r2, [pc, #60]	; (8007730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076f8:	f7fd f98c 	bl	8004a14 <HAL_GetTick>
 80076fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076fe:	e009      	b.n	8007714 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007700:	f7fd f988 	bl	8004a14 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800770e:	d901      	bls.n	8007714 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e007      	b.n	8007724 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007720:	d1ee      	bne.n	8007700 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40023800 	.word	0x40023800
 8007730:	40007000 	.word	0x40007000

08007734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e291      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8087 	beq.w	8007866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007758:	4b96      	ldr	r3, [pc, #600]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 030c 	and.w	r3, r3, #12
 8007760:	2b04      	cmp	r3, #4
 8007762:	d00c      	beq.n	800777e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007764:	4b93      	ldr	r3, [pc, #588]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 030c 	and.w	r3, r3, #12
 800776c:	2b08      	cmp	r3, #8
 800776e:	d112      	bne.n	8007796 <HAL_RCC_OscConfig+0x62>
 8007770:	4b90      	ldr	r3, [pc, #576]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800777c:	d10b      	bne.n	8007796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800777e:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d06c      	beq.n	8007864 <HAL_RCC_OscConfig+0x130>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d168      	bne.n	8007864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e26b      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779e:	d106      	bne.n	80077ae <HAL_RCC_OscConfig+0x7a>
 80077a0:	4b84      	ldr	r3, [pc, #528]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a83      	ldr	r2, [pc, #524]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	e02e      	b.n	800780c <HAL_RCC_OscConfig+0xd8>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10c      	bne.n	80077d0 <HAL_RCC_OscConfig+0x9c>
 80077b6:	4b7f      	ldr	r3, [pc, #508]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a7e      	ldr	r2, [pc, #504]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	4b7c      	ldr	r3, [pc, #496]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a7b      	ldr	r2, [pc, #492]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	e01d      	b.n	800780c <HAL_RCC_OscConfig+0xd8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCC_OscConfig+0xc0>
 80077da:	4b76      	ldr	r3, [pc, #472]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a75      	ldr	r2, [pc, #468]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b73      	ldr	r3, [pc, #460]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a72      	ldr	r2, [pc, #456]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e00b      	b.n	800780c <HAL_RCC_OscConfig+0xd8>
 80077f4:	4b6f      	ldr	r3, [pc, #444]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a6e      	ldr	r2, [pc, #440]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80077fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	4b6c      	ldr	r3, [pc, #432]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a6b      	ldr	r2, [pc, #428]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800780a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d013      	beq.n	800783c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007814:	f7fd f8fe 	bl	8004a14 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800781c:	f7fd f8fa 	bl	8004a14 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b64      	cmp	r3, #100	; 0x64
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e21f      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800782e:	4b61      	ldr	r3, [pc, #388]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f0      	beq.n	800781c <HAL_RCC_OscConfig+0xe8>
 800783a:	e014      	b.n	8007866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783c:	f7fd f8ea 	bl	8004a14 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007844:	f7fd f8e6 	bl	8004a14 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b64      	cmp	r3, #100	; 0x64
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e20b      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007856:	4b57      	ldr	r3, [pc, #348]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1f0      	bne.n	8007844 <HAL_RCC_OscConfig+0x110>
 8007862:	e000      	b.n	8007866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d069      	beq.n	8007946 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007872:	4b50      	ldr	r3, [pc, #320]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 030c 	and.w	r3, r3, #12
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800787e:	4b4d      	ldr	r3, [pc, #308]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b08      	cmp	r3, #8
 8007888:	d11c      	bne.n	80078c4 <HAL_RCC_OscConfig+0x190>
 800788a:	4b4a      	ldr	r3, [pc, #296]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d116      	bne.n	80078c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007896:	4b47      	ldr	r3, [pc, #284]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_RCC_OscConfig+0x17a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d001      	beq.n	80078ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e1df      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ae:	4b41      	ldr	r3, [pc, #260]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	493d      	ldr	r1, [pc, #244]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078c2:	e040      	b.n	8007946 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d023      	beq.n	8007914 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d8:	f7fd f89c 	bl	8004a14 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078e0:	f7fd f898 	bl	8004a14 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e1bd      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f2:	4b30      	ldr	r3, [pc, #192]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078fe:	4b2d      	ldr	r3, [pc, #180]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4929      	ldr	r1, [pc, #164]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 800790e:	4313      	orrs	r3, r2
 8007910:	600b      	str	r3, [r1, #0]
 8007912:	e018      	b.n	8007946 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007914:	4b27      	ldr	r3, [pc, #156]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a26      	ldr	r2, [pc, #152]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fd f878 	bl	8004a14 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007928:	f7fd f874 	bl	8004a14 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e199      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800793a:	4b1e      	ldr	r3, [pc, #120]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d038      	beq.n	80079c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d019      	beq.n	800798e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007966:	f7fd f855 	bl	8004a14 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800796e:	f7fd f851 	bl	8004a14 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e176      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0f0      	beq.n	800796e <HAL_RCC_OscConfig+0x23a>
 800798c:	e01a      	b.n	80079c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007992:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <HAL_RCC_OscConfig+0x280>)
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799a:	f7fd f83b 	bl	8004a14 <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079a2:	f7fd f837 	bl	8004a14 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d903      	bls.n	80079b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e15c      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
 80079b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b8:	4b91      	ldr	r3, [pc, #580]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 80079ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ee      	bne.n	80079a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80a4 	beq.w	8007b1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079d2:	4b8b      	ldr	r3, [pc, #556]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10d      	bne.n	80079fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80079de:	4b88      	ldr	r3, [pc, #544]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	4a87      	ldr	r2, [pc, #540]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ea:	4b85      	ldr	r3, [pc, #532]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079fa:	4b82      	ldr	r3, [pc, #520]	; (8007c04 <HAL_RCC_OscConfig+0x4d0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d118      	bne.n	8007a38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a06:	4b7f      	ldr	r3, [pc, #508]	; (8007c04 <HAL_RCC_OscConfig+0x4d0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a7e      	ldr	r2, [pc, #504]	; (8007c04 <HAL_RCC_OscConfig+0x4d0>)
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a12:	f7fc ffff 	bl	8004a14 <HAL_GetTick>
 8007a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a18:	e008      	b.n	8007a2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a1a:	f7fc fffb 	bl	8004a14 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b64      	cmp	r3, #100	; 0x64
 8007a26:	d901      	bls.n	8007a2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e120      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a2c:	4b75      	ldr	r3, [pc, #468]	; (8007c04 <HAL_RCC_OscConfig+0x4d0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0f0      	beq.n	8007a1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCC_OscConfig+0x31a>
 8007a40:	4b6f      	ldr	r3, [pc, #444]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a6e      	ldr	r2, [pc, #440]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4c:	e02d      	b.n	8007aaa <HAL_RCC_OscConfig+0x376>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCC_OscConfig+0x33c>
 8007a56:	4b6a      	ldr	r3, [pc, #424]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5a:	4a69      	ldr	r2, [pc, #420]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	6713      	str	r3, [r2, #112]	; 0x70
 8007a62:	4b67      	ldr	r3, [pc, #412]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a66      	ldr	r2, [pc, #408]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a68:	f023 0304 	bic.w	r3, r3, #4
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	e01c      	b.n	8007aaa <HAL_RCC_OscConfig+0x376>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b05      	cmp	r3, #5
 8007a76:	d10c      	bne.n	8007a92 <HAL_RCC_OscConfig+0x35e>
 8007a78:	4b61      	ldr	r3, [pc, #388]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7c:	4a60      	ldr	r2, [pc, #384]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a7e:	f043 0304 	orr.w	r3, r3, #4
 8007a82:	6713      	str	r3, [r2, #112]	; 0x70
 8007a84:	4b5e      	ldr	r3, [pc, #376]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a88:	4a5d      	ldr	r2, [pc, #372]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a90:	e00b      	b.n	8007aaa <HAL_RCC_OscConfig+0x376>
 8007a92:	4b5b      	ldr	r3, [pc, #364]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	4a5a      	ldr	r2, [pc, #360]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a9e:	4b58      	ldr	r3, [pc, #352]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa2:	4a57      	ldr	r2, [pc, #348]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007aa4:	f023 0304 	bic.w	r3, r3, #4
 8007aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d015      	beq.n	8007ade <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab2:	f7fc ffaf 	bl	8004a14 <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aba:	f7fc ffab 	bl	8004a14 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e0ce      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad0:	4b4b      	ldr	r3, [pc, #300]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0ee      	beq.n	8007aba <HAL_RCC_OscConfig+0x386>
 8007adc:	e014      	b.n	8007b08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ade:	f7fc ff99 	bl	8004a14 <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae4:	e00a      	b.n	8007afc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae6:	f7fc ff95 	bl	8004a14 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e0b8      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007afc:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1ee      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d105      	bne.n	8007b1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b0e:	4b3c      	ldr	r3, [pc, #240]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	4a3b      	ldr	r2, [pc, #236]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80a4 	beq.w	8007c6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b24:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 030c 	and.w	r3, r3, #12
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d06b      	beq.n	8007c08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d149      	bne.n	8007bcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b38:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a30      	ldr	r2, [pc, #192]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b44:	f7fc ff66 	bl	8004a14 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b4c:	f7fc ff62 	bl	8004a14 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e087      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b5e:	4b28      	ldr	r3, [pc, #160]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f0      	bne.n	8007b4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69da      	ldr	r2, [r3, #28]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	019b      	lsls	r3, r3, #6
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	3b01      	subs	r3, #1
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	061b      	lsls	r3, r3, #24
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	4a1b      	ldr	r2, [pc, #108]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b98:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba4:	f7fc ff36 	bl	8004a14 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bac:	f7fc ff32 	bl	8004a14 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e057      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bbe:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f0      	beq.n	8007bac <HAL_RCC_OscConfig+0x478>
 8007bca:	e04f      	b.n	8007c6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0b      	ldr	r2, [pc, #44]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd8:	f7fc ff1c 	bl	8004a14 <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be0:	f7fc ff18 	bl	8004a14 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e03d      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf2:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <HAL_RCC_OscConfig+0x4cc>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0x4ac>
 8007bfe:	e035      	b.n	8007c6c <HAL_RCC_OscConfig+0x538>
 8007c00:	40023800 	.word	0x40023800
 8007c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c08:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <HAL_RCC_OscConfig+0x544>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d028      	beq.n	8007c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d121      	bne.n	8007c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d11a      	bne.n	8007c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c38:	4013      	ands	r3, r2
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d111      	bne.n	8007c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	085b      	lsrs	r3, r3, #1
 8007c50:	3b01      	subs	r3, #1
 8007c52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d107      	bne.n	8007c68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d001      	beq.n	8007c6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e000      	b.n	8007c6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	40023800 	.word	0x40023800

08007c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0d0      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c94:	4b6a      	ldr	r3, [pc, #424]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d910      	bls.n	8007cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ca2:	4b67      	ldr	r3, [pc, #412]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f023 020f 	bic.w	r2, r3, #15
 8007caa:	4965      	ldr	r1, [pc, #404]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cb2:	4b63      	ldr	r3, [pc, #396]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d001      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0b8      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d020      	beq.n	8007d12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cdc:	4b59      	ldr	r3, [pc, #356]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4a58      	ldr	r2, [pc, #352]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007ce2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cf4:	4b53      	ldr	r3, [pc, #332]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	4a52      	ldr	r2, [pc, #328]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007cfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d00:	4b50      	ldr	r3, [pc, #320]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	494d      	ldr	r1, [pc, #308]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d040      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d107      	bne.n	8007d36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d26:	4b47      	ldr	r3, [pc, #284]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d115      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e07f      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3e:	4b41      	ldr	r3, [pc, #260]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e073      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d4e:	4b3d      	ldr	r3, [pc, #244]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e06b      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d5e:	4b39      	ldr	r3, [pc, #228]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f023 0203 	bic.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4936      	ldr	r1, [pc, #216]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d70:	f7fc fe50 	bl	8004a14 <HAL_GetTick>
 8007d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d76:	e00a      	b.n	8007d8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d78:	f7fc fe4c 	bl	8004a14 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e053      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d8e:	4b2d      	ldr	r3, [pc, #180]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 020c 	and.w	r2, r3, #12
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d1eb      	bne.n	8007d78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d210      	bcs.n	8007dd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dae:	4b24      	ldr	r3, [pc, #144]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f023 020f 	bic.w	r2, r3, #15
 8007db6:	4922      	ldr	r1, [pc, #136]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d001      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e032      	b.n	8007e36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ddc:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4916      	ldr	r1, [pc, #88]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	490e      	ldr	r1, [pc, #56]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e0e:	f000 f821 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 8007e12:	4601      	mov	r1, r0
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <HAL_RCC_ClockConfig+0x1c8>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	091b      	lsrs	r3, r3, #4
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	4a0a      	ldr	r2, [pc, #40]	; (8007e48 <HAL_RCC_ClockConfig+0x1cc>)
 8007e20:	5cd3      	ldrb	r3, [r2, r3]
 8007e22:	fa21 f303 	lsr.w	r3, r1, r3
 8007e26:	4a09      	ldr	r2, [pc, #36]	; (8007e4c <HAL_RCC_ClockConfig+0x1d0>)
 8007e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <HAL_RCC_ClockConfig+0x1d4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fc fcca 	bl	80047c8 <HAL_InitTick>

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40023c00 	.word	0x40023c00
 8007e44:	40023800 	.word	0x40023800
 8007e48:	08010850 	.word	0x08010850
 8007e4c:	20000044 	.word	0x20000044
 8007e50:	20000048 	.word	0x20000048

08007e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	2300      	movs	r3, #0
 8007e64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e6a:	4b50      	ldr	r3, [pc, #320]	; (8007fac <HAL_RCC_GetSysClockFreq+0x158>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 030c 	and.w	r3, r3, #12
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d007      	beq.n	8007e86 <HAL_RCC_GetSysClockFreq+0x32>
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d008      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0x38>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f040 808d 	bne.w	8007f9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e80:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007e82:	60bb      	str	r3, [r7, #8]
      break;
 8007e84:	e08c      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e86:	4b4b      	ldr	r3, [pc, #300]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e88:	60bb      	str	r3, [r7, #8]
      break;
 8007e8a:	e089      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e8c:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCC_GetSysClockFreq+0x158>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e94:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007e96:	4b45      	ldr	r3, [pc, #276]	; (8007fac <HAL_RCC_GetSysClockFreq+0x158>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d023      	beq.n	8007eea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ea2:	4b42      	ldr	r3, [pc, #264]	; (8007fac <HAL_RCC_GetSysClockFreq+0x158>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	f04f 0400 	mov.w	r4, #0
 8007eac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	ea03 0501 	and.w	r5, r3, r1
 8007eb8:	ea04 0602 	and.w	r6, r4, r2
 8007ebc:	4a3d      	ldr	r2, [pc, #244]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ebe:	fb02 f106 	mul.w	r1, r2, r6
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	fb02 f205 	mul.w	r2, r2, r5
 8007ec8:	440a      	add	r2, r1
 8007eca:	493a      	ldr	r1, [pc, #232]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ecc:	fba5 0101 	umull	r0, r1, r5, r1
 8007ed0:	1853      	adds	r3, r2, r1
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f04f 0400 	mov.w	r4, #0
 8007eda:	461a      	mov	r2, r3
 8007edc:	4623      	mov	r3, r4
 8007ede:	f7f8 f9e7 	bl	80002b0 <__aeabi_uldivmod>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e049      	b.n	8007f7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eea:	4b30      	ldr	r3, [pc, #192]	; (8007fac <HAL_RCC_GetSysClockFreq+0x158>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	099b      	lsrs	r3, r3, #6
 8007ef0:	f04f 0400 	mov.w	r4, #0
 8007ef4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	ea03 0501 	and.w	r5, r3, r1
 8007f00:	ea04 0602 	and.w	r6, r4, r2
 8007f04:	4629      	mov	r1, r5
 8007f06:	4632      	mov	r2, r6
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	f04f 0400 	mov.w	r4, #0
 8007f10:	0154      	lsls	r4, r2, #5
 8007f12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f16:	014b      	lsls	r3, r1, #5
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	1b49      	subs	r1, r1, r5
 8007f1e:	eb62 0206 	sbc.w	r2, r2, r6
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	f04f 0400 	mov.w	r4, #0
 8007f2a:	0194      	lsls	r4, r2, #6
 8007f2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f30:	018b      	lsls	r3, r1, #6
 8007f32:	1a5b      	subs	r3, r3, r1
 8007f34:	eb64 0402 	sbc.w	r4, r4, r2
 8007f38:	f04f 0100 	mov.w	r1, #0
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	00e2      	lsls	r2, r4, #3
 8007f42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f46:	00d9      	lsls	r1, r3, #3
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4614      	mov	r4, r2
 8007f4c:	195b      	adds	r3, r3, r5
 8007f4e:	eb44 0406 	adc.w	r4, r4, r6
 8007f52:	f04f 0100 	mov.w	r1, #0
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	02a2      	lsls	r2, r4, #10
 8007f5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007f60:	0299      	lsls	r1, r3, #10
 8007f62:	460b      	mov	r3, r1
 8007f64:	4614      	mov	r4, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	4621      	mov	r1, r4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f04f 0400 	mov.w	r4, #0
 8007f70:	461a      	mov	r2, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	f7f8 f99c 	bl	80002b0 <__aeabi_uldivmod>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCC_GetSysClockFreq+0x158>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	0c1b      	lsrs	r3, r3, #16
 8007f84:	f003 0303 	and.w	r3, r3, #3
 8007f88:	3301      	adds	r3, #1
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	60bb      	str	r3, [r7, #8]
      break;
 8007f98:	e002      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007f9c:	60bb      	str	r3, [r7, #8]
      break;
 8007f9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	00f42400 	.word	0x00f42400
 8007fb4:	017d7840 	.word	0x017d7840

08007fb8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fbc:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	20000044 	.word	0x20000044

08007fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fd4:	f7ff fff0 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8007fd8:	4601      	mov	r1, r0
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	0a9b      	lsrs	r3, r3, #10
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	4a03      	ldr	r2, [pc, #12]	; (8007ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fe6:	5cd3      	ldrb	r3, [r2, r3]
 8007fe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	08010860 	.word	0x08010860

08007ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ffc:	f7ff ffdc 	bl	8007fb8 <HAL_RCC_GetHCLKFreq>
 8008000:	4601      	mov	r1, r0
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	0b5b      	lsrs	r3, r3, #13
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	4a03      	ldr	r2, [pc, #12]	; (800801c <HAL_RCC_GetPCLK2Freq+0x24>)
 800800e:	5cd3      	ldrb	r3, [r2, r3]
 8008010:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008014:	4618      	mov	r0, r3
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40023800 	.word	0x40023800
 800801c:	08010860 	.word	0x08010860

08008020 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220f      	movs	r2, #15
 800802e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008030:	4b12      	ldr	r3, [pc, #72]	; (800807c <HAL_RCC_GetClockConfig+0x5c>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0203 	and.w	r2, r3, #3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800803c:	4b0f      	ldr	r3, [pc, #60]	; (800807c <HAL_RCC_GetClockConfig+0x5c>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <HAL_RCC_GetClockConfig+0x5c>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008054:	4b09      	ldr	r3, [pc, #36]	; (800807c <HAL_RCC_GetClockConfig+0x5c>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	08db      	lsrs	r3, r3, #3
 800805a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_RCC_GetClockConfig+0x60>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 020f 	and.w	r2, r3, #15
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	601a      	str	r2, [r3, #0]
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40023800 	.word	0x40023800
 8008080:	40023c00 	.word	0x40023c00

08008084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080ac:	4b69      	ldr	r3, [pc, #420]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	4a68      	ldr	r2, [pc, #416]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080b6:	6093      	str	r3, [r2, #8]
 80080b8:	4b66      	ldr	r3, [pc, #408]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c0:	4964      	ldr	r1, [pc, #400]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80080ce:	2301      	movs	r3, #1
 80080d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d017      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080de:	4b5d      	ldr	r3, [pc, #372]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	4959      	ldr	r1, [pc, #356]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fc:	d101      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80080fe:	2301      	movs	r3, #1
 8008100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800810a:	2301      	movs	r3, #1
 800810c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d017      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800811a:	4b4e      	ldr	r3, [pc, #312]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	494a      	ldr	r1, [pc, #296]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008138:	d101      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800813a:	2301      	movs	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008156:	2301      	movs	r3, #1
 8008158:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 808b 	beq.w	800827e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008168:	4b3a      	ldr	r3, [pc, #232]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	4a39      	ldr	r2, [pc, #228]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008172:	6413      	str	r3, [r2, #64]	; 0x40
 8008174:	4b37      	ldr	r3, [pc, #220]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817c:	60bb      	str	r3, [r7, #8]
 800817e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008180:	4b35      	ldr	r3, [pc, #212]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a34      	ldr	r2, [pc, #208]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818c:	f7fc fc42 	bl	8004a14 <HAL_GetTick>
 8008190:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008192:	e008      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008194:	f7fc fc3e 	bl	8004a14 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b64      	cmp	r3, #100	; 0x64
 80081a0:	d901      	bls.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e355      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081a6:	4b2c      	ldr	r3, [pc, #176]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0f0      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081b2:	4b28      	ldr	r3, [pc, #160]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d035      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d02e      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081d0:	4b20      	ldr	r3, [pc, #128]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081da:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081e6:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80081f2:	4a18      	ldr	r2, [pc, #96]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081f8:	4b16      	ldr	r3, [pc, #88]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b01      	cmp	r3, #1
 8008202:	d114      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008204:	f7fc fc06 	bl	8004a14 <HAL_GetTick>
 8008208:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800820a:	e00a      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800820c:	f7fc fc02 	bl	8004a14 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	f241 3288 	movw	r2, #5000	; 0x1388
 800821a:	4293      	cmp	r3, r2
 800821c:	d901      	bls.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e317      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0ee      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800823a:	d111      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008248:	4b04      	ldr	r3, [pc, #16]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800824a:	400b      	ands	r3, r1
 800824c:	4901      	ldr	r1, [pc, #4]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824e:	4313      	orrs	r3, r2
 8008250:	608b      	str	r3, [r1, #8]
 8008252:	e00b      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008254:	40023800 	.word	0x40023800
 8008258:	40007000 	.word	0x40007000
 800825c:	0ffffcff 	.word	0x0ffffcff
 8008260:	4bb0      	ldr	r3, [pc, #704]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	4aaf      	ldr	r2, [pc, #700]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008266:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800826a:	6093      	str	r3, [r2, #8]
 800826c:	4bad      	ldr	r3, [pc, #692]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800826e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008278:	49aa      	ldr	r1, [pc, #680]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800827a:	4313      	orrs	r3, r2
 800827c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	d010      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800828a:	4ba6      	ldr	r3, [pc, #664]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800828c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008290:	4aa4      	ldr	r2, [pc, #656]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008296:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800829a:	4ba2      	ldr	r3, [pc, #648]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	499f      	ldr	r1, [pc, #636]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082b8:	4b9a      	ldr	r3, [pc, #616]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c6:	4997      	ldr	r1, [pc, #604]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082da:	4b92      	ldr	r3, [pc, #584]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e8:	498e      	ldr	r1, [pc, #568]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082fc:	4b89      	ldr	r3, [pc, #548]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830a:	4986      	ldr	r1, [pc, #536]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800831e:	4b81      	ldr	r3, [pc, #516]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	497d      	ldr	r1, [pc, #500]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008340:	4b78      	ldr	r3, [pc, #480]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008346:	f023 0203 	bic.w	r2, r3, #3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834e:	4975      	ldr	r1, [pc, #468]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008362:	4b70      	ldr	r3, [pc, #448]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008368:	f023 020c 	bic.w	r2, r3, #12
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008370:	496c      	ldr	r1, [pc, #432]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008384:	4b67      	ldr	r3, [pc, #412]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008392:	4964      	ldr	r1, [pc, #400]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083a6:	4b5f      	ldr	r3, [pc, #380]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	495b      	ldr	r1, [pc, #364]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083c8:	4b56      	ldr	r3, [pc, #344]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	4953      	ldr	r1, [pc, #332]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80083ea:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f8:	494a      	ldr	r1, [pc, #296]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800840c:	4b45      	ldr	r3, [pc, #276]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841a:	4942      	ldr	r1, [pc, #264]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800842e:	4b3d      	ldr	r3, [pc, #244]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008434:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843c:	4939      	ldr	r1, [pc, #228]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008450:	4b34      	ldr	r3, [pc, #208]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800845e:	4931      	ldr	r1, [pc, #196]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d011      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008472:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008478:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008480:	4928      	ldr	r1, [pc, #160]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008490:	d101      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008492:	2301      	movs	r3, #1
 8008494:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80084a2:	2301      	movs	r3, #1
 80084a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084b2:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c0:	4918      	ldr	r1, [pc, #96]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084d4:	4b13      	ldr	r3, [pc, #76]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e4:	490f      	ldr	r1, [pc, #60]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d005      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084fa:	f040 80d8 	bne.w	80086ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a08      	ldr	r2, [pc, #32]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008504:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800850a:	f7fc fa83 	bl	8004a14 <HAL_GetTick>
 800850e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008510:	e00a      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008512:	f7fc fa7f 	bl	8004a14 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b64      	cmp	r3, #100	; 0x64
 800851e:	d903      	bls.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e196      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008524:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008528:	4b6c      	ldr	r3, [pc, #432]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ee      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d021      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11d      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008548:	4b64      	ldr	r3, [pc, #400]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800854a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854e:	0c1b      	lsrs	r3, r3, #16
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008556:	4b61      	ldr	r3, [pc, #388]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800855c:	0e1b      	lsrs	r3, r3, #24
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	019a      	lsls	r2, r3, #6
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	431a      	orrs	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	061b      	lsls	r3, r3, #24
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	071b      	lsls	r3, r3, #28
 800857c:	4957      	ldr	r1, [pc, #348]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008598:	d00a      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d02e      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ae:	d129      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085b0:	4b4a      	ldr	r3, [pc, #296]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085b6:	0c1b      	lsrs	r3, r3, #16
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085be:	4b47      	ldr	r3, [pc, #284]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c4:	0f1b      	lsrs	r3, r3, #28
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	019a      	lsls	r2, r3, #6
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	061b      	lsls	r3, r3, #24
 80085de:	431a      	orrs	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	071b      	lsls	r3, r3, #28
 80085e4:	493d      	ldr	r1, [pc, #244]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80085ec:	4b3b      	ldr	r3, [pc, #236]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f2:	f023 021f 	bic.w	r2, r3, #31
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	3b01      	subs	r3, #1
 80085fc:	4937      	ldr	r1, [pc, #220]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01d      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008610:	4b32      	ldr	r3, [pc, #200]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008616:	0e1b      	lsrs	r3, r3, #24
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800861e:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008624:	0f1b      	lsrs	r3, r3, #28
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	019a      	lsls	r2, r3, #6
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	431a      	orrs	r2, r3
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	431a      	orrs	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	071b      	lsls	r3, r3, #28
 8008644:	4925      	ldr	r1, [pc, #148]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008646:	4313      	orrs	r3, r2
 8008648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d011      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	019a      	lsls	r2, r3, #6
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	061b      	lsls	r3, r3, #24
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	071b      	lsls	r3, r3, #28
 8008674:	4919      	ldr	r1, [pc, #100]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800867c:	4b17      	ldr	r3, [pc, #92]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a16      	ldr	r2, [pc, #88]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008688:	f7fc f9c4 	bl	8004a14 <HAL_GetTick>
 800868c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800868e:	e008      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008690:	f7fc f9c0 	bl	8004a14 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b64      	cmp	r3, #100	; 0x64
 800869c:	d901      	bls.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e0d7      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0f0      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	f040 80cd 	bne.w	8008850 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80086b6:	4b09      	ldr	r3, [pc, #36]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a08      	ldr	r2, [pc, #32]	; (80086dc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c2:	f7fc f9a7 	bl	8004a14 <HAL_GetTick>
 80086c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086c8:	e00a      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086ca:	f7fc f9a3 	bl	8004a14 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b64      	cmp	r3, #100	; 0x64
 80086d6:	d903      	bls.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e0ba      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80086dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086e0:	4b5e      	ldr	r3, [pc, #376]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ec:	d0ed      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800870a:	2b00      	cmp	r3, #0
 800870c:	d02e      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d12a      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008716:	4b51      	ldr	r3, [pc, #324]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008724:	4b4d      	ldr	r3, [pc, #308]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800872a:	0f1b      	lsrs	r3, r3, #28
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	019a      	lsls	r2, r3, #6
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	061b      	lsls	r3, r3, #24
 8008744:	431a      	orrs	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	071b      	lsls	r3, r3, #28
 800874a:	4944      	ldr	r1, [pc, #272]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800874c:	4313      	orrs	r3, r2
 800874e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008752:	4b42      	ldr	r3, [pc, #264]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	3b01      	subs	r3, #1
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	493d      	ldr	r1, [pc, #244]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d022      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008780:	d11d      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008782:	4b36      	ldr	r3, [pc, #216]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008788:	0e1b      	lsrs	r3, r3, #24
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008790:	4b32      	ldr	r3, [pc, #200]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008796:	0f1b      	lsrs	r3, r3, #28
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	019a      	lsls	r2, r3, #6
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	041b      	lsls	r3, r3, #16
 80087aa:	431a      	orrs	r2, r3
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	431a      	orrs	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	071b      	lsls	r3, r3, #28
 80087b6:	4929      	ldr	r1, [pc, #164]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0308 	and.w	r3, r3, #8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d028      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087ca:	4b24      	ldr	r3, [pc, #144]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d0:	0e1b      	lsrs	r3, r3, #24
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80087d8:	4b20      	ldr	r3, [pc, #128]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	0c1b      	lsrs	r3, r3, #16
 80087e0:	f003 0303 	and.w	r3, r3, #3
 80087e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	019a      	lsls	r2, r3, #6
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	431a      	orrs	r2, r3
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	061b      	lsls	r3, r3, #24
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	071b      	lsls	r3, r3, #28
 80087fe:	4917      	ldr	r1, [pc, #92]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008806:	4b15      	ldr	r3, [pc, #84]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800880c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	4911      	ldr	r1, [pc, #68]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800881c:	4b0f      	ldr	r3, [pc, #60]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a0e      	ldr	r2, [pc, #56]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008828:	f7fc f8f4 	bl	8004a14 <HAL_GetTick>
 800882c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800882e:	e008      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008830:	f7fc f8f0 	bl	8004a14 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	; 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e007      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800884a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884e:	d1ef      	bne.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40023800 	.word	0x40023800

08008860 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e06b      	b.n	800894a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7f5b      	ldrb	r3, [r3, #29]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d105      	bne.n	8008888 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fb fce0 	bl	8004248 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	22ca      	movs	r2, #202	; 0xca
 8008894:	625a      	str	r2, [r3, #36]	; 0x24
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2253      	movs	r2, #83	; 0x53
 800889c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fb00 	bl	8008ea4 <RTC_EnterInitMode>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d008      	beq.n	80088bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	22ff      	movs	r2, #255	; 0xff
 80088b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2204      	movs	r2, #4
 80088b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e046      	b.n	800894a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6899      	ldr	r1, [r3, #8]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b23      	ldr	r3, [pc, #140]	; (8008954 <HAL_RTC_Init+0xf4>)
 80088c8:	400b      	ands	r3, r1
 80088ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6899      	ldr	r1, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	431a      	orrs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	68d2      	ldr	r2, [r2, #12]
 80088f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6919      	ldr	r1, [r3, #16]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	041a      	lsls	r2, r3, #16
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008916:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0208 	bic.w	r2, r2, #8
 8008926:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	22ff      	movs	r2, #255	; 0xff
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008948:	2300      	movs	r3, #0
  }
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	ff8fffbf 	.word	0xff8fffbf

08008958 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	7f1b      	ldrb	r3, [r3, #28]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_RTC_SetTime+0x1c>
 8008970:	2302      	movs	r3, #2
 8008972:	e0a8      	b.n	8008ac6 <HAL_RTC_SetTime+0x16e>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2202      	movs	r2, #2
 800897e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d126      	bne.n	80089d4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d102      	bne.n	800899a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2200      	movs	r2, #0
 8008998:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 faac 	bl	8008efc <RTC_ByteToBcd2>
 80089a4:	4603      	mov	r3, r0
 80089a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 faa5 	bl	8008efc <RTC_ByteToBcd2>
 80089b2:	4603      	mov	r3, r0
 80089b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80089b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	789b      	ldrb	r3, [r3, #2]
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 fa9d 	bl	8008efc <RTC_ByteToBcd2>
 80089c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80089c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	7b1b      	ldrb	r3, [r3, #12]
 80089cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80089ce:	4313      	orrs	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e018      	b.n	8008a06 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2200      	movs	r2, #0
 80089e6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	785b      	ldrb	r3, [r3, #1]
 80089f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80089f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80089fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	7b1b      	ldrb	r3, [r3, #12]
 8008a00:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	22ca      	movs	r2, #202	; 0xca
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2253      	movs	r2, #83	; 0x53
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fa44 	bl	8008ea4 <RTC_EnterInitMode>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	22ff      	movs	r2, #255	; 0xff
 8008a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e045      	b.n	8008ac6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	6979      	ldr	r1, [r7, #20]
 8008a40:	4b23      	ldr	r3, [pc, #140]	; (8008ad0 <HAL_RTC_SetTime+0x178>)
 8008a42:	400b      	ands	r3, r1
 8008a44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6899      	ldr	r1, [r3, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	431a      	orrs	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f003 0320 	and.w	r3, r3, #32
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d111      	bne.n	8008ab0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f9e1 	bl	8008e54 <HAL_RTC_WaitForSynchro>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00b      	beq.n	8008ab0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	22ff      	movs	r2, #255	; 0xff
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e00a      	b.n	8008ac6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
  }
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd90      	pop	{r4, r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	007f7f7f 	.word	0x007f7f7f

08008ad4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ad4:	b590      	push	{r4, r7, lr}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	7f1b      	ldrb	r3, [r3, #28]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_RTC_SetDate+0x1c>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e092      	b.n	8008c16 <HAL_RTC_SetDate+0x142>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2202      	movs	r2, #2
 8008afa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10e      	bne.n	8008b20 <HAL_RTC_SetDate+0x4c>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d008      	beq.n	8008b20 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	785b      	ldrb	r3, [r3, #1]
 8008b12:	f023 0310 	bic.w	r3, r3, #16
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	330a      	adds	r3, #10
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11c      	bne.n	8008b60 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	78db      	ldrb	r3, [r3, #3]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f9e6 	bl	8008efc <RTC_ByteToBcd2>
 8008b30:	4603      	mov	r3, r0
 8008b32:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f9df 	bl	8008efc <RTC_ByteToBcd2>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b42:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	789b      	ldrb	r3, [r3, #2]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f9d7 	bl	8008efc <RTC_ByteToBcd2>
 8008b4e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008b50:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]
 8008b5e:	e00e      	b.n	8008b7e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	78db      	ldrb	r3, [r3, #3]
 8008b64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b6c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008b72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	22ca      	movs	r2, #202	; 0xca
 8008b84:	625a      	str	r2, [r3, #36]	; 0x24
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2253      	movs	r2, #83	; 0x53
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f988 	bl	8008ea4 <RTC_EnterInitMode>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	22ff      	movs	r2, #255	; 0xff
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e031      	b.n	8008c16 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	6979      	ldr	r1, [r7, #20]
 8008bb8:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <HAL_RTC_SetDate+0x14c>)
 8008bba:	400b      	ands	r3, r1
 8008bbc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bcc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d111      	bne.n	8008c00 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f939 	bl	8008e54 <HAL_RTC_WaitForSynchro>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	22ff      	movs	r2, #255	; 0xff
 8008bee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e00a      	b.n	8008c16 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	22ff      	movs	r2, #255	; 0xff
 8008c06:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008c14:	2300      	movs	r3, #0
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd90      	pop	{r4, r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	00ffff3f 	.word	0x00ffff3f

08008c24 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c24:	b590      	push	{r4, r7, lr}
 8008c26:	b089      	sub	sp, #36	; 0x24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	7f1b      	ldrb	r3, [r3, #28]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_RTC_SetAlarm+0x24>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e101      	b.n	8008e4c <HAL_RTC_SetAlarm+0x228>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2202      	movs	r2, #2
 8008c52:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d137      	bne.n	8008cca <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d102      	bne.n	8008c6e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f942 	bl	8008efc <RTC_ByteToBcd2>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f93b 	bl	8008efc <RTC_ByteToBcd2>
 8008c86:	4603      	mov	r3, r0
 8008c88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008c8a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	789b      	ldrb	r3, [r3, #2]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f933 	bl	8008efc <RTC_ByteToBcd2>
 8008c96:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c98:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	7b1b      	ldrb	r3, [r3, #12]
 8008ca0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008ca2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f925 	bl	8008efc <RTC_ByteToBcd2>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008cb6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008cbe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	e023      	b.n	8008d12 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d102      	bne.n	8008cde <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008cea:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008cf0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	7b1b      	ldrb	r3, [r3, #12]
 8008cf6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008cf8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d00:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008d02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008d08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	22ca      	movs	r2, #202	; 0xca
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2253      	movs	r2, #83	; 0x53
 8008d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d36:	d13f      	bne.n	8008db8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d46:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d56:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d58:	f7fb fe5c 	bl	8004a14 <HAL_GetTick>
 8008d5c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008d5e:	e013      	b.n	8008d88 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d60:	f7fb fe58 	bl	8004a14 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d6e:	d90b      	bls.n	8008d88 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	22ff      	movs	r2, #255	; 0xff
 8008d76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e061      	b.n	8008e4c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0e4      	beq.n	8008d60 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008db4:	609a      	str	r2, [r3, #8]
 8008db6:	e03e      	b.n	8008e36 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689a      	ldr	r2, [r3, #8]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008dc6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dd6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dd8:	f7fb fe1c 	bl	8004a14 <HAL_GetTick>
 8008ddc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008dde:	e013      	b.n	8008e08 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008de0:	f7fb fe18 	bl	8004a14 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dee:	d90b      	bls.n	8008e08 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e021      	b.n	8008e4c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0e4      	beq.n	8008de0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e34:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	22ff      	movs	r2, #255	; 0xff
 8008e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2201      	movs	r2, #1
 8008e42:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3724      	adds	r7, #36	; 0x24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd90      	pop	{r4, r7, pc}

08008e54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e70:	f7fb fdd0 	bl	8004a14 <HAL_GetTick>
 8008e74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e76:	e009      	b.n	8008e8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e78:	f7fb fdcc 	bl	8004a14 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e86:	d901      	bls.n	8008e8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e007      	b.n	8008e9c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0ee      	beq.n	8008e78 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d119      	bne.n	8008ef2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ec8:	f7fb fda4 	bl	8004a14 <HAL_GetTick>
 8008ecc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ece:	e009      	b.n	8008ee4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ed0:	f7fb fda0 	bl	8004a14 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ede:	d901      	bls.n	8008ee4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e007      	b.n	8008ef4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0ee      	beq.n	8008ed0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008f0a:	e005      	b.n	8008f18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	3b0a      	subs	r3, #10
 8008f16:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d8f6      	bhi.n	8008f0c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	b2db      	uxtb	r3, r3
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7f1b      	ldrb	r3, [r3, #28]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e03e      	b.n	8008fd2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	22ca      	movs	r2, #202	; 0xca
 8008f7a:	625a      	str	r2, [r3, #36]	; 0x24
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2253      	movs	r2, #83	; 0x53
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0206 	bic.w	r2, r2, #6
 8008f92:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689a      	ldr	r2, [r3, #8]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	22ff      	movs	r2, #255	; 0xff
 8008fc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	fffff7f7 	.word	0xfffff7f7

08008fe4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e025      	b.n	8009044 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7fb fbd1 	bl	80047b4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f002 f9d1 	bl	800b3cc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	461a      	mov	r2, r3
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	f002 fa3b 	bl	800b4b0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d101      	bne.n	8009068 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009064:	2302      	movs	r3, #2
 8009066:	e018      	b.n	800909a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	4618      	mov	r0, r3
 800907a:	f002 fa99 	bl	800b5b0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d104      	bne.n	8009090 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2205      	movs	r2, #5
 800908a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800908e:	e003      	b.n	8009098 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d101      	bne.n	80090bc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
 80090ba:	e00e      	b.n	80090da <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f002 fa91 	bl	800b5f2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e084      	b.n	80091fe <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fb f8b4 	bl	800427c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800912a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009134:	d902      	bls.n	800913c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e002      	b.n	8009142 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800913c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009140:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800914a:	d007      	beq.n	800915c <HAL_SPI_Init+0x7a>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009154:	d002      	beq.n	800915c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10b      	bne.n	800917c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800916c:	d903      	bls.n	8009176 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2202      	movs	r2, #2
 8009172:	631a      	str	r2, [r3, #48]	; 0x30
 8009174:	e002      	b.n	800917c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	431a      	orrs	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	ea42 0103 	orr.w	r1, r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	f003 0204 	and.w	r2, r3, #4
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	ea42 0103 	orr.w	r1, r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	430a      	orrs	r2, r1
 80091dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e01d      	b.n	8009254 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d106      	bne.n	8009232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7fb f897 	bl	8004360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2202      	movs	r2, #2
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3304      	adds	r3, #4
 8009242:	4619      	mov	r1, r3
 8009244:	4610      	mov	r0, r2
 8009246:	f000 fbc3 	bl	80099d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <HAL_TIM_Base_Start_IT+0x50>)
 800927c:	4013      	ands	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b06      	cmp	r3, #6
 8009284:	d00b      	beq.n	800929e <HAL_TIM_Base_Start_IT+0x42>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800928c:	d007      	beq.n	800929e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0201 	orr.w	r2, r2, #1
 800929c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	00010007 	.word	0x00010007

080092b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e01d      	b.n	80092fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d106      	bne.n	80092dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f815 	bl	8009306 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f000 fb6e 	bl	80099d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b02      	cmp	r3, #2
 800932e:	d122      	bne.n	8009376 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b02      	cmp	r3, #2
 800933c:	d11b      	bne.n	8009376 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f06f 0202 	mvn.w	r2, #2
 8009346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fb19 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 8009362:	e005      	b.n	8009370 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb0b 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fb1c 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b04      	cmp	r3, #4
 8009382:	d122      	bne.n	80093ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b04      	cmp	r3, #4
 8009390:	d11b      	bne.n	80093ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f06f 0204 	mvn.w	r2, #4
 800939a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 faef 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 80093b6:	e005      	b.n	80093c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fae1 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 faf2 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d122      	bne.n	800941e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	d11b      	bne.n	800941e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f06f 0208 	mvn.w	r2, #8
 80093ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2204      	movs	r2, #4
 80093f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fac5 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 800940a:	e005      	b.n	8009418 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fab7 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fac8 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b10      	cmp	r3, #16
 800942a:	d122      	bne.n	8009472 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b10      	cmp	r3, #16
 8009438:	d11b      	bne.n	8009472 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f06f 0210 	mvn.w	r2, #16
 8009442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2208      	movs	r2, #8
 8009448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa9b 	bl	8009994 <HAL_TIM_IC_CaptureCallback>
 800945e:	e005      	b.n	800946c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa8d 	bl	8009980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa9e 	bl	80099a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b01      	cmp	r3, #1
 800947e:	d10e      	bne.n	800949e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b01      	cmp	r3, #1
 800948c:	d107      	bne.n	800949e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f06f 0201 	mvn.w	r2, #1
 8009496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7f8 ff11 	bl	80022c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a8:	2b80      	cmp	r3, #128	; 0x80
 80094aa:	d10e      	bne.n	80094ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b6:	2b80      	cmp	r3, #128	; 0x80
 80094b8:	d107      	bne.n	80094ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 ffb9 	bl	800a43c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d8:	d10e      	bne.n	80094f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e4:	2b80      	cmp	r3, #128	; 0x80
 80094e6:	d107      	bne.n	80094f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 ffac 	bl	800a450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d10e      	bne.n	8009524 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009510:	2b40      	cmp	r3, #64	; 0x40
 8009512:	d107      	bne.n	8009524 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800951c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa4c 	bl	80099bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b20      	cmp	r3, #32
 8009530:	d10e      	bne.n	8009550 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b20      	cmp	r3, #32
 800953e:	d107      	bne.n	8009550 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0220 	mvn.w	r2, #32
 8009548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 ff6c 	bl	800a428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800956e:	2302      	movs	r3, #2
 8009570:	e105      	b.n	800977e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2202      	movs	r2, #2
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b14      	cmp	r3, #20
 8009586:	f200 80f0 	bhi.w	800976a <HAL_TIM_PWM_ConfigChannel+0x212>
 800958a:	a201      	add	r2, pc, #4	; (adr r2, 8009590 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095e5 	.word	0x080095e5
 8009594:	0800976b 	.word	0x0800976b
 8009598:	0800976b 	.word	0x0800976b
 800959c:	0800976b 	.word	0x0800976b
 80095a0:	08009625 	.word	0x08009625
 80095a4:	0800976b 	.word	0x0800976b
 80095a8:	0800976b 	.word	0x0800976b
 80095ac:	0800976b 	.word	0x0800976b
 80095b0:	08009667 	.word	0x08009667
 80095b4:	0800976b 	.word	0x0800976b
 80095b8:	0800976b 	.word	0x0800976b
 80095bc:	0800976b 	.word	0x0800976b
 80095c0:	080096a7 	.word	0x080096a7
 80095c4:	0800976b 	.word	0x0800976b
 80095c8:	0800976b 	.word	0x0800976b
 80095cc:	0800976b 	.word	0x0800976b
 80095d0:	080096e9 	.word	0x080096e9
 80095d4:	0800976b 	.word	0x0800976b
 80095d8:	0800976b 	.word	0x0800976b
 80095dc:	0800976b 	.word	0x0800976b
 80095e0:	08009729 	.word	0x08009729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fa90 	bl	8009b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0208 	orr.w	r2, r2, #8
 80095fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0204 	bic.w	r2, r2, #4
 800960e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6999      	ldr	r1, [r3, #24]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	691a      	ldr	r2, [r3, #16]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	619a      	str	r2, [r3, #24]
      break;
 8009622:	e0a3      	b.n	800976c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fae2 	bl	8009bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800963e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699a      	ldr	r2, [r3, #24]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800964e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6999      	ldr	r1, [r3, #24]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	021a      	lsls	r2, r3, #8
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	619a      	str	r2, [r3, #24]
      break;
 8009664:	e082      	b.n	800976c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fb39 	bl	8009ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69da      	ldr	r2, [r3, #28]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f042 0208 	orr.w	r2, r2, #8
 8009680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69da      	ldr	r2, [r3, #28]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0204 	bic.w	r2, r2, #4
 8009690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69d9      	ldr	r1, [r3, #28]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	61da      	str	r2, [r3, #28]
      break;
 80096a4:	e062      	b.n	800976c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fb8f 	bl	8009dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69da      	ldr	r2, [r3, #28]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69d9      	ldr	r1, [r3, #28]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	021a      	lsls	r2, r3, #8
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	61da      	str	r2, [r3, #28]
      break;
 80096e6:	e041      	b.n	800976c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 fbc6 	bl	8009e80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0208 	orr.w	r2, r2, #8
 8009702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0204 	bic.w	r2, r2, #4
 8009712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009726:	e021      	b.n	800976c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fbf8 	bl	8009f24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	021a      	lsls	r2, r3, #8
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	430a      	orrs	r2, r1
 8009766:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009768:	e000      	b.n	800976c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800976a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009798:	2b01      	cmp	r3, #1
 800979a:	d101      	bne.n	80097a0 <HAL_TIM_ConfigClockSource+0x18>
 800979c:	2302      	movs	r3, #2
 800979e:	e0a6      	b.n	80098ee <HAL_TIM_ConfigClockSource+0x166>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4b4f      	ldr	r3, [pc, #316]	; (80098f8 <HAL_TIM_ConfigClockSource+0x170>)
 80097bc:	4013      	ands	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	d067      	beq.n	80098a8 <HAL_TIM_ConfigClockSource+0x120>
 80097d8:	2b40      	cmp	r3, #64	; 0x40
 80097da:	d80b      	bhi.n	80097f4 <HAL_TIM_ConfigClockSource+0x6c>
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d073      	beq.n	80098c8 <HAL_TIM_ConfigClockSource+0x140>
 80097e0:	2b10      	cmp	r3, #16
 80097e2:	d802      	bhi.n	80097ea <HAL_TIM_ConfigClockSource+0x62>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d06f      	beq.n	80098c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80097e8:	e078      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d06c      	beq.n	80098c8 <HAL_TIM_ConfigClockSource+0x140>
 80097ee:	2b30      	cmp	r3, #48	; 0x30
 80097f0:	d06a      	beq.n	80098c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80097f2:	e073      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80097f4:	2b70      	cmp	r3, #112	; 0x70
 80097f6:	d00d      	beq.n	8009814 <HAL_TIM_ConfigClockSource+0x8c>
 80097f8:	2b70      	cmp	r3, #112	; 0x70
 80097fa:	d804      	bhi.n	8009806 <HAL_TIM_ConfigClockSource+0x7e>
 80097fc:	2b50      	cmp	r3, #80	; 0x50
 80097fe:	d033      	beq.n	8009868 <HAL_TIM_ConfigClockSource+0xe0>
 8009800:	2b60      	cmp	r3, #96	; 0x60
 8009802:	d041      	beq.n	8009888 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009804:	e06a      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800980a:	d066      	beq.n	80098da <HAL_TIM_ConfigClockSource+0x152>
 800980c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009810:	d017      	beq.n	8009842 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009812:	e063      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	6899      	ldr	r1, [r3, #8]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f000 fcd4 	bl	800a1d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009836:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]
      break;
 8009840:	e04c      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6818      	ldr	r0, [r3, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	6899      	ldr	r1, [r3, #8]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f000 fcbd 	bl	800a1d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009864:	609a      	str	r2, [r3, #8]
      break;
 8009866:	e039      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	6859      	ldr	r1, [r3, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	461a      	mov	r2, r3
 8009876:	f000 fc31 	bl	800a0dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2150      	movs	r1, #80	; 0x50
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fc8a 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 8009886:	e029      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	6859      	ldr	r1, [r3, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	461a      	mov	r2, r3
 8009896:	f000 fc50 	bl	800a13a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2160      	movs	r1, #96	; 0x60
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fc7a 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 80098a6:	e019      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	6859      	ldr	r1, [r3, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	461a      	mov	r2, r3
 80098b6:	f000 fc11 	bl	800a0dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2140      	movs	r1, #64	; 0x40
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fc6a 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 80098c6:	e009      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4619      	mov	r1, r3
 80098d2:	4610      	mov	r0, r2
 80098d4:	f000 fc61 	bl	800a19a <TIM_ITRx_SetConfig>
      break;
 80098d8:	e000      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80098da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	fffeff88 	.word	0xfffeff88

080098fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009910:	2302      	movs	r3, #2
 8009912:	e031      	b.n	8009978 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fb50 	bl	8009fcc <TIM_SlaveTimer_SetConfig>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e018      	b.n	8009978 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009954:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68da      	ldr	r2, [r3, #12]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009964:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a40      	ldr	r2, [pc, #256]	; (8009ae4 <TIM_Base_SetConfig+0x114>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d013      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d00f      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a3d      	ldr	r2, [pc, #244]	; (8009ae8 <TIM_Base_SetConfig+0x118>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00b      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a3c      	ldr	r2, [pc, #240]	; (8009aec <TIM_Base_SetConfig+0x11c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d007      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a3b      	ldr	r2, [pc, #236]	; (8009af0 <TIM_Base_SetConfig+0x120>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_Base_SetConfig+0x40>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a3a      	ldr	r2, [pc, #232]	; (8009af4 <TIM_Base_SetConfig+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d108      	bne.n	8009a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a2f      	ldr	r2, [pc, #188]	; (8009ae4 <TIM_Base_SetConfig+0x114>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d02b      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d027      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <TIM_Base_SetConfig+0x118>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d023      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a2b      	ldr	r2, [pc, #172]	; (8009aec <TIM_Base_SetConfig+0x11c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d01f      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a2a      	ldr	r2, [pc, #168]	; (8009af0 <TIM_Base_SetConfig+0x120>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d01b      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a29      	ldr	r2, [pc, #164]	; (8009af4 <TIM_Base_SetConfig+0x124>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d017      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a28      	ldr	r2, [pc, #160]	; (8009af8 <TIM_Base_SetConfig+0x128>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d013      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a27      	ldr	r2, [pc, #156]	; (8009afc <TIM_Base_SetConfig+0x12c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d00f      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a26      	ldr	r2, [pc, #152]	; (8009b00 <TIM_Base_SetConfig+0x130>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d00b      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a25      	ldr	r2, [pc, #148]	; (8009b04 <TIM_Base_SetConfig+0x134>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d007      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a24      	ldr	r2, [pc, #144]	; (8009b08 <TIM_Base_SetConfig+0x138>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d003      	beq.n	8009a82 <TIM_Base_SetConfig+0xb2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a23      	ldr	r2, [pc, #140]	; (8009b0c <TIM_Base_SetConfig+0x13c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d108      	bne.n	8009a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a0a      	ldr	r2, [pc, #40]	; (8009ae4 <TIM_Base_SetConfig+0x114>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d003      	beq.n	8009ac8 <TIM_Base_SetConfig+0xf8>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a0c      	ldr	r2, [pc, #48]	; (8009af4 <TIM_Base_SetConfig+0x124>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d103      	bne.n	8009ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	691a      	ldr	r2, [r3, #16]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	615a      	str	r2, [r3, #20]
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40000400 	.word	0x40000400
 8009aec:	40000800 	.word	0x40000800
 8009af0:	40000c00 	.word	0x40000c00
 8009af4:	40010400 	.word	0x40010400
 8009af8:	40014000 	.word	0x40014000
 8009afc:	40014400 	.word	0x40014400
 8009b00:	40014800 	.word	0x40014800
 8009b04:	40001800 	.word	0x40001800
 8009b08:	40001c00 	.word	0x40001c00
 8009b0c:	40002000 	.word	0x40002000

08009b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	f023 0201 	bic.w	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	4b2b      	ldr	r3, [pc, #172]	; (8009be8 <TIM_OC1_SetConfig+0xd8>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0303 	bic.w	r3, r3, #3
 8009b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f023 0302 	bic.w	r3, r3, #2
 8009b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a21      	ldr	r2, [pc, #132]	; (8009bec <TIM_OC1_SetConfig+0xdc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d003      	beq.n	8009b74 <TIM_OC1_SetConfig+0x64>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a20      	ldr	r2, [pc, #128]	; (8009bf0 <TIM_OC1_SetConfig+0xe0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d10c      	bne.n	8009b8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f023 0308 	bic.w	r3, r3, #8
 8009b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f023 0304 	bic.w	r3, r3, #4
 8009b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a16      	ldr	r2, [pc, #88]	; (8009bec <TIM_OC1_SetConfig+0xdc>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d003      	beq.n	8009b9e <TIM_OC1_SetConfig+0x8e>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <TIM_OC1_SetConfig+0xe0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d111      	bne.n	8009bc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	621a      	str	r2, [r3, #32]
}
 8009bdc:	bf00      	nop
 8009bde:	371c      	adds	r7, #28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	fffeff8f 	.word	0xfffeff8f
 8009bec:	40010000 	.word	0x40010000
 8009bf0:	40010400 	.word	0x40010400

08009bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	f023 0210 	bic.w	r2, r3, #16
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4b2e      	ldr	r3, [pc, #184]	; (8009cd8 <TIM_OC2_SetConfig+0xe4>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f023 0320 	bic.w	r3, r3, #32
 8009c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a23      	ldr	r2, [pc, #140]	; (8009cdc <TIM_OC2_SetConfig+0xe8>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d003      	beq.n	8009c5c <TIM_OC2_SetConfig+0x68>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a22      	ldr	r2, [pc, #136]	; (8009ce0 <TIM_OC2_SetConfig+0xec>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d10d      	bne.n	8009c78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <TIM_OC2_SetConfig+0xe8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d003      	beq.n	8009c88 <TIM_OC2_SetConfig+0x94>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a17      	ldr	r2, [pc, #92]	; (8009ce0 <TIM_OC2_SetConfig+0xec>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d113      	bne.n	8009cb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	621a      	str	r2, [r3, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	feff8fff 	.word	0xfeff8fff
 8009cdc:	40010000 	.word	0x40010000
 8009ce0:	40010400 	.word	0x40010400

08009ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4b2d      	ldr	r3, [pc, #180]	; (8009dc4 <TIM_OC3_SetConfig+0xe0>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0303 	bic.w	r3, r3, #3
 8009d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <TIM_OC3_SetConfig+0xe4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d003      	beq.n	8009d4a <TIM_OC3_SetConfig+0x66>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a21      	ldr	r2, [pc, #132]	; (8009dcc <TIM_OC3_SetConfig+0xe8>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d10d      	bne.n	8009d66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <TIM_OC3_SetConfig+0xe4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_OC3_SetConfig+0x92>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a16      	ldr	r2, [pc, #88]	; (8009dcc <TIM_OC3_SetConfig+0xe8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d113      	bne.n	8009d9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	621a      	str	r2, [r3, #32]
}
 8009db8:	bf00      	nop
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	fffeff8f 	.word	0xfffeff8f
 8009dc8:	40010000 	.word	0x40010000
 8009dcc:	40010400 	.word	0x40010400

08009dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4b1e      	ldr	r3, [pc, #120]	; (8009e74 <TIM_OC4_SetConfig+0xa4>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	031b      	lsls	r3, r3, #12
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a13      	ldr	r2, [pc, #76]	; (8009e78 <TIM_OC4_SetConfig+0xa8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d003      	beq.n	8009e38 <TIM_OC4_SetConfig+0x68>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a12      	ldr	r2, [pc, #72]	; (8009e7c <TIM_OC4_SetConfig+0xac>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d109      	bne.n	8009e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	019b      	lsls	r3, r3, #6
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	621a      	str	r2, [r3, #32]
}
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	feff8fff 	.word	0xfeff8fff
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40010400 	.word	0x40010400

08009e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <TIM_OC5_SetConfig+0x98>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	041b      	lsls	r3, r3, #16
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a12      	ldr	r2, [pc, #72]	; (8009f1c <TIM_OC5_SetConfig+0x9c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d003      	beq.n	8009ede <TIM_OC5_SetConfig+0x5e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a11      	ldr	r2, [pc, #68]	; (8009f20 <TIM_OC5_SetConfig+0xa0>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d109      	bne.n	8009ef2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	621a      	str	r2, [r3, #32]
}
 8009f0c:	bf00      	nop
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	fffeff8f 	.word	0xfffeff8f
 8009f1c:	40010000 	.word	0x40010000
 8009f20:	40010400 	.word	0x40010400

08009f24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4b1c      	ldr	r3, [pc, #112]	; (8009fc0 <TIM_OC6_SetConfig+0x9c>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	051b      	lsls	r3, r3, #20
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a13      	ldr	r2, [pc, #76]	; (8009fc4 <TIM_OC6_SetConfig+0xa0>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_OC6_SetConfig+0x60>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <TIM_OC6_SetConfig+0xa4>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d109      	bne.n	8009f98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	029b      	lsls	r3, r3, #10
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	621a      	str	r2, [r3, #32]
}
 8009fb2:	bf00      	nop
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	feff8fff 	.word	0xfeff8fff
 8009fc4:	40010000 	.word	0x40010000
 8009fc8:	40010400 	.word	0x40010400

08009fcc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	697a      	ldr	r2, [r7, #20]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	4b39      	ldr	r3, [pc, #228]	; (800a0d8 <TIM_SlaveTimer_SetConfig+0x10c>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b30      	cmp	r3, #48	; 0x30
 800a010:	d05c      	beq.n	800a0cc <TIM_SlaveTimer_SetConfig+0x100>
 800a012:	2b30      	cmp	r3, #48	; 0x30
 800a014:	d806      	bhi.n	800a024 <TIM_SlaveTimer_SetConfig+0x58>
 800a016:	2b10      	cmp	r3, #16
 800a018:	d058      	beq.n	800a0cc <TIM_SlaveTimer_SetConfig+0x100>
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d056      	beq.n	800a0cc <TIM_SlaveTimer_SetConfig+0x100>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d054      	beq.n	800a0cc <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a022:	e054      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a024:	2b50      	cmp	r3, #80	; 0x50
 800a026:	d03d      	beq.n	800a0a4 <TIM_SlaveTimer_SetConfig+0xd8>
 800a028:	2b50      	cmp	r3, #80	; 0x50
 800a02a:	d802      	bhi.n	800a032 <TIM_SlaveTimer_SetConfig+0x66>
 800a02c:	2b40      	cmp	r3, #64	; 0x40
 800a02e:	d010      	beq.n	800a052 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800a030:	e04d      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a032:	2b60      	cmp	r3, #96	; 0x60
 800a034:	d040      	beq.n	800a0b8 <TIM_SlaveTimer_SetConfig+0xec>
 800a036:	2b70      	cmp	r3, #112	; 0x70
 800a038:	d000      	beq.n	800a03c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800a03a:	e048      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	68d9      	ldr	r1, [r3, #12]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	f000 f8c0 	bl	800a1d0 <TIM_ETR_SetConfig>
      break;
 800a050:	e03d      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b05      	cmp	r3, #5
 800a058:	d101      	bne.n	800a05e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e038      	b.n	800a0d0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6a1a      	ldr	r2, [r3, #32]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0201 	bic.w	r2, r2, #1
 800a074:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a084:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	011b      	lsls	r3, r3, #4
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	621a      	str	r2, [r3, #32]
      break;
 800a0a2:	e014      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6818      	ldr	r0, [r3, #0]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6899      	ldr	r1, [r3, #8]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	f000 f813 	bl	800a0dc <TIM_TI1_ConfigInputStage>
      break;
 800a0b6:	e00a      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	6899      	ldr	r1, [r3, #8]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	f000 f838 	bl	800a13a <TIM_TI2_ConfigInputStage>
      break;
 800a0ca:	e000      	b.n	800a0ce <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a0cc:	bf00      	nop
  }
  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	fffefff8 	.word	0xfffefff8

0800a0dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f023 0201 	bic.w	r2, r3, #1
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f023 030a 	bic.w	r3, r3, #10
 800a118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4313      	orrs	r3, r2
 800a120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	621a      	str	r2, [r3, #32]
}
 800a12e:	bf00      	nop
 800a130:	371c      	adds	r7, #28
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b087      	sub	sp, #28
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f023 0210 	bic.w	r2, r3, #16
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a1b      	ldr	r3, [r3, #32]
 800a15c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	031b      	lsls	r3, r3, #12
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4313      	orrs	r3, r2
 800a180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	697a      	ldr	r2, [r7, #20]
 800a186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	621a      	str	r2, [r3, #32]
}
 800a18e:	bf00      	nop
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	f043 0307 	orr.w	r3, r3, #7
 800a1bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	609a      	str	r2, [r3, #8]
}
 800a1c4:	bf00      	nop
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	021a      	lsls	r2, r3, #8
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	697a      	ldr	r2, [r7, #20]
 800a202:	609a      	str	r2, [r3, #8]
}
 800a204:	bf00      	nop
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a224:	2302      	movs	r3, #2
 800a226:	e06d      	b.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a30      	ldr	r2, [pc, #192]	; (800a310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d004      	beq.n	800a25c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a2f      	ldr	r2, [pc, #188]	; (800a314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d108      	bne.n	800a26e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a262:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a274:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a20      	ldr	r2, [pc, #128]	; (800a310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d022      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29a:	d01d      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a1d      	ldr	r2, [pc, #116]	; (800a318 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d018      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a1c      	ldr	r2, [pc, #112]	; (800a31c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d013      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a1a      	ldr	r2, [pc, #104]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d00e      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a15      	ldr	r2, [pc, #84]	; (800a314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d009      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a16      	ldr	r2, [pc, #88]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d004      	beq.n	800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a15      	ldr	r2, [pc, #84]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d10c      	bne.n	800a2f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	40010000 	.word	0x40010000
 800a314:	40010400 	.word	0x40010400
 800a318:	40000400 	.word	0x40000400
 800a31c:	40000800 	.word	0x40000800
 800a320:	40000c00 	.word	0x40000c00
 800a324:	40014000 	.word	0x40014000
 800a328:	40001800 	.word	0x40001800

0800a32c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a344:	2302      	movs	r3, #2
 800a346:	e065      	b.n	800a414 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	041b      	lsls	r3, r3, #16
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a16      	ldr	r2, [pc, #88]	; (800a420 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d004      	beq.n	800a3d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a14      	ldr	r2, [pc, #80]	; (800a424 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d115      	bne.n	800a402 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	051b      	lsls	r3, r3, #20
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	40010000 	.word	0x40010000
 800a424:	40010400 	.word	0x40010400

0800a428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e040      	b.n	800a4f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d106      	bne.n	800a48c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7fa f836 	bl	80044f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2224      	movs	r2, #36	; 0x24
 800a490:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0201 	bic.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 faa6 	bl	800a9f4 <UART_SetConfig>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d101      	bne.n	800a4b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e022      	b.n	800a4f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fd44 	bl	800af48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689a      	ldr	r2, [r3, #8]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0201 	orr.w	r2, r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fdcb 	bl	800b08c <UART_CheckIdleState>
 800a4f6:	4603      	mov	r3, r0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08a      	sub	sp, #40	; 0x28
 800a504:	af02      	add	r7, sp, #8
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a514:	2b20      	cmp	r3, #32
 800a516:	d17f      	bne.n	800a618 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <HAL_UART_Transmit+0x24>
 800a51e:	88fb      	ldrh	r3, [r7, #6]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e078      	b.n	800a61a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d101      	bne.n	800a536 <HAL_UART_Transmit+0x36>
 800a532:	2302      	movs	r3, #2
 800a534:	e071      	b.n	800a61a <HAL_UART_Transmit+0x11a>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2221      	movs	r2, #33	; 0x21
 800a548:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a54a:	f7fa fa63 	bl	8004a14 <HAL_GetTick>
 800a54e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	88fa      	ldrh	r2, [r7, #6]
 800a554:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	88fa      	ldrh	r2, [r7, #6]
 800a55c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a568:	d108      	bne.n	800a57c <HAL_UART_Transmit+0x7c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	e003      	b.n	800a584 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a58c:	e02c      	b.n	800a5e8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2200      	movs	r2, #0
 800a596:	2180      	movs	r1, #128	; 0x80
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 fda6 	bl	800b0ea <UART_WaitOnFlagUntilTimeout>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e038      	b.n	800a61a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10b      	bne.n	800a5c6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	3302      	adds	r3, #2
 800a5c2:	61bb      	str	r3, [r7, #24]
 800a5c4:	e007      	b.n	800a5d6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1cc      	bne.n	800a58e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2140      	movs	r1, #64	; 0x40
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fd73 	bl	800b0ea <UART_WaitOnFlagUntilTimeout>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e005      	b.n	800a61a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2220      	movs	r2, #32
 800a612:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	e000      	b.n	800a61a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a618:	2302      	movs	r3, #2
  }
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	4613      	mov	r3, r2
 800a630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a636:	2b20      	cmp	r3, #32
 800a638:	f040 808a 	bne.w	800a750 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <HAL_UART_Receive_IT+0x24>
 800a642:	88fb      	ldrh	r3, [r7, #6]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e082      	b.n	800a752 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a652:	2b01      	cmp	r3, #1
 800a654:	d101      	bne.n	800a65a <HAL_UART_Receive_IT+0x36>
 800a656:	2302      	movs	r3, #2
 800a658:	e07b      	b.n	800a752 <HAL_UART_Receive_IT+0x12e>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	88fa      	ldrh	r2, [r7, #6]
 800a66c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	88fa      	ldrh	r2, [r7, #6]
 800a674:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a686:	d10e      	bne.n	800a6a6 <HAL_UART_Receive_IT+0x82>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d105      	bne.n	800a69c <HAL_UART_Receive_IT+0x78>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a69a:	e02d      	b.n	800a6f8 <HAL_UART_Receive_IT+0xd4>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	22ff      	movs	r2, #255	; 0xff
 800a6a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a6a4:	e028      	b.n	800a6f8 <HAL_UART_Receive_IT+0xd4>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10d      	bne.n	800a6ca <HAL_UART_Receive_IT+0xa6>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d104      	bne.n	800a6c0 <HAL_UART_Receive_IT+0x9c>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	22ff      	movs	r2, #255	; 0xff
 800a6ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a6be:	e01b      	b.n	800a6f8 <HAL_UART_Receive_IT+0xd4>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	227f      	movs	r2, #127	; 0x7f
 800a6c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a6c8:	e016      	b.n	800a6f8 <HAL_UART_Receive_IT+0xd4>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6d2:	d10d      	bne.n	800a6f0 <HAL_UART_Receive_IT+0xcc>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d104      	bne.n	800a6e6 <HAL_UART_Receive_IT+0xc2>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	227f      	movs	r2, #127	; 0x7f
 800a6e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a6e4:	e008      	b.n	800a6f8 <HAL_UART_Receive_IT+0xd4>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	223f      	movs	r2, #63	; 0x3f
 800a6ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a6ee:	e003      	b.n	800a6f8 <HAL_UART_Receive_IT+0xd4>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2222      	movs	r2, #34	; 0x22
 800a702:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f042 0201 	orr.w	r2, r2, #1
 800a712:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a71c:	d107      	bne.n	800a72e <HAL_UART_Receive_IT+0x10a>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d103      	bne.n	800a72e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4a0d      	ldr	r2, [pc, #52]	; (800a760 <HAL_UART_Receive_IT+0x13c>)
 800a72a:	661a      	str	r2, [r3, #96]	; 0x60
 800a72c:	e002      	b.n	800a734 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4a0c      	ldr	r2, [pc, #48]	; (800a764 <HAL_UART_Receive_IT+0x140>)
 800a732:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a74a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e000      	b.n	800a752 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a750:	2302      	movs	r3, #2
  }
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	0800b325 	.word	0x0800b325
 800a764:	0800b27f 	.word	0x0800b27f

0800a768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a78e:	4013      	ands	r3, r2
 800a790:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d113      	bne.n	800a7c0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00e      	beq.n	800a7c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	f003 0320 	and.w	r3, r3, #32
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d009      	beq.n	800a7c0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8100 	beq.w	800a9b6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
      }
      return;
 800a7be:	e0fa      	b.n	800a9b6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 80d5 	beq.w	800a972 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d105      	bne.n	800a7de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80ca 	beq.w	800a972 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00e      	beq.n	800a806 <HAL_UART_IRQHandler+0x9e>
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7fe:	f043 0201 	orr.w	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00e      	beq.n	800a82e <HAL_UART_IRQHandler+0xc6>
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	d009      	beq.n	800a82e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2202      	movs	r2, #2
 800a820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a826:	f043 0204 	orr.w	r2, r3, #4
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	f003 0304 	and.w	r3, r3, #4
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00e      	beq.n	800a856 <HAL_UART_IRQHandler+0xee>
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d009      	beq.n	800a856 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2204      	movs	r2, #4
 800a848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a84e:	f043 0202 	orr.w	r2, r3, #2
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0308 	and.w	r3, r3, #8
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d013      	beq.n	800a888 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b00      	cmp	r3, #0
 800a868:	d104      	bne.n	800a874 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2208      	movs	r2, #8
 800a87a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a880:	f043 0208 	orr.w	r2, r3, #8
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00f      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x14a>
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00a      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8aa:	f043 0220 	orr.w	r2, r3, #32
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d07f      	beq.n	800a9ba <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	f003 0320 	and.w	r3, r3, #32
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00c      	beq.n	800a8de <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d007      	beq.n	800a8de <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d004      	beq.n	800a8fc <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d031      	beq.n	800a960 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fc6f 	bl	800b1e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90c:	2b40      	cmp	r3, #64	; 0x40
 800a90e:	d123      	bne.n	800a958 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689a      	ldr	r2, [r3, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a91e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d013      	beq.n	800a950 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a92c:	4a26      	ldr	r2, [pc, #152]	; (800a9c8 <HAL_UART_IRQHandler+0x260>)
 800a92e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a934:	4618      	mov	r0, r3
 800a936:	f7fa ff31 	bl	800579c <HAL_DMA_Abort_IT>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d016      	beq.n	800a96e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a94a:	4610      	mov	r0, r2
 800a94c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94e:	e00e      	b.n	800a96e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f845 	bl	800a9e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a956:	e00a      	b.n	800a96e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f841 	bl	800a9e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a95e:	e006      	b.n	800a96e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f83d 	bl	800a9e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a96c:	e025      	b.n	800a9ba <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a96e:	bf00      	nop
    return;
 800a970:	e023      	b.n	800a9ba <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00d      	beq.n	800a998 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a982:	2b00      	cmp	r3, #0
 800a984:	d008      	beq.n	800a998 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d017      	beq.n	800a9be <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	4798      	blx	r3
    }
    return;
 800a996:	e012      	b.n	800a9be <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00e      	beq.n	800a9c0 <HAL_UART_IRQHandler+0x258>
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fc4d 	bl	800b24c <UART_EndTransmit_IT>
    return;
 800a9b2:	bf00      	nop
 800a9b4:	e004      	b.n	800a9c0 <HAL_UART_IRQHandler+0x258>
      return;
 800a9b6:	bf00      	nop
 800a9b8:	e002      	b.n	800a9c0 <HAL_UART_IRQHandler+0x258>
    return;
 800a9ba:	bf00      	nop
 800a9bc:	e000      	b.n	800a9c0 <HAL_UART_IRQHandler+0x258>
    return;
 800a9be:	bf00      	nop
  }

}
 800a9c0:	3720      	adds	r7, #32
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800b221 	.word	0x0800b221

0800a9cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4bb1      	ldr	r3, [pc, #708]	; (800ace8 <UART_SetConfig+0x2f4>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	6939      	ldr	r1, [r7, #16]
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	430a      	orrs	r2, r1
 800aa68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a9f      	ldr	r2, [pc, #636]	; (800acec <UART_SetConfig+0x2f8>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d121      	bne.n	800aab8 <UART_SetConfig+0xc4>
 800aa74:	4b9e      	ldr	r3, [pc, #632]	; (800acf0 <UART_SetConfig+0x2fc>)
 800aa76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d816      	bhi.n	800aab0 <UART_SetConfig+0xbc>
 800aa82:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <UART_SetConfig+0x94>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800aa99 	.word	0x0800aa99
 800aa8c:	0800aaa5 	.word	0x0800aaa5
 800aa90:	0800aa9f 	.word	0x0800aa9f
 800aa94:	0800aaab 	.word	0x0800aaab
 800aa98:	2301      	movs	r3, #1
 800aa9a:	77fb      	strb	r3, [r7, #31]
 800aa9c:	e151      	b.n	800ad42 <UART_SetConfig+0x34e>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	77fb      	strb	r3, [r7, #31]
 800aaa2:	e14e      	b.n	800ad42 <UART_SetConfig+0x34e>
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	77fb      	strb	r3, [r7, #31]
 800aaa8:	e14b      	b.n	800ad42 <UART_SetConfig+0x34e>
 800aaaa:	2308      	movs	r3, #8
 800aaac:	77fb      	strb	r3, [r7, #31]
 800aaae:	e148      	b.n	800ad42 <UART_SetConfig+0x34e>
 800aab0:	2310      	movs	r3, #16
 800aab2:	77fb      	strb	r3, [r7, #31]
 800aab4:	bf00      	nop
 800aab6:	e144      	b.n	800ad42 <UART_SetConfig+0x34e>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a8d      	ldr	r2, [pc, #564]	; (800acf4 <UART_SetConfig+0x300>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d134      	bne.n	800ab2c <UART_SetConfig+0x138>
 800aac2:	4b8b      	ldr	r3, [pc, #556]	; (800acf0 <UART_SetConfig+0x2fc>)
 800aac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac8:	f003 030c 	and.w	r3, r3, #12
 800aacc:	2b0c      	cmp	r3, #12
 800aace:	d829      	bhi.n	800ab24 <UART_SetConfig+0x130>
 800aad0:	a201      	add	r2, pc, #4	; (adr r2, 800aad8 <UART_SetConfig+0xe4>)
 800aad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad6:	bf00      	nop
 800aad8:	0800ab0d 	.word	0x0800ab0d
 800aadc:	0800ab25 	.word	0x0800ab25
 800aae0:	0800ab25 	.word	0x0800ab25
 800aae4:	0800ab25 	.word	0x0800ab25
 800aae8:	0800ab19 	.word	0x0800ab19
 800aaec:	0800ab25 	.word	0x0800ab25
 800aaf0:	0800ab25 	.word	0x0800ab25
 800aaf4:	0800ab25 	.word	0x0800ab25
 800aaf8:	0800ab13 	.word	0x0800ab13
 800aafc:	0800ab25 	.word	0x0800ab25
 800ab00:	0800ab25 	.word	0x0800ab25
 800ab04:	0800ab25 	.word	0x0800ab25
 800ab08:	0800ab1f 	.word	0x0800ab1f
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	77fb      	strb	r3, [r7, #31]
 800ab10:	e117      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab12:	2302      	movs	r3, #2
 800ab14:	77fb      	strb	r3, [r7, #31]
 800ab16:	e114      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab18:	2304      	movs	r3, #4
 800ab1a:	77fb      	strb	r3, [r7, #31]
 800ab1c:	e111      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab1e:	2308      	movs	r3, #8
 800ab20:	77fb      	strb	r3, [r7, #31]
 800ab22:	e10e      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab24:	2310      	movs	r3, #16
 800ab26:	77fb      	strb	r3, [r7, #31]
 800ab28:	bf00      	nop
 800ab2a:	e10a      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a71      	ldr	r2, [pc, #452]	; (800acf8 <UART_SetConfig+0x304>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d120      	bne.n	800ab78 <UART_SetConfig+0x184>
 800ab36:	4b6e      	ldr	r3, [pc, #440]	; (800acf0 <UART_SetConfig+0x2fc>)
 800ab38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab40:	2b10      	cmp	r3, #16
 800ab42:	d00f      	beq.n	800ab64 <UART_SetConfig+0x170>
 800ab44:	2b10      	cmp	r3, #16
 800ab46:	d802      	bhi.n	800ab4e <UART_SetConfig+0x15a>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <UART_SetConfig+0x164>
 800ab4c:	e010      	b.n	800ab70 <UART_SetConfig+0x17c>
 800ab4e:	2b20      	cmp	r3, #32
 800ab50:	d005      	beq.n	800ab5e <UART_SetConfig+0x16a>
 800ab52:	2b30      	cmp	r3, #48	; 0x30
 800ab54:	d009      	beq.n	800ab6a <UART_SetConfig+0x176>
 800ab56:	e00b      	b.n	800ab70 <UART_SetConfig+0x17c>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	77fb      	strb	r3, [r7, #31]
 800ab5c:	e0f1      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab5e:	2302      	movs	r3, #2
 800ab60:	77fb      	strb	r3, [r7, #31]
 800ab62:	e0ee      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab64:	2304      	movs	r3, #4
 800ab66:	77fb      	strb	r3, [r7, #31]
 800ab68:	e0eb      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab6a:	2308      	movs	r3, #8
 800ab6c:	77fb      	strb	r3, [r7, #31]
 800ab6e:	e0e8      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab70:	2310      	movs	r3, #16
 800ab72:	77fb      	strb	r3, [r7, #31]
 800ab74:	bf00      	nop
 800ab76:	e0e4      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a5f      	ldr	r2, [pc, #380]	; (800acfc <UART_SetConfig+0x308>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d120      	bne.n	800abc4 <UART_SetConfig+0x1d0>
 800ab82:	4b5b      	ldr	r3, [pc, #364]	; (800acf0 <UART_SetConfig+0x2fc>)
 800ab84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab8c:	2b40      	cmp	r3, #64	; 0x40
 800ab8e:	d00f      	beq.n	800abb0 <UART_SetConfig+0x1bc>
 800ab90:	2b40      	cmp	r3, #64	; 0x40
 800ab92:	d802      	bhi.n	800ab9a <UART_SetConfig+0x1a6>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d005      	beq.n	800aba4 <UART_SetConfig+0x1b0>
 800ab98:	e010      	b.n	800abbc <UART_SetConfig+0x1c8>
 800ab9a:	2b80      	cmp	r3, #128	; 0x80
 800ab9c:	d005      	beq.n	800abaa <UART_SetConfig+0x1b6>
 800ab9e:	2bc0      	cmp	r3, #192	; 0xc0
 800aba0:	d009      	beq.n	800abb6 <UART_SetConfig+0x1c2>
 800aba2:	e00b      	b.n	800abbc <UART_SetConfig+0x1c8>
 800aba4:	2300      	movs	r3, #0
 800aba6:	77fb      	strb	r3, [r7, #31]
 800aba8:	e0cb      	b.n	800ad42 <UART_SetConfig+0x34e>
 800abaa:	2302      	movs	r3, #2
 800abac:	77fb      	strb	r3, [r7, #31]
 800abae:	e0c8      	b.n	800ad42 <UART_SetConfig+0x34e>
 800abb0:	2304      	movs	r3, #4
 800abb2:	77fb      	strb	r3, [r7, #31]
 800abb4:	e0c5      	b.n	800ad42 <UART_SetConfig+0x34e>
 800abb6:	2308      	movs	r3, #8
 800abb8:	77fb      	strb	r3, [r7, #31]
 800abba:	e0c2      	b.n	800ad42 <UART_SetConfig+0x34e>
 800abbc:	2310      	movs	r3, #16
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	bf00      	nop
 800abc2:	e0be      	b.n	800ad42 <UART_SetConfig+0x34e>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a4d      	ldr	r2, [pc, #308]	; (800ad00 <UART_SetConfig+0x30c>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d124      	bne.n	800ac18 <UART_SetConfig+0x224>
 800abce:	4b48      	ldr	r3, [pc, #288]	; (800acf0 <UART_SetConfig+0x2fc>)
 800abd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abdc:	d012      	beq.n	800ac04 <UART_SetConfig+0x210>
 800abde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe2:	d802      	bhi.n	800abea <UART_SetConfig+0x1f6>
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d007      	beq.n	800abf8 <UART_SetConfig+0x204>
 800abe8:	e012      	b.n	800ac10 <UART_SetConfig+0x21c>
 800abea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abee:	d006      	beq.n	800abfe <UART_SetConfig+0x20a>
 800abf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abf4:	d009      	beq.n	800ac0a <UART_SetConfig+0x216>
 800abf6:	e00b      	b.n	800ac10 <UART_SetConfig+0x21c>
 800abf8:	2300      	movs	r3, #0
 800abfa:	77fb      	strb	r3, [r7, #31]
 800abfc:	e0a1      	b.n	800ad42 <UART_SetConfig+0x34e>
 800abfe:	2302      	movs	r3, #2
 800ac00:	77fb      	strb	r3, [r7, #31]
 800ac02:	e09e      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac04:	2304      	movs	r3, #4
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	e09b      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac0a:	2308      	movs	r3, #8
 800ac0c:	77fb      	strb	r3, [r7, #31]
 800ac0e:	e098      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac10:	2310      	movs	r3, #16
 800ac12:	77fb      	strb	r3, [r7, #31]
 800ac14:	bf00      	nop
 800ac16:	e094      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a39      	ldr	r2, [pc, #228]	; (800ad04 <UART_SetConfig+0x310>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d124      	bne.n	800ac6c <UART_SetConfig+0x278>
 800ac22:	4b33      	ldr	r3, [pc, #204]	; (800acf0 <UART_SetConfig+0x2fc>)
 800ac24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac30:	d012      	beq.n	800ac58 <UART_SetConfig+0x264>
 800ac32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac36:	d802      	bhi.n	800ac3e <UART_SetConfig+0x24a>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d007      	beq.n	800ac4c <UART_SetConfig+0x258>
 800ac3c:	e012      	b.n	800ac64 <UART_SetConfig+0x270>
 800ac3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac42:	d006      	beq.n	800ac52 <UART_SetConfig+0x25e>
 800ac44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac48:	d009      	beq.n	800ac5e <UART_SetConfig+0x26a>
 800ac4a:	e00b      	b.n	800ac64 <UART_SetConfig+0x270>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	77fb      	strb	r3, [r7, #31]
 800ac50:	e077      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac52:	2302      	movs	r3, #2
 800ac54:	77fb      	strb	r3, [r7, #31]
 800ac56:	e074      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac58:	2304      	movs	r3, #4
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e071      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac5e:	2308      	movs	r3, #8
 800ac60:	77fb      	strb	r3, [r7, #31]
 800ac62:	e06e      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac64:	2310      	movs	r3, #16
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	bf00      	nop
 800ac6a:	e06a      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a25      	ldr	r2, [pc, #148]	; (800ad08 <UART_SetConfig+0x314>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d124      	bne.n	800acc0 <UART_SetConfig+0x2cc>
 800ac76:	4b1e      	ldr	r3, [pc, #120]	; (800acf0 <UART_SetConfig+0x2fc>)
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ac80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac84:	d012      	beq.n	800acac <UART_SetConfig+0x2b8>
 800ac86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac8a:	d802      	bhi.n	800ac92 <UART_SetConfig+0x29e>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <UART_SetConfig+0x2ac>
 800ac90:	e012      	b.n	800acb8 <UART_SetConfig+0x2c4>
 800ac92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac96:	d006      	beq.n	800aca6 <UART_SetConfig+0x2b2>
 800ac98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac9c:	d009      	beq.n	800acb2 <UART_SetConfig+0x2be>
 800ac9e:	e00b      	b.n	800acb8 <UART_SetConfig+0x2c4>
 800aca0:	2300      	movs	r3, #0
 800aca2:	77fb      	strb	r3, [r7, #31]
 800aca4:	e04d      	b.n	800ad42 <UART_SetConfig+0x34e>
 800aca6:	2302      	movs	r3, #2
 800aca8:	77fb      	strb	r3, [r7, #31]
 800acaa:	e04a      	b.n	800ad42 <UART_SetConfig+0x34e>
 800acac:	2304      	movs	r3, #4
 800acae:	77fb      	strb	r3, [r7, #31]
 800acb0:	e047      	b.n	800ad42 <UART_SetConfig+0x34e>
 800acb2:	2308      	movs	r3, #8
 800acb4:	77fb      	strb	r3, [r7, #31]
 800acb6:	e044      	b.n	800ad42 <UART_SetConfig+0x34e>
 800acb8:	2310      	movs	r3, #16
 800acba:	77fb      	strb	r3, [r7, #31]
 800acbc:	bf00      	nop
 800acbe:	e040      	b.n	800ad42 <UART_SetConfig+0x34e>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a11      	ldr	r2, [pc, #68]	; (800ad0c <UART_SetConfig+0x318>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d139      	bne.n	800ad3e <UART_SetConfig+0x34a>
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <UART_SetConfig+0x2fc>)
 800accc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800acd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acd8:	d027      	beq.n	800ad2a <UART_SetConfig+0x336>
 800acda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acde:	d817      	bhi.n	800ad10 <UART_SetConfig+0x31c>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01c      	beq.n	800ad1e <UART_SetConfig+0x32a>
 800ace4:	e027      	b.n	800ad36 <UART_SetConfig+0x342>
 800ace6:	bf00      	nop
 800ace8:	efff69f3 	.word	0xefff69f3
 800acec:	40011000 	.word	0x40011000
 800acf0:	40023800 	.word	0x40023800
 800acf4:	40004400 	.word	0x40004400
 800acf8:	40004800 	.word	0x40004800
 800acfc:	40004c00 	.word	0x40004c00
 800ad00:	40005000 	.word	0x40005000
 800ad04:	40011400 	.word	0x40011400
 800ad08:	40007800 	.word	0x40007800
 800ad0c:	40007c00 	.word	0x40007c00
 800ad10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad14:	d006      	beq.n	800ad24 <UART_SetConfig+0x330>
 800ad16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad1a:	d009      	beq.n	800ad30 <UART_SetConfig+0x33c>
 800ad1c:	e00b      	b.n	800ad36 <UART_SetConfig+0x342>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	77fb      	strb	r3, [r7, #31]
 800ad22:	e00e      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ad24:	2302      	movs	r3, #2
 800ad26:	77fb      	strb	r3, [r7, #31]
 800ad28:	e00b      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ad2a:	2304      	movs	r3, #4
 800ad2c:	77fb      	strb	r3, [r7, #31]
 800ad2e:	e008      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ad30:	2308      	movs	r3, #8
 800ad32:	77fb      	strb	r3, [r7, #31]
 800ad34:	e005      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ad36:	2310      	movs	r3, #16
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	bf00      	nop
 800ad3c:	e001      	b.n	800ad42 <UART_SetConfig+0x34e>
 800ad3e:	2310      	movs	r3, #16
 800ad40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad4a:	d17f      	bne.n	800ae4c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ad4c:	7ffb      	ldrb	r3, [r7, #31]
 800ad4e:	2b08      	cmp	r3, #8
 800ad50:	d85c      	bhi.n	800ae0c <UART_SetConfig+0x418>
 800ad52:	a201      	add	r2, pc, #4	; (adr r2, 800ad58 <UART_SetConfig+0x364>)
 800ad54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad9d 	.word	0x0800ad9d
 800ad60:	0800adbd 	.word	0x0800adbd
 800ad64:	0800ae0d 	.word	0x0800ae0d
 800ad68:	0800add5 	.word	0x0800add5
 800ad6c:	0800ae0d 	.word	0x0800ae0d
 800ad70:	0800ae0d 	.word	0x0800ae0d
 800ad74:	0800ae0d 	.word	0x0800ae0d
 800ad78:	0800adf5 	.word	0x0800adf5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad7c:	f7fd f928 	bl	8007fd0 <HAL_RCC_GetPCLK1Freq>
 800ad80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	005a      	lsls	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	085b      	lsrs	r3, r3, #1
 800ad8c:	441a      	add	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	61bb      	str	r3, [r7, #24]
        break;
 800ad9a:	e03a      	b.n	800ae12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad9c:	f7fd f92c 	bl	8007ff8 <HAL_RCC_GetPCLK2Freq>
 800ada0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	005a      	lsls	r2, r3, #1
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	085b      	lsrs	r3, r3, #1
 800adac:	441a      	add	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	61bb      	str	r3, [r7, #24]
        break;
 800adba:	e02a      	b.n	800ae12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	085a      	lsrs	r2, r3, #1
 800adc2:	4b5f      	ldr	r3, [pc, #380]	; (800af40 <UART_SetConfig+0x54c>)
 800adc4:	4413      	add	r3, r2
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6852      	ldr	r2, [r2, #4]
 800adca:	fbb3 f3f2 	udiv	r3, r3, r2
 800adce:	b29b      	uxth	r3, r3
 800add0:	61bb      	str	r3, [r7, #24]
        break;
 800add2:	e01e      	b.n	800ae12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800add4:	f7fd f83e 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 800add8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	005a      	lsls	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	085b      	lsrs	r3, r3, #1
 800ade4:	441a      	add	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	fbb2 f3f3 	udiv	r3, r2, r3
 800adee:	b29b      	uxth	r3, r3
 800adf0:	61bb      	str	r3, [r7, #24]
        break;
 800adf2:	e00e      	b.n	800ae12 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	085b      	lsrs	r3, r3, #1
 800adfa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	61bb      	str	r3, [r7, #24]
        break;
 800ae0a:	e002      	b.n	800ae12 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	75fb      	strb	r3, [r7, #23]
        break;
 800ae10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	d916      	bls.n	800ae46 <UART_SetConfig+0x452>
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae1e:	d212      	bcs.n	800ae46 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	f023 030f 	bic.w	r3, r3, #15
 800ae28:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	085b      	lsrs	r3, r3, #1
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	897b      	ldrh	r3, [r7, #10]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	897a      	ldrh	r2, [r7, #10]
 800ae42:	60da      	str	r2, [r3, #12]
 800ae44:	e070      	b.n	800af28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	75fb      	strb	r3, [r7, #23]
 800ae4a:	e06d      	b.n	800af28 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ae4c:	7ffb      	ldrb	r3, [r7, #31]
 800ae4e:	2b08      	cmp	r3, #8
 800ae50:	d859      	bhi.n	800af06 <UART_SetConfig+0x512>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <UART_SetConfig+0x464>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800ae7d 	.word	0x0800ae7d
 800ae5c:	0800ae9b 	.word	0x0800ae9b
 800ae60:	0800aeb9 	.word	0x0800aeb9
 800ae64:	0800af07 	.word	0x0800af07
 800ae68:	0800aed1 	.word	0x0800aed1
 800ae6c:	0800af07 	.word	0x0800af07
 800ae70:	0800af07 	.word	0x0800af07
 800ae74:	0800af07 	.word	0x0800af07
 800ae78:	0800aeef 	.word	0x0800aeef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae7c:	f7fd f8a8 	bl	8007fd0 <HAL_RCC_GetPCLK1Freq>
 800ae80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	085a      	lsrs	r2, r3, #1
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	441a      	add	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	61bb      	str	r3, [r7, #24]
        break;
 800ae98:	e038      	b.n	800af0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae9a:	f7fd f8ad 	bl	8007ff8 <HAL_RCC_GetPCLK2Freq>
 800ae9e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	085a      	lsrs	r2, r3, #1
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	441a      	add	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	61bb      	str	r3, [r7, #24]
        break;
 800aeb6:	e029      	b.n	800af0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	085a      	lsrs	r2, r3, #1
 800aebe:	4b21      	ldr	r3, [pc, #132]	; (800af44 <UART_SetConfig+0x550>)
 800aec0:	4413      	add	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6852      	ldr	r2, [r2, #4]
 800aec6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	61bb      	str	r3, [r7, #24]
        break;
 800aece:	e01d      	b.n	800af0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aed0:	f7fc ffc0 	bl	8007e54 <HAL_RCC_GetSysClockFreq>
 800aed4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	085a      	lsrs	r2, r3, #1
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	441a      	add	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	61bb      	str	r3, [r7, #24]
        break;
 800aeec:	e00e      	b.n	800af0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	085b      	lsrs	r3, r3, #1
 800aef4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800af00:	b29b      	uxth	r3, r3
 800af02:	61bb      	str	r3, [r7, #24]
        break;
 800af04:	e002      	b.n	800af0c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	75fb      	strb	r3, [r7, #23]
        break;
 800af0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b0f      	cmp	r3, #15
 800af10:	d908      	bls.n	800af24 <UART_SetConfig+0x530>
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af18:	d204      	bcs.n	800af24 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	60da      	str	r2, [r3, #12]
 800af22:	e001      	b.n	800af28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af34:	7dfb      	ldrb	r3, [r7, #23]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3720      	adds	r7, #32
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	01e84800 	.word	0x01e84800
 800af44:	00f42400 	.word	0x00f42400

0800af48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	f003 0301 	and.w	r3, r3, #1
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00a      	beq.n	800afb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	f003 0310 	and.w	r3, r3, #16
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01a      	beq.n	800b05e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b046:	d10a      	bne.n	800b05e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	605a      	str	r2, [r3, #4]
  }
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af02      	add	r7, sp, #8
 800b092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b09a:	f7f9 fcbb 	bl	8004a14 <HAL_GetTick>
 800b09e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0308 	and.w	r3, r3, #8
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	d10e      	bne.n	800b0cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f814 	bl	800b0ea <UART_WaitOnFlagUntilTimeout>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e00a      	b.n	800b0e2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	60f8      	str	r0, [r7, #12]
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	603b      	str	r3, [r7, #0]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0fa:	e05d      	b.n	800b1b8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b102:	d059      	beq.n	800b1b8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b104:	f7f9 fc86 	bl	8004a14 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	429a      	cmp	r2, r3
 800b112:	d302      	bcc.n	800b11a <UART_WaitOnFlagUntilTimeout+0x30>
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d11b      	bne.n	800b152 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b128:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0201 	bic.w	r2, r2, #1
 800b138:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2220      	movs	r2, #32
 800b13e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2220      	movs	r2, #32
 800b144:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e042      	b.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d02b      	beq.n	800b1b8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b16a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b16e:	d123      	bne.n	800b1b8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b178:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b188:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f022 0201 	bic.w	r2, r2, #1
 800b198:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2220      	movs	r2, #32
 800b19e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e00f      	b.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	69da      	ldr	r2, [r3, #28]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	bf0c      	ite	eq
 800b1c8:	2301      	moveq	r3, #1
 800b1ca:	2300      	movne	r3, #0
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d092      	beq.n	800b0fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689a      	ldr	r2, [r3, #8]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f022 0201 	bic.w	r2, r2, #1
 800b206:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2220      	movs	r2, #32
 800b20c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fbce 	bl	800a9e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b262:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2220      	movs	r2, #32
 800b268:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff fbab 	bl	800a9cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b28c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b292:	2b22      	cmp	r3, #34	; 0x22
 800b294:	d13a      	bne.n	800b30c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b29e:	89bb      	ldrh	r3, [r7, #12]
 800b2a0:	b2d9      	uxtb	r1, r3
 800b2a2:	89fb      	ldrh	r3, [r7, #14]
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2aa:	400a      	ands	r2, r1
 800b2ac:	b2d2      	uxtb	r2, r2
 800b2ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2b4:	1c5a      	adds	r2, r3, #1
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d121      	bne.n	800b31c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2e6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0201 	bic.w	r2, r2, #1
 800b2f6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7f6 fe69 	bl	8001fdc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b30a:	e007      	b.n	800b31c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0208 	orr.w	r2, r2, #8
 800b31a:	619a      	str	r2, [r3, #24]
}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b332:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b338:	2b22      	cmp	r3, #34	; 0x22
 800b33a:	d13a      	bne.n	800b3b2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b348:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b34a:	89ba      	ldrh	r2, [r7, #12]
 800b34c:	89fb      	ldrh	r3, [r7, #14]
 800b34e:	4013      	ands	r3, r2
 800b350:	b29a      	uxth	r2, r3
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b35a:	1c9a      	adds	r2, r3, #2
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b366:	b29b      	uxth	r3, r3
 800b368:	3b01      	subs	r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b378:	b29b      	uxth	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d121      	bne.n	800b3c2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b38c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f022 0201 	bic.w	r2, r2, #1
 800b39c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7f6 fe16 	bl	8001fdc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3b0:	e007      	b.n	800b3c2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	699a      	ldr	r2, [r3, #24]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f042 0208 	orr.w	r2, r2, #8
 800b3c0:	619a      	str	r2, [r3, #24]
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d027      	beq.n	800b436 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	4b2f      	ldr	r3, [pc, #188]	; (800b4ac <FMC_SDRAM_Init+0xe0>)
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3fc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b402:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b408:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b40e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b414:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b41a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b420:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b426:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e032      	b.n	800b49c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b442:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b44c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b452:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	4313      	orrs	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <FMC_SDRAM_Init+0xe0>)
 800b464:	4013      	ands	r3, r2
 800b466:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b470:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b476:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b47c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b482:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b488:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	ffff8000 	.word	0xffff8000

0800b4b0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d02e      	beq.n	800b528 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4d6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4e6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4f0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4fa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	3b01      	subs	r3, #1
 800b502:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b504:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b50e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	3b01      	subs	r3, #1
 800b516:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b518:	4313      	orrs	r3, r2
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	609a      	str	r2, [r3, #8]
 800b526:	e039      	b.n	800b59c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <FMC_SDRAM_Timing_Init+0xfc>)
 800b532:	4013      	ands	r3, r2
 800b534:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	3b01      	subs	r3, #1
 800b544:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b546:	4313      	orrs	r3, r2
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b55a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	3b01      	subs	r3, #1
 800b568:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b56a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	3b01      	subs	r3, #1
 800b572:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b574:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b57e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	3b01      	subs	r3, #1
 800b586:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b588:	4313      	orrs	r3, r2
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	ff0f0fff 	.word	0xff0f0fff

0800b5b0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5c8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b5d2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	371c      	adds	r7, #28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b083      	sub	sp, #12
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	695a      	ldr	r2, [r3, #20]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	431a      	orrs	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b622:	2300      	movs	r3, #0
 800b624:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b62a:	2b84      	cmp	r3, #132	; 0x84
 800b62c:	d005      	beq.n	800b63a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b62e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4413      	add	r3, r2
 800b636:	3303      	adds	r3, #3
 800b638:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b63a:	68fb      	ldr	r3, [r7, #12]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b64c:	f001 f9fc 	bl	800ca48 <vTaskStartScheduler>
  
  return osOK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	bd80      	pop	{r7, pc}

0800b656 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b656:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b658:	b089      	sub	sp, #36	; 0x24
 800b65a:	af04      	add	r7, sp, #16
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d020      	beq.n	800b6aa <osThreadCreate+0x54>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d01c      	beq.n	800b6aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685c      	ldr	r4, [r3, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681d      	ldr	r5, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691e      	ldr	r6, [r3, #16]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff ffc8 	bl	800b618 <makeFreeRtosPriority>
 800b688:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b692:	9202      	str	r2, [sp, #8]
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	9100      	str	r1, [sp, #0]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	4632      	mov	r2, r6
 800b69c:	4629      	mov	r1, r5
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 ff7a 	bl	800c598 <xTaskCreateStatic>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e01c      	b.n	800b6e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685c      	ldr	r4, [r3, #4]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b6b6:	b29e      	uxth	r6, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff ffaa 	bl	800b618 <makeFreeRtosPriority>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	f107 030c 	add.w	r3, r7, #12
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	9200      	str	r2, [sp, #0]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f000 ffbf 	bl	800c658 <xTaskCreate>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d001      	beq.n	800b6e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e000      	b.n	800b6e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <osDelay+0x16>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	e000      	b.n	800b706 <osDelay+0x18>
 800b704:	2301      	movs	r3, #1
 800b706:	4618      	mov	r0, r3
 800b708:	f001 f968 	bl	800c9dc <vTaskDelay>
  
  return osOK;
 800b70c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	4619      	mov	r1, r3
 800b72c:	2001      	movs	r0, #1
 800b72e:	f000 fa60 	bl	800bbf2 <xQueueCreateMutexStatic>
 800b732:	4603      	mov	r3, r0
 800b734:	e003      	b.n	800b73e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b736:	2001      	movs	r0, #1
 800b738:	f000 fa43 	bl	800bbc2 <xQueueCreateMutex>
 800b73c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b746:	b590      	push	{r4, r7, lr}
 800b748:	b085      	sub	sp, #20
 800b74a:	af02      	add	r7, sp, #8
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d012      	beq.n	800b77e <osMessageCreate+0x38>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00e      	beq.n	800b77e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6818      	ldr	r0, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6859      	ldr	r1, [r3, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68dc      	ldr	r4, [r3, #12]
 800b770:	2300      	movs	r3, #0
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	4623      	mov	r3, r4
 800b776:	f000 f92d 	bl	800b9d4 <xQueueGenericCreateStatic>
 800b77a:	4603      	mov	r3, r0
 800b77c:	e008      	b.n	800b790 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	4619      	mov	r1, r3
 800b78a:	f000 f9a0 	bl	800bace <xQueueGenericCreate>
 800b78e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	bd90      	pop	{r4, r7, pc}

0800b798 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f103 0208 	add.w	r2, r3, #8
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f103 0208 	add.w	r2, r3, #8
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f103 0208 	add.w	r2, r3, #8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	689a      	ldr	r2, [r3, #8]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	1c5a      	adds	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	601a      	str	r2, [r3, #0]
}
 800b82e:	bf00      	nop
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b83a:	b480      	push	{r7}
 800b83c:	b085      	sub	sp, #20
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b850:	d103      	bne.n	800b85a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	e00c      	b.n	800b874 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3308      	adds	r3, #8
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	e002      	b.n	800b868 <vListInsert+0x2e>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	d2f6      	bcs.n	800b862 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	683a      	ldr	r2, [r7, #0]
 800b88e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	601a      	str	r2, [r3, #0]
}
 800b8a0:	bf00      	nop
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6892      	ldr	r2, [r2, #8]
 800b8c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	6852      	ldr	r2, [r2, #4]
 800b8cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d103      	bne.n	800b8e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	1e5a      	subs	r2, r3, #1
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10b      	bne.n	800b92c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	60bb      	str	r3, [r7, #8]
 800b92a:	e7fe      	b.n	800b92a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800b92c:	f002 f814 	bl	800d958 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b938:	68f9      	ldr	r1, [r7, #12]
 800b93a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b93c:	fb01 f303 	mul.w	r3, r1, r3
 800b940:	441a      	add	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b95c:	3b01      	subs	r3, #1
 800b95e:	68f9      	ldr	r1, [r7, #12]
 800b960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	441a      	add	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	22ff      	movs	r2, #255	; 0xff
 800b970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	22ff      	movs	r2, #255	; 0xff
 800b978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d114      	bne.n	800b9ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d01a      	beq.n	800b9c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3310      	adds	r3, #16
 800b98e:	4618      	mov	r0, r3
 800b990:	f001 fada 	bl	800cf48 <xTaskRemoveFromEventList>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d012      	beq.n	800b9c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b99a:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <xQueueGenericReset+0xd0>)
 800b99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	e009      	b.n	800b9c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3310      	adds	r3, #16
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff fef1 	bl	800b798 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3324      	adds	r3, #36	; 0x24
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff feec 	bl	800b798 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9c0:	f001 fffc 	bl	800d9bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9c4:	2301      	movs	r3, #1
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	e000ed04 	.word	0xe000ed04

0800b9d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b08e      	sub	sp, #56	; 0x38
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
 800b9e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10b      	bne.n	800ba00 <xQueueGenericCreateStatic+0x2c>
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	b672      	cpsid	i
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	b662      	cpsie	i
 800b9fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9fe:	e7fe      	b.n	800b9fe <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10b      	bne.n	800ba1e <xQueueGenericCreateStatic+0x4a>
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	b672      	cpsid	i
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	b662      	cpsie	i
 800ba1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba1c:	e7fe      	b.n	800ba1c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <xQueueGenericCreateStatic+0x56>
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <xQueueGenericCreateStatic+0x5a>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <xQueueGenericCreateStatic+0x5c>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10b      	bne.n	800ba4c <xQueueGenericCreateStatic+0x78>
 800ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba38:	b672      	cpsid	i
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	b662      	cpsie	i
 800ba48:	623b      	str	r3, [r7, #32]
 800ba4a:	e7fe      	b.n	800ba4a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d102      	bne.n	800ba58 <xQueueGenericCreateStatic+0x84>
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <xQueueGenericCreateStatic+0x88>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <xQueueGenericCreateStatic+0x8a>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10b      	bne.n	800ba7a <xQueueGenericCreateStatic+0xa6>
 800ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba66:	b672      	cpsid	i
 800ba68:	f383 8811 	msr	BASEPRI, r3
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	b662      	cpsie	i
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	e7fe      	b.n	800ba78 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba7a:	2348      	movs	r3, #72	; 0x48
 800ba7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b48      	cmp	r3, #72	; 0x48
 800ba82:	d00b      	beq.n	800ba9c <xQueueGenericCreateStatic+0xc8>
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	b672      	cpsid	i
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	b662      	cpsie	i
 800ba98:	61bb      	str	r3, [r7, #24]
 800ba9a:	e7fe      	b.n	800ba9a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00d      	beq.n	800bac4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bab0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	4613      	mov	r3, r2
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 f846 	bl	800bb50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3730      	adds	r7, #48	; 0x30
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b08a      	sub	sp, #40	; 0x28
 800bad2:	af02      	add	r7, sp, #8
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	4613      	mov	r3, r2
 800bada:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10b      	bne.n	800bafa <xQueueGenericCreate+0x2c>
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	b672      	cpsid	i
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	b662      	cpsie	i
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	e7fe      	b.n	800baf8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	61fb      	str	r3, [r7, #28]
 800bb04:	e004      	b.n	800bb10 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	fb02 f303 	mul.w	r3, r2, r3
 800bb0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	3348      	adds	r3, #72	; 0x48
 800bb14:	4618      	mov	r0, r3
 800bb16:	f002 f841 	bl	800db9c <pvPortMalloc>
 800bb1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d011      	beq.n	800bb46 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	3348      	adds	r3, #72	; 0x48
 800bb2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb34:	79fa      	ldrb	r2, [r7, #7]
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	68b9      	ldr	r1, [r7, #8]
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f000 f805 	bl	800bb50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb46:	69bb      	ldr	r3, [r7, #24]
	}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3720      	adds	r7, #32
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d103      	bne.n	800bb6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	601a      	str	r2, [r3, #0]
 800bb6a:	e002      	b.n	800bb72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb7e:	2101      	movs	r1, #1
 800bb80:	69b8      	ldr	r0, [r7, #24]
 800bb82:	f7ff febd 	bl	800b900 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb86:	bf00      	nop
 800bb88:	3710      	adds	r7, #16
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b082      	sub	sp, #8
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00e      	beq.n	800bbba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f837 	bl	800bc28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bbba:	bf00      	nop
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b086      	sub	sp, #24
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	4603      	mov	r3, r0
 800bbca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	6939      	ldr	r1, [r7, #16]
 800bbda:	6978      	ldr	r0, [r7, #20]
 800bbdc:	f7ff ff77 	bl	800bace <xQueueGenericCreate>
 800bbe0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7ff ffd3 	bl	800bb8e <prvInitialiseMutex>

		return xNewQueue;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
	}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b088      	sub	sp, #32
 800bbf6:	af02      	add	r7, sp, #8
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	6039      	str	r1, [r7, #0]
 800bbfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	2300      	movs	r3, #0
 800bc04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	6939      	ldr	r1, [r7, #16]
 800bc10:	6978      	ldr	r0, [r7, #20]
 800bc12:	f7ff fedf 	bl	800b9d4 <xQueueGenericCreateStatic>
 800bc16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f7ff ffb8 	bl	800bb8e <prvInitialiseMutex>

		return xNewQueue;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
	}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08e      	sub	sp, #56	; 0x38
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc36:	2300      	movs	r3, #0
 800bc38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10b      	bne.n	800bc5c <xQueueGenericSend+0x34>
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	b672      	cpsid	i
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	b662      	cpsie	i
 800bc58:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc5a:	e7fe      	b.n	800bc5a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d103      	bne.n	800bc6a <xQueueGenericSend+0x42>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <xQueueGenericSend+0x46>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <xQueueGenericSend+0x48>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10b      	bne.n	800bc8c <xQueueGenericSend+0x64>
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	b672      	cpsid	i
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	b662      	cpsie	i
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
 800bc8a:	e7fe      	b.n	800bc8a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d103      	bne.n	800bc9a <xQueueGenericSend+0x72>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d101      	bne.n	800bc9e <xQueueGenericSend+0x76>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <xQueueGenericSend+0x78>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10b      	bne.n	800bcbc <xQueueGenericSend+0x94>
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	b672      	cpsid	i
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	b662      	cpsie	i
 800bcb8:	623b      	str	r3, [r7, #32]
 800bcba:	e7fe      	b.n	800bcba <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcbc:	f001 fb04 	bl	800d2c8 <xTaskGetSchedulerState>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <xQueueGenericSend+0xa4>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <xQueueGenericSend+0xa8>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e000      	b.n	800bcd2 <xQueueGenericSend+0xaa>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10b      	bne.n	800bcee <xQueueGenericSend+0xc6>
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	b672      	cpsid	i
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	b662      	cpsie	i
 800bcea:	61fb      	str	r3, [r7, #28]
 800bcec:	e7fe      	b.n	800bcec <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcee:	f001 fe33 	bl	800d958 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d302      	bcc.n	800bd04 <xQueueGenericSend+0xdc>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d129      	bne.n	800bd58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd0a:	f000 fb35 	bl	800c378 <prvCopyDataToQueue>
 800bd0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d010      	beq.n	800bd3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	3324      	adds	r3, #36	; 0x24
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f001 f913 	bl	800cf48 <xTaskRemoveFromEventList>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d013      	beq.n	800bd50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd28:	4b3f      	ldr	r3, [pc, #252]	; (800be28 <xQueueGenericSend+0x200>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	e00a      	b.n	800bd50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd40:	4b39      	ldr	r3, [pc, #228]	; (800be28 <xQueueGenericSend+0x200>)
 800bd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd50:	f001 fe34 	bl	800d9bc <vPortExitCritical>
				return pdPASS;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e063      	b.n	800be20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d103      	bne.n	800bd66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd5e:	f001 fe2d 	bl	800d9bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	e05c      	b.n	800be20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d106      	bne.n	800bd7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd6c:	f107 0314 	add.w	r3, r7, #20
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 f94d 	bl	800d010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd76:	2301      	movs	r3, #1
 800bd78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd7a:	f001 fe1f 	bl	800d9bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd7e:	f000 fec5 	bl	800cb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd82:	f001 fde9 	bl	800d958 <vPortEnterCritical>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd8c:	b25b      	sxtb	r3, r3
 800bd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd92:	d103      	bne.n	800bd9c <xQueueGenericSend+0x174>
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bda2:	b25b      	sxtb	r3, r3
 800bda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda8:	d103      	bne.n	800bdb2 <xQueueGenericSend+0x18a>
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdb2:	f001 fe03 	bl	800d9bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdb6:	1d3a      	adds	r2, r7, #4
 800bdb8:	f107 0314 	add.w	r3, r7, #20
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f001 f93c 	bl	800d03c <xTaskCheckForTimeOut>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d124      	bne.n	800be14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdcc:	f000 fbcc 	bl	800c568 <prvIsQueueFull>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d018      	beq.n	800be08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	3310      	adds	r3, #16
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f001 f88c 	bl	800cefc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bde6:	f000 fb57 	bl	800c498 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdea:	f000 fe9d 	bl	800cb28 <xTaskResumeAll>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f47f af7c 	bne.w	800bcee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <xQueueGenericSend+0x200>)
 800bdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	e772      	b.n	800bcee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be0a:	f000 fb45 	bl	800c498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be0e:	f000 fe8b 	bl	800cb28 <xTaskResumeAll>
 800be12:	e76c      	b.n	800bcee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be16:	f000 fb3f 	bl	800c498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be1a:	f000 fe85 	bl	800cb28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be20:	4618      	mov	r0, r3
 800be22:	3738      	adds	r7, #56	; 0x38
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	; 0x38
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10b      	bne.n	800be5c <xQueueGenericSendFromISR+0x30>
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	b672      	cpsid	i
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	b662      	cpsie	i
 800be58:	627b      	str	r3, [r7, #36]	; 0x24
 800be5a:	e7fe      	b.n	800be5a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d103      	bne.n	800be6a <xQueueGenericSendFromISR+0x3e>
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <xQueueGenericSendFromISR+0x42>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e000      	b.n	800be70 <xQueueGenericSendFromISR+0x44>
 800be6e:	2300      	movs	r3, #0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10b      	bne.n	800be8c <xQueueGenericSendFromISR+0x60>
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	b672      	cpsid	i
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	b662      	cpsie	i
 800be88:	623b      	str	r3, [r7, #32]
 800be8a:	e7fe      	b.n	800be8a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d103      	bne.n	800be9a <xQueueGenericSendFromISR+0x6e>
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <xQueueGenericSendFromISR+0x72>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e000      	b.n	800bea0 <xQueueGenericSendFromISR+0x74>
 800be9e:	2300      	movs	r3, #0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10b      	bne.n	800bebc <xQueueGenericSendFromISR+0x90>
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	b672      	cpsid	i
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	b662      	cpsie	i
 800beb8:	61fb      	str	r3, [r7, #28]
 800beba:	e7fe      	b.n	800beba <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bebc:	f001 fe2c 	bl	800db18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bec0:	f3ef 8211 	mrs	r2, BASEPRI
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	b672      	cpsid	i
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	b662      	cpsie	i
 800bed8:	61ba      	str	r2, [r7, #24]
 800beda:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bedc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bede:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee8:	429a      	cmp	r2, r3
 800beea:	d302      	bcc.n	800bef2 <xQueueGenericSendFromISR+0xc6>
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d12c      	bne.n	800bf4c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf02:	f000 fa39 	bl	800c378 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d112      	bne.n	800bf36 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d016      	beq.n	800bf46 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	3324      	adds	r3, #36	; 0x24
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f001 f813 	bl	800cf48 <xTaskRemoveFromEventList>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00e      	beq.n	800bf46 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	601a      	str	r2, [r3, #0]
 800bf34:	e007      	b.n	800bf46 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	b25a      	sxtb	r2, r3
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf46:	2301      	movs	r3, #1
 800bf48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bf4a:	e001      	b.n	800bf50 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3738      	adds	r7, #56	; 0x38
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08c      	sub	sp, #48	; 0x30
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf70:	2300      	movs	r3, #0
 800bf72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10b      	bne.n	800bf96 <xQueueReceive+0x32>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	b672      	cpsid	i
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	b662      	cpsie	i
 800bf92:	623b      	str	r3, [r7, #32]
 800bf94:	e7fe      	b.n	800bf94 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d103      	bne.n	800bfa4 <xQueueReceive+0x40>
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <xQueueReceive+0x44>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e000      	b.n	800bfaa <xQueueReceive+0x46>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <xQueueReceive+0x62>
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	b672      	cpsid	i
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	b662      	cpsie	i
 800bfc2:	61fb      	str	r3, [r7, #28]
 800bfc4:	e7fe      	b.n	800bfc4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfc6:	f001 f97f 	bl	800d2c8 <xTaskGetSchedulerState>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <xQueueReceive+0x72>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <xQueueReceive+0x76>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <xQueueReceive+0x78>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10b      	bne.n	800bff8 <xQueueReceive+0x94>
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	61bb      	str	r3, [r7, #24]
 800bff6:	e7fe      	b.n	800bff6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bff8:	f001 fcae 	bl	800d958 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c000:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d01f      	beq.n	800c048 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00c:	f000 fa1e 	bl	800c44c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	1e5a      	subs	r2, r3, #1
 800c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c016:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00f      	beq.n	800c040 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	3310      	adds	r3, #16
 800c024:	4618      	mov	r0, r3
 800c026:	f000 ff8f 	bl	800cf48 <xTaskRemoveFromEventList>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d007      	beq.n	800c040 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c030:	4b3c      	ldr	r3, [pc, #240]	; (800c124 <xQueueReceive+0x1c0>)
 800c032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c040:	f001 fcbc 	bl	800d9bc <vPortExitCritical>
				return pdPASS;
 800c044:	2301      	movs	r3, #1
 800c046:	e069      	b.n	800c11c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d103      	bne.n	800c056 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c04e:	f001 fcb5 	bl	800d9bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c052:	2300      	movs	r3, #0
 800c054:	e062      	b.n	800c11c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d106      	bne.n	800c06a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c05c:	f107 0310 	add.w	r3, r7, #16
 800c060:	4618      	mov	r0, r3
 800c062:	f000 ffd5 	bl	800d010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c066:	2301      	movs	r3, #1
 800c068:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c06a:	f001 fca7 	bl	800d9bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c06e:	f000 fd4d 	bl	800cb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c072:	f001 fc71 	bl	800d958 <vPortEnterCritical>
 800c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c07c:	b25b      	sxtb	r3, r3
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d103      	bne.n	800c08c <xQueueReceive+0x128>
 800c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c092:	b25b      	sxtb	r3, r3
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d103      	bne.n	800c0a2 <xQueueReceive+0x13e>
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0a2:	f001 fc8b 	bl	800d9bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0a6:	1d3a      	adds	r2, r7, #4
 800c0a8:	f107 0310 	add.w	r3, r7, #16
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 ffc4 	bl	800d03c <xTaskCheckForTimeOut>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d123      	bne.n	800c102 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0bc:	f000 fa3e 	bl	800c53c <prvIsQueueEmpty>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d017      	beq.n	800c0f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	3324      	adds	r3, #36	; 0x24
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 ff14 	bl	800cefc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0d6:	f000 f9df 	bl	800c498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0da:	f000 fd25 	bl	800cb28 <xTaskResumeAll>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d189      	bne.n	800bff8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c0e4:	4b0f      	ldr	r3, [pc, #60]	; (800c124 <xQueueReceive+0x1c0>)
 800c0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	f3bf 8f6f 	isb	sy
 800c0f4:	e780      	b.n	800bff8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0f8:	f000 f9ce 	bl	800c498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0fc:	f000 fd14 	bl	800cb28 <xTaskResumeAll>
 800c100:	e77a      	b.n	800bff8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c104:	f000 f9c8 	bl	800c498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c108:	f000 fd0e 	bl	800cb28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c10e:	f000 fa15 	bl	800c53c <prvIsQueueEmpty>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	f43f af6f 	beq.w	800bff8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c11a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3730      	adds	r7, #48	; 0x30
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08e      	sub	sp, #56	; 0x38
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c132:	2300      	movs	r3, #0
 800c134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c13a:	2300      	movs	r3, #0
 800c13c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10b      	bne.n	800c15c <xQueueSemaphoreTake+0x34>
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	b672      	cpsid	i
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	b662      	cpsie	i
 800c158:	623b      	str	r3, [r7, #32]
 800c15a:	e7fe      	b.n	800c15a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00b      	beq.n	800c17c <xQueueSemaphoreTake+0x54>
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	b672      	cpsid	i
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	b662      	cpsie	i
 800c178:	61fb      	str	r3, [r7, #28]
 800c17a:	e7fe      	b.n	800c17a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c17c:	f001 f8a4 	bl	800d2c8 <xTaskGetSchedulerState>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <xQueueSemaphoreTake+0x64>
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <xQueueSemaphoreTake+0x68>
 800c18c:	2301      	movs	r3, #1
 800c18e:	e000      	b.n	800c192 <xQueueSemaphoreTake+0x6a>
 800c190:	2300      	movs	r3, #0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10b      	bne.n	800c1ae <xQueueSemaphoreTake+0x86>
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	b672      	cpsid	i
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	b662      	cpsie	i
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	e7fe      	b.n	800c1ac <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ae:	f001 fbd3 	bl	800d958 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d024      	beq.n	800c208 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	1e5a      	subs	r2, r3, #1
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d104      	bne.n	800c1d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1ce:	f001 fa3d 	bl	800d64c <pvTaskIncrementMutexHeldCount>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00f      	beq.n	800c200 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	3310      	adds	r3, #16
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f000 feaf 	bl	800cf48 <xTaskRemoveFromEventList>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d007      	beq.n	800c200 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1f0:	4b54      	ldr	r3, [pc, #336]	; (800c344 <xQueueSemaphoreTake+0x21c>)
 800c1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c200:	f001 fbdc 	bl	800d9bc <vPortExitCritical>
				return pdPASS;
 800c204:	2301      	movs	r3, #1
 800c206:	e098      	b.n	800c33a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d112      	bne.n	800c234 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00b      	beq.n	800c22c <xQueueSemaphoreTake+0x104>
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	b672      	cpsid	i
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	b662      	cpsie	i
 800c228:	617b      	str	r3, [r7, #20]
 800c22a:	e7fe      	b.n	800c22a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c22c:	f001 fbc6 	bl	800d9bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c230:	2300      	movs	r3, #0
 800c232:	e082      	b.n	800c33a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c23a:	f107 030c 	add.w	r3, r7, #12
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fee6 	bl	800d010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c244:	2301      	movs	r3, #1
 800c246:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c248:	f001 fbb8 	bl	800d9bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c24c:	f000 fc5e 	bl	800cb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c250:	f001 fb82 	bl	800d958 <vPortEnterCritical>
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c25a:	b25b      	sxtb	r3, r3
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d103      	bne.n	800c26a <xQueueSemaphoreTake+0x142>
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c270:	b25b      	sxtb	r3, r3
 800c272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c276:	d103      	bne.n	800c280 <xQueueSemaphoreTake+0x158>
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c280:	f001 fb9c 	bl	800d9bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c284:	463a      	mov	r2, r7
 800c286:	f107 030c 	add.w	r3, r7, #12
 800c28a:	4611      	mov	r1, r2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 fed5 	bl	800d03c <xTaskCheckForTimeOut>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d132      	bne.n	800c2fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c29a:	f000 f94f 	bl	800c53c <prvIsQueueEmpty>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d026      	beq.n	800c2f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d109      	bne.n	800c2c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c2ac:	f001 fb54 	bl	800d958 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 f825 	bl	800d304 <xTaskPriorityInherit>
 800c2ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c2bc:	f001 fb7e 	bl	800d9bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	3324      	adds	r3, #36	; 0x24
 800c2c4:	683a      	ldr	r2, [r7, #0]
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fe17 	bl	800cefc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2d0:	f000 f8e2 	bl	800c498 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2d4:	f000 fc28 	bl	800cb28 <xTaskResumeAll>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f47f af67 	bne.w	800c1ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c2e0:	4b18      	ldr	r3, [pc, #96]	; (800c344 <xQueueSemaphoreTake+0x21c>)
 800c2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	e75d      	b.n	800c1ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c2f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2f4:	f000 f8d0 	bl	800c498 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2f8:	f000 fc16 	bl	800cb28 <xTaskResumeAll>
 800c2fc:	e757      	b.n	800c1ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c2fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c300:	f000 f8ca 	bl	800c498 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c304:	f000 fc10 	bl	800cb28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c30a:	f000 f917 	bl	800c53c <prvIsQueueEmpty>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	f43f af4c 	beq.w	800c1ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00d      	beq.n	800c338 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c31c:	f001 fb1c 	bl	800d958 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c322:	f000 f811 	bl	800c348 <prvGetDisinheritPriorityAfterTimeout>
 800c326:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c32e:	4618      	mov	r0, r3
 800c330:	f001 f8f0 	bl	800d514 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c334:	f001 fb42 	bl	800d9bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3738      	adds	r7, #56	; 0x38
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	e000ed04 	.word	0xe000ed04

0800c348 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f1c3 0307 	rsb	r3, r3, #7
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e001      	b.n	800c36a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c36a:	68fb      	ldr	r3, [r7, #12]
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c38c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10d      	bne.n	800c3b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d14d      	bne.n	800c43a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f001 f82e 	bl	800d404 <xTaskPriorityDisinherit>
 800c3a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	609a      	str	r2, [r3, #8]
 800c3b0:	e043      	b.n	800c43a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d119      	bne.n	800c3ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6858      	ldr	r0, [r3, #4]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	68b9      	ldr	r1, [r7, #8]
 800c3c4:	f001 fdf8 	bl	800dfb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d0:	441a      	add	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d32b      	bcc.n	800c43a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	605a      	str	r2, [r3, #4]
 800c3ea:	e026      	b.n	800c43a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68d8      	ldr	r0, [r3, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	68b9      	ldr	r1, [r7, #8]
 800c3f8:	f001 fdde 	bl	800dfb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c404:	425b      	negs	r3, r3
 800c406:	441a      	add	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d207      	bcs.n	800c428 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c420:	425b      	negs	r3, r3
 800c422:	441a      	add	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d105      	bne.n	800c43a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	3b01      	subs	r3, #1
 800c438:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	1c5a      	adds	r2, r3, #1
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c442:	697b      	ldr	r3, [r7, #20]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d018      	beq.n	800c490 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68da      	ldr	r2, [r3, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c466:	441a      	add	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68da      	ldr	r2, [r3, #12]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	429a      	cmp	r2, r3
 800c476:	d303      	bcc.n	800c480 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68d9      	ldr	r1, [r3, #12]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c488:	461a      	mov	r2, r3
 800c48a:	6838      	ldr	r0, [r7, #0]
 800c48c:	f001 fd94 	bl	800dfb8 <memcpy>
	}
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4a0:	f001 fa5a 	bl	800d958 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4ac:	e011      	b.n	800c4d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d012      	beq.n	800c4dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	3324      	adds	r3, #36	; 0x24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fd44 	bl	800cf48 <xTaskRemoveFromEventList>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4c6:	f000 fe1d 	bl	800d104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dce9      	bgt.n	800c4ae <prvUnlockQueue+0x16>
 800c4da:	e000      	b.n	800c4de <prvUnlockQueue+0x46>
					break;
 800c4dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	22ff      	movs	r2, #255	; 0xff
 800c4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4e6:	f001 fa69 	bl	800d9bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4ea:	f001 fa35 	bl	800d958 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4f6:	e011      	b.n	800c51c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d012      	beq.n	800c526 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	3310      	adds	r3, #16
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fd1f 	bl	800cf48 <xTaskRemoveFromEventList>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c510:	f000 fdf8 	bl	800d104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c514:	7bbb      	ldrb	r3, [r7, #14]
 800c516:	3b01      	subs	r3, #1
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c51c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c520:	2b00      	cmp	r3, #0
 800c522:	dce9      	bgt.n	800c4f8 <prvUnlockQueue+0x60>
 800c524:	e000      	b.n	800c528 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c526:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	22ff      	movs	r2, #255	; 0xff
 800c52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c530:	f001 fa44 	bl	800d9bc <vPortExitCritical>
}
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c544:	f001 fa08 	bl	800d958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c550:	2301      	movs	r3, #1
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e001      	b.n	800c55a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c55a:	f001 fa2f 	bl	800d9bc <vPortExitCritical>

	return xReturn;
 800c55e:	68fb      	ldr	r3, [r7, #12]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c570:	f001 f9f2 	bl	800d958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d102      	bne.n	800c586 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c580:	2301      	movs	r3, #1
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	e001      	b.n	800c58a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c586:	2300      	movs	r3, #0
 800c588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c58a:	f001 fa17 	bl	800d9bc <vPortExitCritical>

	return xReturn;
 800c58e:	68fb      	ldr	r3, [r7, #12]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08e      	sub	sp, #56	; 0x38
 800c59c:	af04      	add	r7, sp, #16
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10b      	bne.n	800c5c4 <xTaskCreateStatic+0x2c>
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	b672      	cpsid	i
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	b662      	cpsie	i
 800c5c0:	623b      	str	r3, [r7, #32]
 800c5c2:	e7fe      	b.n	800c5c2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10b      	bne.n	800c5e2 <xTaskCreateStatic+0x4a>
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	b672      	cpsid	i
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	b662      	cpsie	i
 800c5de:	61fb      	str	r3, [r7, #28]
 800c5e0:	e7fe      	b.n	800c5e0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5e2:	2358      	movs	r3, #88	; 0x58
 800c5e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b58      	cmp	r3, #88	; 0x58
 800c5ea:	d00b      	beq.n	800c604 <xTaskCreateStatic+0x6c>
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	b672      	cpsid	i
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	b662      	cpsie	i
 800c600:	61bb      	str	r3, [r7, #24]
 800c602:	e7fe      	b.n	800c602 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c604:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01e      	beq.n	800c64a <xTaskCreateStatic+0xb2>
 800c60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01b      	beq.n	800c64a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c61a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	2202      	movs	r2, #2
 800c620:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c624:	2300      	movs	r3, #0
 800c626:	9303      	str	r3, [sp, #12]
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	9302      	str	r3, [sp, #8]
 800c62c:	f107 0314 	add.w	r3, r7, #20
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f850 	bl	800c6e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c644:	f000 f8e0 	bl	800c808 <prvAddNewTaskToReadyList>
 800c648:	e001      	b.n	800c64e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c64e:	697b      	ldr	r3, [r7, #20]
	}
 800c650:	4618      	mov	r0, r3
 800c652:	3728      	adds	r7, #40	; 0x28
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08c      	sub	sp, #48	; 0x30
 800c65c:	af04      	add	r7, sp, #16
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	4613      	mov	r3, r2
 800c666:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c668:	88fb      	ldrh	r3, [r7, #6]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f001 fa95 	bl	800db9c <pvPortMalloc>
 800c672:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00e      	beq.n	800c698 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c67a:	2058      	movs	r0, #88	; 0x58
 800c67c:	f001 fa8e 	bl	800db9c <pvPortMalloc>
 800c680:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	697a      	ldr	r2, [r7, #20]
 800c68c:	631a      	str	r2, [r3, #48]	; 0x30
 800c68e:	e005      	b.n	800c69c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c690:	6978      	ldr	r0, [r7, #20]
 800c692:	f001 fb4f 	bl	800dd34 <vPortFree>
 800c696:	e001      	b.n	800c69c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d017      	beq.n	800c6d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6aa:	88fa      	ldrh	r2, [r7, #6]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9303      	str	r3, [sp, #12]
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	9302      	str	r3, [sp, #8]
 800c6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 f80e 	bl	800c6e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6c6:	69f8      	ldr	r0, [r7, #28]
 800c6c8:	f000 f89e 	bl	800c808 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	61bb      	str	r3, [r7, #24]
 800c6d0:	e002      	b.n	800c6d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
	}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3720      	adds	r7, #32
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b088      	sub	sp, #32
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	21a5      	movs	r1, #165	; 0xa5
 800c6fc:	f001 fc67 	bl	800dfce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c704:	6879      	ldr	r1, [r7, #4]
 800c706:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c70a:	440b      	add	r3, r1
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	4413      	add	r3, r2
 800c710:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	f023 0307 	bic.w	r3, r3, #7
 800c718:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <prvInitialiseNewTask+0x5a>
 800c724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c728:	b672      	cpsid	i
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	b662      	cpsie	i
 800c738:	617b      	str	r3, [r7, #20]
 800c73a:	e7fe      	b.n	800c73a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d01f      	beq.n	800c782 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c742:	2300      	movs	r3, #0
 800c744:	61fb      	str	r3, [r7, #28]
 800c746:	e012      	b.n	800c76e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	4413      	add	r3, r2
 800c74e:	7819      	ldrb	r1, [r3, #0]
 800c750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	4413      	add	r3, r2
 800c756:	3334      	adds	r3, #52	; 0x34
 800c758:	460a      	mov	r2, r1
 800c75a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	4413      	add	r3, r2
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d006      	beq.n	800c776 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	3301      	adds	r3, #1
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	2b0f      	cmp	r3, #15
 800c772:	d9e9      	bls.n	800c748 <prvInitialiseNewTask+0x66>
 800c774:	e000      	b.n	800c778 <prvInitialiseNewTask+0x96>
			{
				break;
 800c776:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c780:	e003      	b.n	800c78a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	2b06      	cmp	r3, #6
 800c78e:	d901      	bls.n	800c794 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c790:	2306      	movs	r3, #6
 800c792:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c798:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff f814 	bl	800b7d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b2:	3318      	adds	r3, #24
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff f80f 	bl	800b7d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f1c3 0207 	rsb	r2, r3, #7
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	2200      	movs	r2, #0
 800c7da:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	68f9      	ldr	r1, [r7, #12]
 800c7e8:	69b8      	ldr	r0, [r7, #24]
 800c7ea:	f000 ffa9 	bl	800d740 <pxPortInitialiseStack>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d002      	beq.n	800c800 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c800:	bf00      	nop
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c810:	f001 f8a2 	bl	800d958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c814:	4b2a      	ldr	r3, [pc, #168]	; (800c8c0 <prvAddNewTaskToReadyList+0xb8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3301      	adds	r3, #1
 800c81a:	4a29      	ldr	r2, [pc, #164]	; (800c8c0 <prvAddNewTaskToReadyList+0xb8>)
 800c81c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c81e:	4b29      	ldr	r3, [pc, #164]	; (800c8c4 <prvAddNewTaskToReadyList+0xbc>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d109      	bne.n	800c83a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c826:	4a27      	ldr	r2, [pc, #156]	; (800c8c4 <prvAddNewTaskToReadyList+0xbc>)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c82c:	4b24      	ldr	r3, [pc, #144]	; (800c8c0 <prvAddNewTaskToReadyList+0xb8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d110      	bne.n	800c856 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c834:	f000 fc8c 	bl	800d150 <prvInitialiseTaskLists>
 800c838:	e00d      	b.n	800c856 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c83a:	4b23      	ldr	r3, [pc, #140]	; (800c8c8 <prvAddNewTaskToReadyList+0xc0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d109      	bne.n	800c856 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c842:	4b20      	ldr	r3, [pc, #128]	; (800c8c4 <prvAddNewTaskToReadyList+0xbc>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d802      	bhi.n	800c856 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c850:	4a1c      	ldr	r2, [pc, #112]	; (800c8c4 <prvAddNewTaskToReadyList+0xbc>)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c856:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <prvAddNewTaskToReadyList+0xc4>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	3301      	adds	r3, #1
 800c85c:	4a1b      	ldr	r2, [pc, #108]	; (800c8cc <prvAddNewTaskToReadyList+0xc4>)
 800c85e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c864:	2201      	movs	r2, #1
 800c866:	409a      	lsls	r2, r3
 800c868:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <prvAddNewTaskToReadyList+0xc8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	4a18      	ldr	r2, [pc, #96]	; (800c8d0 <prvAddNewTaskToReadyList+0xc8>)
 800c870:	6013      	str	r3, [r2, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4a15      	ldr	r2, [pc, #84]	; (800c8d4 <prvAddNewTaskToReadyList+0xcc>)
 800c880:	441a      	add	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3304      	adds	r3, #4
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fe ffb2 	bl	800b7f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c88e:	f001 f895 	bl	800d9bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c892:	4b0d      	ldr	r3, [pc, #52]	; (800c8c8 <prvAddNewTaskToReadyList+0xc0>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00e      	beq.n	800c8b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c89a:	4b0a      	ldr	r3, [pc, #40]	; (800c8c4 <prvAddNewTaskToReadyList+0xbc>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d207      	bcs.n	800c8b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8a8:	4b0b      	ldr	r3, [pc, #44]	; (800c8d8 <prvAddNewTaskToReadyList+0xd0>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20000680 	.word	0x20000680
 800c8c4:	20000580 	.word	0x20000580
 800c8c8:	2000068c 	.word	0x2000068c
 800c8cc:	2000069c 	.word	0x2000069c
 800c8d0:	20000688 	.word	0x20000688
 800c8d4:	20000584 	.word	0x20000584
 800c8d8:	e000ed04 	.word	0xe000ed04

0800c8dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10b      	bne.n	800c908 <vTaskDelayUntil+0x2c>
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	e7fe      	b.n	800c906 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10b      	bne.n	800c926 <vTaskDelayUntil+0x4a>
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	b672      	cpsid	i
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	b662      	cpsie	i
 800c922:	613b      	str	r3, [r7, #16]
 800c924:	e7fe      	b.n	800c924 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c926:	4b2a      	ldr	r3, [pc, #168]	; (800c9d0 <vTaskDelayUntil+0xf4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <vTaskDelayUntil+0x6a>
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	b672      	cpsid	i
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	b662      	cpsie	i
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e7fe      	b.n	800c944 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c946:	f000 f8e1 	bl	800cb0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c94a:	4b22      	ldr	r3, [pc, #136]	; (800c9d4 <vTaskDelayUntil+0xf8>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	683a      	ldr	r2, [r7, #0]
 800c956:	4413      	add	r3, r2
 800c958:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6a3a      	ldr	r2, [r7, #32]
 800c960:	429a      	cmp	r2, r3
 800c962:	d20b      	bcs.n	800c97c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	69fa      	ldr	r2, [r7, #28]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d211      	bcs.n	800c992 <vTaskDelayUntil+0xb6>
 800c96e:	69fa      	ldr	r2, [r7, #28]
 800c970:	6a3b      	ldr	r3, [r7, #32]
 800c972:	429a      	cmp	r2, r3
 800c974:	d90d      	bls.n	800c992 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c976:	2301      	movs	r3, #1
 800c978:	627b      	str	r3, [r7, #36]	; 0x24
 800c97a:	e00a      	b.n	800c992 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	69fa      	ldr	r2, [r7, #28]
 800c982:	429a      	cmp	r2, r3
 800c984:	d303      	bcc.n	800c98e <vTaskDelayUntil+0xb2>
 800c986:	69fa      	ldr	r2, [r7, #28]
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d901      	bls.n	800c992 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c98e:	2301      	movs	r3, #1
 800c990:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d006      	beq.n	800c9ac <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	1ad3      	subs	r3, r2, r3
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fe64 	bl	800d674 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c9ac:	f000 f8bc 	bl	800cb28 <xTaskResumeAll>
 800c9b0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d107      	bne.n	800c9c8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c9b8:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <vTaskDelayUntil+0xfc>)
 800c9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9c8:	bf00      	nop
 800c9ca:	3728      	adds	r7, #40	; 0x28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	200006a8 	.word	0x200006a8
 800c9d4:	20000684 	.word	0x20000684
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d018      	beq.n	800ca20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9ee:	4b14      	ldr	r3, [pc, #80]	; (800ca40 <vTaskDelay+0x64>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00b      	beq.n	800ca0e <vTaskDelay+0x32>
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	b672      	cpsid	i
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	b662      	cpsie	i
 800ca0a:	60bb      	str	r3, [r7, #8]
 800ca0c:	e7fe      	b.n	800ca0c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800ca0e:	f000 f87d 	bl	800cb0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca12:	2100      	movs	r1, #0
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fe2d 	bl	800d674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca1a:	f000 f885 	bl	800cb28 <xTaskResumeAll>
 800ca1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d107      	bne.n	800ca36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ca26:	4b07      	ldr	r3, [pc, #28]	; (800ca44 <vTaskDelay+0x68>)
 800ca28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	200006a8 	.word	0x200006a8
 800ca44:	e000ed04 	.word	0xe000ed04

0800ca48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08a      	sub	sp, #40	; 0x28
 800ca4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca56:	463a      	mov	r2, r7
 800ca58:	1d39      	adds	r1, r7, #4
 800ca5a:	f107 0308 	add.w	r3, r7, #8
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7f3 fdc0 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	9202      	str	r2, [sp, #8]
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	2300      	movs	r3, #0
 800ca74:	460a      	mov	r2, r1
 800ca76:	491f      	ldr	r1, [pc, #124]	; (800caf4 <vTaskStartScheduler+0xac>)
 800ca78:	481f      	ldr	r0, [pc, #124]	; (800caf8 <vTaskStartScheduler+0xb0>)
 800ca7a:	f7ff fd8d 	bl	800c598 <xTaskCreateStatic>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	4b1e      	ldr	r3, [pc, #120]	; (800cafc <vTaskStartScheduler+0xb4>)
 800ca82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca84:	4b1d      	ldr	r3, [pc, #116]	; (800cafc <vTaskStartScheduler+0xb4>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	617b      	str	r3, [r7, #20]
 800ca90:	e001      	b.n	800ca96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d117      	bne.n	800cacc <vTaskStartScheduler+0x84>
 800ca9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa0:	b672      	cpsid	i
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	b662      	cpsie	i
 800cab0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cab2:	4b13      	ldr	r3, [pc, #76]	; (800cb00 <vTaskStartScheduler+0xb8>)
 800cab4:	f04f 32ff 	mov.w	r2, #4294967295
 800cab8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800caba:	4b12      	ldr	r3, [pc, #72]	; (800cb04 <vTaskStartScheduler+0xbc>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cac0:	4b11      	ldr	r3, [pc, #68]	; (800cb08 <vTaskStartScheduler+0xc0>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cac6:	f000 fecb 	bl	800d860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800caca:	e00f      	b.n	800caec <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad2:	d10b      	bne.n	800caec <vTaskStartScheduler+0xa4>
 800cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad8:	b672      	cpsid	i
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	b662      	cpsie	i
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	e7fe      	b.n	800caea <vTaskStartScheduler+0xa2>
}
 800caec:	bf00      	nop
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	0800e91c 	.word	0x0800e91c
 800caf8:	0800d11d 	.word	0x0800d11d
 800cafc:	200006a4 	.word	0x200006a4
 800cb00:	200006a0 	.word	0x200006a0
 800cb04:	2000068c 	.word	0x2000068c
 800cb08:	20000684 	.word	0x20000684

0800cb0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb10:	4b04      	ldr	r3, [pc, #16]	; (800cb24 <vTaskSuspendAll+0x18>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	3301      	adds	r3, #1
 800cb16:	4a03      	ldr	r2, [pc, #12]	; (800cb24 <vTaskSuspendAll+0x18>)
 800cb18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cb1a:	bf00      	nop
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	200006a8 	.word	0x200006a8

0800cb28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb36:	4b42      	ldr	r3, [pc, #264]	; (800cc40 <xTaskResumeAll+0x118>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10b      	bne.n	800cb56 <xTaskResumeAll+0x2e>
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	b672      	cpsid	i
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	b662      	cpsie	i
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	e7fe      	b.n	800cb54 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb56:	f000 feff 	bl	800d958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb5a:	4b39      	ldr	r3, [pc, #228]	; (800cc40 <xTaskResumeAll+0x118>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	4a37      	ldr	r2, [pc, #220]	; (800cc40 <xTaskResumeAll+0x118>)
 800cb62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb64:	4b36      	ldr	r3, [pc, #216]	; (800cc40 <xTaskResumeAll+0x118>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d161      	bne.n	800cc30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb6c:	4b35      	ldr	r3, [pc, #212]	; (800cc44 <xTaskResumeAll+0x11c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d05d      	beq.n	800cc30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb74:	e02e      	b.n	800cbd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb76:	4b34      	ldr	r3, [pc, #208]	; (800cc48 <xTaskResumeAll+0x120>)
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3318      	adds	r3, #24
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fe92 	bl	800b8ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3304      	adds	r3, #4
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe fe8d 	bl	800b8ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb96:	2201      	movs	r2, #1
 800cb98:	409a      	lsls	r2, r3
 800cb9a:	4b2c      	ldr	r3, [pc, #176]	; (800cc4c <xTaskResumeAll+0x124>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	4a2a      	ldr	r2, [pc, #168]	; (800cc4c <xTaskResumeAll+0x124>)
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba8:	4613      	mov	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4a27      	ldr	r2, [pc, #156]	; (800cc50 <xTaskResumeAll+0x128>)
 800cbb2:	441a      	add	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f7fe fe19 	bl	800b7f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	4b23      	ldr	r3, [pc, #140]	; (800cc54 <xTaskResumeAll+0x12c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d302      	bcc.n	800cbd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cbce:	4b22      	ldr	r3, [pc, #136]	; (800cc58 <xTaskResumeAll+0x130>)
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbd4:	4b1c      	ldr	r3, [pc, #112]	; (800cc48 <xTaskResumeAll+0x120>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1cc      	bne.n	800cb76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbe2:	f000 fb51 	bl	800d288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cbe6:	4b1d      	ldr	r3, [pc, #116]	; (800cc5c <xTaskResumeAll+0x134>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d010      	beq.n	800cc14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbf2:	f000 f847 	bl	800cc84 <xTaskIncrementTick>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cbfc:	4b16      	ldr	r3, [pc, #88]	; (800cc58 <xTaskResumeAll+0x130>)
 800cbfe:	2201      	movs	r2, #1
 800cc00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1f1      	bne.n	800cbf2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cc0e:	4b13      	ldr	r3, [pc, #76]	; (800cc5c <xTaskResumeAll+0x134>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc14:	4b10      	ldr	r3, [pc, #64]	; (800cc58 <xTaskResumeAll+0x130>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d009      	beq.n	800cc30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc20:	4b0f      	ldr	r3, [pc, #60]	; (800cc60 <xTaskResumeAll+0x138>)
 800cc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc30:	f000 fec4 	bl	800d9bc <vPortExitCritical>

	return xAlreadyYielded;
 800cc34:	68bb      	ldr	r3, [r7, #8]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	200006a8 	.word	0x200006a8
 800cc44:	20000680 	.word	0x20000680
 800cc48:	20000640 	.word	0x20000640
 800cc4c:	20000688 	.word	0x20000688
 800cc50:	20000584 	.word	0x20000584
 800cc54:	20000580 	.word	0x20000580
 800cc58:	20000694 	.word	0x20000694
 800cc5c:	20000690 	.word	0x20000690
 800cc60:	e000ed04 	.word	0xe000ed04

0800cc64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc6a:	4b05      	ldr	r3, [pc, #20]	; (800cc80 <xTaskGetTickCount+0x1c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc70:	687b      	ldr	r3, [r7, #4]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	20000684 	.word	0x20000684

0800cc84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc8e:	4b4f      	ldr	r3, [pc, #316]	; (800cdcc <xTaskIncrementTick+0x148>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f040 8089 	bne.w	800cdaa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc98:	4b4d      	ldr	r3, [pc, #308]	; (800cdd0 <xTaskIncrementTick+0x14c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cca0:	4a4b      	ldr	r2, [pc, #300]	; (800cdd0 <xTaskIncrementTick+0x14c>)
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d121      	bne.n	800ccf0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ccac:	4b49      	ldr	r3, [pc, #292]	; (800cdd4 <xTaskIncrementTick+0x150>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00b      	beq.n	800ccce <xTaskIncrementTick+0x4a>
 800ccb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccba:	b672      	cpsid	i
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	b662      	cpsie	i
 800ccca:	603b      	str	r3, [r7, #0]
 800cccc:	e7fe      	b.n	800cccc <xTaskIncrementTick+0x48>
 800ccce:	4b41      	ldr	r3, [pc, #260]	; (800cdd4 <xTaskIncrementTick+0x150>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	60fb      	str	r3, [r7, #12]
 800ccd4:	4b40      	ldr	r3, [pc, #256]	; (800cdd8 <xTaskIncrementTick+0x154>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a3e      	ldr	r2, [pc, #248]	; (800cdd4 <xTaskIncrementTick+0x150>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	4a3e      	ldr	r2, [pc, #248]	; (800cdd8 <xTaskIncrementTick+0x154>)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	4b3e      	ldr	r3, [pc, #248]	; (800cddc <xTaskIncrementTick+0x158>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3301      	adds	r3, #1
 800cce8:	4a3c      	ldr	r2, [pc, #240]	; (800cddc <xTaskIncrementTick+0x158>)
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	f000 facc 	bl	800d288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccf0:	4b3b      	ldr	r3, [pc, #236]	; (800cde0 <xTaskIncrementTick+0x15c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d348      	bcc.n	800cd8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccfa:	4b36      	ldr	r3, [pc, #216]	; (800cdd4 <xTaskIncrementTick+0x150>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d104      	bne.n	800cd0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd04:	4b36      	ldr	r3, [pc, #216]	; (800cde0 <xTaskIncrementTick+0x15c>)
 800cd06:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0a:	601a      	str	r2, [r3, #0]
					break;
 800cd0c:	e03e      	b.n	800cd8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0e:	4b31      	ldr	r3, [pc, #196]	; (800cdd4 <xTaskIncrementTick+0x150>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d203      	bcs.n	800cd2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd26:	4a2e      	ldr	r2, [pc, #184]	; (800cde0 <xTaskIncrementTick+0x15c>)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd2c:	e02e      	b.n	800cd8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe fdba 	bl	800b8ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	3318      	adds	r3, #24
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fdb1 	bl	800b8ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4e:	2201      	movs	r2, #1
 800cd50:	409a      	lsls	r2, r3
 800cd52:	4b24      	ldr	r3, [pc, #144]	; (800cde4 <xTaskIncrementTick+0x160>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	4a22      	ldr	r2, [pc, #136]	; (800cde4 <xTaskIncrementTick+0x160>)
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4a1f      	ldr	r2, [pc, #124]	; (800cde8 <xTaskIncrementTick+0x164>)
 800cd6a:	441a      	add	r2, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4619      	mov	r1, r3
 800cd72:	4610      	mov	r0, r2
 800cd74:	f7fe fd3d 	bl	800b7f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7c:	4b1b      	ldr	r3, [pc, #108]	; (800cdec <xTaskIncrementTick+0x168>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d3b9      	bcc.n	800ccfa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cd86:	2301      	movs	r3, #1
 800cd88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd8a:	e7b6      	b.n	800ccfa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd8c:	4b17      	ldr	r3, [pc, #92]	; (800cdec <xTaskIncrementTick+0x168>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd92:	4915      	ldr	r1, [pc, #84]	; (800cde8 <xTaskIncrementTick+0x164>)
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	440b      	add	r3, r1
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d907      	bls.n	800cdb4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800cda4:	2301      	movs	r3, #1
 800cda6:	617b      	str	r3, [r7, #20]
 800cda8:	e004      	b.n	800cdb4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cdaa:	4b11      	ldr	r3, [pc, #68]	; (800cdf0 <xTaskIncrementTick+0x16c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	4a0f      	ldr	r2, [pc, #60]	; (800cdf0 <xTaskIncrementTick+0x16c>)
 800cdb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cdb4:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <xTaskIncrementTick+0x170>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cdc0:	697b      	ldr	r3, [r7, #20]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	200006a8 	.word	0x200006a8
 800cdd0:	20000684 	.word	0x20000684
 800cdd4:	20000638 	.word	0x20000638
 800cdd8:	2000063c 	.word	0x2000063c
 800cddc:	20000698 	.word	0x20000698
 800cde0:	200006a0 	.word	0x200006a0
 800cde4:	20000688 	.word	0x20000688
 800cde8:	20000584 	.word	0x20000584
 800cdec:	20000580 	.word	0x20000580
 800cdf0:	20000690 	.word	0x20000690
 800cdf4:	20000694 	.word	0x20000694

0800cdf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b088      	sub	sp, #32
 800cdfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdfe:	4b3a      	ldr	r3, [pc, #232]	; (800cee8 <vTaskSwitchContext+0xf0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce06:	4b39      	ldr	r3, [pc, #228]	; (800ceec <vTaskSwitchContext+0xf4>)
 800ce08:	2201      	movs	r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce0c:	e067      	b.n	800cede <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800ce0e:	4b37      	ldr	r3, [pc, #220]	; (800ceec <vTaskSwitchContext+0xf4>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ce14:	4b36      	ldr	r3, [pc, #216]	; (800cef0 <vTaskSwitchContext+0xf8>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce1a:	61fb      	str	r3, [r7, #28]
 800ce1c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ce20:	61bb      	str	r3, [r7, #24]
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	69ba      	ldr	r2, [r7, #24]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d111      	bne.n	800ce50 <vTaskSwitchContext+0x58>
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d10b      	bne.n	800ce50 <vTaskSwitchContext+0x58>
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	69ba      	ldr	r2, [r7, #24]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d105      	bne.n	800ce50 <vTaskSwitchContext+0x58>
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	330c      	adds	r3, #12
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	69ba      	ldr	r2, [r7, #24]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d008      	beq.n	800ce62 <vTaskSwitchContext+0x6a>
 800ce50:	4b27      	ldr	r3, [pc, #156]	; (800cef0 <vTaskSwitchContext+0xf8>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b26      	ldr	r3, [pc, #152]	; (800cef0 <vTaskSwitchContext+0xf8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3334      	adds	r3, #52	; 0x34
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7f3 fbae 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce62:	4b24      	ldr	r3, [pc, #144]	; (800cef4 <vTaskSwitchContext+0xfc>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	fab3 f383 	clz	r3, r3
 800ce6e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ce70:	7afb      	ldrb	r3, [r7, #11]
 800ce72:	f1c3 031f 	rsb	r3, r3, #31
 800ce76:	617b      	str	r3, [r7, #20]
 800ce78:	491f      	ldr	r1, [pc, #124]	; (800cef8 <vTaskSwitchContext+0x100>)
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	440b      	add	r3, r1
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10b      	bne.n	800cea4 <vTaskSwitchContext+0xac>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	b672      	cpsid	i
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	b662      	cpsie	i
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	e7fe      	b.n	800cea2 <vTaskSwitchContext+0xaa>
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	4613      	mov	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4a12      	ldr	r2, [pc, #72]	; (800cef8 <vTaskSwitchContext+0x100>)
 800ceb0:	4413      	add	r3, r2
 800ceb2:	613b      	str	r3, [r7, #16]
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	605a      	str	r2, [r3, #4]
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	3308      	adds	r3, #8
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d104      	bne.n	800ced4 <vTaskSwitchContext+0xdc>
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	605a      	str	r2, [r3, #4]
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	4a05      	ldr	r2, [pc, #20]	; (800cef0 <vTaskSwitchContext+0xf8>)
 800cedc:	6013      	str	r3, [r2, #0]
}
 800cede:	bf00      	nop
 800cee0:	3720      	adds	r7, #32
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	200006a8 	.word	0x200006a8
 800ceec:	20000694 	.word	0x20000694
 800cef0:	20000580 	.word	0x20000580
 800cef4:	20000688 	.word	0x20000688
 800cef8:	20000584 	.word	0x20000584

0800cefc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10b      	bne.n	800cf24 <vTaskPlaceOnEventList+0x28>
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	b672      	cpsid	i
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	b662      	cpsie	i
 800cf20:	60fb      	str	r3, [r7, #12]
 800cf22:	e7fe      	b.n	800cf22 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf24:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <vTaskPlaceOnEventList+0x48>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3318      	adds	r3, #24
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7fe fc84 	bl	800b83a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf32:	2101      	movs	r1, #1
 800cf34:	6838      	ldr	r0, [r7, #0]
 800cf36:	f000 fb9d 	bl	800d674 <prvAddCurrentTaskToDelayedList>
}
 800cf3a:	bf00      	nop
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	20000580 	.word	0x20000580

0800cf48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10b      	bne.n	800cf76 <xTaskRemoveFromEventList+0x2e>
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	b672      	cpsid	i
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	b662      	cpsie	i
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	e7fe      	b.n	800cf74 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	3318      	adds	r3, #24
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe fc96 	bl	800b8ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf80:	4b1d      	ldr	r3, [pc, #116]	; (800cff8 <xTaskRemoveFromEventList+0xb0>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d11c      	bne.n	800cfc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fc8d 	bl	800b8ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf96:	2201      	movs	r2, #1
 800cf98:	409a      	lsls	r2, r3
 800cf9a:	4b18      	ldr	r3, [pc, #96]	; (800cffc <xTaskRemoveFromEventList+0xb4>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	4a16      	ldr	r2, [pc, #88]	; (800cffc <xTaskRemoveFromEventList+0xb4>)
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4a13      	ldr	r2, [pc, #76]	; (800d000 <xTaskRemoveFromEventList+0xb8>)
 800cfb2:	441a      	add	r2, r3
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4610      	mov	r0, r2
 800cfbc:	f7fe fc19 	bl	800b7f2 <vListInsertEnd>
 800cfc0:	e005      	b.n	800cfce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	3318      	adds	r3, #24
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	480e      	ldr	r0, [pc, #56]	; (800d004 <xTaskRemoveFromEventList+0xbc>)
 800cfca:	f7fe fc12 	bl	800b7f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd2:	4b0d      	ldr	r3, [pc, #52]	; (800d008 <xTaskRemoveFromEventList+0xc0>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d905      	bls.n	800cfe8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <xTaskRemoveFromEventList+0xc4>)
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	e001      	b.n	800cfec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfec:	697b      	ldr	r3, [r7, #20]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	200006a8 	.word	0x200006a8
 800cffc:	20000688 	.word	0x20000688
 800d000:	20000584 	.word	0x20000584
 800d004:	20000640 	.word	0x20000640
 800d008:	20000580 	.word	0x20000580
 800d00c:	20000694 	.word	0x20000694

0800d010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d018:	4b06      	ldr	r3, [pc, #24]	; (800d034 <vTaskInternalSetTimeOutState+0x24>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d020:	4b05      	ldr	r3, [pc, #20]	; (800d038 <vTaskInternalSetTimeOutState+0x28>)
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	605a      	str	r2, [r3, #4]
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr
 800d034:	20000698 	.word	0x20000698
 800d038:	20000684 	.word	0x20000684

0800d03c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10b      	bne.n	800d064 <xTaskCheckForTimeOut+0x28>
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	b672      	cpsid	i
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	b662      	cpsie	i
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	e7fe      	b.n	800d062 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10b      	bne.n	800d082 <xTaskCheckForTimeOut+0x46>
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	b672      	cpsid	i
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	b662      	cpsie	i
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	e7fe      	b.n	800d080 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d082:	f000 fc69 	bl	800d958 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d086:	4b1d      	ldr	r3, [pc, #116]	; (800d0fc <xTaskCheckForTimeOut+0xc0>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09e:	d102      	bne.n	800d0a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	61fb      	str	r3, [r7, #28]
 800d0a4:	e023      	b.n	800d0ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b15      	ldr	r3, [pc, #84]	; (800d100 <xTaskCheckForTimeOut+0xc4>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d007      	beq.n	800d0c2 <xTaskCheckForTimeOut+0x86>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	69ba      	ldr	r2, [r7, #24]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d302      	bcc.n	800d0c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	61fb      	str	r3, [r7, #28]
 800d0c0:	e015      	b.n	800d0ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d20b      	bcs.n	800d0e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	1ad2      	subs	r2, r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff ff99 	bl	800d010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	61fb      	str	r3, [r7, #28]
 800d0e2:	e004      	b.n	800d0ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0ee:	f000 fc65 	bl	800d9bc <vPortExitCritical>

	return xReturn;
 800d0f2:	69fb      	ldr	r3, [r7, #28]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3720      	adds	r7, #32
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	20000684 	.word	0x20000684
 800d100:	20000698 	.word	0x20000698

0800d104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d108:	4b03      	ldr	r3, [pc, #12]	; (800d118 <vTaskMissedYield+0x14>)
 800d10a:	2201      	movs	r2, #1
 800d10c:	601a      	str	r2, [r3, #0]
}
 800d10e:	bf00      	nop
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	20000694 	.word	0x20000694

0800d11c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d124:	f000 f854 	bl	800d1d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d128:	4b07      	ldr	r3, [pc, #28]	; (800d148 <prvIdleTask+0x2c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d907      	bls.n	800d140 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d130:	4b06      	ldr	r3, [pc, #24]	; (800d14c <prvIdleTask+0x30>)
 800d132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d140:	f7f3 fa36 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d144:	e7ee      	b.n	800d124 <prvIdleTask+0x8>
 800d146:	bf00      	nop
 800d148:	20000584 	.word	0x20000584
 800d14c:	e000ed04 	.word	0xe000ed04

0800d150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d156:	2300      	movs	r3, #0
 800d158:	607b      	str	r3, [r7, #4]
 800d15a:	e00c      	b.n	800d176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	4613      	mov	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4a12      	ldr	r2, [pc, #72]	; (800d1b0 <prvInitialiseTaskLists+0x60>)
 800d168:	4413      	add	r3, r2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe fb14 	bl	800b798 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	3301      	adds	r3, #1
 800d174:	607b      	str	r3, [r7, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b06      	cmp	r3, #6
 800d17a:	d9ef      	bls.n	800d15c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d17c:	480d      	ldr	r0, [pc, #52]	; (800d1b4 <prvInitialiseTaskLists+0x64>)
 800d17e:	f7fe fb0b 	bl	800b798 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d182:	480d      	ldr	r0, [pc, #52]	; (800d1b8 <prvInitialiseTaskLists+0x68>)
 800d184:	f7fe fb08 	bl	800b798 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d188:	480c      	ldr	r0, [pc, #48]	; (800d1bc <prvInitialiseTaskLists+0x6c>)
 800d18a:	f7fe fb05 	bl	800b798 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d18e:	480c      	ldr	r0, [pc, #48]	; (800d1c0 <prvInitialiseTaskLists+0x70>)
 800d190:	f7fe fb02 	bl	800b798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d194:	480b      	ldr	r0, [pc, #44]	; (800d1c4 <prvInitialiseTaskLists+0x74>)
 800d196:	f7fe faff 	bl	800b798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d19a:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <prvInitialiseTaskLists+0x78>)
 800d19c:	4a05      	ldr	r2, [pc, #20]	; (800d1b4 <prvInitialiseTaskLists+0x64>)
 800d19e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvInitialiseTaskLists+0x7c>)
 800d1a2:	4a05      	ldr	r2, [pc, #20]	; (800d1b8 <prvInitialiseTaskLists+0x68>)
 800d1a4:	601a      	str	r2, [r3, #0]
}
 800d1a6:	bf00      	nop
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20000584 	.word	0x20000584
 800d1b4:	20000610 	.word	0x20000610
 800d1b8:	20000624 	.word	0x20000624
 800d1bc:	20000640 	.word	0x20000640
 800d1c0:	20000654 	.word	0x20000654
 800d1c4:	2000066c 	.word	0x2000066c
 800d1c8:	20000638 	.word	0x20000638
 800d1cc:	2000063c 	.word	0x2000063c

0800d1d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1d6:	e019      	b.n	800d20c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1d8:	f000 fbbe 	bl	800d958 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1dc:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <prvCheckTasksWaitingTermination+0x4c>)
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fb5f 	bl	800b8ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1ee:	4b0c      	ldr	r3, [pc, #48]	; (800d220 <prvCheckTasksWaitingTermination+0x50>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	4a0a      	ldr	r2, [pc, #40]	; (800d220 <prvCheckTasksWaitingTermination+0x50>)
 800d1f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1f8:	4b0a      	ldr	r3, [pc, #40]	; (800d224 <prvCheckTasksWaitingTermination+0x54>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	4a09      	ldr	r2, [pc, #36]	; (800d224 <prvCheckTasksWaitingTermination+0x54>)
 800d200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d202:	f000 fbdb 	bl	800d9bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f80e 	bl	800d228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <prvCheckTasksWaitingTermination+0x54>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1e1      	bne.n	800d1d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20000654 	.word	0x20000654
 800d220:	20000680 	.word	0x20000680
 800d224:	20000668 	.word	0x20000668

0800d228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d236:	2b00      	cmp	r3, #0
 800d238:	d108      	bne.n	800d24c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 fd78 	bl	800dd34 <vPortFree>
				vPortFree( pxTCB );
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fd75 	bl	800dd34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d24a:	e019      	b.n	800d280 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d252:	2b01      	cmp	r3, #1
 800d254:	d103      	bne.n	800d25e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 fd6c 	bl	800dd34 <vPortFree>
	}
 800d25c:	e010      	b.n	800d280 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d264:	2b02      	cmp	r3, #2
 800d266:	d00b      	beq.n	800d280 <prvDeleteTCB+0x58>
 800d268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26c:	b672      	cpsid	i
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	b662      	cpsie	i
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	e7fe      	b.n	800d27e <prvDeleteTCB+0x56>
	}
 800d280:	bf00      	nop
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d28e:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <prvResetNextTaskUnblockTime+0x38>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d104      	bne.n	800d2a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d298:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2a0:	e008      	b.n	800d2b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2a2:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <prvResetNextTaskUnblockTime+0x38>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	4a04      	ldr	r2, [pc, #16]	; (800d2c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d2b2:	6013      	str	r3, [r2, #0]
}
 800d2b4:	bf00      	nop
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	20000638 	.word	0x20000638
 800d2c4:	200006a0 	.word	0x200006a0

0800d2c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <xTaskGetSchedulerState+0x34>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d102      	bne.n	800d2dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	607b      	str	r3, [r7, #4]
 800d2da:	e008      	b.n	800d2ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2dc:	4b08      	ldr	r3, [pc, #32]	; (800d300 <xTaskGetSchedulerState+0x38>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d102      	bne.n	800d2ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2e4:	2302      	movs	r3, #2
 800d2e6:	607b      	str	r3, [r7, #4]
 800d2e8:	e001      	b.n	800d2ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2ee:	687b      	ldr	r3, [r7, #4]
	}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	2000068c 	.word	0x2000068c
 800d300:	200006a8 	.word	0x200006a8

0800d304 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d310:	2300      	movs	r3, #0
 800d312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d069      	beq.n	800d3ee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31e:	4b36      	ldr	r3, [pc, #216]	; (800d3f8 <xTaskPriorityInherit+0xf4>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d324:	429a      	cmp	r2, r3
 800d326:	d259      	bcs.n	800d3dc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	db06      	blt.n	800d33e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d330:	4b31      	ldr	r3, [pc, #196]	; (800d3f8 <xTaskPriorityInherit+0xf4>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d336:	f1c3 0207 	rsb	r2, r3, #7
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	6959      	ldr	r1, [r3, #20]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4a2b      	ldr	r2, [pc, #172]	; (800d3fc <xTaskPriorityInherit+0xf8>)
 800d350:	4413      	add	r3, r2
 800d352:	4299      	cmp	r1, r3
 800d354:	d13a      	bne.n	800d3cc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	3304      	adds	r3, #4
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fe faa6 	bl	800b8ac <uxListRemove>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d115      	bne.n	800d392 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	4924      	ldr	r1, [pc, #144]	; (800d3fc <xTaskPriorityInherit+0xf8>)
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	440b      	add	r3, r1
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10a      	bne.n	800d392 <xTaskPriorityInherit+0x8e>
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	2201      	movs	r2, #1
 800d382:	fa02 f303 	lsl.w	r3, r2, r3
 800d386:	43da      	mvns	r2, r3
 800d388:	4b1d      	ldr	r3, [pc, #116]	; (800d400 <xTaskPriorityInherit+0xfc>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4013      	ands	r3, r2
 800d38e:	4a1c      	ldr	r2, [pc, #112]	; (800d400 <xTaskPriorityInherit+0xfc>)
 800d390:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d392:	4b19      	ldr	r3, [pc, #100]	; (800d3f8 <xTaskPriorityInherit+0xf4>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	409a      	lsls	r2, r3
 800d3a4:	4b16      	ldr	r3, [pc, #88]	; (800d400 <xTaskPriorityInherit+0xfc>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	4a15      	ldr	r2, [pc, #84]	; (800d400 <xTaskPriorityInherit+0xfc>)
 800d3ac:	6013      	str	r3, [r2, #0]
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4a10      	ldr	r2, [pc, #64]	; (800d3fc <xTaskPriorityInherit+0xf8>)
 800d3bc:	441a      	add	r2, r3
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	f7fe fa14 	bl	800b7f2 <vListInsertEnd>
 800d3ca:	e004      	b.n	800d3d6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <xTaskPriorityInherit+0xf4>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	e008      	b.n	800d3ee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3e0:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <xTaskPriorityInherit+0xf4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d201      	bcs.n	800d3ee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20000580 	.word	0x20000580
 800d3fc:	20000584 	.word	0x20000584
 800d400:	20000688 	.word	0x20000688

0800d404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d410:	2300      	movs	r3, #0
 800d412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d070      	beq.n	800d4fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d41a:	4b3b      	ldr	r3, [pc, #236]	; (800d508 <xTaskPriorityDisinherit+0x104>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	429a      	cmp	r2, r3
 800d422:	d00b      	beq.n	800d43c <xTaskPriorityDisinherit+0x38>
 800d424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d428:	b672      	cpsid	i
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	b662      	cpsie	i
 800d438:	60fb      	str	r3, [r7, #12]
 800d43a:	e7fe      	b.n	800d43a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10b      	bne.n	800d45c <xTaskPriorityDisinherit+0x58>
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	b672      	cpsid	i
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	b662      	cpsie	i
 800d458:	60bb      	str	r3, [r7, #8]
 800d45a:	e7fe      	b.n	800d45a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d460:	1e5a      	subs	r2, r3, #1
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d46e:	429a      	cmp	r2, r3
 800d470:	d044      	beq.n	800d4fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d476:	2b00      	cmp	r3, #0
 800d478:	d140      	bne.n	800d4fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	3304      	adds	r3, #4
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe fa14 	bl	800b8ac <uxListRemove>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d115      	bne.n	800d4b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d48e:	491f      	ldr	r1, [pc, #124]	; (800d50c <xTaskPriorityDisinherit+0x108>)
 800d490:	4613      	mov	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	440b      	add	r3, r1
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10a      	bne.n	800d4b6 <xTaskPriorityDisinherit+0xb2>
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4aa:	43da      	mvns	r2, r3
 800d4ac:	4b18      	ldr	r3, [pc, #96]	; (800d510 <xTaskPriorityDisinherit+0x10c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	4a17      	ldr	r2, [pc, #92]	; (800d510 <xTaskPriorityDisinherit+0x10c>)
 800d4b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	f1c3 0207 	rsb	r2, r3, #7
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	409a      	lsls	r2, r3
 800d4d2:	4b0f      	ldr	r3, [pc, #60]	; (800d510 <xTaskPriorityDisinherit+0x10c>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	4a0d      	ldr	r2, [pc, #52]	; (800d510 <xTaskPriorityDisinherit+0x10c>)
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	4a08      	ldr	r2, [pc, #32]	; (800d50c <xTaskPriorityDisinherit+0x108>)
 800d4ea:	441a      	add	r2, r3
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	3304      	adds	r3, #4
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	f7fe f97d 	bl	800b7f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4fc:	697b      	ldr	r3, [r7, #20]
	}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20000580 	.word	0x20000580
 800d50c:	20000584 	.word	0x20000584
 800d510:	20000688 	.word	0x20000688

0800d514 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d514:	b580      	push	{r7, lr}
 800d516:	b088      	sub	sp, #32
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d522:	2301      	movs	r3, #1
 800d524:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f000 8085 	beq.w	800d638 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10b      	bne.n	800d54e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	b672      	cpsid	i
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	b662      	cpsie	i
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	e7fe      	b.n	800d54c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d552:	683a      	ldr	r2, [r7, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d902      	bls.n	800d55e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	61fb      	str	r3, [r7, #28]
 800d55c:	e002      	b.n	800d564 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d562:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	69fa      	ldr	r2, [r7, #28]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d064      	beq.n	800d638 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	429a      	cmp	r2, r3
 800d576:	d15f      	bne.n	800d638 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d578:	4b31      	ldr	r3, [pc, #196]	; (800d640 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	69ba      	ldr	r2, [r7, #24]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d10b      	bne.n	800d59a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	b672      	cpsid	i
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	b662      	cpsie	i
 800d596:	60bb      	str	r3, [r7, #8]
 800d598:	e7fe      	b.n	800d598 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	69fa      	ldr	r2, [r7, #28]
 800d5a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	db04      	blt.n	800d5b8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	f1c3 0207 	rsb	r2, r3, #7
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	6959      	ldr	r1, [r3, #20]
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4a1f      	ldr	r2, [pc, #124]	; (800d644 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d5c8:	4413      	add	r3, r2
 800d5ca:	4299      	cmp	r1, r3
 800d5cc:	d134      	bne.n	800d638 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe f96a 	bl	800b8ac <uxListRemove>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d115      	bne.n	800d60a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e2:	4918      	ldr	r1, [pc, #96]	; (800d644 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	440b      	add	r3, r1
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10a      	bne.n	800d60a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fe:	43da      	mvns	r2, r3
 800d600:	4b11      	ldr	r3, [pc, #68]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4013      	ands	r3, r2
 800d606:	4a10      	ldr	r2, [pc, #64]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d608:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60e:	2201      	movs	r2, #1
 800d610:	409a      	lsls	r2, r3
 800d612:	4b0d      	ldr	r3, [pc, #52]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4313      	orrs	r3, r2
 800d618:	4a0b      	ldr	r2, [pc, #44]	; (800d648 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d61a:	6013      	str	r3, [r2, #0]
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d620:	4613      	mov	r3, r2
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	4413      	add	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4a06      	ldr	r2, [pc, #24]	; (800d644 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d62a:	441a      	add	r2, r3
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	3304      	adds	r3, #4
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f7fe f8dd 	bl	800b7f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d638:	bf00      	nop
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	20000580 	.word	0x20000580
 800d644:	20000584 	.word	0x20000584
 800d648:	20000688 	.word	0x20000688

0800d64c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d64c:	b480      	push	{r7}
 800d64e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <pvTaskIncrementMutexHeldCount+0x24>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d004      	beq.n	800d662 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <pvTaskIncrementMutexHeldCount+0x24>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d65e:	3201      	adds	r2, #1
 800d660:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d662:	4b03      	ldr	r3, [pc, #12]	; (800d670 <pvTaskIncrementMutexHeldCount+0x24>)
 800d664:	681b      	ldr	r3, [r3, #0]
	}
 800d666:	4618      	mov	r0, r3
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	20000580 	.word	0x20000580

0800d674 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d67e:	4b29      	ldr	r3, [pc, #164]	; (800d724 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d684:	4b28      	ldr	r3, [pc, #160]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3304      	adds	r3, #4
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fe f90e 	bl	800b8ac <uxListRemove>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10b      	bne.n	800d6ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d696:	4b24      	ldr	r3, [pc, #144]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	2201      	movs	r2, #1
 800d69e:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a2:	43da      	mvns	r2, r3
 800d6a4:	4b21      	ldr	r3, [pc, #132]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	4a20      	ldr	r2, [pc, #128]	; (800d72c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b4:	d10a      	bne.n	800d6cc <prvAddCurrentTaskToDelayedList+0x58>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d007      	beq.n	800d6cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6bc:	4b1a      	ldr	r3, [pc, #104]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	481a      	ldr	r0, [pc, #104]	; (800d730 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d6c6:	f7fe f894 	bl	800b7f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6ca:	e026      	b.n	800d71a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6d4:	4b14      	ldr	r3, [pc, #80]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d209      	bcs.n	800d6f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6e4:	4b13      	ldr	r3, [pc, #76]	; (800d734 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	4b0f      	ldr	r3, [pc, #60]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7fe f8a2 	bl	800b83a <vListInsert>
}
 800d6f6:	e010      	b.n	800d71a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6f8:	4b0f      	ldr	r3, [pc, #60]	; (800d738 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	; (800d728 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3304      	adds	r3, #4
 800d702:	4619      	mov	r1, r3
 800d704:	4610      	mov	r0, r2
 800d706:	f7fe f898 	bl	800b83a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d70a:	4b0c      	ldr	r3, [pc, #48]	; (800d73c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	429a      	cmp	r2, r3
 800d712:	d202      	bcs.n	800d71a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d714:	4a09      	ldr	r2, [pc, #36]	; (800d73c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	6013      	str	r3, [r2, #0]
}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000684 	.word	0x20000684
 800d728:	20000580 	.word	0x20000580
 800d72c:	20000688 	.word	0x20000688
 800d730:	2000066c 	.word	0x2000066c
 800d734:	2000063c 	.word	0x2000063c
 800d738:	20000638 	.word	0x20000638
 800d73c:	200006a0 	.word	0x200006a0

0800d740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3b04      	subs	r3, #4
 800d750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3b04      	subs	r3, #4
 800d75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	f023 0201 	bic.w	r2, r3, #1
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3b04      	subs	r3, #4
 800d76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d770:	4a0c      	ldr	r2, [pc, #48]	; (800d7a4 <pxPortInitialiseStack+0x64>)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3b14      	subs	r3, #20
 800d77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3b04      	subs	r3, #4
 800d786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f06f 0202 	mvn.w	r2, #2
 800d78e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3b20      	subs	r3, #32
 800d794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d796:	68fb      	ldr	r3, [r7, #12]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	0800d7a9 	.word	0x0800d7a9

0800d7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7b2:	4b13      	ldr	r3, [pc, #76]	; (800d800 <prvTaskExitError+0x58>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ba:	d00b      	beq.n	800d7d4 <prvTaskExitError+0x2c>
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	b672      	cpsid	i
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	b662      	cpsie	i
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	e7fe      	b.n	800d7d2 <prvTaskExitError+0x2a>
 800d7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d8:	b672      	cpsid	i
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	b662      	cpsie	i
 800d7e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7ea:	bf00      	nop
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0fc      	beq.n	800d7ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7f2:	bf00      	nop
 800d7f4:	3714      	adds	r7, #20
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	20000050 	.word	0x20000050
	...

0800d810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d810:	4b07      	ldr	r3, [pc, #28]	; (800d830 <pxCurrentTCBConst2>)
 800d812:	6819      	ldr	r1, [r3, #0]
 800d814:	6808      	ldr	r0, [r1, #0]
 800d816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81a:	f380 8809 	msr	PSP, r0
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f04f 0000 	mov.w	r0, #0
 800d826:	f380 8811 	msr	BASEPRI, r0
 800d82a:	4770      	bx	lr
 800d82c:	f3af 8000 	nop.w

0800d830 <pxCurrentTCBConst2>:
 800d830:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop

0800d838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d838:	4808      	ldr	r0, [pc, #32]	; (800d85c <prvPortStartFirstTask+0x24>)
 800d83a:	6800      	ldr	r0, [r0, #0]
 800d83c:	6800      	ldr	r0, [r0, #0]
 800d83e:	f380 8808 	msr	MSP, r0
 800d842:	f04f 0000 	mov.w	r0, #0
 800d846:	f380 8814 	msr	CONTROL, r0
 800d84a:	b662      	cpsie	i
 800d84c:	b661      	cpsie	f
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	df00      	svc	0
 800d858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d85a:	bf00      	nop
 800d85c:	e000ed08 	.word	0xe000ed08

0800d860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d866:	4b36      	ldr	r3, [pc, #216]	; (800d940 <xPortStartScheduler+0xe0>)
 800d868:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	22ff      	movs	r2, #255	; 0xff
 800d876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	4b2e      	ldr	r3, [pc, #184]	; (800d944 <xPortStartScheduler+0xe4>)
 800d88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d88e:	4b2e      	ldr	r3, [pc, #184]	; (800d948 <xPortStartScheduler+0xe8>)
 800d890:	2207      	movs	r2, #7
 800d892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d894:	e009      	b.n	800d8aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d896:	4b2c      	ldr	r3, [pc, #176]	; (800d948 <xPortStartScheduler+0xe8>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	4a2a      	ldr	r2, [pc, #168]	; (800d948 <xPortStartScheduler+0xe8>)
 800d89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8b2:	2b80      	cmp	r3, #128	; 0x80
 800d8b4:	d0ef      	beq.n	800d896 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8b6:	4b24      	ldr	r3, [pc, #144]	; (800d948 <xPortStartScheduler+0xe8>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f1c3 0307 	rsb	r3, r3, #7
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d00b      	beq.n	800d8da <xPortStartScheduler+0x7a>
 800d8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c6:	b672      	cpsid	i
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	b662      	cpsie	i
 800d8d6:	60bb      	str	r3, [r7, #8]
 800d8d8:	e7fe      	b.n	800d8d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8da:	4b1b      	ldr	r3, [pc, #108]	; (800d948 <xPortStartScheduler+0xe8>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	021b      	lsls	r3, r3, #8
 800d8e0:	4a19      	ldr	r2, [pc, #100]	; (800d948 <xPortStartScheduler+0xe8>)
 800d8e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d8e4:	4b18      	ldr	r3, [pc, #96]	; (800d948 <xPortStartScheduler+0xe8>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8ec:	4a16      	ldr	r2, [pc, #88]	; (800d948 <xPortStartScheduler+0xe8>)
 800d8ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d8f8:	4b14      	ldr	r3, [pc, #80]	; (800d94c <xPortStartScheduler+0xec>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a13      	ldr	r2, [pc, #76]	; (800d94c <xPortStartScheduler+0xec>)
 800d8fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d902:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d904:	4b11      	ldr	r3, [pc, #68]	; (800d94c <xPortStartScheduler+0xec>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a10      	ldr	r2, [pc, #64]	; (800d94c <xPortStartScheduler+0xec>)
 800d90a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d90e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d910:	f000 f8d4 	bl	800dabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d914:	4b0e      	ldr	r3, [pc, #56]	; (800d950 <xPortStartScheduler+0xf0>)
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d91a:	f000 f8f3 	bl	800db04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d91e:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <xPortStartScheduler+0xf4>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a0c      	ldr	r2, [pc, #48]	; (800d954 <xPortStartScheduler+0xf4>)
 800d924:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d928:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d92a:	f7ff ff85 	bl	800d838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d92e:	f7ff fa63 	bl	800cdf8 <vTaskSwitchContext>
	prvTaskExitError();
 800d932:	f7ff ff39 	bl	800d7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	e000e400 	.word	0xe000e400
 800d944:	200006ac 	.word	0x200006ac
 800d948:	200006b0 	.word	0x200006b0
 800d94c:	e000ed20 	.word	0xe000ed20
 800d950:	20000050 	.word	0x20000050
 800d954:	e000ef34 	.word	0xe000ef34

0800d958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	b672      	cpsid	i
 800d964:	f383 8811 	msr	BASEPRI, r3
 800d968:	f3bf 8f6f 	isb	sy
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	b662      	cpsie	i
 800d972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d974:	4b0f      	ldr	r3, [pc, #60]	; (800d9b4 <vPortEnterCritical+0x5c>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	4a0e      	ldr	r2, [pc, #56]	; (800d9b4 <vPortEnterCritical+0x5c>)
 800d97c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d97e:	4b0d      	ldr	r3, [pc, #52]	; (800d9b4 <vPortEnterCritical+0x5c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d110      	bne.n	800d9a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d986:	4b0c      	ldr	r3, [pc, #48]	; (800d9b8 <vPortEnterCritical+0x60>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00b      	beq.n	800d9a8 <vPortEnterCritical+0x50>
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	b672      	cpsid	i
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	b662      	cpsie	i
 800d9a4:	603b      	str	r3, [r7, #0]
 800d9a6:	e7fe      	b.n	800d9a6 <vPortEnterCritical+0x4e>
	}
}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	20000050 	.word	0x20000050
 800d9b8:	e000ed04 	.word	0xe000ed04

0800d9bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9c2:	4b12      	ldr	r3, [pc, #72]	; (800da0c <vPortExitCritical+0x50>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10b      	bne.n	800d9e2 <vPortExitCritical+0x26>
 800d9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ce:	b672      	cpsid	i
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	b662      	cpsie	i
 800d9de:	607b      	str	r3, [r7, #4]
 800d9e0:	e7fe      	b.n	800d9e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d9e2:	4b0a      	ldr	r3, [pc, #40]	; (800da0c <vPortExitCritical+0x50>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	4a08      	ldr	r2, [pc, #32]	; (800da0c <vPortExitCritical+0x50>)
 800d9ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d9ec:	4b07      	ldr	r3, [pc, #28]	; (800da0c <vPortExitCritical+0x50>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d104      	bne.n	800d9fe <vPortExitCritical+0x42>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9fe:	bf00      	nop
 800da00:	370c      	adds	r7, #12
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	20000050 	.word	0x20000050

0800da10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da10:	f3ef 8009 	mrs	r0, PSP
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	4b15      	ldr	r3, [pc, #84]	; (800da70 <pxCurrentTCBConst>)
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	f01e 0f10 	tst.w	lr, #16
 800da20:	bf08      	it	eq
 800da22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2a:	6010      	str	r0, [r2, #0]
 800da2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da34:	b672      	cpsid	i
 800da36:	f380 8811 	msr	BASEPRI, r0
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	b662      	cpsie	i
 800da44:	f7ff f9d8 	bl	800cdf8 <vTaskSwitchContext>
 800da48:	f04f 0000 	mov.w	r0, #0
 800da4c:	f380 8811 	msr	BASEPRI, r0
 800da50:	bc09      	pop	{r0, r3}
 800da52:	6819      	ldr	r1, [r3, #0]
 800da54:	6808      	ldr	r0, [r1, #0]
 800da56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	f01e 0f10 	tst.w	lr, #16
 800da5e:	bf08      	it	eq
 800da60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da64:	f380 8809 	msr	PSP, r0
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop

0800da70 <pxCurrentTCBConst>:
 800da70:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop

0800da78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da82:	b672      	cpsid	i
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	b662      	cpsie	i
 800da92:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da94:	f7ff f8f6 	bl	800cc84 <xTaskIncrementTick>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d003      	beq.n	800daa6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <SysTick_Handler+0x40>)
 800daa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	2300      	movs	r3, #0
 800daa8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	e000ed04 	.word	0xe000ed04

0800dabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dabc:	b480      	push	{r7}
 800dabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dac0:	4b0b      	ldr	r3, [pc, #44]	; (800daf0 <vPortSetupTimerInterrupt+0x34>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dac6:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <vPortSetupTimerInterrupt+0x38>)
 800dac8:	2200      	movs	r2, #0
 800daca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dacc:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <vPortSetupTimerInterrupt+0x3c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a0a      	ldr	r2, [pc, #40]	; (800dafc <vPortSetupTimerInterrupt+0x40>)
 800dad2:	fba2 2303 	umull	r2, r3, r2, r3
 800dad6:	099b      	lsrs	r3, r3, #6
 800dad8:	4a09      	ldr	r2, [pc, #36]	; (800db00 <vPortSetupTimerInterrupt+0x44>)
 800dada:	3b01      	subs	r3, #1
 800dadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dade:	4b04      	ldr	r3, [pc, #16]	; (800daf0 <vPortSetupTimerInterrupt+0x34>)
 800dae0:	2207      	movs	r2, #7
 800dae2:	601a      	str	r2, [r3, #0]
}
 800dae4:	bf00      	nop
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	e000e010 	.word	0xe000e010
 800daf4:	e000e018 	.word	0xe000e018
 800daf8:	20000044 	.word	0x20000044
 800dafc:	10624dd3 	.word	0x10624dd3
 800db00:	e000e014 	.word	0xe000e014

0800db04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db14 <vPortEnableVFP+0x10>
 800db08:	6801      	ldr	r1, [r0, #0]
 800db0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db0e:	6001      	str	r1, [r0, #0]
 800db10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db12:	bf00      	nop
 800db14:	e000ed88 	.word	0xe000ed88

0800db18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db1e:	f3ef 8305 	mrs	r3, IPSR
 800db22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2b0f      	cmp	r3, #15
 800db28:	d915      	bls.n	800db56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db2a:	4a18      	ldr	r2, [pc, #96]	; (800db8c <vPortValidateInterruptPriority+0x74>)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db34:	4b16      	ldr	r3, [pc, #88]	; (800db90 <vPortValidateInterruptPriority+0x78>)
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	7afa      	ldrb	r2, [r7, #11]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d20b      	bcs.n	800db56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	b672      	cpsid	i
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	b662      	cpsie	i
 800db52:	607b      	str	r3, [r7, #4]
 800db54:	e7fe      	b.n	800db54 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db56:	4b0f      	ldr	r3, [pc, #60]	; (800db94 <vPortValidateInterruptPriority+0x7c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db5e:	4b0e      	ldr	r3, [pc, #56]	; (800db98 <vPortValidateInterruptPriority+0x80>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	429a      	cmp	r2, r3
 800db64:	d90b      	bls.n	800db7e <vPortValidateInterruptPriority+0x66>
 800db66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6a:	b672      	cpsid	i
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	b662      	cpsie	i
 800db7a:	603b      	str	r3, [r7, #0]
 800db7c:	e7fe      	b.n	800db7c <vPortValidateInterruptPriority+0x64>
	}
 800db7e:	bf00      	nop
 800db80:	3714      	adds	r7, #20
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	e000e3f0 	.word	0xe000e3f0
 800db90:	200006ac 	.word	0x200006ac
 800db94:	e000ed0c 	.word	0xe000ed0c
 800db98:	200006b0 	.word	0x200006b0

0800db9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08a      	sub	sp, #40	; 0x28
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dba4:	2300      	movs	r3, #0
 800dba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dba8:	f7fe ffb0 	bl	800cb0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbac:	4b5c      	ldr	r3, [pc, #368]	; (800dd20 <pvPortMalloc+0x184>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbb4:	f000 f91a 	bl	800ddec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbb8:	4b5a      	ldr	r3, [pc, #360]	; (800dd24 <pvPortMalloc+0x188>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f040 8090 	bne.w	800dce6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d01e      	beq.n	800dc0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dbcc:	2208      	movs	r2, #8
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f003 0307 	and.w	r3, r3, #7
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d015      	beq.n	800dc0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f023 0307 	bic.w	r3, r3, #7
 800dbe4:	3308      	adds	r3, #8
 800dbe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f003 0307 	and.w	r3, r3, #7
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00b      	beq.n	800dc0a <pvPortMalloc+0x6e>
 800dbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf6:	b672      	cpsid	i
 800dbf8:	f383 8811 	msr	BASEPRI, r3
 800dbfc:	f3bf 8f6f 	isb	sy
 800dc00:	f3bf 8f4f 	dsb	sy
 800dc04:	b662      	cpsie	i
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	e7fe      	b.n	800dc08 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d06a      	beq.n	800dce6 <pvPortMalloc+0x14a>
 800dc10:	4b45      	ldr	r3, [pc, #276]	; (800dd28 <pvPortMalloc+0x18c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d865      	bhi.n	800dce6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc1a:	4b44      	ldr	r3, [pc, #272]	; (800dd2c <pvPortMalloc+0x190>)
 800dc1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc1e:	4b43      	ldr	r3, [pc, #268]	; (800dd2c <pvPortMalloc+0x190>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc24:	e004      	b.n	800dc30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d903      	bls.n	800dc42 <pvPortMalloc+0xa6>
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1f1      	bne.n	800dc26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc42:	4b37      	ldr	r3, [pc, #220]	; (800dd20 <pvPortMalloc+0x184>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d04c      	beq.n	800dce6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2208      	movs	r2, #8
 800dc52:	4413      	add	r3, r2
 800dc54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	1ad2      	subs	r2, r2, r3
 800dc66:	2308      	movs	r3, #8
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d920      	bls.n	800dcb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4413      	add	r3, r2
 800dc74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	f003 0307 	and.w	r3, r3, #7
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <pvPortMalloc+0xfc>
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	b672      	cpsid	i
 800dc86:	f383 8811 	msr	BASEPRI, r3
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	b662      	cpsie	i
 800dc94:	613b      	str	r3, [r7, #16]
 800dc96:	e7fe      	b.n	800dc96 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	1ad2      	subs	r2, r2, r3
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcaa:	69b8      	ldr	r0, [r7, #24]
 800dcac:	f000 f900 	bl	800deb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcb0:	4b1d      	ldr	r3, [pc, #116]	; (800dd28 <pvPortMalloc+0x18c>)
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	4a1b      	ldr	r2, [pc, #108]	; (800dd28 <pvPortMalloc+0x18c>)
 800dcbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcbe:	4b1a      	ldr	r3, [pc, #104]	; (800dd28 <pvPortMalloc+0x18c>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	4b1b      	ldr	r3, [pc, #108]	; (800dd30 <pvPortMalloc+0x194>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d203      	bcs.n	800dcd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dcca:	4b17      	ldr	r3, [pc, #92]	; (800dd28 <pvPortMalloc+0x18c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a18      	ldr	r2, [pc, #96]	; (800dd30 <pvPortMalloc+0x194>)
 800dcd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	4b13      	ldr	r3, [pc, #76]	; (800dd24 <pvPortMalloc+0x188>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	431a      	orrs	r2, r3
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dce6:	f7fe ff1f 	bl	800cb28 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800dcf0:	f7f2 fc70 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00b      	beq.n	800dd16 <pvPortMalloc+0x17a>
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	b672      	cpsid	i
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	b662      	cpsie	i
 800dd12:	60fb      	str	r3, [r7, #12]
 800dd14:	e7fe      	b.n	800dd14 <pvPortMalloc+0x178>
	return pvReturn;
 800dd16:	69fb      	ldr	r3, [r7, #28]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3728      	adds	r7, #40	; 0x28
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	200086bc 	.word	0x200086bc
 800dd24:	200086c8 	.word	0x200086c8
 800dd28:	200086c0 	.word	0x200086c0
 800dd2c:	200086b4 	.word	0x200086b4
 800dd30:	200086c4 	.word	0x200086c4

0800dd34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d04a      	beq.n	800dddc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd46:	2308      	movs	r3, #8
 800dd48:	425b      	negs	r3, r3
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	685a      	ldr	r2, [r3, #4]
 800dd58:	4b22      	ldr	r3, [pc, #136]	; (800dde4 <vPortFree+0xb0>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10b      	bne.n	800dd7a <vPortFree+0x46>
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	b672      	cpsid	i
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	b662      	cpsie	i
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e7fe      	b.n	800dd78 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00b      	beq.n	800dd9a <vPortFree+0x66>
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	b672      	cpsid	i
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	b662      	cpsie	i
 800dd96:	60bb      	str	r3, [r7, #8]
 800dd98:	e7fe      	b.n	800dd98 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	685a      	ldr	r2, [r3, #4]
 800dd9e:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <vPortFree+0xb0>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4013      	ands	r3, r2
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d019      	beq.n	800dddc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d115      	bne.n	800dddc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	685a      	ldr	r2, [r3, #4]
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <vPortFree+0xb0>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	43db      	mvns	r3, r3
 800ddba:	401a      	ands	r2, r3
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ddc0:	f7fe fea4 	bl	800cb0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	685a      	ldr	r2, [r3, #4]
 800ddc8:	4b07      	ldr	r3, [pc, #28]	; (800dde8 <vPortFree+0xb4>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4413      	add	r3, r2
 800ddce:	4a06      	ldr	r2, [pc, #24]	; (800dde8 <vPortFree+0xb4>)
 800ddd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ddd2:	6938      	ldr	r0, [r7, #16]
 800ddd4:	f000 f86c 	bl	800deb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ddd8:	f7fe fea6 	bl	800cb28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dddc:	bf00      	nop
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	200086c8 	.word	0x200086c8
 800dde8:	200086c0 	.word	0x200086c0

0800ddec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ddf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ddf8:	4b27      	ldr	r3, [pc, #156]	; (800de98 <prvHeapInit+0xac>)
 800ddfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f003 0307 	and.w	r3, r3, #7
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00c      	beq.n	800de20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3307      	adds	r3, #7
 800de0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f023 0307 	bic.w	r3, r3, #7
 800de12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	4a1f      	ldr	r2, [pc, #124]	; (800de98 <prvHeapInit+0xac>)
 800de1c:	4413      	add	r3, r2
 800de1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de24:	4a1d      	ldr	r2, [pc, #116]	; (800de9c <prvHeapInit+0xb0>)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de2a:	4b1c      	ldr	r3, [pc, #112]	; (800de9c <prvHeapInit+0xb0>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	4413      	add	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de38:	2208      	movs	r2, #8
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	1a9b      	subs	r3, r3, r2
 800de3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f023 0307 	bic.w	r3, r3, #7
 800de46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	4a15      	ldr	r2, [pc, #84]	; (800dea0 <prvHeapInit+0xb4>)
 800de4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de4e:	4b14      	ldr	r3, [pc, #80]	; (800dea0 <prvHeapInit+0xb4>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2200      	movs	r2, #0
 800de54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de56:	4b12      	ldr	r3, [pc, #72]	; (800dea0 <prvHeapInit+0xb4>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	2200      	movs	r2, #0
 800de5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de6c:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <prvHeapInit+0xb4>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	4a0a      	ldr	r2, [pc, #40]	; (800dea4 <prvHeapInit+0xb8>)
 800de7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	4a09      	ldr	r2, [pc, #36]	; (800dea8 <prvHeapInit+0xbc>)
 800de82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de84:	4b09      	ldr	r3, [pc, #36]	; (800deac <prvHeapInit+0xc0>)
 800de86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de8a:	601a      	str	r2, [r3, #0]
}
 800de8c:	bf00      	nop
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr
 800de98:	200006b4 	.word	0x200006b4
 800de9c:	200086b4 	.word	0x200086b4
 800dea0:	200086bc 	.word	0x200086bc
 800dea4:	200086c4 	.word	0x200086c4
 800dea8:	200086c0 	.word	0x200086c0
 800deac:	200086c8 	.word	0x200086c8

0800deb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800deb8:	4b28      	ldr	r3, [pc, #160]	; (800df5c <prvInsertBlockIntoFreeList+0xac>)
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	e002      	b.n	800dec4 <prvInsertBlockIntoFreeList+0x14>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60fb      	str	r3, [r7, #12]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	429a      	cmp	r2, r3
 800decc:	d8f7      	bhi.n	800debe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	4413      	add	r3, r2
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d108      	bne.n	800def2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	685a      	ldr	r2, [r3, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	441a      	add	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	441a      	add	r2, r3
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d118      	bne.n	800df38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	4b15      	ldr	r3, [pc, #84]	; (800df60 <prvInsertBlockIntoFreeList+0xb0>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d00d      	beq.n	800df2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	441a      	add	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	e008      	b.n	800df40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df2e:	4b0c      	ldr	r3, [pc, #48]	; (800df60 <prvInsertBlockIntoFreeList+0xb0>)
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	e003      	b.n	800df40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	429a      	cmp	r2, r3
 800df46:	d002      	beq.n	800df4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df4e:	bf00      	nop
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	200086b4 	.word	0x200086b4
 800df60:	200086bc 	.word	0x200086bc

0800df64 <__errno>:
 800df64:	4b01      	ldr	r3, [pc, #4]	; (800df6c <__errno+0x8>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20000054 	.word	0x20000054

0800df70 <__libc_init_array>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4e0d      	ldr	r6, [pc, #52]	; (800dfa8 <__libc_init_array+0x38>)
 800df74:	4c0d      	ldr	r4, [pc, #52]	; (800dfac <__libc_init_array+0x3c>)
 800df76:	1ba4      	subs	r4, r4, r6
 800df78:	10a4      	asrs	r4, r4, #2
 800df7a:	2500      	movs	r5, #0
 800df7c:	42a5      	cmp	r5, r4
 800df7e:	d109      	bne.n	800df94 <__libc_init_array+0x24>
 800df80:	4e0b      	ldr	r6, [pc, #44]	; (800dfb0 <__libc_init_array+0x40>)
 800df82:	4c0c      	ldr	r4, [pc, #48]	; (800dfb4 <__libc_init_array+0x44>)
 800df84:	f000 fc28 	bl	800e7d8 <_init>
 800df88:	1ba4      	subs	r4, r4, r6
 800df8a:	10a4      	asrs	r4, r4, #2
 800df8c:	2500      	movs	r5, #0
 800df8e:	42a5      	cmp	r5, r4
 800df90:	d105      	bne.n	800df9e <__libc_init_array+0x2e>
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800df98:	4798      	blx	r3
 800df9a:	3501      	adds	r5, #1
 800df9c:	e7ee      	b.n	800df7c <__libc_init_array+0xc>
 800df9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dfa2:	4798      	blx	r3
 800dfa4:	3501      	adds	r5, #1
 800dfa6:	e7f2      	b.n	800df8e <__libc_init_array+0x1e>
 800dfa8:	080108ac 	.word	0x080108ac
 800dfac:	080108ac 	.word	0x080108ac
 800dfb0:	080108ac 	.word	0x080108ac
 800dfb4:	080108b0 	.word	0x080108b0

0800dfb8 <memcpy>:
 800dfb8:	b510      	push	{r4, lr}
 800dfba:	1e43      	subs	r3, r0, #1
 800dfbc:	440a      	add	r2, r1
 800dfbe:	4291      	cmp	r1, r2
 800dfc0:	d100      	bne.n	800dfc4 <memcpy+0xc>
 800dfc2:	bd10      	pop	{r4, pc}
 800dfc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfcc:	e7f7      	b.n	800dfbe <memcpy+0x6>

0800dfce <memset>:
 800dfce:	4402      	add	r2, r0
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d100      	bne.n	800dfd8 <memset+0xa>
 800dfd6:	4770      	bx	lr
 800dfd8:	f803 1b01 	strb.w	r1, [r3], #1
 800dfdc:	e7f9      	b.n	800dfd2 <memset+0x4>
	...

0800dfe0 <siprintf>:
 800dfe0:	b40e      	push	{r1, r2, r3}
 800dfe2:	b500      	push	{lr}
 800dfe4:	b09c      	sub	sp, #112	; 0x70
 800dfe6:	ab1d      	add	r3, sp, #116	; 0x74
 800dfe8:	9002      	str	r0, [sp, #8]
 800dfea:	9006      	str	r0, [sp, #24]
 800dfec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dff0:	4809      	ldr	r0, [pc, #36]	; (800e018 <siprintf+0x38>)
 800dff2:	9107      	str	r1, [sp, #28]
 800dff4:	9104      	str	r1, [sp, #16]
 800dff6:	4909      	ldr	r1, [pc, #36]	; (800e01c <siprintf+0x3c>)
 800dff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dffc:	9105      	str	r1, [sp, #20]
 800dffe:	6800      	ldr	r0, [r0, #0]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	a902      	add	r1, sp, #8
 800e004:	f000 f866 	bl	800e0d4 <_svfiprintf_r>
 800e008:	9b02      	ldr	r3, [sp, #8]
 800e00a:	2200      	movs	r2, #0
 800e00c:	701a      	strb	r2, [r3, #0]
 800e00e:	b01c      	add	sp, #112	; 0x70
 800e010:	f85d eb04 	ldr.w	lr, [sp], #4
 800e014:	b003      	add	sp, #12
 800e016:	4770      	bx	lr
 800e018:	20000054 	.word	0x20000054
 800e01c:	ffff0208 	.word	0xffff0208

0800e020 <__ssputs_r>:
 800e020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e024:	688e      	ldr	r6, [r1, #8]
 800e026:	429e      	cmp	r6, r3
 800e028:	4682      	mov	sl, r0
 800e02a:	460c      	mov	r4, r1
 800e02c:	4690      	mov	r8, r2
 800e02e:	4699      	mov	r9, r3
 800e030:	d837      	bhi.n	800e0a2 <__ssputs_r+0x82>
 800e032:	898a      	ldrh	r2, [r1, #12]
 800e034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e038:	d031      	beq.n	800e09e <__ssputs_r+0x7e>
 800e03a:	6825      	ldr	r5, [r4, #0]
 800e03c:	6909      	ldr	r1, [r1, #16]
 800e03e:	1a6f      	subs	r7, r5, r1
 800e040:	6965      	ldr	r5, [r4, #20]
 800e042:	2302      	movs	r3, #2
 800e044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e048:	fb95 f5f3 	sdiv	r5, r5, r3
 800e04c:	f109 0301 	add.w	r3, r9, #1
 800e050:	443b      	add	r3, r7
 800e052:	429d      	cmp	r5, r3
 800e054:	bf38      	it	cc
 800e056:	461d      	movcc	r5, r3
 800e058:	0553      	lsls	r3, r2, #21
 800e05a:	d530      	bpl.n	800e0be <__ssputs_r+0x9e>
 800e05c:	4629      	mov	r1, r5
 800e05e:	f000 fb21 	bl	800e6a4 <_malloc_r>
 800e062:	4606      	mov	r6, r0
 800e064:	b950      	cbnz	r0, 800e07c <__ssputs_r+0x5c>
 800e066:	230c      	movs	r3, #12
 800e068:	f8ca 3000 	str.w	r3, [sl]
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e072:	81a3      	strh	r3, [r4, #12]
 800e074:	f04f 30ff 	mov.w	r0, #4294967295
 800e078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07c:	463a      	mov	r2, r7
 800e07e:	6921      	ldr	r1, [r4, #16]
 800e080:	f7ff ff9a 	bl	800dfb8 <memcpy>
 800e084:	89a3      	ldrh	r3, [r4, #12]
 800e086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e08a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e08e:	81a3      	strh	r3, [r4, #12]
 800e090:	6126      	str	r6, [r4, #16]
 800e092:	6165      	str	r5, [r4, #20]
 800e094:	443e      	add	r6, r7
 800e096:	1bed      	subs	r5, r5, r7
 800e098:	6026      	str	r6, [r4, #0]
 800e09a:	60a5      	str	r5, [r4, #8]
 800e09c:	464e      	mov	r6, r9
 800e09e:	454e      	cmp	r6, r9
 800e0a0:	d900      	bls.n	800e0a4 <__ssputs_r+0x84>
 800e0a2:	464e      	mov	r6, r9
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	4641      	mov	r1, r8
 800e0a8:	6820      	ldr	r0, [r4, #0]
 800e0aa:	f000 fa93 	bl	800e5d4 <memmove>
 800e0ae:	68a3      	ldr	r3, [r4, #8]
 800e0b0:	1b9b      	subs	r3, r3, r6
 800e0b2:	60a3      	str	r3, [r4, #8]
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	441e      	add	r6, r3
 800e0b8:	6026      	str	r6, [r4, #0]
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	e7dc      	b.n	800e078 <__ssputs_r+0x58>
 800e0be:	462a      	mov	r2, r5
 800e0c0:	f000 fb4a 	bl	800e758 <_realloc_r>
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d1e2      	bne.n	800e090 <__ssputs_r+0x70>
 800e0ca:	6921      	ldr	r1, [r4, #16]
 800e0cc:	4650      	mov	r0, sl
 800e0ce:	f000 fa9b 	bl	800e608 <_free_r>
 800e0d2:	e7c8      	b.n	800e066 <__ssputs_r+0x46>

0800e0d4 <_svfiprintf_r>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	461d      	mov	r5, r3
 800e0da:	898b      	ldrh	r3, [r1, #12]
 800e0dc:	061f      	lsls	r7, r3, #24
 800e0de:	b09d      	sub	sp, #116	; 0x74
 800e0e0:	4680      	mov	r8, r0
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	4616      	mov	r6, r2
 800e0e6:	d50f      	bpl.n	800e108 <_svfiprintf_r+0x34>
 800e0e8:	690b      	ldr	r3, [r1, #16]
 800e0ea:	b96b      	cbnz	r3, 800e108 <_svfiprintf_r+0x34>
 800e0ec:	2140      	movs	r1, #64	; 0x40
 800e0ee:	f000 fad9 	bl	800e6a4 <_malloc_r>
 800e0f2:	6020      	str	r0, [r4, #0]
 800e0f4:	6120      	str	r0, [r4, #16]
 800e0f6:	b928      	cbnz	r0, 800e104 <_svfiprintf_r+0x30>
 800e0f8:	230c      	movs	r3, #12
 800e0fa:	f8c8 3000 	str.w	r3, [r8]
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e102:	e0c8      	b.n	800e296 <_svfiprintf_r+0x1c2>
 800e104:	2340      	movs	r3, #64	; 0x40
 800e106:	6163      	str	r3, [r4, #20]
 800e108:	2300      	movs	r3, #0
 800e10a:	9309      	str	r3, [sp, #36]	; 0x24
 800e10c:	2320      	movs	r3, #32
 800e10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e112:	2330      	movs	r3, #48	; 0x30
 800e114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e118:	9503      	str	r5, [sp, #12]
 800e11a:	f04f 0b01 	mov.w	fp, #1
 800e11e:	4637      	mov	r7, r6
 800e120:	463d      	mov	r5, r7
 800e122:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e126:	b10b      	cbz	r3, 800e12c <_svfiprintf_r+0x58>
 800e128:	2b25      	cmp	r3, #37	; 0x25
 800e12a:	d13e      	bne.n	800e1aa <_svfiprintf_r+0xd6>
 800e12c:	ebb7 0a06 	subs.w	sl, r7, r6
 800e130:	d00b      	beq.n	800e14a <_svfiprintf_r+0x76>
 800e132:	4653      	mov	r3, sl
 800e134:	4632      	mov	r2, r6
 800e136:	4621      	mov	r1, r4
 800e138:	4640      	mov	r0, r8
 800e13a:	f7ff ff71 	bl	800e020 <__ssputs_r>
 800e13e:	3001      	adds	r0, #1
 800e140:	f000 80a4 	beq.w	800e28c <_svfiprintf_r+0x1b8>
 800e144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e146:	4453      	add	r3, sl
 800e148:	9309      	str	r3, [sp, #36]	; 0x24
 800e14a:	783b      	ldrb	r3, [r7, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 809d 	beq.w	800e28c <_svfiprintf_r+0x1b8>
 800e152:	2300      	movs	r3, #0
 800e154:	f04f 32ff 	mov.w	r2, #4294967295
 800e158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e15c:	9304      	str	r3, [sp, #16]
 800e15e:	9307      	str	r3, [sp, #28]
 800e160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e164:	931a      	str	r3, [sp, #104]	; 0x68
 800e166:	462f      	mov	r7, r5
 800e168:	2205      	movs	r2, #5
 800e16a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e16e:	4850      	ldr	r0, [pc, #320]	; (800e2b0 <_svfiprintf_r+0x1dc>)
 800e170:	f7f2 f84e 	bl	8000210 <memchr>
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	b9d0      	cbnz	r0, 800e1ae <_svfiprintf_r+0xda>
 800e178:	06d9      	lsls	r1, r3, #27
 800e17a:	bf44      	itt	mi
 800e17c:	2220      	movmi	r2, #32
 800e17e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e182:	071a      	lsls	r2, r3, #28
 800e184:	bf44      	itt	mi
 800e186:	222b      	movmi	r2, #43	; 0x2b
 800e188:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e18c:	782a      	ldrb	r2, [r5, #0]
 800e18e:	2a2a      	cmp	r2, #42	; 0x2a
 800e190:	d015      	beq.n	800e1be <_svfiprintf_r+0xea>
 800e192:	9a07      	ldr	r2, [sp, #28]
 800e194:	462f      	mov	r7, r5
 800e196:	2000      	movs	r0, #0
 800e198:	250a      	movs	r5, #10
 800e19a:	4639      	mov	r1, r7
 800e19c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1a0:	3b30      	subs	r3, #48	; 0x30
 800e1a2:	2b09      	cmp	r3, #9
 800e1a4:	d94d      	bls.n	800e242 <_svfiprintf_r+0x16e>
 800e1a6:	b1b8      	cbz	r0, 800e1d8 <_svfiprintf_r+0x104>
 800e1a8:	e00f      	b.n	800e1ca <_svfiprintf_r+0xf6>
 800e1aa:	462f      	mov	r7, r5
 800e1ac:	e7b8      	b.n	800e120 <_svfiprintf_r+0x4c>
 800e1ae:	4a40      	ldr	r2, [pc, #256]	; (800e2b0 <_svfiprintf_r+0x1dc>)
 800e1b0:	1a80      	subs	r0, r0, r2
 800e1b2:	fa0b f000 	lsl.w	r0, fp, r0
 800e1b6:	4318      	orrs	r0, r3
 800e1b8:	9004      	str	r0, [sp, #16]
 800e1ba:	463d      	mov	r5, r7
 800e1bc:	e7d3      	b.n	800e166 <_svfiprintf_r+0x92>
 800e1be:	9a03      	ldr	r2, [sp, #12]
 800e1c0:	1d11      	adds	r1, r2, #4
 800e1c2:	6812      	ldr	r2, [r2, #0]
 800e1c4:	9103      	str	r1, [sp, #12]
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	db01      	blt.n	800e1ce <_svfiprintf_r+0xfa>
 800e1ca:	9207      	str	r2, [sp, #28]
 800e1cc:	e004      	b.n	800e1d8 <_svfiprintf_r+0x104>
 800e1ce:	4252      	negs	r2, r2
 800e1d0:	f043 0302 	orr.w	r3, r3, #2
 800e1d4:	9207      	str	r2, [sp, #28]
 800e1d6:	9304      	str	r3, [sp, #16]
 800e1d8:	783b      	ldrb	r3, [r7, #0]
 800e1da:	2b2e      	cmp	r3, #46	; 0x2e
 800e1dc:	d10c      	bne.n	800e1f8 <_svfiprintf_r+0x124>
 800e1de:	787b      	ldrb	r3, [r7, #1]
 800e1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e2:	d133      	bne.n	800e24c <_svfiprintf_r+0x178>
 800e1e4:	9b03      	ldr	r3, [sp, #12]
 800e1e6:	1d1a      	adds	r2, r3, #4
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	9203      	str	r2, [sp, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	bfb8      	it	lt
 800e1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1f4:	3702      	adds	r7, #2
 800e1f6:	9305      	str	r3, [sp, #20]
 800e1f8:	4d2e      	ldr	r5, [pc, #184]	; (800e2b4 <_svfiprintf_r+0x1e0>)
 800e1fa:	7839      	ldrb	r1, [r7, #0]
 800e1fc:	2203      	movs	r2, #3
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7f2 f806 	bl	8000210 <memchr>
 800e204:	b138      	cbz	r0, 800e216 <_svfiprintf_r+0x142>
 800e206:	2340      	movs	r3, #64	; 0x40
 800e208:	1b40      	subs	r0, r0, r5
 800e20a:	fa03 f000 	lsl.w	r0, r3, r0
 800e20e:	9b04      	ldr	r3, [sp, #16]
 800e210:	4303      	orrs	r3, r0
 800e212:	3701      	adds	r7, #1
 800e214:	9304      	str	r3, [sp, #16]
 800e216:	7839      	ldrb	r1, [r7, #0]
 800e218:	4827      	ldr	r0, [pc, #156]	; (800e2b8 <_svfiprintf_r+0x1e4>)
 800e21a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e21e:	2206      	movs	r2, #6
 800e220:	1c7e      	adds	r6, r7, #1
 800e222:	f7f1 fff5 	bl	8000210 <memchr>
 800e226:	2800      	cmp	r0, #0
 800e228:	d038      	beq.n	800e29c <_svfiprintf_r+0x1c8>
 800e22a:	4b24      	ldr	r3, [pc, #144]	; (800e2bc <_svfiprintf_r+0x1e8>)
 800e22c:	bb13      	cbnz	r3, 800e274 <_svfiprintf_r+0x1a0>
 800e22e:	9b03      	ldr	r3, [sp, #12]
 800e230:	3307      	adds	r3, #7
 800e232:	f023 0307 	bic.w	r3, r3, #7
 800e236:	3308      	adds	r3, #8
 800e238:	9303      	str	r3, [sp, #12]
 800e23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e23c:	444b      	add	r3, r9
 800e23e:	9309      	str	r3, [sp, #36]	; 0x24
 800e240:	e76d      	b.n	800e11e <_svfiprintf_r+0x4a>
 800e242:	fb05 3202 	mla	r2, r5, r2, r3
 800e246:	2001      	movs	r0, #1
 800e248:	460f      	mov	r7, r1
 800e24a:	e7a6      	b.n	800e19a <_svfiprintf_r+0xc6>
 800e24c:	2300      	movs	r3, #0
 800e24e:	3701      	adds	r7, #1
 800e250:	9305      	str	r3, [sp, #20]
 800e252:	4619      	mov	r1, r3
 800e254:	250a      	movs	r5, #10
 800e256:	4638      	mov	r0, r7
 800e258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e25c:	3a30      	subs	r2, #48	; 0x30
 800e25e:	2a09      	cmp	r2, #9
 800e260:	d903      	bls.n	800e26a <_svfiprintf_r+0x196>
 800e262:	2b00      	cmp	r3, #0
 800e264:	d0c8      	beq.n	800e1f8 <_svfiprintf_r+0x124>
 800e266:	9105      	str	r1, [sp, #20]
 800e268:	e7c6      	b.n	800e1f8 <_svfiprintf_r+0x124>
 800e26a:	fb05 2101 	mla	r1, r5, r1, r2
 800e26e:	2301      	movs	r3, #1
 800e270:	4607      	mov	r7, r0
 800e272:	e7f0      	b.n	800e256 <_svfiprintf_r+0x182>
 800e274:	ab03      	add	r3, sp, #12
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	4622      	mov	r2, r4
 800e27a:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <_svfiprintf_r+0x1ec>)
 800e27c:	a904      	add	r1, sp, #16
 800e27e:	4640      	mov	r0, r8
 800e280:	f3af 8000 	nop.w
 800e284:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e288:	4681      	mov	r9, r0
 800e28a:	d1d6      	bne.n	800e23a <_svfiprintf_r+0x166>
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	065b      	lsls	r3, r3, #25
 800e290:	f53f af35 	bmi.w	800e0fe <_svfiprintf_r+0x2a>
 800e294:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e296:	b01d      	add	sp, #116	; 0x74
 800e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29c:	ab03      	add	r3, sp, #12
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <_svfiprintf_r+0x1ec>)
 800e2a4:	a904      	add	r1, sp, #16
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	f000 f882 	bl	800e3b0 <_printf_i>
 800e2ac:	e7ea      	b.n	800e284 <_svfiprintf_r+0x1b0>
 800e2ae:	bf00      	nop
 800e2b0:	08010870 	.word	0x08010870
 800e2b4:	08010876 	.word	0x08010876
 800e2b8:	0801087a 	.word	0x0801087a
 800e2bc:	00000000 	.word	0x00000000
 800e2c0:	0800e021 	.word	0x0800e021

0800e2c4 <_printf_common>:
 800e2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	4691      	mov	r9, r2
 800e2ca:	461f      	mov	r7, r3
 800e2cc:	688a      	ldr	r2, [r1, #8]
 800e2ce:	690b      	ldr	r3, [r1, #16]
 800e2d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	bfb8      	it	lt
 800e2d8:	4613      	movlt	r3, r2
 800e2da:	f8c9 3000 	str.w	r3, [r9]
 800e2de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	b112      	cbz	r2, 800e2ee <_printf_common+0x2a>
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	f8c9 3000 	str.w	r3, [r9]
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	0699      	lsls	r1, r3, #26
 800e2f2:	bf42      	ittt	mi
 800e2f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e2f8:	3302      	addmi	r3, #2
 800e2fa:	f8c9 3000 	strmi.w	r3, [r9]
 800e2fe:	6825      	ldr	r5, [r4, #0]
 800e300:	f015 0506 	ands.w	r5, r5, #6
 800e304:	d107      	bne.n	800e316 <_printf_common+0x52>
 800e306:	f104 0a19 	add.w	sl, r4, #25
 800e30a:	68e3      	ldr	r3, [r4, #12]
 800e30c:	f8d9 2000 	ldr.w	r2, [r9]
 800e310:	1a9b      	subs	r3, r3, r2
 800e312:	42ab      	cmp	r3, r5
 800e314:	dc28      	bgt.n	800e368 <_printf_common+0xa4>
 800e316:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e31a:	6822      	ldr	r2, [r4, #0]
 800e31c:	3300      	adds	r3, #0
 800e31e:	bf18      	it	ne
 800e320:	2301      	movne	r3, #1
 800e322:	0692      	lsls	r2, r2, #26
 800e324:	d42d      	bmi.n	800e382 <_printf_common+0xbe>
 800e326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e32a:	4639      	mov	r1, r7
 800e32c:	4630      	mov	r0, r6
 800e32e:	47c0      	blx	r8
 800e330:	3001      	adds	r0, #1
 800e332:	d020      	beq.n	800e376 <_printf_common+0xb2>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	68e5      	ldr	r5, [r4, #12]
 800e338:	f8d9 2000 	ldr.w	r2, [r9]
 800e33c:	f003 0306 	and.w	r3, r3, #6
 800e340:	2b04      	cmp	r3, #4
 800e342:	bf08      	it	eq
 800e344:	1aad      	subeq	r5, r5, r2
 800e346:	68a3      	ldr	r3, [r4, #8]
 800e348:	6922      	ldr	r2, [r4, #16]
 800e34a:	bf0c      	ite	eq
 800e34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e350:	2500      	movne	r5, #0
 800e352:	4293      	cmp	r3, r2
 800e354:	bfc4      	itt	gt
 800e356:	1a9b      	subgt	r3, r3, r2
 800e358:	18ed      	addgt	r5, r5, r3
 800e35a:	f04f 0900 	mov.w	r9, #0
 800e35e:	341a      	adds	r4, #26
 800e360:	454d      	cmp	r5, r9
 800e362:	d11a      	bne.n	800e39a <_printf_common+0xd6>
 800e364:	2000      	movs	r0, #0
 800e366:	e008      	b.n	800e37a <_printf_common+0xb6>
 800e368:	2301      	movs	r3, #1
 800e36a:	4652      	mov	r2, sl
 800e36c:	4639      	mov	r1, r7
 800e36e:	4630      	mov	r0, r6
 800e370:	47c0      	blx	r8
 800e372:	3001      	adds	r0, #1
 800e374:	d103      	bne.n	800e37e <_printf_common+0xba>
 800e376:	f04f 30ff 	mov.w	r0, #4294967295
 800e37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37e:	3501      	adds	r5, #1
 800e380:	e7c3      	b.n	800e30a <_printf_common+0x46>
 800e382:	18e1      	adds	r1, r4, r3
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	2030      	movs	r0, #48	; 0x30
 800e388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e38c:	4422      	add	r2, r4
 800e38e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e396:	3302      	adds	r3, #2
 800e398:	e7c5      	b.n	800e326 <_printf_common+0x62>
 800e39a:	2301      	movs	r3, #1
 800e39c:	4622      	mov	r2, r4
 800e39e:	4639      	mov	r1, r7
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	47c0      	blx	r8
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	d0e6      	beq.n	800e376 <_printf_common+0xb2>
 800e3a8:	f109 0901 	add.w	r9, r9, #1
 800e3ac:	e7d8      	b.n	800e360 <_printf_common+0x9c>
	...

0800e3b0 <_printf_i>:
 800e3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	7e09      	ldrb	r1, [r1, #24]
 800e3bc:	b085      	sub	sp, #20
 800e3be:	296e      	cmp	r1, #110	; 0x6e
 800e3c0:	4617      	mov	r7, r2
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	4698      	mov	r8, r3
 800e3c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3c8:	f000 80b3 	beq.w	800e532 <_printf_i+0x182>
 800e3cc:	d822      	bhi.n	800e414 <_printf_i+0x64>
 800e3ce:	2963      	cmp	r1, #99	; 0x63
 800e3d0:	d036      	beq.n	800e440 <_printf_i+0x90>
 800e3d2:	d80a      	bhi.n	800e3ea <_printf_i+0x3a>
 800e3d4:	2900      	cmp	r1, #0
 800e3d6:	f000 80b9 	beq.w	800e54c <_printf_i+0x19c>
 800e3da:	2958      	cmp	r1, #88	; 0x58
 800e3dc:	f000 8083 	beq.w	800e4e6 <_printf_i+0x136>
 800e3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e3e8:	e032      	b.n	800e450 <_printf_i+0xa0>
 800e3ea:	2964      	cmp	r1, #100	; 0x64
 800e3ec:	d001      	beq.n	800e3f2 <_printf_i+0x42>
 800e3ee:	2969      	cmp	r1, #105	; 0x69
 800e3f0:	d1f6      	bne.n	800e3e0 <_printf_i+0x30>
 800e3f2:	6820      	ldr	r0, [r4, #0]
 800e3f4:	6813      	ldr	r3, [r2, #0]
 800e3f6:	0605      	lsls	r5, r0, #24
 800e3f8:	f103 0104 	add.w	r1, r3, #4
 800e3fc:	d52a      	bpl.n	800e454 <_printf_i+0xa4>
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6011      	str	r1, [r2, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	da03      	bge.n	800e40e <_printf_i+0x5e>
 800e406:	222d      	movs	r2, #45	; 0x2d
 800e408:	425b      	negs	r3, r3
 800e40a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e40e:	486f      	ldr	r0, [pc, #444]	; (800e5cc <_printf_i+0x21c>)
 800e410:	220a      	movs	r2, #10
 800e412:	e039      	b.n	800e488 <_printf_i+0xd8>
 800e414:	2973      	cmp	r1, #115	; 0x73
 800e416:	f000 809d 	beq.w	800e554 <_printf_i+0x1a4>
 800e41a:	d808      	bhi.n	800e42e <_printf_i+0x7e>
 800e41c:	296f      	cmp	r1, #111	; 0x6f
 800e41e:	d020      	beq.n	800e462 <_printf_i+0xb2>
 800e420:	2970      	cmp	r1, #112	; 0x70
 800e422:	d1dd      	bne.n	800e3e0 <_printf_i+0x30>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	f043 0320 	orr.w	r3, r3, #32
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	e003      	b.n	800e436 <_printf_i+0x86>
 800e42e:	2975      	cmp	r1, #117	; 0x75
 800e430:	d017      	beq.n	800e462 <_printf_i+0xb2>
 800e432:	2978      	cmp	r1, #120	; 0x78
 800e434:	d1d4      	bne.n	800e3e0 <_printf_i+0x30>
 800e436:	2378      	movs	r3, #120	; 0x78
 800e438:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e43c:	4864      	ldr	r0, [pc, #400]	; (800e5d0 <_printf_i+0x220>)
 800e43e:	e055      	b.n	800e4ec <_printf_i+0x13c>
 800e440:	6813      	ldr	r3, [r2, #0]
 800e442:	1d19      	adds	r1, r3, #4
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	6011      	str	r1, [r2, #0]
 800e448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e44c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e450:	2301      	movs	r3, #1
 800e452:	e08c      	b.n	800e56e <_printf_i+0x1be>
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6011      	str	r1, [r2, #0]
 800e458:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e45c:	bf18      	it	ne
 800e45e:	b21b      	sxthne	r3, r3
 800e460:	e7cf      	b.n	800e402 <_printf_i+0x52>
 800e462:	6813      	ldr	r3, [r2, #0]
 800e464:	6825      	ldr	r5, [r4, #0]
 800e466:	1d18      	adds	r0, r3, #4
 800e468:	6010      	str	r0, [r2, #0]
 800e46a:	0628      	lsls	r0, r5, #24
 800e46c:	d501      	bpl.n	800e472 <_printf_i+0xc2>
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	e002      	b.n	800e478 <_printf_i+0xc8>
 800e472:	0668      	lsls	r0, r5, #25
 800e474:	d5fb      	bpl.n	800e46e <_printf_i+0xbe>
 800e476:	881b      	ldrh	r3, [r3, #0]
 800e478:	4854      	ldr	r0, [pc, #336]	; (800e5cc <_printf_i+0x21c>)
 800e47a:	296f      	cmp	r1, #111	; 0x6f
 800e47c:	bf14      	ite	ne
 800e47e:	220a      	movne	r2, #10
 800e480:	2208      	moveq	r2, #8
 800e482:	2100      	movs	r1, #0
 800e484:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e488:	6865      	ldr	r5, [r4, #4]
 800e48a:	60a5      	str	r5, [r4, #8]
 800e48c:	2d00      	cmp	r5, #0
 800e48e:	f2c0 8095 	blt.w	800e5bc <_printf_i+0x20c>
 800e492:	6821      	ldr	r1, [r4, #0]
 800e494:	f021 0104 	bic.w	r1, r1, #4
 800e498:	6021      	str	r1, [r4, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d13d      	bne.n	800e51a <_printf_i+0x16a>
 800e49e:	2d00      	cmp	r5, #0
 800e4a0:	f040 808e 	bne.w	800e5c0 <_printf_i+0x210>
 800e4a4:	4665      	mov	r5, ip
 800e4a6:	2a08      	cmp	r2, #8
 800e4a8:	d10b      	bne.n	800e4c2 <_printf_i+0x112>
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	07db      	lsls	r3, r3, #31
 800e4ae:	d508      	bpl.n	800e4c2 <_printf_i+0x112>
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	6862      	ldr	r2, [r4, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	bfde      	ittt	le
 800e4b8:	2330      	movle	r3, #48	; 0x30
 800e4ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4c2:	ebac 0305 	sub.w	r3, ip, r5
 800e4c6:	6123      	str	r3, [r4, #16]
 800e4c8:	f8cd 8000 	str.w	r8, [sp]
 800e4cc:	463b      	mov	r3, r7
 800e4ce:	aa03      	add	r2, sp, #12
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff fef6 	bl	800e2c4 <_printf_common>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d14d      	bne.n	800e578 <_printf_i+0x1c8>
 800e4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e0:	b005      	add	sp, #20
 800e4e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e6:	4839      	ldr	r0, [pc, #228]	; (800e5cc <_printf_i+0x21c>)
 800e4e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e4ec:	6813      	ldr	r3, [r2, #0]
 800e4ee:	6821      	ldr	r1, [r4, #0]
 800e4f0:	1d1d      	adds	r5, r3, #4
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6015      	str	r5, [r2, #0]
 800e4f6:	060a      	lsls	r2, r1, #24
 800e4f8:	d50b      	bpl.n	800e512 <_printf_i+0x162>
 800e4fa:	07ca      	lsls	r2, r1, #31
 800e4fc:	bf44      	itt	mi
 800e4fe:	f041 0120 	orrmi.w	r1, r1, #32
 800e502:	6021      	strmi	r1, [r4, #0]
 800e504:	b91b      	cbnz	r3, 800e50e <_printf_i+0x15e>
 800e506:	6822      	ldr	r2, [r4, #0]
 800e508:	f022 0220 	bic.w	r2, r2, #32
 800e50c:	6022      	str	r2, [r4, #0]
 800e50e:	2210      	movs	r2, #16
 800e510:	e7b7      	b.n	800e482 <_printf_i+0xd2>
 800e512:	064d      	lsls	r5, r1, #25
 800e514:	bf48      	it	mi
 800e516:	b29b      	uxthmi	r3, r3
 800e518:	e7ef      	b.n	800e4fa <_printf_i+0x14a>
 800e51a:	4665      	mov	r5, ip
 800e51c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e520:	fb02 3311 	mls	r3, r2, r1, r3
 800e524:	5cc3      	ldrb	r3, [r0, r3]
 800e526:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e52a:	460b      	mov	r3, r1
 800e52c:	2900      	cmp	r1, #0
 800e52e:	d1f5      	bne.n	800e51c <_printf_i+0x16c>
 800e530:	e7b9      	b.n	800e4a6 <_printf_i+0xf6>
 800e532:	6813      	ldr	r3, [r2, #0]
 800e534:	6825      	ldr	r5, [r4, #0]
 800e536:	6961      	ldr	r1, [r4, #20]
 800e538:	1d18      	adds	r0, r3, #4
 800e53a:	6010      	str	r0, [r2, #0]
 800e53c:	0628      	lsls	r0, r5, #24
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	d501      	bpl.n	800e546 <_printf_i+0x196>
 800e542:	6019      	str	r1, [r3, #0]
 800e544:	e002      	b.n	800e54c <_printf_i+0x19c>
 800e546:	066a      	lsls	r2, r5, #25
 800e548:	d5fb      	bpl.n	800e542 <_printf_i+0x192>
 800e54a:	8019      	strh	r1, [r3, #0]
 800e54c:	2300      	movs	r3, #0
 800e54e:	6123      	str	r3, [r4, #16]
 800e550:	4665      	mov	r5, ip
 800e552:	e7b9      	b.n	800e4c8 <_printf_i+0x118>
 800e554:	6813      	ldr	r3, [r2, #0]
 800e556:	1d19      	adds	r1, r3, #4
 800e558:	6011      	str	r1, [r2, #0]
 800e55a:	681d      	ldr	r5, [r3, #0]
 800e55c:	6862      	ldr	r2, [r4, #4]
 800e55e:	2100      	movs	r1, #0
 800e560:	4628      	mov	r0, r5
 800e562:	f7f1 fe55 	bl	8000210 <memchr>
 800e566:	b108      	cbz	r0, 800e56c <_printf_i+0x1bc>
 800e568:	1b40      	subs	r0, r0, r5
 800e56a:	6060      	str	r0, [r4, #4]
 800e56c:	6863      	ldr	r3, [r4, #4]
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	2300      	movs	r3, #0
 800e572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e576:	e7a7      	b.n	800e4c8 <_printf_i+0x118>
 800e578:	6923      	ldr	r3, [r4, #16]
 800e57a:	462a      	mov	r2, r5
 800e57c:	4639      	mov	r1, r7
 800e57e:	4630      	mov	r0, r6
 800e580:	47c0      	blx	r8
 800e582:	3001      	adds	r0, #1
 800e584:	d0aa      	beq.n	800e4dc <_printf_i+0x12c>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	079b      	lsls	r3, r3, #30
 800e58a:	d413      	bmi.n	800e5b4 <_printf_i+0x204>
 800e58c:	68e0      	ldr	r0, [r4, #12]
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	4298      	cmp	r0, r3
 800e592:	bfb8      	it	lt
 800e594:	4618      	movlt	r0, r3
 800e596:	e7a3      	b.n	800e4e0 <_printf_i+0x130>
 800e598:	2301      	movs	r3, #1
 800e59a:	464a      	mov	r2, r9
 800e59c:	4639      	mov	r1, r7
 800e59e:	4630      	mov	r0, r6
 800e5a0:	47c0      	blx	r8
 800e5a2:	3001      	adds	r0, #1
 800e5a4:	d09a      	beq.n	800e4dc <_printf_i+0x12c>
 800e5a6:	3501      	adds	r5, #1
 800e5a8:	68e3      	ldr	r3, [r4, #12]
 800e5aa:	9a03      	ldr	r2, [sp, #12]
 800e5ac:	1a9b      	subs	r3, r3, r2
 800e5ae:	42ab      	cmp	r3, r5
 800e5b0:	dcf2      	bgt.n	800e598 <_printf_i+0x1e8>
 800e5b2:	e7eb      	b.n	800e58c <_printf_i+0x1dc>
 800e5b4:	2500      	movs	r5, #0
 800e5b6:	f104 0919 	add.w	r9, r4, #25
 800e5ba:	e7f5      	b.n	800e5a8 <_printf_i+0x1f8>
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1ac      	bne.n	800e51a <_printf_i+0x16a>
 800e5c0:	7803      	ldrb	r3, [r0, #0]
 800e5c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5ca:	e76c      	b.n	800e4a6 <_printf_i+0xf6>
 800e5cc:	08010881 	.word	0x08010881
 800e5d0:	08010892 	.word	0x08010892

0800e5d4 <memmove>:
 800e5d4:	4288      	cmp	r0, r1
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	eb01 0302 	add.w	r3, r1, r2
 800e5dc:	d807      	bhi.n	800e5ee <memmove+0x1a>
 800e5de:	1e42      	subs	r2, r0, #1
 800e5e0:	4299      	cmp	r1, r3
 800e5e2:	d00a      	beq.n	800e5fa <memmove+0x26>
 800e5e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e5ec:	e7f8      	b.n	800e5e0 <memmove+0xc>
 800e5ee:	4283      	cmp	r3, r0
 800e5f0:	d9f5      	bls.n	800e5de <memmove+0xa>
 800e5f2:	1881      	adds	r1, r0, r2
 800e5f4:	1ad2      	subs	r2, r2, r3
 800e5f6:	42d3      	cmn	r3, r2
 800e5f8:	d100      	bne.n	800e5fc <memmove+0x28>
 800e5fa:	bd10      	pop	{r4, pc}
 800e5fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e600:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e604:	e7f7      	b.n	800e5f6 <memmove+0x22>
	...

0800e608 <_free_r>:
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	4605      	mov	r5, r0
 800e60c:	2900      	cmp	r1, #0
 800e60e:	d045      	beq.n	800e69c <_free_r+0x94>
 800e610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e614:	1f0c      	subs	r4, r1, #4
 800e616:	2b00      	cmp	r3, #0
 800e618:	bfb8      	it	lt
 800e61a:	18e4      	addlt	r4, r4, r3
 800e61c:	f000 f8d2 	bl	800e7c4 <__malloc_lock>
 800e620:	4a1f      	ldr	r2, [pc, #124]	; (800e6a0 <_free_r+0x98>)
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	4610      	mov	r0, r2
 800e626:	b933      	cbnz	r3, 800e636 <_free_r+0x2e>
 800e628:	6063      	str	r3, [r4, #4]
 800e62a:	6014      	str	r4, [r2, #0]
 800e62c:	4628      	mov	r0, r5
 800e62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e632:	f000 b8c8 	b.w	800e7c6 <__malloc_unlock>
 800e636:	42a3      	cmp	r3, r4
 800e638:	d90c      	bls.n	800e654 <_free_r+0x4c>
 800e63a:	6821      	ldr	r1, [r4, #0]
 800e63c:	1862      	adds	r2, r4, r1
 800e63e:	4293      	cmp	r3, r2
 800e640:	bf04      	itt	eq
 800e642:	681a      	ldreq	r2, [r3, #0]
 800e644:	685b      	ldreq	r3, [r3, #4]
 800e646:	6063      	str	r3, [r4, #4]
 800e648:	bf04      	itt	eq
 800e64a:	1852      	addeq	r2, r2, r1
 800e64c:	6022      	streq	r2, [r4, #0]
 800e64e:	6004      	str	r4, [r0, #0]
 800e650:	e7ec      	b.n	800e62c <_free_r+0x24>
 800e652:	4613      	mov	r3, r2
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	b10a      	cbz	r2, 800e65c <_free_r+0x54>
 800e658:	42a2      	cmp	r2, r4
 800e65a:	d9fa      	bls.n	800e652 <_free_r+0x4a>
 800e65c:	6819      	ldr	r1, [r3, #0]
 800e65e:	1858      	adds	r0, r3, r1
 800e660:	42a0      	cmp	r0, r4
 800e662:	d10b      	bne.n	800e67c <_free_r+0x74>
 800e664:	6820      	ldr	r0, [r4, #0]
 800e666:	4401      	add	r1, r0
 800e668:	1858      	adds	r0, r3, r1
 800e66a:	4282      	cmp	r2, r0
 800e66c:	6019      	str	r1, [r3, #0]
 800e66e:	d1dd      	bne.n	800e62c <_free_r+0x24>
 800e670:	6810      	ldr	r0, [r2, #0]
 800e672:	6852      	ldr	r2, [r2, #4]
 800e674:	605a      	str	r2, [r3, #4]
 800e676:	4401      	add	r1, r0
 800e678:	6019      	str	r1, [r3, #0]
 800e67a:	e7d7      	b.n	800e62c <_free_r+0x24>
 800e67c:	d902      	bls.n	800e684 <_free_r+0x7c>
 800e67e:	230c      	movs	r3, #12
 800e680:	602b      	str	r3, [r5, #0]
 800e682:	e7d3      	b.n	800e62c <_free_r+0x24>
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	1821      	adds	r1, r4, r0
 800e688:	428a      	cmp	r2, r1
 800e68a:	bf04      	itt	eq
 800e68c:	6811      	ldreq	r1, [r2, #0]
 800e68e:	6852      	ldreq	r2, [r2, #4]
 800e690:	6062      	str	r2, [r4, #4]
 800e692:	bf04      	itt	eq
 800e694:	1809      	addeq	r1, r1, r0
 800e696:	6021      	streq	r1, [r4, #0]
 800e698:	605c      	str	r4, [r3, #4]
 800e69a:	e7c7      	b.n	800e62c <_free_r+0x24>
 800e69c:	bd38      	pop	{r3, r4, r5, pc}
 800e69e:	bf00      	nop
 800e6a0:	200086cc 	.word	0x200086cc

0800e6a4 <_malloc_r>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	1ccd      	adds	r5, r1, #3
 800e6a8:	f025 0503 	bic.w	r5, r5, #3
 800e6ac:	3508      	adds	r5, #8
 800e6ae:	2d0c      	cmp	r5, #12
 800e6b0:	bf38      	it	cc
 800e6b2:	250c      	movcc	r5, #12
 800e6b4:	2d00      	cmp	r5, #0
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	db01      	blt.n	800e6be <_malloc_r+0x1a>
 800e6ba:	42a9      	cmp	r1, r5
 800e6bc:	d903      	bls.n	800e6c6 <_malloc_r+0x22>
 800e6be:	230c      	movs	r3, #12
 800e6c0:	6033      	str	r3, [r6, #0]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	bd70      	pop	{r4, r5, r6, pc}
 800e6c6:	f000 f87d 	bl	800e7c4 <__malloc_lock>
 800e6ca:	4a21      	ldr	r2, [pc, #132]	; (800e750 <_malloc_r+0xac>)
 800e6cc:	6814      	ldr	r4, [r2, #0]
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	b991      	cbnz	r1, 800e6f8 <_malloc_r+0x54>
 800e6d2:	4c20      	ldr	r4, [pc, #128]	; (800e754 <_malloc_r+0xb0>)
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	b91b      	cbnz	r3, 800e6e0 <_malloc_r+0x3c>
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f000 f863 	bl	800e7a4 <_sbrk_r>
 800e6de:	6020      	str	r0, [r4, #0]
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f000 f85e 	bl	800e7a4 <_sbrk_r>
 800e6e8:	1c43      	adds	r3, r0, #1
 800e6ea:	d124      	bne.n	800e736 <_malloc_r+0x92>
 800e6ec:	230c      	movs	r3, #12
 800e6ee:	6033      	str	r3, [r6, #0]
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f000 f868 	bl	800e7c6 <__malloc_unlock>
 800e6f6:	e7e4      	b.n	800e6c2 <_malloc_r+0x1e>
 800e6f8:	680b      	ldr	r3, [r1, #0]
 800e6fa:	1b5b      	subs	r3, r3, r5
 800e6fc:	d418      	bmi.n	800e730 <_malloc_r+0x8c>
 800e6fe:	2b0b      	cmp	r3, #11
 800e700:	d90f      	bls.n	800e722 <_malloc_r+0x7e>
 800e702:	600b      	str	r3, [r1, #0]
 800e704:	50cd      	str	r5, [r1, r3]
 800e706:	18cc      	adds	r4, r1, r3
 800e708:	4630      	mov	r0, r6
 800e70a:	f000 f85c 	bl	800e7c6 <__malloc_unlock>
 800e70e:	f104 000b 	add.w	r0, r4, #11
 800e712:	1d23      	adds	r3, r4, #4
 800e714:	f020 0007 	bic.w	r0, r0, #7
 800e718:	1ac3      	subs	r3, r0, r3
 800e71a:	d0d3      	beq.n	800e6c4 <_malloc_r+0x20>
 800e71c:	425a      	negs	r2, r3
 800e71e:	50e2      	str	r2, [r4, r3]
 800e720:	e7d0      	b.n	800e6c4 <_malloc_r+0x20>
 800e722:	428c      	cmp	r4, r1
 800e724:	684b      	ldr	r3, [r1, #4]
 800e726:	bf16      	itet	ne
 800e728:	6063      	strne	r3, [r4, #4]
 800e72a:	6013      	streq	r3, [r2, #0]
 800e72c:	460c      	movne	r4, r1
 800e72e:	e7eb      	b.n	800e708 <_malloc_r+0x64>
 800e730:	460c      	mov	r4, r1
 800e732:	6849      	ldr	r1, [r1, #4]
 800e734:	e7cc      	b.n	800e6d0 <_malloc_r+0x2c>
 800e736:	1cc4      	adds	r4, r0, #3
 800e738:	f024 0403 	bic.w	r4, r4, #3
 800e73c:	42a0      	cmp	r0, r4
 800e73e:	d005      	beq.n	800e74c <_malloc_r+0xa8>
 800e740:	1a21      	subs	r1, r4, r0
 800e742:	4630      	mov	r0, r6
 800e744:	f000 f82e 	bl	800e7a4 <_sbrk_r>
 800e748:	3001      	adds	r0, #1
 800e74a:	d0cf      	beq.n	800e6ec <_malloc_r+0x48>
 800e74c:	6025      	str	r5, [r4, #0]
 800e74e:	e7db      	b.n	800e708 <_malloc_r+0x64>
 800e750:	200086cc 	.word	0x200086cc
 800e754:	200086d0 	.word	0x200086d0

0800e758 <_realloc_r>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	4607      	mov	r7, r0
 800e75c:	4614      	mov	r4, r2
 800e75e:	460e      	mov	r6, r1
 800e760:	b921      	cbnz	r1, 800e76c <_realloc_r+0x14>
 800e762:	4611      	mov	r1, r2
 800e764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e768:	f7ff bf9c 	b.w	800e6a4 <_malloc_r>
 800e76c:	b922      	cbnz	r2, 800e778 <_realloc_r+0x20>
 800e76e:	f7ff ff4b 	bl	800e608 <_free_r>
 800e772:	4625      	mov	r5, r4
 800e774:	4628      	mov	r0, r5
 800e776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e778:	f000 f826 	bl	800e7c8 <_malloc_usable_size_r>
 800e77c:	42a0      	cmp	r0, r4
 800e77e:	d20f      	bcs.n	800e7a0 <_realloc_r+0x48>
 800e780:	4621      	mov	r1, r4
 800e782:	4638      	mov	r0, r7
 800e784:	f7ff ff8e 	bl	800e6a4 <_malloc_r>
 800e788:	4605      	mov	r5, r0
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d0f2      	beq.n	800e774 <_realloc_r+0x1c>
 800e78e:	4631      	mov	r1, r6
 800e790:	4622      	mov	r2, r4
 800e792:	f7ff fc11 	bl	800dfb8 <memcpy>
 800e796:	4631      	mov	r1, r6
 800e798:	4638      	mov	r0, r7
 800e79a:	f7ff ff35 	bl	800e608 <_free_r>
 800e79e:	e7e9      	b.n	800e774 <_realloc_r+0x1c>
 800e7a0:	4635      	mov	r5, r6
 800e7a2:	e7e7      	b.n	800e774 <_realloc_r+0x1c>

0800e7a4 <_sbrk_r>:
 800e7a4:	b538      	push	{r3, r4, r5, lr}
 800e7a6:	4c06      	ldr	r4, [pc, #24]	; (800e7c0 <_sbrk_r+0x1c>)
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	4608      	mov	r0, r1
 800e7ae:	6023      	str	r3, [r4, #0]
 800e7b0:	f7f6 f89a 	bl	80048e8 <_sbrk>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	d102      	bne.n	800e7be <_sbrk_r+0x1a>
 800e7b8:	6823      	ldr	r3, [r4, #0]
 800e7ba:	b103      	cbz	r3, 800e7be <_sbrk_r+0x1a>
 800e7bc:	602b      	str	r3, [r5, #0]
 800e7be:	bd38      	pop	{r3, r4, r5, pc}
 800e7c0:	20008db0 	.word	0x20008db0

0800e7c4 <__malloc_lock>:
 800e7c4:	4770      	bx	lr

0800e7c6 <__malloc_unlock>:
 800e7c6:	4770      	bx	lr

0800e7c8 <_malloc_usable_size_r>:
 800e7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7cc:	1f18      	subs	r0, r3, #4
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	bfbc      	itt	lt
 800e7d2:	580b      	ldrlt	r3, [r1, r0]
 800e7d4:	18c0      	addlt	r0, r0, r3
 800e7d6:	4770      	bx	lr

0800e7d8 <_init>:
 800e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7da:	bf00      	nop
 800e7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7de:	bc08      	pop	{r3}
 800e7e0:	469e      	mov	lr, r3
 800e7e2:	4770      	bx	lr

0800e7e4 <_fini>:
 800e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e6:	bf00      	nop
 800e7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ea:	bc08      	pop	{r3}
 800e7ec:	469e      	mov	lr, r3
 800e7ee:	4770      	bx	lr
