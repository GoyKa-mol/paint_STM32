
paint_projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f300  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002120  0800f4d0  0800f4d0  0001f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115f0  080115f0  000300b4  2**0
                  CONTENTS
  4 .ARM          00000008  080115f0  080115f0  000215f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115f8  080115f8  000300b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115f8  080115f8  000215f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080115fc  080115fc  000215fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08011600  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d30  200000b4  080116b4  000300b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008de4  080116b4  00038de4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d163  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055a3  00000000  00000000  0005d247  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002650  00000000  00000000  000627f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023b8  00000000  00000000  00064e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e290  00000000  00000000  000671f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f80c  00000000  00000000  00095488  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114b7b  00000000  00000000  000b4c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c980f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a54c  00000000  00000000  001c988c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f4b8 	.word	0x0800f4b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f4b8 	.word	0x0800f4b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000d0 	.word	0x200000d0
 8000614:	20000128 	.word	0x20000128

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f002 ffe4 	bl	80035f0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 fa7a 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 fa5e 	bl	8000b20 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f002 ff9f 	bl	80035b4 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fa44 	bl	8000b40 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 ff69 	bl	80035b4 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000328 	.word	0x20000328

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f002 feb6 	bl	80035b4 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fea8 	bl	80035b4 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f002 fe8d 	bl	80035b4 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fe7f 	bl	80035b4 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000328 	.word	0x20000328
 80008f8:	2000032c 	.word	0x2000032c

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fe32 	bl	8003580 <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fe1e 	bl	8003580 <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	6039      	str	r1, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fe0f 	bl	80035b4 <TS_IO_Read>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <ft5336_TS_GetTouchInfo+0x158>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	461a      	mov	r2, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4293      	cmp	r3, r2
 80009d6:	f080 8090 	bcs.w	8000afa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d85d      	bhi.n	8000a9c <ft5336_TS_GetTouchInfo+0xf0>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <ft5336_TS_GetTouchInfo+0x3c>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a1f 	.word	0x08000a1f
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a3b 	.word	0x08000a3b
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a57 	.word	0x08000a57
 8000a00:	08000a65 	.word	0x08000a65
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a81 	.word	0x08000a81
 8000a0c:	08000a8f 	.word	0x08000a8f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a14:	2307      	movs	r3, #7
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e03f      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a22:	230d      	movs	r3, #13
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a26:	230e      	movs	r3, #14
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e038      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a30:	2313      	movs	r3, #19
 8000a32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a34:	2314      	movs	r3, #20
 8000a36:	757b      	strb	r3, [r7, #21]
      break;
 8000a38:	e031      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3a:	2315      	movs	r3, #21
 8000a3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a3e:	2319      	movs	r3, #25
 8000a40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a42:	231a      	movs	r3, #26
 8000a44:	757b      	strb	r3, [r7, #21]
      break;
 8000a46:	e02a      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a48:	231b      	movs	r3, #27
 8000a4a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a4c:	231f      	movs	r3, #31
 8000a4e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a50:	2320      	movs	r3, #32
 8000a52:	757b      	strb	r3, [r7, #21]
      break;
 8000a54:	e023      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a56:	2321      	movs	r3, #33	; 0x21
 8000a58:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5a:	2325      	movs	r3, #37	; 0x25
 8000a5c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a5e:	2326      	movs	r3, #38	; 0x26
 8000a60:	757b      	strb	r3, [r7, #21]
      break;
 8000a62:	e01c      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a64:	2327      	movs	r3, #39	; 0x27
 8000a66:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a68:	232b      	movs	r3, #43	; 0x2b
 8000a6a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a6c:	232c      	movs	r3, #44	; 0x2c
 8000a6e:	757b      	strb	r3, [r7, #21]
      break;
 8000a70:	e015      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a72:	232d      	movs	r3, #45	; 0x2d
 8000a74:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a76:	2331      	movs	r3, #49	; 0x31
 8000a78:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	757b      	strb	r3, [r7, #21]
      break;
 8000a7e:	e00e      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a80:	2333      	movs	r3, #51	; 0x33
 8000a82:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a84:	2337      	movs	r3, #55	; 0x37
 8000a86:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a88:	2338      	movs	r3, #56	; 0x38
 8000a8a:	757b      	strb	r3, [r7, #21]
      break;
 8000a8c:	e007      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a8e:	2339      	movs	r3, #57	; 0x39
 8000a90:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a92:	233d      	movs	r3, #61	; 0x3d
 8000a94:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a96:	233e      	movs	r3, #62	; 0x3e
 8000a98:	757b      	strb	r3, [r7, #21]
      break;
 8000a9a:	e000      	b.n	8000a9e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a9c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fd84 	bl	80035b4 <TS_IO_Read>
 8000aac:	4603      	mov	r3, r0
 8000aae:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	119b      	asrs	r3, r3, #6
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	7dba      	ldrb	r2, [r7, #22]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fd74 	bl	80035b4 <TS_IO_Read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	7d7a      	ldrb	r2, [r7, #21]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fd66 	bl	80035b4 <TS_IO_Read>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000aec:	7d3b      	ldrb	r3, [r7, #20]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	111b      	asrs	r3, r3, #4
 8000af2:	f003 0204 	and.w	r2, r3, #4
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000328 	.word	0x20000328

08000b08 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000328 	.word	0x20000328

08000b20 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b24:	f7ff fff0 	bl	8000b08 <ft5336_Get_I2C_InitializedStatus>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b2e:	f002 fd1d 	bl	800356c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000328 	.word	0x20000328

08000b40 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	b0ba      	sub	sp, #232	; 0xe8
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
   	char text[50]={};
 8000b62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b66:	2232      	movs	r2, #50	; 0x32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00e f89f 	bl	800ecae <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f004 ff14 	bl	80059b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f9bb 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f001 f855 	bl	8001c40 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b96:	f000 fab9 	bl	800110c <MX_ADC3_Init>
  MX_I2C1_Init();
 8000b9a:	f000 fb65 	bl	8001268 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b9e:	f000 fba3 	bl	80012e8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000ba2:	f000 fbe1 	bl	8001368 <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba6:	f000 fc61 	bl	800146c <MX_RTC_Init>
  MX_SPI2_Init();
 8000baa:	f000 fd05 	bl	80015b8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bae:	f000 fd41 	bl	8001634 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bb2:	f000 fd93 	bl	80016dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb6:	f000 fddf 	bl	8001778 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bba:	f000 fe6b 	bl	8001894 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bbe:	f000 feb7 	bl	8001930 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bc2:	f000 ff8f 	bl	8001ae4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc6:	f000 ffbd 	bl	8001b44 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bca:	f000 fa4d 	bl	8001068 <MX_ADC1_Init>
  MX_DAC_Init();
 8000bce:	f000 faef 	bl	80011b0 <MX_DAC_Init>
  MX_UART7_Init();
 8000bd2:	f000 ff57 	bl	8001a84 <MX_UART7_Init>
  MX_FMC_Init();
 8000bd6:	f000 ffe5 	bl	8001ba4 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000bda:	f000 fb13 	bl	8001204 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000bde:	f002 fd13 	bl	8003608 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000be2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000be6:	2000      	movs	r0, #0
 8000be8:	f002 fda6 	bl	8003738 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bec:	f002 fd7c 	bl	80036e8 <BSP_LCD_GetXSize>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	f002 fd8d 	bl	8003710 <BSP_LCD_GetYSize>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	fb03 f304 	mul.w	r3, r3, r4
 8000bfc:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4619      	mov	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f002 fd97 	bl	8003738 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000c0a:	f003 fa5f 	bl	80040cc <BSP_LCD_DisplayOn>
  BSP_LCD_SetFont(&Font12);
 8000c0e:	48a7      	ldr	r0, [pc, #668]	; (8000eac <main+0x350>)
 8000c10:	f002 fe34 	bl	800387c <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f002 fe16 	bl	8003848 <BSP_LCD_SetBackColor>
  BSP_LCD_SelectLayer(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f002 fdeb 	bl	80037f8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f002 fe5a 	bl	80038dc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c2c:	f002 fdf4 	bl	8003818 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 245, 480, 5);
 8000c30:	2305      	movs	r3, #5
 8000c32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c36:	21f5      	movs	r1, #245	; 0xf5
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f003 f92d 	bl	8003e98 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(480-5-taille_menu, 0, 5, 245);
 8000c3e:	23f5      	movs	r3, #245	; 0xf5
 8000c40:	2205      	movs	r2, #5
 8000c42:	2100      	movs	r1, #0
 8000c44:	f240 10a9 	movw	r0, #425	; 0x1a9
 8000c48:	f003 f926 	bl	8003e98 <BSP_LCD_FillRect>
  BSP_LCD_SelectLayer(0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f002 fdd3 	bl	80037f8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	f002 fe41 	bl	80038dc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c5a:	4895      	ldr	r0, [pc, #596]	; (8000eb0 <main+0x354>)
 8000c5c:	f002 fddc 	bl	8003818 <BSP_LCD_SetTextColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c60:	f002 fd42 	bl	80036e8 <BSP_LCD_GetXSize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29c      	uxth	r4, r3
 8000c68:	f002 fd52 	bl	8003710 <BSP_LCD_GetYSize>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4620      	mov	r0, r4
 8000c74:	f003 fdf8 	bl	8004868 <BSP_TS_Init>
  HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	498e      	ldr	r1, [pc, #568]	; (8000eb4 <main+0x358>)
 8000c7c:	488e      	ldr	r0, [pc, #568]	; (8000eb8 <main+0x35c>)
 8000c7e:	f00a fc49 	bl	800b514 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutexLCD */
  osMutexDef(myMutexLCD);
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  myMutexLCDHandle = osMutexCreate(osMutex(myMutexLCD));
 8000c8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00b fcb7 	bl	800c606 <osMutexCreate>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	4b88      	ldr	r3, [pc, #544]	; (8000ebc <main+0x360>)
 8000c9c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueUART */
  osMessageQDef(myQueueUART, 16, uint8_t);
 8000c9e:	4b88      	ldr	r3, [pc, #544]	; (8000ec0 <main+0x364>)
 8000ca0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueUARTHandle = osMessageCreate(osMessageQ(myQueueUART), NULL);
 8000caa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f00b fcc0 	bl	800c636 <osMessageCreate>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b82      	ldr	r3, [pc, #520]	; (8000ec4 <main+0x368>)
 8000cba:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000cbc:	4b82      	ldr	r3, [pc, #520]	; (8000ec8 <main+0x36c>)
 8000cbe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00b fc35 	bl	800c546 <osThreadCreate>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <main+0x370>)
 8000ce0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mode */
  osThreadDef(Mode, StartMode, osPriorityAboveNormal, 0, 4096);
 8000ce2:	4b7b      	ldr	r3, [pc, #492]	; (8000ed0 <main+0x374>)
 8000ce4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ce8:	461d      	mov	r5, r3
 8000cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModeHandle = osThreadCreate(osThread(Mode), NULL);
 8000cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fc22 	bl	800c546 <osThreadCreate>
 8000d02:	4602      	mov	r2, r0
 8000d04:	4b73      	ldr	r3, [pc, #460]	; (8000ed4 <main+0x378>)
 8000d06:	601a      	str	r2, [r3, #0]

  /* definition and creation of Peindre */
  osThreadDef(Peindre, StartPeindre, osPriorityLow, 0, 1024);
 8000d08:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <main+0x37c>)
 8000d0a:	f107 0420 	add.w	r4, r7, #32
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeindreHandle = osThreadCreate(osThread(Peindre), NULL);
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f00b fc0f 	bl	800c546 <osThreadCreate>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <main+0x380>)
 8000d2c:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskEtat */
  osThreadDef(TaskEtat, StartTaskEtat, osPriorityNormal, 0, 1024);
 8000d2e:	4b6c      	ldr	r3, [pc, #432]	; (8000ee0 <main+0x384>)
 8000d30:	1d3c      	adds	r4, r7, #4
 8000d32:	461d      	mov	r5, r3
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEtatHandle = osThreadCreate(osThread(TaskEtat), NULL);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00b fbfe 	bl	800c546 <osThreadCreate>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <main+0x388>)
 8000d4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d50:	f00b fbf2 	bl	800c538 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4863      	ldr	r0, [pc, #396]	; (8000ee8 <main+0x38c>)
 8000d5a:	f006 fb23 	bl	80073a4 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d66:	4861      	ldr	r0, [pc, #388]	; (8000eec <main+0x390>)
 8000d68:	f006 fb34 	bl	80073d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	485d      	ldr	r0, [pc, #372]	; (8000ee8 <main+0x38c>)
 8000d72:	f006 fb17 	bl	80073a4 <HAL_GPIO_ReadPin>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	485c      	ldr	r0, [pc, #368]	; (8000ef0 <main+0x394>)
 8000d7e:	f006 fb29 	bl	80073d4 <HAL_GPIO_WritePin>
	  sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d86:	4858      	ldr	r0, [pc, #352]	; (8000ee8 <main+0x38c>)
 8000d88:	f006 fb0c 	bl	80073a4 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d94:	4957      	ldr	r1, [pc, #348]	; (8000ef4 <main+0x398>)
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00d ff92 	bl	800ecc0 <siprintf>
	  BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8000d9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000da0:	4619      	mov	r1, r3
 8000da2:	2005      	movs	r0, #5
 8000da4:	f002 feca 	bl	8003b3c <BSP_LCD_DisplayStringAtLine>

	  sConfig.Channel = ADC_CHANNEL_6;
 8000da8:	2306      	movs	r3, #6
 8000daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000dae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4850      	ldr	r0, [pc, #320]	; (8000ef8 <main+0x39c>)
 8000db6:	f004 ffe3 	bl	8005d80 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dba:	484f      	ldr	r0, [pc, #316]	; (8000ef8 <main+0x39c>)
 8000dbc:	f004 fe8e 	bl	8005adc <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000dc0:	bf00      	nop
 8000dc2:	2164      	movs	r1, #100	; 0x64
 8000dc4:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <main+0x39c>)
 8000dc6:	f004 ff49 	bl	8005c5c <HAL_ADC_PollForConversion>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f8      	bne.n	8000dc2 <main+0x266>
	  potr = HAL_ADC_GetValue(&hadc3);
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <main+0x39c>)
 8000dd2:	f004 ffc7 	bl	8005d64 <HAL_ADC_GetValue>
 8000dd6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	  sConfig.Channel = ADC_CHANNEL_7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000de0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4844      	ldr	r0, [pc, #272]	; (8000ef8 <main+0x39c>)
 8000de8:	f004 ffca 	bl	8005d80 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000dec:	4842      	ldr	r0, [pc, #264]	; (8000ef8 <main+0x39c>)
 8000dee:	f004 fe75 	bl	8005adc <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000df2:	bf00      	nop
 8000df4:	2164      	movs	r1, #100	; 0x64
 8000df6:	4840      	ldr	r0, [pc, #256]	; (8000ef8 <main+0x39c>)
 8000df8:	f004 ff30 	bl	8005c5c <HAL_ADC_PollForConversion>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f8      	bne.n	8000df4 <main+0x298>
	  potl = HAL_ADC_GetValue(&hadc3);
 8000e02:	483d      	ldr	r0, [pc, #244]	; (8000ef8 <main+0x39c>)
 8000e04:	f004 ffae 	bl	8005d64 <HAL_ADC_GetValue>
 8000e08:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

	  sConfig.Channel = ADC_CHANNEL_8;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000e12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <main+0x39c>)
 8000e1a:	f004 ffb1 	bl	8005d80 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000e1e:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <main+0x39c>)
 8000e20:	f004 fe5c 	bl	8005adc <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8000e24:	bf00      	nop
 8000e26:	2164      	movs	r1, #100	; 0x64
 8000e28:	4833      	ldr	r0, [pc, #204]	; (8000ef8 <main+0x39c>)
 8000e2a:	f004 ff17 	bl	8005c5c <HAL_ADC_PollForConversion>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f8      	bne.n	8000e26 <main+0x2ca>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8000e34:	4830      	ldr	r0, [pc, #192]	; (8000ef8 <main+0x39c>)
 8000e36:	f004 ff95 	bl	8005d64 <HAL_ADC_GetValue>
 8000e3a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	  HAL_ADC_Start(&hadc1);
 8000e3e:	482f      	ldr	r0, [pc, #188]	; (8000efc <main+0x3a0>)
 8000e40:	f004 fe4c 	bl	8005adc <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8000e44:	bf00      	nop
 8000e46:	2164      	movs	r1, #100	; 0x64
 8000e48:	482c      	ldr	r0, [pc, #176]	; (8000efc <main+0x3a0>)
 8000e4a:	f004 ff07 	bl	8005c5c <HAL_ADC_PollForConversion>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f8      	bne.n	8000e46 <main+0x2ea>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8000e54:	4829      	ldr	r0, [pc, #164]	; (8000efc <main+0x3a0>)
 8000e56:	f004 ff85 	bl	8005d64 <HAL_ADC_GetValue>
 8000e5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

	  sprintf(text,"POTL : %4u POTR : %4u joy_v : %4u joy_h : %4u",(uint)potl,(uint)potr,(uint)joystick_v,(uint)joystick_h);
 8000e5e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8000e62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e72:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000e76:	4922      	ldr	r1, [pc, #136]	; (8000f00 <main+0x3a4>)
 8000e78:	f00d ff22 	bl	800ecc0 <siprintf>
	  BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8000e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e80:	4619      	mov	r1, r3
 8000e82:	2009      	movs	r0, #9
 8000e84:	f002 fe5a 	bl	8003b3c <BSP_LCD_DisplayStringAtLine>

	  BSP_TS_GetState(&TS_State);
 8000e88:	481e      	ldr	r0, [pc, #120]	; (8000f04 <main+0x3a8>)
 8000e8a:	f003 fd2d 	bl	80048e8 <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <main+0x3a8>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f43f af5e 	beq.w	8000d54 <main+0x1f8>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <main+0x3a8>)
 8000e9a:	8858      	ldrh	r0, [r3, #2]
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <main+0x3a8>)
 8000e9e:	899b      	ldrh	r3, [r3, #12]
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f003 f872 	bl	8003f8c <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8000ea8:	e754      	b.n	8000d54 <main+0x1f8>
 8000eaa:	bf00      	nop
 8000eac:	20000034 	.word	0x20000034
 8000eb0:	ffff0000 	.word	0xffff0000
 8000eb4:	20008cb4 	.word	0x20008cb4
 8000eb8:	20008a80 	.word	0x20008a80
 8000ebc:	200088c0 	.word	0x200088c0
 8000ec0:	0800f50c 	.word	0x0800f50c
 8000ec4:	20008944 	.word	0x20008944
 8000ec8:	0800f528 	.word	0x0800f528
 8000ecc:	200086fc 	.word	0x200086fc
 8000ed0:	0800f54c 	.word	0x0800f54c
 8000ed4:	20008cb0 	.word	0x20008cb0
 8000ed8:	0800f570 	.word	0x0800f570
 8000edc:	20008830 	.word	0x20008830
 8000ee0:	0800f598 	.word	0x0800f598
 8000ee4:	20008bf8 	.word	0x20008bf8
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40021c00 	.word	0x40021c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	0800f4d0 	.word	0x0800f4d0
 8000ef8:	20008a38 	.word	0x20008a38
 8000efc:	200089f0 	.word	0x200089f0
 8000f00:	0800f4dc 	.word	0x0800f4dc
 8000f04:	20000330 	.word	0x20000330

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0b4      	sub	sp, #208	; 0xd0
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00d fec9 	bl	800ecae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2284      	movs	r2, #132	; 0x84
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00d feba 	bl	800ecae <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f3a:	f007 fba5 	bl	8008688 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <SystemClock_Config+0x154>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a46      	ldr	r2, [pc, #280]	; (800105c <SystemClock_Config+0x154>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b44      	ldr	r3, [pc, #272]	; (800105c <SystemClock_Config+0x154>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f56:	4b42      	ldr	r3, [pc, #264]	; (8001060 <SystemClock_Config+0x158>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a41      	ldr	r2, [pc, #260]	; (8001060 <SystemClock_Config+0x158>)
 8000f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <SystemClock_Config+0x158>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f6e:	2309      	movs	r3, #9
 8000f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f90:	2319      	movs	r3, #25
 8000f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000f96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 fbca 	bl	8008748 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fba:	f002 f97d 	bl	80032b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fbe:	f007 fb73 	bl	80086a8 <HAL_PWREx_EnableOverDrive>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc8:	f002 f976 	bl	80032b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000fee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fe4b 	bl	8008c90 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001000:	f002 f95a 	bl	80032b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <SystemClock_Config+0x15c>)
 8001006:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001008:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800100c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800100e:	2305      	movs	r3, #5
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001016:	2303      	movs	r3, #3
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800101e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800102a:	2300      	movs	r3, #0
 800102c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800102e:	2300      	movs	r3, #0
 8001030:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001032:	2300      	movs	r3, #0
 8001034:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800103a:	2300      	movs	r3, #0
 800103c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4618      	mov	r0, r3
 8001044:	f008 f828 	bl	8009098 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800104e:	f002 f933 	bl	80032b8 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	37d0      	adds	r7, #208	; 0xd0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000
 8001064:	00015868 	.word	0x00015868

08001068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_ADC1_Init+0x98>)
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <MX_ADC1_Init+0x9c>)
 800107e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_ADC1_Init+0x98>)
 8001082:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_ADC1_Init+0x98>)
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <MX_ADC1_Init+0xa0>)
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_ADC1_Init+0x98>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_ADC1_Init+0x98>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_ADC1_Init+0x98>)
 80010ca:	f004 fcc3 	bl	8005a54 <HAL_ADC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010d4:	f002 f8f0 	bl	80032b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010dc:	2301      	movs	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_ADC1_Init+0x98>)
 80010ea:	f004 fe49 	bl	8005d80 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010f4:	f002 f8e0 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200089f0 	.word	0x200089f0
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_ADC3_Init+0x9c>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_ADC3_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ADC3_Init+0x98>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_ADC3_Init+0x98>)
 800114e:	4a17      	ldr	r2, [pc, #92]	; (80011ac <MX_ADC3_Init+0xa0>)
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_ADC3_Init+0x98>)
 800115a:	2201      	movs	r2, #1
 800115c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_ADC3_Init+0x98>)
 8001168:	2201      	movs	r2, #1
 800116a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_ADC3_Init+0x98>)
 800116e:	f004 fc71 	bl	8005a54 <HAL_ADC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001178:	f002 f89e 	bl	80032b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800117c:	2307      	movs	r3, #7
 800117e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001180:	2301      	movs	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_ADC3_Init+0x98>)
 800118e:	f004 fdf7 	bl	8005d80 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001198:	f002 f88e 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20008a38 	.word	0x20008a38
 80011a8:	40012200 	.word	0x40012200
 80011ac:	0f000001 	.word	0x0f000001

080011b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_DAC_Init+0x4c>)
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <MX_DAC_Init+0x50>)
 80011c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_DAC_Init+0x4c>)
 80011c6:	f005 f901 	bl	80063cc <HAL_DAC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d0:	f002 f872 	bl	80032b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_DAC_Init+0x4c>)
 80011e4:	f005 f968 	bl	80064b8 <HAL_DAC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ee:	f002 f863 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20008b00 	.word	0x20008b00
 8001200:	40007400 	.word	0x40007400

08001204 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <MX_DMA2D_Init+0x60>)
 800120c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_DMA2D_Init+0x5c>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_DMA2D_Init+0x5c>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_DMA2D_Init+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_DMA2D_Init+0x5c>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800122e:	2200      	movs	r2, #0
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_DMA2D_Init+0x5c>)
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800123a:	f005 fb73 	bl	8006924 <HAL_DMA2D_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001244:	f002 f838 	bl	80032b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001248:	2101      	movs	r1, #1
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_DMA2D_Init+0x5c>)
 800124c:	f005 fcc8 	bl	8006be0 <HAL_DMA2D_ConfigLayer>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001256:	f002 f82f 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20008bfc 	.word	0x20008bfc
 8001264:	4002b000 	.word	0x4002b000

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_I2C1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_I2C1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_I2C1_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_I2C1_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	f006 f8c8 	bl	8007438 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f002 f803 	bl	80032b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <MX_I2C1_Init+0x74>)
 80012b6:	f006 fdd7 	bl	8007e68 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f001 fffa 	bl	80032b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_I2C1_Init+0x74>)
 80012c8:	f006 fe19 	bl	8007efe <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f001 fff1 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20008874 	.word	0x20008874
 80012e0:	40005400 	.word	0x40005400
 80012e4:	00c0eaff 	.word	0x00c0eaff

080012e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_I2C3_Init+0x74>)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <MX_I2C3_Init+0x78>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_I2C3_Init+0x74>)
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <MX_I2C3_Init+0x7c>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_I2C3_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_I2C3_Init+0x74>)
 8001300:	2201      	movs	r2, #1
 8001302:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_I2C3_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_I2C3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C3_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C3_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C3_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_I2C3_Init+0x74>)
 8001324:	f006 f888 	bl	8007438 <HAL_I2C_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800132e:	f001 ffc3 	bl	80032b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <MX_I2C3_Init+0x74>)
 8001336:	f006 fd97 	bl	8007e68 <HAL_I2CEx_ConfigAnalogFilter>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001340:	f001 ffba 	bl	80032b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_I2C3_Init+0x74>)
 8001348:	f006 fdd9 	bl	8007efe <HAL_I2CEx_ConfigDigitalFilter>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001352:	f001 ffb1 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20008700 	.word	0x20008700
 8001360:	40005c00 	.word	0x40005c00
 8001364:	00c0eaff 	.word	0x00c0eaff

08001368 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2234      	movs	r2, #52	; 0x34
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f00d fc9a 	bl	800ecae <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <MX_LTDC_Init+0xfc>)
 800137c:	4a3a      	ldr	r2, [pc, #232]	; (8001468 <MX_LTDC_Init+0x100>)
 800137e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001380:	4b38      	ldr	r3, [pc, #224]	; (8001464 <MX_LTDC_Init+0xfc>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <MX_LTDC_Init+0xfc>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <MX_LTDC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001392:	4b34      	ldr	r3, [pc, #208]	; (8001464 <MX_LTDC_Init+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <MX_LTDC_Init+0xfc>)
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013a0:	2209      	movs	r2, #9
 80013a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013a6:	2235      	movs	r2, #53	; 0x35
 80013a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013ac:	220b      	movs	r2, #11
 80013ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80013b0:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013b2:	f240 2215 	movw	r2, #533	; 0x215
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013ba:	f240 121b 	movw	r2, #283	; 0x11b
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013c2:	f240 2235 	movw	r2, #565	; 0x235
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013ca:	f240 121d 	movw	r2, #285	; 0x11d
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <MX_LTDC_Init+0xfc>)
 80013ea:	f006 fdd5 	bl	8007f98 <HAL_LTDC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013f4:	f001 ff60 	bl	80032b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001400:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001406:	f44f 7388 	mov.w	r3, #272	; 0x110
 800140a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800140c:	2302      	movs	r3, #2
 800140e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001418:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800141c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800141e:	2307      	movs	r3, #7
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001422:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001428:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800142e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_LTDC_Init+0xfc>)
 800144e:	f006 ff35 	bl	80082bc <HAL_LTDC_ConfigLayer>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001458:	f001 ff2e 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	; 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20008948 	.word	0x20008948
 8001468:	40016800 	.word	0x40016800

0800146c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b092      	sub	sp, #72	; 0x48
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	222c      	movs	r2, #44	; 0x2c
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00d fc0d 	bl	800ecae <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001494:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <MX_RTC_Init+0x144>)
 8001496:	4a47      	ldr	r2, [pc, #284]	; (80015b4 <MX_RTC_Init+0x148>)
 8001498:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800149a:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <MX_RTC_Init+0x144>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014a0:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <MX_RTC_Init+0x144>)
 80014a2:	227f      	movs	r2, #127	; 0x7f
 80014a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <MX_RTC_Init+0x144>)
 80014a8:	22ff      	movs	r2, #255	; 0xff
 80014aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <MX_RTC_Init+0x144>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <MX_RTC_Init+0x144>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <MX_RTC_Init+0x144>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014be:	483c      	ldr	r0, [pc, #240]	; (80015b0 <MX_RTC_Init+0x144>)
 80014c0:	f008 f9d8 	bl	8009874 <HAL_RTC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80014ca:	f001 fef5 	bl	80032b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	482f      	ldr	r0, [pc, #188]	; (80015b0 <MX_RTC_Init+0x144>)
 80014f2:	f008 fa3b 	bl	800996c <HAL_RTC_SetTime>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014fc:	f001 fedc 	bl	80032b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001500:	2301      	movs	r3, #1
 8001502:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001506:	2301      	movs	r3, #1
 8001508:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	4823      	ldr	r0, [pc, #140]	; (80015b0 <MX_RTC_Init+0x144>)
 8001522:	f008 fae1 	bl	8009ae8 <HAL_RTC_SetDate>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800152c:	f001 fec4 	bl	80032b8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001530:	2300      	movs	r3, #0
 8001532:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001534:	2300      	movs	r3, #0
 8001536:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001538:	2300      	movs	r3, #0
 800153a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	2201      	movs	r2, #1
 8001564:	4619      	mov	r1, r3
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <MX_RTC_Init+0x144>)
 8001568:	f008 fb66 	bl	8009c38 <HAL_RTC_SetAlarm>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001572:	f001 fea1 	bl	80032b8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <MX_RTC_Init+0x144>)
 8001584:	f008 fb58 	bl	8009c38 <HAL_RTC_SetAlarm>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800158e:	f001 fe93 	bl	80032b8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001592:	2202      	movs	r2, #2
 8001594:	2100      	movs	r1, #0
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_RTC_Init+0x144>)
 8001598:	f008 fcd8 	bl	8009f4c <HAL_RTCEx_SetTimeStamp>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80015a2:	f001 fe89 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3748      	adds	r7, #72	; 0x48
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20008b18 	.word	0x20008b18
 80015b4:	40002800 	.word	0x40002800

080015b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_SPI2_Init+0x74>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_SPI2_Init+0x78>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_SPI2_Init+0x74>)
 80015c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI2_Init+0x74>)
 80015d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI2_Init+0x74>)
 80015e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI2_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI2_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI2_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_SPI2_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI2_Init+0x74>)
 8001606:	2207      	movs	r2, #7
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_SPI2_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI2_Init+0x74>)
 8001612:	2208      	movs	r2, #8
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_SPI2_Init+0x74>)
 8001618:	f008 fd6d 	bl	800a0f6 <HAL_SPI_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001622:	f001 fe49 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000874c 	.word	0x2000874c
 8001630:	40003800 	.word	0x40003800

08001634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <MX_TIM1_Init+0xa0>)
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <MX_TIM1_Init+0xa4>)
 8001656:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_TIM1_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <MX_TIM1_Init+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_TIM1_Init+0xa0>)
 8001666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_TIM1_Init+0xa0>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_TIM1_Init+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_TIM1_Init+0xa0>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <MX_TIM1_Init+0xa0>)
 8001680:	f008 fdcb 	bl	800a21a <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800168a:	f001 fe15 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <MX_TIM1_Init+0xa0>)
 800169c:	f009 f87e 	bl	800a79c <HAL_TIM_ConfigClockSource>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016a6:	f001 fe07 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_TIM1_Init+0xa0>)
 80016bc:	f009 fdb2 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016c6:	f001 fdf7 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20008b38 	.word	0x20008b38
 80016d8:	40010000 	.word	0x40010000

080016dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <MX_TIM2_Init+0x98>)
 80016fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_TIM2_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_TIM2_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_TIM2_Init+0x98>)
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_TIM2_Init+0x98>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_TIM2_Init+0x98>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <MX_TIM2_Init+0x98>)
 8001724:	f008 fd79 	bl	800a21a <HAL_TIM_Base_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800172e:	f001 fdc3 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_TIM2_Init+0x98>)
 8001740:	f009 f82c 	bl	800a79c <HAL_TIM_ConfigClockSource>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800174a:	f001 fdb5 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM2_Init+0x98>)
 800175c:	f009 fd62 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001766:	f001 fda7 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20008c3c 	.word	0x20008c3c

08001778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b094      	sub	sp, #80	; 0x50
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <MX_TIM3_Init+0x114>)
 80017bc:	4a34      	ldr	r2, [pc, #208]	; (8001890 <MX_TIM3_Init+0x118>)
 80017be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <MX_TIM3_Init+0x114>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <MX_TIM3_Init+0x114>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <MX_TIM3_Init+0x114>)
 80017ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MX_TIM3_Init+0x114>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <MX_TIM3_Init+0x114>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <MX_TIM3_Init+0x114>)
 80017e2:	f008 fd1a 	bl	800a21a <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017ec:	f001 fd64 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017fa:	4619      	mov	r1, r3
 80017fc:	4823      	ldr	r0, [pc, #140]	; (800188c <MX_TIM3_Init+0x114>)
 80017fe:	f008 ffcd 	bl	800a79c <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001808:	f001 fd56 	bl	80032b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <MX_TIM3_Init+0x114>)
 800180e:	f008 fd59 	bl	800a2c4 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001818:	f001 fd4e 	bl	80032b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001820:	2300      	movs	r3, #0
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM3_Init+0x114>)
 800182c:	f009 f870 	bl	800a910 <HAL_TIM_SlaveConfigSynchro>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001836:	f001 fd3f 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	4619      	mov	r1, r3
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <MX_TIM3_Init+0x114>)
 800184a:	f009 fceb 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001854:	f001 fd30 	bl	80032b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001858:	2360      	movs	r3, #96	; 0x60
 800185a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <MX_TIM3_Init+0x114>)
 8001870:	f008 fe7c 	bl	800a56c <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800187a:	f001 fd1d 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM3_Init+0x114>)
 8001880:	f003 fdc6 	bl	8005410 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3750      	adds	r7, #80	; 0x50
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20008904 	.word	0x20008904
 8001890:	40000400 	.word	0x40000400

08001894 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_TIM5_Init+0x94>)
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <MX_TIM5_Init+0x98>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <MX_TIM5_Init+0x94>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <MX_TIM5_Init+0x94>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <MX_TIM5_Init+0x94>)
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <MX_TIM5_Init+0x94>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_TIM5_Init+0x94>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <MX_TIM5_Init+0x94>)
 80018da:	f008 fc9e 	bl	800a21a <HAL_TIM_Base_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80018e4:	f001 fce8 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	4619      	mov	r1, r3
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_TIM5_Init+0x94>)
 80018f6:	f008 ff51 	bl	800a79c <HAL_TIM_ConfigClockSource>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001900:	f001 fcda 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_TIM5_Init+0x94>)
 8001912:	f009 fc87 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800191c:	f001 fccc 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200088c4 	.word	0x200088c4
 800192c:	40000c00 	.word	0x40000c00

08001930 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b09a      	sub	sp, #104	; 0x68
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	222c      	movs	r2, #44	; 0x2c
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f00d f99f 	bl	800ecae <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001972:	4a43      	ldr	r2, [pc, #268]	; (8001a80 <MX_TIM8_Init+0x150>)
 8001974:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <MX_TIM8_Init+0x14c>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <MX_TIM8_Init+0x14c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800199c:	4837      	ldr	r0, [pc, #220]	; (8001a7c <MX_TIM8_Init+0x14c>)
 800199e:	f008 fc3c 	bl	800a21a <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80019a8:	f001 fc86 	bl	80032b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b6:	4619      	mov	r1, r3
 80019b8:	4830      	ldr	r0, [pc, #192]	; (8001a7c <MX_TIM8_Init+0x14c>)
 80019ba:	f008 feef 	bl	800a79c <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80019c4:	f001 fc78 	bl	80032b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019c8:	482c      	ldr	r0, [pc, #176]	; (8001a7c <MX_TIM8_Init+0x14c>)
 80019ca:	f008 fc7b 	bl	800a2c4 <HAL_TIM_PWM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80019d4:	f001 fc70 	bl	80032b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4824      	ldr	r0, [pc, #144]	; (8001a7c <MX_TIM8_Init+0x14c>)
 80019ec:	f009 fc1a 	bl	800b224 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80019f6:	f001 fc5f 	bl	80032b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a16:	220c      	movs	r2, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001a1c:	f008 fda6 	bl	800a56c <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001a26:	f001 fc47 	bl	80032b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001a60:	f009 fc6e 	bl	800b340 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001a6a:	f001 fc25 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM8_Init+0x14c>)
 8001a70:	f003 fcce 	bl	8005410 <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3768      	adds	r7, #104	; 0x68
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20008834 	.word	0x20008834
 8001a80:	40010400 	.word	0x40010400

08001a84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_UART7_Init+0x58>)
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <MX_UART7_Init+0x5c>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_UART7_Init+0x58>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_UART7_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_UART7_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_UART7_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_UART7_Init+0x58>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_UART7_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_UART7_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_UART7_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_UART7_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_UART7_Init+0x58>)
 8001ac8:	f009 fcd6 	bl	800b478 <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001ad2:	f001 fbf1 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200087b0 	.word	0x200087b0
 8001ae0:	40007800 	.word	0x40007800

08001ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <MX_USART1_UART_Init+0x5c>)
 8001aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART1_UART_Init+0x58>)
 8001b28:	f009 fca6 	bl	800b478 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b32:	f001 fbc1 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20008a80 	.word	0x20008a80
 8001b40:	40011000 	.word	0x40011000

08001b44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <MX_USART6_UART_Init+0x5c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART6_UART_Init+0x58>)
 8001b88:	f009 fc76 	bl	800b478 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001b92:	f001 fb91 	bl	80032b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20008b78 	.word	0x20008b78
 8001ba0:	40011400 	.word	0x40011400

08001ba4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <MX_FMC_Init+0x98>)
 8001bc0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_FMC_Init+0x94>)
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <MX_FMC_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_FMC_Init+0x94>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001bfe:	2310      	movs	r3, #16
 8001c00:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001c02:	2310      	movs	r3, #16
 8001c04:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001c06:	2310      	movs	r3, #16
 8001c08:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001c12:	2310      	movs	r3, #16
 8001c14:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001c16:	2310      	movs	r3, #16
 8001c18:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <MX_FMC_Init+0x94>)
 8001c20:	f008 f9ea 	bl	8009ff8 <HAL_SDRAM_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001c2a:	f001 fb45 	bl	80032b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20008c7c 	.word	0x20008c7c
 8001c3c:	a0000140 	.word	0xa0000140

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b090      	sub	sp, #64	; 0x40
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c56:	4bb0      	ldr	r3, [pc, #704]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4aaf      	ldr	r2, [pc, #700]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c5c:	f043 0310 	orr.w	r3, r3, #16
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4bad      	ldr	r3, [pc, #692]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	4baa      	ldr	r3, [pc, #680]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4aa9      	ldr	r2, [pc, #676]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4ba7      	ldr	r3, [pc, #668]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4ba4      	ldr	r3, [pc, #656]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4aa3      	ldr	r2, [pc, #652]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4ba1      	ldr	r3, [pc, #644]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c9e:	4b9e      	ldr	r3, [pc, #632]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a9d      	ldr	r2, [pc, #628]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b9b      	ldr	r3, [pc, #620]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cb6:	4b98      	ldr	r3, [pc, #608]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a97      	ldr	r2, [pc, #604]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	4b92      	ldr	r3, [pc, #584]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a91      	ldr	r2, [pc, #580]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b8f      	ldr	r3, [pc, #572]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ce6:	4b8c      	ldr	r3, [pc, #560]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a8b      	ldr	r2, [pc, #556]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001cfe:	4b86      	ldr	r3, [pc, #536]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a85      	ldr	r2, [pc, #532]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a7f      	ldr	r2, [pc, #508]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b7d      	ldr	r3, [pc, #500]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d34:	f043 0320 	orr.w	r3, r3, #32
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d46:	4b74      	ldr	r3, [pc, #464]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a73      	ldr	r2, [pc, #460]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b71      	ldr	r3, [pc, #452]	; (8001f18 <MX_GPIO_Init+0x2d8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2160      	movs	r1, #96	; 0x60
 8001d62:	486e      	ldr	r0, [pc, #440]	; (8001f1c <MX_GPIO_Init+0x2dc>)
 8001d64:	f005 fb36 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	486c      	ldr	r0, [pc, #432]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001d6e:	f005 fb31 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2108      	movs	r1, #8
 8001d76:	486a      	ldr	r0, [pc, #424]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001d78:	f005 fb2c 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4868      	ldr	r0, [pc, #416]	; (8001f24 <MX_GPIO_Init+0x2e4>)
 8001d82:	f005 fb27 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2108      	movs	r1, #8
 8001d8a:	4867      	ldr	r0, [pc, #412]	; (8001f28 <MX_GPIO_Init+0x2e8>)
 8001d8c:	f005 fb22 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d96:	4863      	ldr	r0, [pc, #396]	; (8001f24 <MX_GPIO_Init+0x2e4>)
 8001d98:	f005 fb1c 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001da2:	4862      	ldr	r0, [pc, #392]	; (8001f2c <MX_GPIO_Init+0x2ec>)
 8001da4:	f005 fb16 	bl	80073d4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2108      	movs	r1, #8
 8001dac:	4860      	ldr	r0, [pc, #384]	; (8001f30 <MX_GPIO_Init+0x2f0>)
 8001dae:	f005 fb11 	bl	80073d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001db2:	2308      	movs	r3, #8
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4855      	ldr	r0, [pc, #340]	; (8001f1c <MX_GPIO_Init+0x2dc>)
 8001dc6:	f005 f839 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001dca:	f643 0323 	movw	r3, #14371	; 0x3823
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ddc:	230a      	movs	r3, #10
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	4619      	mov	r1, r3
 8001de6:	4853      	ldr	r0, [pc, #332]	; (8001f34 <MX_GPIO_Init+0x2f4>)
 8001de8:	f005 f828 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001dec:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	484d      	ldr	r0, [pc, #308]	; (8001f38 <MX_GPIO_Init+0x2f8>)
 8001e02:	f005 f81b 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001e06:	2360      	movs	r3, #96	; 0x60
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	483f      	ldr	r0, [pc, #252]	; (8001f1c <MX_GPIO_Init+0x2dc>)
 8001e1e:	f005 f80d 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	4619      	mov	r1, r3
 8001e36:	4841      	ldr	r0, [pc, #260]	; (8001f3c <MX_GPIO_Init+0x2fc>)
 8001e38:	f005 f800 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001e3c:	2340      	movs	r3, #64	; 0x40
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <MX_GPIO_Init+0x300>)
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4834      	ldr	r0, [pc, #208]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001e50:	f004 fff4 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e54:	2328      	movs	r3, #40	; 0x28
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	482d      	ldr	r0, [pc, #180]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001e6c:	f004 ffe6 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001e70:	f241 0308 	movw	r3, #4104	; 0x1008
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4826      	ldr	r0, [pc, #152]	; (8001f24 <MX_GPIO_Init+0x2e4>)
 8001e8a:	f004 ffd7 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4828      	ldr	r0, [pc, #160]	; (8001f44 <MX_GPIO_Init+0x304>)
 8001ea4:	f004 ffca 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481a      	ldr	r0, [pc, #104]	; (8001f28 <MX_GPIO_Init+0x2e8>)
 8001ec0:	f004 ffbc 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4812      	ldr	r0, [pc, #72]	; (8001f20 <MX_GPIO_Init+0x2e0>)
 8001ed8:	f004 ffb0 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001edc:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <MX_GPIO_Init+0x2ec>)
 8001ef2:	f004 ffa3 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001ef6:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <MX_GPIO_Init+0x2ec>)
 8001f10:	f004 ff94 	bl	8006e3c <HAL_GPIO_Init>
 8001f14:	e018      	b.n	8001f48 <MX_GPIO_Init+0x308>
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40022800 	.word	0x40022800
 8001f2c:	40021c00 	.word	0x40021c00
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40022400 	.word	0x40022400
 8001f40:	10120000 	.word	0x10120000
 8001f44:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_GPIO_Init+0x3e8>)
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4833      	ldr	r0, [pc, #204]	; (800202c <MX_GPIO_Init+0x3ec>)
 8001f5e:	f004 ff6d 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f62:	2310      	movs	r3, #16
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f72:	230a      	movs	r3, #10
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	482c      	ldr	r0, [pc, #176]	; (8002030 <MX_GPIO_Init+0x3f0>)
 8001f7e:	f004 ff5d 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BP_joystick_Pin */
  GPIO_InitStruct.Pin = BP_joystick_Pin;
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <MX_GPIO_Init+0x3f4>)
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BP_joystick_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f92:	4619      	mov	r1, r3
 8001f94:	4828      	ldr	r0, [pc, #160]	; (8002038 <MX_GPIO_Init+0x3f8>)
 8001f96:	f004 ff51 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001faa:	230a      	movs	r3, #10
 8001fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <MX_GPIO_Init+0x3fc>)
 8001fb6:	f004 ff41 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4819      	ldr	r0, [pc, #100]	; (8002038 <MX_GPIO_Init+0x3f8>)
 8001fd2:	f004 ff33 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4813      	ldr	r0, [pc, #76]	; (8002038 <MX_GPIO_Init+0x3f8>)
 8001fea:	f004 ff27 	bl	8006e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ffe:	230a      	movs	r3, #10
 8002000:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002006:	4619      	mov	r1, r3
 8002008:	480d      	ldr	r0, [pc, #52]	; (8002040 <MX_GPIO_Init+0x400>)
 800200a:	f004 ff17 	bl	8006e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2105      	movs	r1, #5
 8002012:	2017      	movs	r0, #23
 8002014:	f004 f9b0 	bl	8006378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002018:	2017      	movs	r0, #23
 800201a:	f004 f9c9 	bl	80063b0 <HAL_NVIC_EnableIRQ>

}
 800201e:	bf00      	nop
 8002020:	3740      	adds	r7, #64	; 0x40
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	10120000 	.word	0x10120000
 800202c:	40022000 	.word	0x40022000
 8002030:	40021c00 	.word	0x40021c00
 8002034:	10110000 	.word	0x10110000
 8002038:	40021800 	.word	0x40021800
 800203c:	40020800 	.word	0x40020800
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
uint8_t Message;
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 800204c:	2201      	movs	r2, #1
 800204e:	2120      	movs	r1, #32
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <HAL_UART_RxCpltCallback+0x44>)
 8002052:	f005 f9bf 	bl	80073d4 <HAL_GPIO_WritePin>
HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8002056:	2201      	movs	r2, #1
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <HAL_UART_RxCpltCallback+0x48>)
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <HAL_UART_RxCpltCallback+0x4c>)
 800205c:	f009 fa5a 	bl	800b514 <HAL_UART_Receive_IT>
Message = rxbuffer[0];
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_UART_RxCpltCallback+0x48>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	73fb      	strb	r3, [r7, #15]
xQueueSendFromISR(myQueueUARTHandle, &Message, 0);
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_UART_RxCpltCallback+0x50>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f107 010f 	add.w	r1, r7, #15
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	f00a fe53 	bl	800cd1c <xQueueGenericSendFromISR>
HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,0);
 8002076:	2200      	movs	r2, #0
 8002078:	2120      	movs	r1, #32
 800207a:	4803      	ldr	r0, [pc, #12]	; (8002088 <HAL_UART_RxCpltCallback+0x44>)
 800207c:	f005 f9aa 	bl	80073d4 <HAL_GPIO_WritePin>
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	20008cb4 	.word	0x20008cb4
 8002090:	20008a80 	.word	0x20008a80
 8002094:	20008944 	.word	0x20008944

08002098 <HAL_GPIO_EXTI_Callback>:
/*
 * Interuption sur le click joystick
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2120      	movs	r1, #32
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_GPIO_EXTI_Callback+0x24>)
 80020a8:	f005 f994 	bl	80073d4 <HAL_GPIO_WritePin>
	etat = etat_int;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80020b2:	701a      	strb	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	2000002a 	.word	0x2000002a
 80020c4:	20000029 	.word	0x20000029

080020c8 <TestConditionBord>:
/*
test les condition de bord en un point pour ne pas ecrire
hors de l'écran.
*/
char TestConditionBord(uint16_t x, uint16_t y, uint16_t rad)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
 80020d2:	460b      	mov	r3, r1
 80020d4:	80bb      	strh	r3, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	807b      	strh	r3, [r7, #2]
	char bool = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
	if(((x-rad)>=0) && ((x+rad)<=480-5-taille_menu) && ((y-rad)>=0) && ((y+rad)<246))
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db11      	blt.n	800210c <TestConditionBord+0x44>
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	4413      	add	r3, r2
 80020ee:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
 80020f2:	da0b      	bge.n	800210c <TestConditionBord+0x44>
 80020f4:	88ba      	ldrh	r2, [r7, #4]
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db06      	blt.n	800210c <TestConditionBord+0x44>
 80020fe:	88ba      	ldrh	r2, [r7, #4]
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4413      	add	r3, r2
 8002104:	2bf5      	cmp	r3, #245	; 0xf5
 8002106:	dc01      	bgt.n	800210c <TestConditionBord+0x44>
	{
		bool = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
	}
	return bool;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <LCD_PAINTBRUSH>:

void LCD_PAINTBRUSH(uint16_t x, uint16_t y,uint16_t rad)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
 8002126:	460b      	mov	r3, r1
 8002128:	80bb      	strh	r3, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	807b      	strh	r3, [r7, #2]
	if(brush == 0)
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <LCD_PAINTBRUSH+0x30>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <LCD_PAINTBRUSH+0x26>
	{
	   BSP_LCD_FillCircle(x, y, rad);
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	88b9      	ldrh	r1, [r7, #4]
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	4618      	mov	r0, r3
 800213e:	f001 ff25 	bl	8003f8c <BSP_LCD_FillCircle>
	}
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000032e 	.word	0x2000032e

08002150 <AfficheTonalite>:
 * pour afficher toutes les tonalité il faudrait 256*6 = 1536 pixels, on prend donc que
 * 64 niveaux de tonalité pour chaque mélange (R+V, V+R, V+B, B+V, B+R, R+B). Soit un total
 * de 64*6 = 384 pixels nécessaire
 */
void AfficheTonalite()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08e      	sub	sp, #56	; 0x38
 8002154:	af00      	add	r7, sp, #0
	uint32_t RVB = 0x0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
	BSP_LCD_SelectLayer(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f001 fb4c 	bl	80037f8 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f001 fb58 	bl	8003818 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002168:	2315      	movs	r3, #21
 800216a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800216e:	21fb      	movs	r1, #251	; 0xfb
 8002170:	2000      	movs	r0, #0
 8002172:	f001 fe91 	bl	8003e98 <BSP_LCD_FillRect>
	//affichage R+V :
	for(uint32_t i = 0;i<256; i = i+4)
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
 800217a:	e022      	b.n	80021c2 <AfficheTonalite+0x72>
   {
		RVB = 0xFFFF0000 | (i<<8); //Red à 255, Vert augmente
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	021a      	lsls	r2, r3, #8
 8002180:	4b76      	ldr	r3, [pc, #472]	; (800235c <AfficheTonalite+0x20c>)
 8002182:	4313      	orrs	r3, r2
 8002184:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800218c:	e012      	b.n	80021b4 <AfficheTonalite+0x64>
		{
			BSP_LCD_DrawPixel(50+i/4, 252+j, RVB);
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	3332      	adds	r3, #50	; 0x32
 8002196:	b298      	uxth	r0, r3
 8002198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800219c:	b29b      	uxth	r3, r3
 800219e:	33fc      	adds	r3, #252	; 0xfc
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f001 fe2f 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80021aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021ae:	3301      	adds	r3, #1
 80021b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80021b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021b8:	2b11      	cmp	r3, #17
 80021ba:	d9e8      	bls.n	800218e <AfficheTonalite+0x3e>
	for(uint32_t i = 0;i<256; i = i+4)
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	3304      	adds	r3, #4
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	2bff      	cmp	r3, #255	; 0xff
 80021c6:	d9d9      	bls.n	800217c <AfficheTonalite+0x2c>
		}
   }
	//affichage V+R :
	for(uint32_t i = 252;i<253; i = i-4)
 80021c8:	23fc      	movs	r3, #252	; 0xfc
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021cc:	e023      	b.n	8002216 <AfficheTonalite+0xc6>
		// i est un uint donc quand i passe en dessus de 0 il est interprèter comme un grand nombre d'où le i<253
   {
		RVB = 0xFF00FF00 | (i<<16); //Vert à 255, Red diminue
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 80021d6:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021de:	e013      	b.n	8002208 <AfficheTonalite+0xb8>
		{
			BSP_LCD_DrawPixel(114+(63-i/4), 252+j, RVB);
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f1c3 03b1 	rsb	r3, r3, #177	; 0xb1
 80021ea:	b298      	uxth	r0, r3
 80021ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	33fc      	adds	r3, #252	; 0xfc
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f001 fe05 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80021fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002202:	3301      	adds	r3, #1
 8002204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800220c:	2b11      	cmp	r3, #17
 800220e:	d9e7      	bls.n	80021e0 <AfficheTonalite+0x90>
	for(uint32_t i = 252;i<253; i = i-4)
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	3b04      	subs	r3, #4
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2bfc      	cmp	r3, #252	; 0xfc
 800221a:	d9d8      	bls.n	80021ce <AfficheTonalite+0x7e>
		}
   }
	//affichage V+B :
	for(uint32_t i = 0;i<256; i = i+4)
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	e021      	b.n	8002266 <AfficheTonalite+0x116>
   {
		RVB = 0xFF00FF00 | i; // Vert à 255, Bleu augmente
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f043 23ff 	orr.w	r3, r3, #4278255360	; 0xff00ff00
 8002228:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002230:	e012      	b.n	8002258 <AfficheTonalite+0x108>
		{
			BSP_LCD_DrawPixel(178+i/4, 252+j, RVB);
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	b29b      	uxth	r3, r3
 8002238:	33b2      	adds	r3, #178	; 0xb2
 800223a:	b298      	uxth	r0, r3
 800223c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002240:	b29b      	uxth	r3, r3
 8002242:	33fc      	adds	r3, #252	; 0xfc
 8002244:	b29b      	uxth	r3, r3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	f001 fddd 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 800224e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002252:	3301      	adds	r3, #1
 8002254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800225c:	2b11      	cmp	r3, #17
 800225e:	d9e8      	bls.n	8002232 <AfficheTonalite+0xe2>
	for(uint32_t i = 0;i<256; i = i+4)
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3304      	adds	r3, #4
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2bff      	cmp	r3, #255	; 0xff
 800226a:	d9da      	bls.n	8002222 <AfficheTonalite+0xd2>
		}
   }
	//affichage B+V :
	for(uint32_t i = 252;i<253; i = i-4)
 800226c:	23fc      	movs	r3, #252	; 0xfc
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	e01f      	b.n	80022b2 <AfficheTonalite+0x162>
   {
		RVB = 0xFF0000FF | (i<<8); // Bleu à 255, Vert diminue
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <AfficheTonalite+0x210>)
 8002278:	4313      	orrs	r3, r2
 800227a:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 800227c:	2300      	movs	r3, #0
 800227e:	76fb      	strb	r3, [r7, #27]
 8002280:	e011      	b.n	80022a6 <AfficheTonalite+0x156>
		{
			BSP_LCD_DrawPixel(242+(63-i/4), 252+j, RVB);
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	b29a      	uxth	r2, r3
 8002288:	f240 1331 	movw	r3, #305	; 0x131
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	b298      	uxth	r0, r3
 8002290:	7efb      	ldrb	r3, [r7, #27]
 8002292:	b29b      	uxth	r3, r3
 8002294:	33fc      	adds	r3, #252	; 0xfc
 8002296:	b29b      	uxth	r3, r3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4619      	mov	r1, r3
 800229c:	f001 fdb4 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80022a0:	7efb      	ldrb	r3, [r7, #27]
 80022a2:	3301      	adds	r3, #1
 80022a4:	76fb      	strb	r3, [r7, #27]
 80022a6:	7efb      	ldrb	r3, [r7, #27]
 80022a8:	2b11      	cmp	r3, #17
 80022aa:	d9ea      	bls.n	8002282 <AfficheTonalite+0x132>
	for(uint32_t i = 252;i<253; i = i-4)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3b04      	subs	r3, #4
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2bfc      	cmp	r3, #252	; 0xfc
 80022b6:	d9dc      	bls.n	8002272 <AfficheTonalite+0x122>
		}
   }
	//affichage B+R :
	for(uint32_t i = 0;i<256; i = i+4)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e01e      	b.n	80022fc <AfficheTonalite+0x1ac>
   {
		RVB = 0xFF0000FF | (i<<16);// Bleu à 255, Red augmente
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <AfficheTonalite+0x210>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	74fb      	strb	r3, [r7, #19]
 80022cc:	e010      	b.n	80022f0 <AfficheTonalite+0x1a0>
		{
			BSP_LCD_DrawPixel(306+i/4, 252+j, RVB);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80022d8:	b298      	uxth	r0, r3
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	33fc      	adds	r3, #252	; 0xfc
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f001 fd8f 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	3301      	adds	r3, #1
 80022ee:	74fb      	strb	r3, [r7, #19]
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	d9eb      	bls.n	80022ce <AfficheTonalite+0x17e>
	for(uint32_t i = 0;i<256; i = i+4)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3304      	adds	r3, #4
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2bff      	cmp	r3, #255	; 0xff
 8002300:	d9dd      	bls.n	80022be <AfficheTonalite+0x16e>
		}
   }
	//affichage R+B :
	for(uint32_t i = 252;i<253; i = i-4)
 8002302:	23fc      	movs	r3, #252	; 0xfc
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e01e      	b.n	8002346 <AfficheTonalite+0x1f6>
   {
		RVB = 0xFFFF0000 | (i);// Red à 255, Bleu diminue
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <AfficheTonalite+0x20c>)
 800230c:	4313      	orrs	r3, r2
 800230e:	607b      	str	r3, [r7, #4]
		for(char j = 0; j<18; j++)
 8002310:	2300      	movs	r3, #0
 8002312:	72fb      	strb	r3, [r7, #11]
 8002314:	e011      	b.n	800233a <AfficheTonalite+0x1ea>
		{
			BSP_LCD_DrawPixel(370+(63-i/4), 252+j, RVB);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	b29a      	uxth	r2, r3
 800231c:	f240 13b1 	movw	r3, #433	; 0x1b1
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	b298      	uxth	r0, r3
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	b29b      	uxth	r3, r3
 8002328:	33fc      	adds	r3, #252	; 0xfc
 800232a:	b29b      	uxth	r3, r3
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4619      	mov	r1, r3
 8002330:	f001 fd6a 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	3301      	adds	r3, #1
 8002338:	72fb      	strb	r3, [r7, #11]
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	2b11      	cmp	r3, #17
 800233e:	d9ea      	bls.n	8002316 <AfficheTonalite+0x1c6>
	for(uint32_t i = 252;i<253; i = i-4)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3b04      	subs	r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2bfc      	cmp	r3, #252	; 0xfc
 800234a:	d9dd      	bls.n	8002308 <AfficheTonalite+0x1b8>
		}
   }
	osDelay(200);
 800234c:	20c8      	movs	r0, #200	; 0xc8
 800234e:	f00a f946 	bl	800c5de <osDelay>
}
 8002352:	bf00      	nop
 8002354:	3738      	adds	r7, #56	; 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	ffff0000 	.word	0xffff0000
 8002360:	ff0000ff 	.word	0xff0000ff

08002364 <AfficheLuminosite>:

/*
 * Affiche le dégradé de luminosité pour que l'utilisateur puisse faire son choix
 */
void AfficheLuminosite(float ton, float sat)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	ed87 0a01 	vstr	s0, [r7, #4]
 800236e:	edc7 0a00 	vstr	s1, [r7]
	float lum;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f001 fa40 	bl	80037f8 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f001 fa4c 	bl	8003818 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002380:	2315      	movs	r3, #21
 8002382:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002386:	21fb      	movs	r1, #251	; 0xfb
 8002388:	2000      	movs	r0, #0
 800238a:	f001 fd85 	bl	8003e98 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e02e      	b.n	80023f2 <AfficheLuminosite+0x8e>
    {
		lum = (float)i/255;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800239e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002408 <AfficheLuminosite+0xa4>
 80023a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a6:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 80023aa:	ed97 1a03 	vldr	s2, [r7, #12]
 80023ae:	edd7 0a00 	vldr	s1, [r7]
 80023b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80023b6:	f000 f87d 	bl	80024b4 <FindCouleur>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c0:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	74fb      	strb	r3, [r7, #19]
 80023c6:	e00e      	b.n	80023e6 <AfficheLuminosite+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3364      	adds	r3, #100	; 0x64
 80023ce:	b298      	uxth	r0, r3
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	33fc      	adds	r3, #252	; 0xfc
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4619      	mov	r1, r3
 80023dc:	f001 fd14 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	3301      	adds	r3, #1
 80023e4:	74fb      	strb	r3, [r7, #19]
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b11      	cmp	r3, #17
 80023ea:	d9ed      	bls.n	80023c8 <AfficheLuminosite+0x64>
	for(uint32_t i = 0;i<256;i++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2bff      	cmp	r3, #255	; 0xff
 80023f6:	d9cd      	bls.n	8002394 <AfficheLuminosite+0x30>
		}
    }
	osDelay(200);
 80023f8:	20c8      	movs	r0, #200	; 0xc8
 80023fa:	f00a f8f0 	bl	800c5de <osDelay>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	437f0000 	.word	0x437f0000

0800240c <AfficheSaturation>:

/*
 * Affiche le dégradé de saturation pour que l'utilisateur puisse faire son choix
 */
void AfficheSaturation(float ton, float lum)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	ed87 0a01 	vstr	s0, [r7, #4]
 8002416:	edc7 0a00 	vstr	s1, [r7]
	float sat;
	uint32_t color;
	BSP_LCD_SelectLayer(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f001 f9ec 	bl	80037f8 <BSP_LCD_SelectLayer>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f001 f9f8 	bl	8003818 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 251, 480, 21);
 8002428:	2315      	movs	r3, #21
 800242a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800242e:	21fb      	movs	r1, #251	; 0xfb
 8002430:	2000      	movs	r0, #0
 8002432:	f001 fd31 	bl	8003e98 <BSP_LCD_FillRect>
	for(uint32_t i = 0;i<256;i++)
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e02e      	b.n	800249a <AfficheSaturation+0x8e>
    {
		sat = (float)i/255;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002446:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80024b0 <AfficheSaturation+0xa4>
 800244a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800244e:	edc7 7a03 	vstr	s15, [r7, #12]
		color = FindCouleur(ton, sat, lum) | 0xFF000000;
 8002452:	ed97 1a00 	vldr	s2, [r7]
 8002456:	edd7 0a03 	vldr	s1, [r7, #12]
 800245a:	ed97 0a01 	vldr	s0, [r7, #4]
 800245e:	f000 f829 	bl	80024b4 <FindCouleur>
 8002462:	4603      	mov	r3, r0
 8002464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002468:	60bb      	str	r3, [r7, #8]
		for(char j = 0; j<18; j++)
 800246a:	2300      	movs	r3, #0
 800246c:	74fb      	strb	r3, [r7, #19]
 800246e:	e00e      	b.n	800248e <AfficheSaturation+0x82>
		{
			BSP_LCD_DrawPixel(100+i, 252+j, color);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	b29b      	uxth	r3, r3
 8002474:	3364      	adds	r3, #100	; 0x64
 8002476:	b298      	uxth	r0, r3
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	b29b      	uxth	r3, r3
 800247c:	33fc      	adds	r3, #252	; 0xfc
 800247e:	b29b      	uxth	r3, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	4619      	mov	r1, r3
 8002484:	f001 fcc0 	bl	8003e08 <BSP_LCD_DrawPixel>
		for(char j = 0; j<18; j++)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	3301      	adds	r3, #1
 800248c:	74fb      	strb	r3, [r7, #19]
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b11      	cmp	r3, #17
 8002492:	d9ed      	bls.n	8002470 <AfficheSaturation+0x64>
	for(uint32_t i = 0;i<256;i++)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2bff      	cmp	r3, #255	; 0xff
 800249e:	d9cd      	bls.n	800243c <AfficheSaturation+0x30>
		}
    }
	osDelay(200);
 80024a0:	20c8      	movs	r0, #200	; 0xc8
 80024a2:	f00a f89c 	bl	800c5de <osDelay>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	437f0000 	.word	0x437f0000

080024b4 <FindCouleur>:
/*
 * trouve la couleur RVB à partir de la couleur TSL:
 * renvoi un entier de la forme RGB-888 : 0xRRVVBB
 */
uint32_t FindCouleur(float ton, float sat, float lum)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80024be:	edc7 0a02 	vstr	s1, [r7, #8]
 80024c2:	ed87 1a01 	vstr	s2, [r7, #4]
	char Red, Green, Blue;
	uint32_t color = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
	float R = 0;
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
	float V = 0;
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
	float B = 0;
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
	float C;
	float m;
	float T_prime;
	float X;
	C = lum*sat;
 80024dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80024e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	m = lum-C;
 80024ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80024f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f8:	edc7 7a08 	vstr	s15, [r7, #32]
	T_prime = ton/60;
 80024fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002500:	eddf 6a61 	vldr	s13, [pc, #388]	; 8002688 <FindCouleur+0x1d4>
 8002504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002508:	edc7 7a07 	vstr	s15, [r7, #28]
	X = C*(1-absolu((modulo(T_prime, 2))-1));
 800250c:	2002      	movs	r0, #2
 800250e:	ed97 0a07 	vldr	s0, [r7, #28]
 8002512:	f000 f917 	bl	8002744 <modulo>
 8002516:	eeb0 7a40 	vmov.f32	s14, s0
 800251a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800251e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002522:	eeb0 0a67 	vmov.f32	s0, s15
 8002526:	f000 f92f 	bl	8002788 <absolu>
 800252a:	eeb0 7a40 	vmov.f32	s14, s0
 800252e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002536:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800253a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253e:	edc7 7a06 	vstr	s15, [r7, #24]
	if((T_prime>=0) && (T_prime<1))
 8002542:	edd7 7a07 	vldr	s15, [r7, #28]
 8002546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	db0d      	blt.n	800256c <FindCouleur+0xb8>
 8002550:	edd7 7a07 	vldr	s15, [r7, #28]
 8002554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	d504      	bpl.n	800256c <FindCouleur+0xb8>
	{
		R = C;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
		V = X;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
 800256a:	e044      	b.n	80025f6 <FindCouleur+0x142>
	}
	else if(T_prime<2)
 800256c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002570:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	d504      	bpl.n	8002588 <FindCouleur+0xd4>
	{
		R = X;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
		V = C;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	e036      	b.n	80025f6 <FindCouleur+0x142>
	}
	else if(T_prime<3)
 8002588:	edd7 7a07 	vldr	s15, [r7, #28]
 800258c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d504      	bpl.n	80025a4 <FindCouleur+0xf0>
	{
		B = X;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = C;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
 80025a2:	e028      	b.n	80025f6 <FindCouleur+0x142>
	}
	else if(T_prime<4)
 80025a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d504      	bpl.n	80025c0 <FindCouleur+0x10c>
	{
		B = C;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		V = X;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	e01a      	b.n	80025f6 <FindCouleur+0x142>
	}
	else if(T_prime<5)
 80025c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80025c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d504      	bpl.n	80025dc <FindCouleur+0x128>
	{
		B = C;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		R = X;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	e00c      	b.n	80025f6 <FindCouleur+0x142>
	}
	else if(T_prime<2)
 80025dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80025e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	d503      	bpl.n	80025f6 <FindCouleur+0x142>
	{
		R = C;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
		B = X;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	R = (R+m)*255;
 80025f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80025fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800268c <FindCouleur+0x1d8>
 8002606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	V = (V+m)*255;
 800260e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002612:	edd7 7a08 	vldr	s15, [r7, #32]
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800268c <FindCouleur+0x1d8>
 800261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002622:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	B = (B+m)*255;
 8002626:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800262a:	edd7 7a08 	vldr	s15, [r7, #32]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800268c <FindCouleur+0x1d8>
 8002636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	Red = (int)R;
 800263e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002646:	edc7 7a00 	vstr	s15, [r7]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	75fb      	strb	r3, [r7, #23]
	Green = (int)V;
 800264e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002656:	edc7 7a00 	vstr	s15, [r7]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	75bb      	strb	r3, [r7, #22]
	Blue = (int)B;
 800265e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	edc7 7a00 	vstr	s15, [r7]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	757b      	strb	r3, [r7, #21]
	color = (Red<<16)+(Green<<8)+Blue;
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	7dbb      	ldrb	r3, [r7, #22]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	441a      	add	r2, r3
 8002678:	7d7b      	ldrb	r3, [r7, #21]
 800267a:	4413      	add	r3, r2
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
	return color;
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	; 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	42700000 	.word	0x42700000
 800268c:	437f0000 	.word	0x437f0000

08002690 <FindTonalite>:
/*
 * Renvoi la tonalité entre 0° et 360° à partir de la position du doigt sur la barre
 */
float FindTonalite(uint16_t pos)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
	float ton;
	ton = (float)pos;
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a4:	edc7 7a03 	vstr	s15, [r7, #12]
	ton = (ton/383)*360;
 80026a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ac:	eddf 6a09 	vldr	s13, [pc, #36]	; 80026d4 <FindTonalite+0x44>
 80026b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80026d8 <FindTonalite+0x48>
 80026b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026bc:	edc7 7a03 	vstr	s15, [r7, #12]
	return ton;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	ee07 3a90 	vmov	s15, r3
}
 80026c6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	43bf8000 	.word	0x43bf8000
 80026d8:	43b40000 	.word	0x43b40000

080026dc <FindLuminosite>:

/*
 * Renvoi la Luminosité entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindLuminosite(uint16_t pos)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
	return (float) pos/255;
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800270c <FindLuminosite+0x30>
 80026f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80026fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	437f0000 	.word	0x437f0000

08002710 <FindSaturation>:

/*
 * Renvoi la Saturation entre 0 et 1 à partir de la position du doigt sur la barre
 */
float FindSaturation(uint16_t pos)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
	return (float)pos/255;
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002724:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002740 <FindSaturation+0x30>
 8002728:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800272c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002730:	eeb0 0a67 	vmov.f32	s0, s15
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	437f0000 	.word	0x437f0000

08002744 <modulo>:

float modulo(float val, char mod)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	ed87 0a01 	vstr	s0, [r7, #4]
 800274e:	4603      	mov	r3, r0
 8002750:	70fb      	strb	r3, [r7, #3]
	uint32_t q;
	q = (int) val/mod;
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800275a:	ee17 2a90 	vmov	r2, s15
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	fb92 f3f3 	sdiv	r3, r2, r3
 8002764:	60fb      	str	r3, [r7, #12]
	return(val - 2*q);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	ed97 7a01 	vldr	s14, [r7, #4]
 8002776:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800277a:	eeb0 0a67 	vmov.f32	s0, s15
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <absolu>:

float absolu(float val)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(val<0) return -val;
 8002792:	edd7 7a01 	vldr	s15, [r7, #4]
 8002796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	d504      	bpl.n	80027aa <absolu+0x22>
 80027a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a4:	eef1 7a67 	vneg.f32	s15, s15
 80027a8:	e001      	b.n	80027ae <absolu+0x26>
	else return val;
 80027aa:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f009 ff0a 	bl	800c5de <osDelay>
 80027ca:	e7fb      	b.n	80027c4 <StartDefaultTask+0x8>

080027cc <StartMode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMode */
void StartMode(void const * argument)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b0b8      	sub	sp, #224	; 0xe0
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMode */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 80027d4:	f00b f8b6 	bl	800d944 <xTaskGetTickCount>
 80027d8:	4603      	mov	r3, r0
 80027da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  static TS_StateTypeDef  TS_State;
  char sous_menu = 0; // permet de savoir si on est dans un sous menu
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  char menu_couleur = 0; // permet de savoir si on est dans un des sous_menu couleur (tonalité, saturation, luminosité)
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
  //valeur TSL pour la couleur
  float ton = 180.0;
 80027ea:	4bb7      	ldr	r3, [pc, #732]	; (8002ac8 <StartMode+0x2fc>)
 80027ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  float lum = 0.5;
 80027f0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80027f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  float sat = 0.5;
 80027f8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  char layer = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  char text[] = "   Layer   |   Pinceau   | Transparence |   Couleur   |    Taille   ";
 8002806:	4ab1      	ldr	r2, [pc, #708]	; (8002acc <StartMode+0x300>)
 8002808:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800280c:	4611      	mov	r1, r2
 800280e:	2245      	movs	r2, #69	; 0x45
 8002810:	4618      	mov	r0, r3
 8002812:	f00c fa41 	bl	800ec98 <memcpy>
  char text_layer[] = "Calque 1        |        Calque 2";
 8002816:	4bae      	ldr	r3, [pc, #696]	; (8002ad0 <StartMode+0x304>)
 8002818:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800281c:	461d      	mov	r5, r3
 800281e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	8023      	strh	r3, [r4, #0]
  char text_alpha[] = "Choisir la transparence : ";
 800282a:	4baa      	ldr	r3, [pc, #680]	; (8002ad4 <StartMode+0x308>)
 800282c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002830:	461d      	mov	r5, r3
 8002832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002836:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800283a:	c403      	stmia	r4!, {r0, r1}
 800283c:	8022      	strh	r2, [r4, #0]
 800283e:	3402      	adds	r4, #2
 8002840:	0c13      	lsrs	r3, r2, #16
 8002842:	7023      	strb	r3, [r4, #0]
  char text_couleur[] = "tonalite  |    saturation    | luminosite";
 8002844:	4ba4      	ldr	r3, [pc, #656]	; (8002ad8 <StartMode+0x30c>)
 8002846:	f107 040c 	add.w	r4, r7, #12
 800284a:	461d      	mov	r5, r3
 800284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002854:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002858:	c403      	stmia	r4!, {r0, r1}
 800285a:	8022      	strh	r2, [r4, #0]
  couleur = FindCouleur(180,0.5,0.5)|0xFF000000;
 800285c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002860:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002864:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8002adc <StartMode+0x310>
 8002868:	f7ff fe24 	bl	80024b4 <FindCouleur>
 800286c:	4603      	mov	r3, r0
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	4a9b      	ldr	r2, [pc, #620]	; (8002ae0 <StartMode+0x314>)
 8002874:	6013      	str	r3, [r2, #0]
  for(;;)
  {
	  //xQueueReceive(myQueueUARTHandle, &etat, 25);
	  switch(etat)
 8002876:	4b9b      	ldr	r3, [pc, #620]	; (8002ae4 <StartMode+0x318>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b06      	cmp	r3, #6
 800287c:	f200 83b9 	bhi.w	8002ff2 <StartMode+0x826>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <StartMode+0xbc>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002ff3 	.word	0x08002ff3
 800288c:	080028a5 	.word	0x080028a5
 8002890:	08002995 	.word	0x08002995
 8002894:	08002a5b 	.word	0x08002a5b
 8002898:	08002a63 	.word	0x08002a63
 800289c:	08002bff 	.word	0x08002bff
 80028a0:	08002fe1 	.word	0x08002fe1
		  break;
	  /*
	   * etat d'affichage du menu
	   */
	  case 1 :
		  if(myMutexLCDHandle != NULL)
 80028a4:	4b90      	ldr	r3, [pc, #576]	; (8002ae8 <StartMode+0x31c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d06f      	beq.n	800298c <StartMode+0x1c0>
		  {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80028ac:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <StartMode+0x31c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f00a face 	bl	800ce54 <xQueueSemaphoreTake>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d166      	bne.n	800298c <StartMode+0x1c0>
			   {
				   BSP_LCD_SelectLayer(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 ff9a 	bl	80037f8 <BSP_LCD_SelectLayer>
				   BSP_LCD_SetFont(&Font12);
 80028c4:	4889      	ldr	r0, [pc, #548]	; (8002aec <StartMode+0x320>)
 80028c6:	f000 ffd9 	bl	800387c <BSP_LCD_SetFont>
				   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80028ca:	f04f 30ff 	mov.w	r0, #4294967295
 80028ce:	f000 ffa3 	bl	8003818 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(0, 251, 480, 21);
 80028d2:	2315      	movs	r3, #21
 80028d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028d8:	21fb      	movs	r1, #251	; 0xfb
 80028da:	2000      	movs	r0, #0
 80028dc:	f001 fadc 	bl	8003e98 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80028e0:	4883      	ldr	r0, [pc, #524]	; (8002af0 <StartMode+0x324>)
 80028e2:	f000 ff99 	bl	8003818 <BSP_LCD_SetTextColor>
				   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text, CENTER_MODE);
 80028e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80028ea:	2301      	movs	r3, #1
 80028ec:	21fc      	movs	r1, #252	; 0xfc
 80028ee:	2000      	movs	r0, #0
 80028f0:	f001 f860 	bl	80039b4 <BSP_LCD_DisplayStringAt>
				   BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80028f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028f8:	f000 ff8e 	bl	8003818 <BSP_LCD_SetTextColor>
				   LCD_PAINTBRUSH(480-taille_menu/2, 3*taille_menu/2, taille_menu/2-5);
 80028fc:	2214      	movs	r2, #20
 80028fe:	214b      	movs	r1, #75	; 0x4b
 8002900:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002904:	f7ff fc0a 	bl	800211c <LCD_PAINTBRUSH>
				   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 8002908:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800290c:	f000 ff84 	bl	8003818 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <StartMode+0x328>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	00d2      	lsls	r2, r2, #3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	461a      	mov	r2, r3
 800291e:	00d2      	lsls	r2, r2, #3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b29b      	uxth	r3, r3
 8002926:	3baa      	subs	r3, #170	; 0xaa
 8002928:	b298      	uxth	r0, r3
 800292a:	2305      	movs	r3, #5
 800292c:	2223      	movs	r2, #35	; 0x23
 800292e:	f240 1109 	movw	r1, #265	; 0x109
 8002932:	f001 fab1 	bl	8003e98 <BSP_LCD_FillRect>
				   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8002936:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <StartMode+0x314>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800293e:	4618      	mov	r0, r3
 8002940:	f000 ff6a 	bl	8003818 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8002944:	2214      	movs	r2, #20
 8002946:	2119      	movs	r1, #25
 8002948:	f240 10c7 	movw	r0, #455	; 0x1c7
 800294c:	f001 fb1e 	bl	8003f8c <BSP_LCD_FillCircle>
				   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002950:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <StartMode+0x314>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002958:	4618      	mov	r0, r3
 800295a:	f000 ff5d 	bl	8003818 <BSP_LCD_SetTextColor>
				   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 800295e:	2214      	movs	r2, #20
 8002960:	217d      	movs	r1, #125	; 0x7d
 8002962:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002966:	f001 fb11 	bl	8003f8c <BSP_LCD_FillCircle>
				   BSP_LCD_SelectLayer(layer);
 800296a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800296e:	4618      	mov	r0, r3
 8002970:	f000 ff42 	bl	80037f8 <BSP_LCD_SelectLayer>
				   BSP_LCD_SetTextColor(couleur);
 8002974:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <StartMode+0x314>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 ff4d 	bl	8003818 <BSP_LCD_SetTextColor>
				   xSemaphoreGive(myMutexLCDHandle);
 800297e:	4b5a      	ldr	r3, [pc, #360]	; (8002ae8 <StartMode+0x31c>)
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	2300      	movs	r3, #0
 8002984:	2200      	movs	r2, #0
 8002986:	2100      	movs	r1, #0
 8002988:	f00a f8c6 	bl	800cb18 <xQueueGenericSend>
			   }
		   }
		  etat = 0;
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <StartMode+0x318>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
		  break;
 8002992:	e32e      	b.n	8002ff2 <StartMode+0x826>
	  /*
	   * etat de sélection du calque
	   */
	  case 2 :
		  if(sous_menu == 0)
 8002994:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002998:	2b00      	cmp	r3, #0
 800299a:	d12e      	bne.n	80029fa <StartMode+0x22e>
		  {
			  if(myMutexLCDHandle != NULL)
 800299c:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <StartMode+0x31c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02a      	beq.n	80029fa <StartMode+0x22e>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <StartMode+0x31c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f00a fa52 	bl	800ce54 <xQueueSemaphoreTake>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d121      	bne.n	80029fa <StartMode+0x22e>
				   {
					   BSP_LCD_SelectLayer(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f000 ff1e 	bl	80037f8 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetFont(&Font12);
 80029bc:	484b      	ldr	r0, [pc, #300]	; (8002aec <StartMode+0x320>)
 80029be:	f000 ff5d 	bl	800387c <BSP_LCD_SetFont>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80029c2:	f04f 30ff 	mov.w	r0, #4294967295
 80029c6:	f000 ff27 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 80029ca:	2315      	movs	r3, #21
 80029cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80029d0:	21fb      	movs	r1, #251	; 0xfb
 80029d2:	2000      	movs	r0, #0
 80029d4:	f001 fa60 	bl	8003e98 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80029d8:	4845      	ldr	r0, [pc, #276]	; (8002af0 <StartMode+0x324>)
 80029da:	f000 ff1d 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_layer, CENTER_MODE);
 80029de:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80029e2:	2301      	movs	r3, #1
 80029e4:	21fc      	movs	r1, #252	; 0xfc
 80029e6:	2000      	movs	r0, #0
 80029e8:	f000 ffe4 	bl	80039b4 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 80029ec:	4b3e      	ldr	r3, [pc, #248]	; (8002ae8 <StartMode+0x31c>)
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	2300      	movs	r3, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	f00a f88f 	bl	800cb18 <xQueueGenericSend>
				   }
			   }

		  }
		  sous_menu = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		  BSP_TS_GetState(&TS_State);
 8002a00:	483d      	ldr	r0, [pc, #244]	; (8002af8 <StartMode+0x32c>)
 8002a02:	f001 ff71 	bl	80048e8 <BSP_TS_GetState>
		  if(TS_State.touchDetected)
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <StartMode+0x32c>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01c      	beq.n	8002a48 <StartMode+0x27c>
		  {
			  if((TS_State.touchX[0]<240) && TS_State.touchY[0] > 250)
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <StartMode+0x32c>)
 8002a10:	885b      	ldrh	r3, [r3, #2]
 8002a12:	2bef      	cmp	r3, #239	; 0xef
 8002a14:	d80a      	bhi.n	8002a2c <StartMode+0x260>
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <StartMode+0x32c>)
 8002a18:	899b      	ldrh	r3, [r3, #12]
 8002a1a:	2bfa      	cmp	r3, #250	; 0xfa
 8002a1c:	d906      	bls.n	8002a2c <StartMode+0x260>
			  {
				  layer = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  sous_menu = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002a2a:	e00d      	b.n	8002a48 <StartMode+0x27c>
			  }
			  else if((TS_State.touchX[0]>240) && TS_State.touchY[0] > 250)
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <StartMode+0x32c>)
 8002a2e:	885b      	ldrh	r3, [r3, #2]
 8002a30:	2bf0      	cmp	r3, #240	; 0xf0
 8002a32:	d909      	bls.n	8002a48 <StartMode+0x27c>
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <StartMode+0x32c>)
 8002a36:	899b      	ldrh	r3, [r3, #12]
 8002a38:	2bfa      	cmp	r3, #250	; 0xfa
 8002a3a:	d905      	bls.n	8002a48 <StartMode+0x27c>
			  {
				  layer = 1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
				  sous_menu = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			  }
		  }
		  if(sous_menu == 0) etat = 1; //on revient au menu de base
 8002a48:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 82cb 	bne.w	8002fe8 <StartMode+0x81c>
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <StartMode+0x318>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]
		  break;
 8002a58:	e2c6      	b.n	8002fe8 <StartMode+0x81c>
	  /*
	   * etat de sélection du pinceau
	   */
	  case 3 :
		  etat = 0;
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <StartMode+0x318>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
		  break;
 8002a60:	e2c7      	b.n	8002ff2 <StartMode+0x826>
	  /*
	   * etat de sélection de la transparence
	   */
	  case 4 :
		  if(sous_menu == 0)
 8002a62:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d171      	bne.n	8002b4e <StartMode+0x382>
		  {
			  if(myMutexLCDHandle != NULL)
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <StartMode+0x31c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06d      	beq.n	8002b4e <StartMode+0x382>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <StartMode+0x31c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00a f9ea 	bl	800ce54 <xQueueSemaphoreTake>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d163      	bne.n	8002b4e <StartMode+0x382>
				   {
					   BSP_LCD_SelectLayer(1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 feb6 	bl	80037f8 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f000 fec2 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002a94:	2315      	movs	r3, #21
 8002a96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002a9a:	21fb      	movs	r1, #251	; 0xfb
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f001 f9fb 	bl	8003e98 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002aa2:	4813      	ldr	r0, [pc, #76]	; (8002af0 <StartMode+0x324>)
 8002aa4:	f000 feb8 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_alpha, LEFT_MODE);
 8002aa8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002aac:	2303      	movs	r3, #3
 8002aae:	21fc      	movs	r1, #252	; 0xfc
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f000 ff7f 	bl	80039b4 <BSP_LCD_DisplayStringAt>
					   for(uint32_t i = 0;i<256; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002abc:	e03c      	b.n	8002b38 <StartMode+0x36c>
					   {
						   for(char j = 0; j<18; j++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8002ac4:	e02f      	b.n	8002b26 <StartMode+0x35a>
 8002ac6:	bf00      	nop
 8002ac8:	43340000 	.word	0x43340000
 8002acc:	0800f5b4 	.word	0x0800f5b4
 8002ad0:	0800f5fc 	.word	0x0800f5fc
 8002ad4:	0800f620 	.word	0x0800f620
 8002ad8:	0800f63c 	.word	0x0800f63c
 8002adc:	43340000 	.word	0x43340000
 8002ae0:	20008b14 	.word	0x20008b14
 8002ae4:	20000029 	.word	0x20000029
 8002ae8:	200088c0 	.word	0x200088c0
 8002aec:	20000034 	.word	0x20000034
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	2000002a 	.word	0x2000002a
 8002af8:	2000035c 	.word	0x2000035c
						   {
							   BSP_LCD_DrawPixel(200+i, 252+j, i << 24);
 8002afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	33c8      	adds	r3, #200	; 0xc8
 8002b04:	b298      	uxth	r0, r3
 8002b06:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	33fc      	adds	r3, #252	; 0xfc
 8002b0e:	b299      	uxth	r1, r3
 8002b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	461a      	mov	r2, r3
 8002b18:	f001 f976 	bl	8003e08 <BSP_LCD_DrawPixel>
						   for(char j = 0; j<18; j++)
 8002b1c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8002b26:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002b2a:	2b11      	cmp	r3, #17
 8002b2c:	d9e6      	bls.n	8002afc <StartMode+0x330>
					   for(uint32_t i = 0;i<256; i++)
 8002b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b32:	3301      	adds	r3, #1
 8002b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3c:	2bff      	cmp	r3, #255	; 0xff
 8002b3e:	d9be      	bls.n	8002abe <StartMode+0x2f2>
						   }
					   }
					   xSemaphoreGive(myMutexLCDHandle);
 8002b40:	4b9a      	ldr	r3, [pc, #616]	; (8002dac <StartMode+0x5e0>)
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	f009 ffe5 	bl	800cb18 <xQueueGenericSend>
				   }
			   }
		  }
		  sous_menu = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		  BSP_TS_GetState(&TS_State);
 8002b54:	4896      	ldr	r0, [pc, #600]	; (8002db0 <StartMode+0x5e4>)
 8002b56:	f001 fec7 	bl	80048e8 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002b5a:	e043      	b.n	8002be4 <StartMode+0x418>
		  {
			  if((TS_State.touchX[0]>200) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<455))
 8002b5c:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <StartMode+0x5e4>)
 8002b5e:	885b      	ldrh	r3, [r3, #2]
 8002b60:	2bc8      	cmp	r3, #200	; 0xc8
 8002b62:	d93f      	bls.n	8002be4 <StartMode+0x418>
 8002b64:	4b92      	ldr	r3, [pc, #584]	; (8002db0 <StartMode+0x5e4>)
 8002b66:	899b      	ldrh	r3, [r3, #12]
 8002b68:	2bfa      	cmp	r3, #250	; 0xfa
 8002b6a:	d93b      	bls.n	8002be4 <StartMode+0x418>
 8002b6c:	4b90      	ldr	r3, [pc, #576]	; (8002db0 <StartMode+0x5e4>)
 8002b6e:	885b      	ldrh	r3, [r3, #2]
 8002b70:	f5b3 7fe3 	cmp.w	r3, #454	; 0x1c6
 8002b74:	d836      	bhi.n	8002be4 <StartMode+0x418>
			  {
				  couleur &= 0x00FFFFFF; //on enlève l'ancienne transparence
 8002b76:	4b8f      	ldr	r3, [pc, #572]	; (8002db4 <StartMode+0x5e8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b7e:	4a8d      	ldr	r2, [pc, #564]	; (8002db4 <StartMode+0x5e8>)
 8002b80:	6013      	str	r3, [r2, #0]
				  couleur |= ((TS_State.touchX[0]-200)<<24);
 8002b82:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <StartMode+0x5e4>)
 8002b84:	885b      	ldrh	r3, [r3, #2]
 8002b86:	3bc8      	subs	r3, #200	; 0xc8
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <StartMode+0x5e8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	4a88      	ldr	r2, [pc, #544]	; (8002db4 <StartMode+0x5e8>)
 8002b94:	6013      	str	r3, [r2, #0]
				  if(myMutexLCDHandle != NULL)
 8002b96:	4b85      	ldr	r3, [pc, #532]	; (8002dac <StartMode+0x5e0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01c      	beq.n	8002bd8 <StartMode+0x40c>
				  {
					   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002b9e:	4b83      	ldr	r3, [pc, #524]	; (8002dac <StartMode+0x5e0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2164      	movs	r1, #100	; 0x64
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00a f955 	bl	800ce54 <xQueueSemaphoreTake>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d113      	bne.n	8002bd8 <StartMode+0x40c>
					   {
						   BSP_LCD_SetTextColor(couleur & 0xFF000000);
 8002bb0:	4b80      	ldr	r3, [pc, #512]	; (8002db4 <StartMode+0x5e8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fe2d 	bl	8003818 <BSP_LCD_SetTextColor>
						   BSP_LCD_FillCircle(480-taille_menu/2, 5*taille_menu/2, taille_menu/2-5);
 8002bbe:	2214      	movs	r2, #20
 8002bc0:	217d      	movs	r1, #125	; 0x7d
 8002bc2:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002bc6:	f001 f9e1 	bl	8003f8c <BSP_LCD_FillCircle>
						   xSemaphoreGive(myMutexLCDHandle);
 8002bca:	4b78      	ldr	r3, [pc, #480]	; (8002dac <StartMode+0x5e0>)
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	f009 ffa0 	bl	800cb18 <xQueueGenericSend>
					   }
				   }
				  sous_menu = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
				  BSP_TS_GetState(&TS_State);
 8002bde:	4874      	ldr	r0, [pc, #464]	; (8002db0 <StartMode+0x5e4>)
 8002be0:	f001 fe82 	bl	80048e8 <BSP_TS_GetState>
		  while(TS_State.touchDetected)
 8002be4:	4b72      	ldr	r3, [pc, #456]	; (8002db0 <StartMode+0x5e4>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1b7      	bne.n	8002b5c <StartMode+0x390>
			  }
		  }
		  if(sous_menu == 0) etat = 1;
 8002bec:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 81fb 	bne.w	8002fec <StartMode+0x820>
 8002bf6:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <StartMode+0x5ec>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
		  break;
 8002bfc:	e1f6      	b.n	8002fec <StartMode+0x820>
	  /*
	   * etat de sélection de la couleur
	   */
	  case 5 :
		  if(sous_menu == 0)
 8002bfe:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d12c      	bne.n	8002c60 <StartMode+0x494>
		  {
			  if(myMutexLCDHandle != NULL)
 8002c06:	4b69      	ldr	r3, [pc, #420]	; (8002dac <StartMode+0x5e0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d028      	beq.n	8002c60 <StartMode+0x494>
			  {
				   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002c0e:	4b67      	ldr	r3, [pc, #412]	; (8002dac <StartMode+0x5e0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00a f91c 	bl	800ce54 <xQueueSemaphoreTake>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d11e      	bne.n	8002c60 <StartMode+0x494>
				   {
					   BSP_LCD_SelectLayer(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 fde8 	bl	80037f8 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f000 fdf4 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(0, 251, 480, 21);
 8002c30:	2315      	movs	r3, #21
 8002c32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c36:	21fb      	movs	r1, #251	; 0xfb
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f001 f92d 	bl	8003e98 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002c3e:	485f      	ldr	r0, [pc, #380]	; (8002dbc <StartMode+0x5f0>)
 8002c40:	f000 fdea 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_DisplayStringAt(0, 252,(uint8_t*) text_couleur, CENTER_MODE);
 8002c44:	f107 020c 	add.w	r2, r7, #12
 8002c48:	2301      	movs	r3, #1
 8002c4a:	21fc      	movs	r1, #252	; 0xfc
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f000 feb1 	bl	80039b4 <BSP_LCD_DisplayStringAt>
					   xSemaphoreGive(myMutexLCDHandle);
 8002c52:	4b56      	ldr	r3, [pc, #344]	; (8002dac <StartMode+0x5e0>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f009 ff5c 	bl	800cb18 <xQueueGenericSend>
				   }
			  }
		  }
		  sous_menu = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		  switch(menu_couleur)
 8002c66:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	f200 81b0 	bhi.w	8002fd0 <StartMode+0x804>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <StartMode+0x4ac>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002da3 	.word	0x08002da3
 8002c80:	08002e6b 	.word	0x08002e6b
 8002c84:	08002f1d 	.word	0x08002f1d
		  {
		  /*
		   * premier sous_menu : choix entre tonalité, saturation et luminosité
		   */
		  case 0 :
			  BSP_TS_GetState(&TS_State);
 8002c88:	4849      	ldr	r0, [pc, #292]	; (8002db0 <StartMode+0x5e4>)
 8002c8a:	f001 fe2d 	bl	80048e8 <BSP_TS_GetState>
			  if(TS_State.touchDetected && menu_couleur == 0)
 8002c8e:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <StartMode+0x5e4>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 819b 	beq.w	8002fce <StartMode+0x802>
 8002c98:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 8196 	bne.w	8002fce <StartMode+0x802>
			  {
				  if((TS_State.touchX[0]<170) && TS_State.touchY[0] > 250)
 8002ca2:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <StartMode+0x5e4>)
 8002ca4:	885b      	ldrh	r3, [r3, #2]
 8002ca6:	2ba9      	cmp	r3, #169	; 0xa9
 8002ca8:	d81e      	bhi.n	8002ce8 <StartMode+0x51c>
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <StartMode+0x5e4>)
 8002cac:	899b      	ldrh	r3, [r3, #12]
 8002cae:	2bfa      	cmp	r3, #250	; 0xfa
 8002cb0:	d91a      	bls.n	8002ce8 <StartMode+0x51c>
					  // clique sur tonalité
				  {
					  menu_couleur = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					  if(myMutexLCDHandle != NULL)
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <StartMode+0x5e0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d06c      	beq.n	8002d9a <StartMode+0x5ce>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <StartMode+0x5e0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f00a f8c3 	bl	800ce54 <xQueueSemaphoreTake>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d162      	bne.n	8002d9a <StartMode+0x5ce>
						   {
							   AfficheTonalite();
 8002cd4:	f7ff fa3c 	bl	8002150 <AfficheTonalite>
							   xSemaphoreGive(myMutexLCDHandle);
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <StartMode+0x5e0>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f009 ff19 	bl	800cb18 <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 8002ce6:	e058      	b.n	8002d9a <StartMode+0x5ce>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]>310) && TS_State.touchY[0] > 250)
 8002ce8:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <StartMode+0x5e4>)
 8002cea:	885b      	ldrh	r3, [r3, #2]
 8002cec:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002cf0:	d922      	bls.n	8002d38 <StartMode+0x56c>
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <StartMode+0x5e4>)
 8002cf4:	899b      	ldrh	r3, [r3, #12]
 8002cf6:	2bfa      	cmp	r3, #250	; 0xfa
 8002cf8:	d91e      	bls.n	8002d38 <StartMode+0x56c>
					  //clique sur luminosité
				  {
					  menu_couleur = 2;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					  if(myMutexLCDHandle != NULL)
 8002d00:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <StartMode+0x5e0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d04a      	beq.n	8002d9e <StartMode+0x5d2>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <StartMode+0x5e0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d10:	4618      	mov	r0, r3
 8002d12:	f00a f89f 	bl	800ce54 <xQueueSemaphoreTake>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d140      	bne.n	8002d9e <StartMode+0x5d2>
						   {
							   AfficheLuminosite(ton, sat);
 8002d1c:	edd7 0a34 	vldr	s1, [r7, #208]	; 0xd0
 8002d20:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8002d24:	f7ff fb1e 	bl	8002364 <AfficheLuminosite>
							   xSemaphoreGive(myMutexLCDHandle);
 8002d28:	4b20      	ldr	r3, [pc, #128]	; (8002dac <StartMode+0x5e0>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	f009 fef1 	bl	800cb18 <xQueueGenericSend>
					  if(myMutexLCDHandle != NULL)
 8002d36:	e032      	b.n	8002d9e <StartMode+0x5d2>
						   }
					  }
				  }
				  else if((TS_State.touchX[0]<310) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]>170))
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <StartMode+0x5e4>)
 8002d3a:	885b      	ldrh	r3, [r3, #2]
 8002d3c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002d40:	f080 8145 	bcs.w	8002fce <StartMode+0x802>
 8002d44:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <StartMode+0x5e4>)
 8002d46:	899b      	ldrh	r3, [r3, #12]
 8002d48:	2bfa      	cmp	r3, #250	; 0xfa
 8002d4a:	f240 8140 	bls.w	8002fce <StartMode+0x802>
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <StartMode+0x5e4>)
 8002d50:	885b      	ldrh	r3, [r3, #2]
 8002d52:	2baa      	cmp	r3, #170	; 0xaa
 8002d54:	f240 813b 	bls.w	8002fce <StartMode+0x802>
					  //clique sur saturation
				  {
					  menu_couleur = 3;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					  if(myMutexLCDHandle != NULL)
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <StartMode+0x5e0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8133 	beq.w	8002fce <StartMode+0x802>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,1000) == pdTRUE)
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <StartMode+0x5e0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d70:	4618      	mov	r0, r3
 8002d72:	f00a f86f 	bl	800ce54 <xQueueSemaphoreTake>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 8128 	bne.w	8002fce <StartMode+0x802>
						   {
							   AfficheSaturation(ton, lum);
 8002d7e:	edd7 0a35 	vldr	s1, [r7, #212]	; 0xd4
 8002d82:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8002d86:	f7ff fb41 	bl	800240c <AfficheSaturation>
							   xSemaphoreGive(myMutexLCDHandle);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <StartMode+0x5e0>)
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	f009 fec0 	bl	800cb18 <xQueueGenericSend>
						   }
					  }
				  }
			  }
			  break;
 8002d98:	e119      	b.n	8002fce <StartMode+0x802>
					  if(myMutexLCDHandle != NULL)
 8002d9a:	bf00      	nop
 8002d9c:	e117      	b.n	8002fce <StartMode+0x802>
					  if(myMutexLCDHandle != NULL)
 8002d9e:	bf00      	nop
			  break;
 8002da0:	e115      	b.n	8002fce <StartMode+0x802>
		  /*
		   * on a affiché l'arc en ciel des tonalités, l'utilisateur choisit maintenant celle-ci.
		   */
		  case 1:
			  BSP_TS_GetState(&TS_State);
 8002da2:	4803      	ldr	r0, [pc, #12]	; (8002db0 <StartMode+0x5e4>)
 8002da4:	f001 fda0 	bl	80048e8 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8002da8:	e05a      	b.n	8002e60 <StartMode+0x694>
 8002daa:	bf00      	nop
 8002dac:	200088c0 	.word	0x200088c0
 8002db0:	2000035c 	.word	0x2000035c
 8002db4:	20008b14 	.word	0x20008b14
 8002db8:	20000029 	.word	0x20000029
 8002dbc:	ffff0000 	.word	0xffff0000
			  {
				  if((TS_State.touchX[0]>=50) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=433))
 8002dc0:	4b8f      	ldr	r3, [pc, #572]	; (8003000 <StartMode+0x834>)
 8002dc2:	885b      	ldrh	r3, [r3, #2]
 8002dc4:	2b31      	cmp	r3, #49	; 0x31
 8002dc6:	d94b      	bls.n	8002e60 <StartMode+0x694>
 8002dc8:	4b8d      	ldr	r3, [pc, #564]	; (8003000 <StartMode+0x834>)
 8002dca:	899b      	ldrh	r3, [r3, #12]
 8002dcc:	2bfa      	cmp	r3, #250	; 0xfa
 8002dce:	d947      	bls.n	8002e60 <StartMode+0x694>
 8002dd0:	4b8b      	ldr	r3, [pc, #556]	; (8003000 <StartMode+0x834>)
 8002dd2:	885b      	ldrh	r3, [r3, #2]
 8002dd4:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8002dd8:	d242      	bcs.n	8002e60 <StartMode+0x694>
				  {
					  ton = FindTonalite(TS_State.touchX[0]-50);
 8002dda:	4b89      	ldr	r3, [pc, #548]	; (8003000 <StartMode+0x834>)
 8002ddc:	885b      	ldrh	r3, [r3, #2]
 8002dde:	3b32      	subs	r3, #50	; 0x32
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fc54 	bl	8002690 <FindTonalite>
 8002de8:	ed87 0a36 	vstr	s0, [r7, #216]	; 0xd8
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8002dec:	ed97 1a35 	vldr	s2, [r7, #212]	; 0xd4
 8002df0:	edd7 0a34 	vldr	s1, [r7, #208]	; 0xd0
 8002df4:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8002df8:	f7ff fb5c 	bl	80024b4 <FindCouleur>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <StartMode+0x838>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e06:	4313      	orrs	r3, r2
 8002e08:	4a7e      	ldr	r2, [pc, #504]	; (8003004 <StartMode+0x838>)
 8002e0a:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8002e0c:	4b7e      	ldr	r3, [pc, #504]	; (8003008 <StartMode+0x83c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <StartMode+0x682>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002e14:	4b7c      	ldr	r3, [pc, #496]	; (8003008 <StartMode+0x83c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2164      	movs	r1, #100	; 0x64
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f00a f81a 	bl	800ce54 <xQueueSemaphoreTake>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d113      	bne.n	8002e4e <StartMode+0x682>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8002e26:	4b77      	ldr	r3, [pc, #476]	; (8003004 <StartMode+0x838>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fcf2 	bl	8003818 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8002e34:	2214      	movs	r2, #20
 8002e36:	2119      	movs	r1, #25
 8002e38:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002e3c:	f001 f8a6 	bl	8003f8c <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 8002e40:	4b71      	ldr	r3, [pc, #452]	; (8003008 <StartMode+0x83c>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	2300      	movs	r3, #0
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	f009 fe65 	bl	800cb18 <xQueueGenericSend>
						   }
					   }
					  menu_couleur = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					  sous_menu = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					  BSP_TS_GetState(&TS_State);
 8002e5a:	4869      	ldr	r0, [pc, #420]	; (8003000 <StartMode+0x834>)
 8002e5c:	f001 fd44 	bl	80048e8 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8002e60:	4b67      	ldr	r3, [pc, #412]	; (8003000 <StartMode+0x834>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ab      	bne.n	8002dc0 <StartMode+0x5f4>
				  }
			  }
			  break;
 8002e68:	e0b2      	b.n	8002fd0 <StartMode+0x804>
		  /*
		   * On a Affiché le dégradé de luminosité, l'utilisateur chosit maintenant celle-ci
		   */
		  case 2:
			  BSP_TS_GetState(&TS_State);
 8002e6a:	4865      	ldr	r0, [pc, #404]	; (8003000 <StartMode+0x834>)
 8002e6c:	f001 fd3c 	bl	80048e8 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8002e70:	e04f      	b.n	8002f12 <StartMode+0x746>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=356))
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <StartMode+0x834>)
 8002e74:	885b      	ldrh	r3, [r3, #2]
 8002e76:	2b63      	cmp	r3, #99	; 0x63
 8002e78:	d94b      	bls.n	8002f12 <StartMode+0x746>
 8002e7a:	4b61      	ldr	r3, [pc, #388]	; (8003000 <StartMode+0x834>)
 8002e7c:	899b      	ldrh	r3, [r3, #12]
 8002e7e:	2bfa      	cmp	r3, #250	; 0xfa
 8002e80:	d947      	bls.n	8002f12 <StartMode+0x746>
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <StartMode+0x834>)
 8002e84:	885b      	ldrh	r3, [r3, #2]
 8002e86:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002e8a:	d842      	bhi.n	8002f12 <StartMode+0x746>
				  {
					  lum = FindLuminosite(TS_State.touchX[0]-100);
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	; (8003000 <StartMode+0x834>)
 8002e8e:	885b      	ldrh	r3, [r3, #2]
 8002e90:	3b64      	subs	r3, #100	; 0x64
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fc21 	bl	80026dc <FindLuminosite>
 8002e9a:	ed87 0a35 	vstr	s0, [r7, #212]	; 0xd4
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8002e9e:	ed97 1a35 	vldr	s2, [r7, #212]	; 0xd4
 8002ea2:	edd7 0a34 	vldr	s1, [r7, #208]	; 0xd0
 8002ea6:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8002eaa:	f7ff fb03 	bl	80024b4 <FindCouleur>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b54      	ldr	r3, [pc, #336]	; (8003004 <StartMode+0x838>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	4a52      	ldr	r2, [pc, #328]	; (8003004 <StartMode+0x838>)
 8002ebc:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8002ebe:	4b52      	ldr	r3, [pc, #328]	; (8003008 <StartMode+0x83c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01c      	beq.n	8002f00 <StartMode+0x734>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002ec6:	4b50      	ldr	r3, [pc, #320]	; (8003008 <StartMode+0x83c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2164      	movs	r1, #100	; 0x64
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f009 ffc1 	bl	800ce54 <xQueueSemaphoreTake>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d113      	bne.n	8002f00 <StartMode+0x734>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <StartMode+0x838>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fc99 	bl	8003818 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8002ee6:	2214      	movs	r2, #20
 8002ee8:	2119      	movs	r1, #25
 8002eea:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002eee:	f001 f84d 	bl	8003f8c <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 8002ef2:	4b45      	ldr	r3, [pc, #276]	; (8003008 <StartMode+0x83c>)
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	f009 fe0c 	bl	800cb18 <xQueueGenericSend>
						   }
					   }
					  menu_couleur = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					  sous_menu = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					  BSP_TS_GetState(&TS_State);
 8002f0c:	483c      	ldr	r0, [pc, #240]	; (8003000 <StartMode+0x834>)
 8002f0e:	f001 fceb 	bl	80048e8 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8002f12:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <StartMode+0x834>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ab      	bne.n	8002e72 <StartMode+0x6a6>
				  }
			  }
			  break;
 8002f1a:	e059      	b.n	8002fd0 <StartMode+0x804>
		  /*
		   * On a Affiché le dégradé de saturation, l'utilisateur chosit maintenant celle-ci
		   */
		  case 3:
			  BSP_TS_GetState(&TS_State);
 8002f1c:	4838      	ldr	r0, [pc, #224]	; (8003000 <StartMode+0x834>)
 8002f1e:	f001 fce3 	bl	80048e8 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8002f22:	e04f      	b.n	8002fc4 <StartMode+0x7f8>
			  {
				  if((TS_State.touchX[0]>=100) && (TS_State.touchY[0] > 250) && (TS_State.touchX[0]<=356))
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <StartMode+0x834>)
 8002f26:	885b      	ldrh	r3, [r3, #2]
 8002f28:	2b63      	cmp	r3, #99	; 0x63
 8002f2a:	d94b      	bls.n	8002fc4 <StartMode+0x7f8>
 8002f2c:	4b34      	ldr	r3, [pc, #208]	; (8003000 <StartMode+0x834>)
 8002f2e:	899b      	ldrh	r3, [r3, #12]
 8002f30:	2bfa      	cmp	r3, #250	; 0xfa
 8002f32:	d947      	bls.n	8002fc4 <StartMode+0x7f8>
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <StartMode+0x834>)
 8002f36:	885b      	ldrh	r3, [r3, #2]
 8002f38:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002f3c:	d842      	bhi.n	8002fc4 <StartMode+0x7f8>
				  {
					  sat = FindSaturation(TS_State.touchX[0]-100);
 8002f3e:	4b30      	ldr	r3, [pc, #192]	; (8003000 <StartMode+0x834>)
 8002f40:	885b      	ldrh	r3, [r3, #2]
 8002f42:	3b64      	subs	r3, #100	; 0x64
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fbe2 	bl	8002710 <FindSaturation>
 8002f4c:	ed87 0a34 	vstr	s0, [r7, #208]	; 0xd0
					  couleur = FindCouleur(ton, sat, lum) | (couleur & 0xFF000000);
 8002f50:	ed97 1a35 	vldr	s2, [r7, #212]	; 0xd4
 8002f54:	edd7 0a34 	vldr	s1, [r7, #208]	; 0xd0
 8002f58:	ed97 0a36 	vldr	s0, [r7, #216]	; 0xd8
 8002f5c:	f7ff faaa 	bl	80024b4 <FindCouleur>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <StartMode+0x838>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <StartMode+0x838>)
 8002f6e:	6013      	str	r3, [r2, #0]
					  if(myMutexLCDHandle != NULL)
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <StartMode+0x83c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01c      	beq.n	8002fb2 <StartMode+0x7e6>
					  {
						   if(xSemaphoreTake(myMutexLCDHandle,100) == pdTRUE)
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <StartMode+0x83c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2164      	movs	r1, #100	; 0x64
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f009 ff68 	bl	800ce54 <xQueueSemaphoreTake>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d113      	bne.n	8002fb2 <StartMode+0x7e6>
						   {
							   BSP_LCD_SetTextColor(couleur | 0xFF000000);
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <StartMode+0x838>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fc40 	bl	8003818 <BSP_LCD_SetTextColor>
							   BSP_LCD_FillCircle(480-taille_menu/2, taille_menu/2, taille_menu/2-5);
 8002f98:	2214      	movs	r2, #20
 8002f9a:	2119      	movs	r1, #25
 8002f9c:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002fa0:	f000 fff4 	bl	8003f8c <BSP_LCD_FillCircle>
							   xSemaphoreGive(myMutexLCDHandle);
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <StartMode+0x83c>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2200      	movs	r2, #0
 8002fac:	2100      	movs	r1, #0
 8002fae:	f009 fdb3 	bl	800cb18 <xQueueGenericSend>
						   }
					   }
					  menu_couleur = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					  sous_menu = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					  BSP_TS_GetState(&TS_State);
 8002fbe:	4810      	ldr	r0, [pc, #64]	; (8003000 <StartMode+0x834>)
 8002fc0:	f001 fc92 	bl	80048e8 <BSP_TS_GetState>
			  while(TS_State.touchDetected)
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <StartMode+0x834>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ab      	bne.n	8002f24 <StartMode+0x758>
				  }
			  }
			  break;
 8002fcc:	e000      	b.n	8002fd0 <StartMode+0x804>
			  break;
 8002fce:	bf00      	nop
		  }
		  if(sous_menu==0) etat = 1;
 8002fd0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <StartMode+0x824>
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <StartMode+0x840>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	701a      	strb	r2, [r3, #0]
		  break;
 8002fde:	e007      	b.n	8002ff0 <StartMode+0x824>
	  /*
	   * etat de sélection de la taille
	   */
	  case 6 :
		  etat = 0;
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <StartMode+0x840>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
		  break;
 8002fe6:	e004      	b.n	8002ff2 <StartMode+0x826>
		  break;
 8002fe8:	bf00      	nop
 8002fea:	e002      	b.n	8002ff2 <StartMode+0x826>
		  break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <StartMode+0x826>
		  break;
 8002ff0:	bf00      	nop
	  }
	  vTaskDelayUntil(&xLastWakeTime, 100);
 8002ff2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ff6:	2164      	movs	r1, #100	; 0x64
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f00a fadf 	bl	800d5bc <vTaskDelayUntil>
	  switch(etat)
 8002ffe:	e43a      	b.n	8002876 <StartMode+0xaa>
 8003000:	2000035c 	.word	0x2000035c
 8003004:	20008b14 	.word	0x20008b14
 8003008:	200088c0 	.word	0x200088c0
 800300c:	20000029 	.word	0x20000029

08003010 <StartPeindre>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPeindre */
void StartPeindre(void const * argument)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPeindre */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 8003018:	f00a fc94 	bl	800d944 <xTaskGetTickCount>
 800301c:	4603      	mov	r3, r0
 800301e:	60fb      	str	r3, [r7, #12]
  static TS_StateTypeDef  TS_State;
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 8003020:	481c      	ldr	r0, [pc, #112]	; (8003094 <StartPeindre+0x84>)
 8003022:	f001 fc61 	bl	80048e8 <BSP_TS_GetState>
	  if(TS_State.touchDetected && (TestConditionBord(TS_State.touchX[0], TS_State.touchY[0], radius)))
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <StartPeindre+0x84>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02a      	beq.n	8003084 <StartPeindre+0x74>
 800302e:	4b19      	ldr	r3, [pc, #100]	; (8003094 <StartPeindre+0x84>)
 8003030:	8858      	ldrh	r0, [r3, #2]
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <StartPeindre+0x84>)
 8003034:	8999      	ldrh	r1, [r3, #12]
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <StartPeindre+0x88>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	f7ff f843 	bl	80020c8 <TestConditionBord>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01d      	beq.n	8003084 <StartPeindre+0x74>
	  {
		  if(myMutexLCDHandle != NULL)
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <StartPeindre+0x8c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d019      	beq.n	8003084 <StartPeindre+0x74>
		   {
			   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <StartPeindre+0x8c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f009 fefc 	bl	800ce54 <xQueueSemaphoreTake>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d110      	bne.n	8003084 <StartPeindre+0x74>
			   {
				   LCD_PAINTBRUSH(TS_State.touchX[0],TS_State.touchY[0],radius);
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <StartPeindre+0x84>)
 8003064:	8858      	ldrh	r0, [r3, #2]
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <StartPeindre+0x84>)
 8003068:	8999      	ldrh	r1, [r3, #12]
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <StartPeindre+0x88>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	f7ff f853 	bl	800211c <LCD_PAINTBRUSH>
				   xSemaphoreGive(myMutexLCDHandle);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <StartPeindre+0x8c>)
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	2300      	movs	r3, #0
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	f009 fd4a 	bl	800cb18 <xQueueGenericSend>
			   }
		   }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 3);
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	2103      	movs	r1, #3
 800308a:	4618      	mov	r0, r3
 800308c:	f00a fa96 	bl	800d5bc <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 8003090:	e7c6      	b.n	8003020 <StartPeindre+0x10>
 8003092:	bf00      	nop
 8003094:	20000388 	.word	0x20000388
 8003098:	20000028 	.word	0x20000028
 800309c:	200088c0 	.word	0x200088c0

080030a0 <StartTaskEtat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEtat */
void StartTaskEtat(void const * argument)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskEtat */
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();
 80030a8:	f00a fc4c 	bl	800d944 <xTaskGetTickCount>
 80030ac:	4603      	mov	r3, r0
 80030ae:	61bb      	str	r3, [r7, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80030b0:	f107 0308 	add.w	r3, r7, #8
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030be:	2301      	movs	r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  sConfig.Channel = ADC_CHANNEL_8;
 80030c6:	2308      	movs	r3, #8
 80030c8:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	4619      	mov	r1, r3
 80030d0:	486b      	ldr	r0, [pc, #428]	; (8003280 <StartTaskEtat+0x1e0>)
 80030d2:	f002 fe55 	bl	8005d80 <HAL_ADC_ConfigChannel>
  char etat_prec = 2;
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
  uint16_t joystick_h;
  /* Infinite loop */
  for(;;)
  {
	  if(etat == 0)
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <StartTaskEtat+0x1e4>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 80c5 	bne.w	800326e <StartTaskEtat+0x1ce>
	  {
		  HAL_ADC_Start(&hadc1);
 80030e4:	4868      	ldr	r0, [pc, #416]	; (8003288 <StartTaskEtat+0x1e8>)
 80030e6:	f002 fcf9 	bl	8005adc <HAL_ADC_Start>
		  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80030ea:	bf00      	nop
 80030ec:	2164      	movs	r1, #100	; 0x64
 80030ee:	4866      	ldr	r0, [pc, #408]	; (8003288 <StartTaskEtat+0x1e8>)
 80030f0:	f002 fdb4 	bl	8005c5c <HAL_ADC_PollForConversion>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f8      	bne.n	80030ec <StartTaskEtat+0x4c>
		  joystick_h = HAL_ADC_GetValue(&hadc1);
 80030fa:	4863      	ldr	r0, [pc, #396]	; (8003288 <StartTaskEtat+0x1e8>)
 80030fc:	f002 fe32 	bl	8005d64 <HAL_ADC_GetValue>
 8003100:	4603      	mov	r3, r0
 8003102:	83bb      	strh	r3, [r7, #28]
		  if(joystick_h > 2500)
 8003104:	8bbb      	ldrh	r3, [r7, #28]
 8003106:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800310a:	4293      	cmp	r3, r2
 800310c:	d956      	bls.n	80031bc <StartTaskEtat+0x11c>
		  {
			  etat_prec = etat_int;
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <StartTaskEtat+0x1ec>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	77fb      	strb	r3, [r7, #31]
			  etat_int -= 1;
 8003114:	4b5d      	ldr	r3, [pc, #372]	; (800328c <StartTaskEtat+0x1ec>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	3b01      	subs	r3, #1
 800311a:	b2da      	uxtb	r2, r3
 800311c:	4b5b      	ldr	r3, [pc, #364]	; (800328c <StartTaskEtat+0x1ec>)
 800311e:	701a      	strb	r2, [r3, #0]
			  if(etat_int < 2) etat_int = etat_max;
 8003120:	4b5a      	ldr	r3, [pc, #360]	; (800328c <StartTaskEtat+0x1ec>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d802      	bhi.n	800312e <StartTaskEtat+0x8e>
 8003128:	4b58      	ldr	r3, [pc, #352]	; (800328c <StartTaskEtat+0x1ec>)
 800312a:	2206      	movs	r2, #6
 800312c:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 800312e:	4b58      	ldr	r3, [pc, #352]	; (8003290 <StartTaskEtat+0x1f0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 809b 	beq.w	800326e <StartTaskEtat+0x1ce>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 8003138:	4b55      	ldr	r3, [pc, #340]	; (8003290 <StartTaskEtat+0x1f0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f009 fe88 	bl	800ce54 <xQueueSemaphoreTake>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	f040 8091 	bne.w	800326e <StartTaskEtat+0x1ce>
				   {
					   BSP_LCD_SelectLayer(1);
 800314c:	2001      	movs	r0, #1
 800314e:	f000 fb53 	bl	80037f8 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003152:	f04f 30ff 	mov.w	r0, #4294967295
 8003156:	f000 fb5f 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 800315a:	7ffb      	ldrb	r3, [r7, #31]
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	461a      	mov	r2, r3
 8003166:	00d2      	lsls	r2, r2, #3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	3baa      	subs	r3, #170	; 0xaa
 8003170:	b298      	uxth	r0, r3
 8003172:	2305      	movs	r3, #5
 8003174:	2223      	movs	r2, #35	; 0x23
 8003176:	f240 1109 	movw	r1, #265	; 0x109
 800317a:	f000 fe8d 	bl	8003e98 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF);
 800317e:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8003182:	f000 fb49 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <StartTaskEtat+0x1ec>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	461a      	mov	r2, r3
 8003194:	00d2      	lsls	r2, r2, #3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	3baa      	subs	r3, #170	; 0xaa
 800319e:	b298      	uxth	r0, r3
 80031a0:	2305      	movs	r3, #5
 80031a2:	2223      	movs	r2, #35	; 0x23
 80031a4:	f240 1109 	movw	r1, #265	; 0x109
 80031a8:	f000 fe76 	bl	8003e98 <BSP_LCD_FillRect>
					   xSemaphoreGive(myMutexLCDHandle);
 80031ac:	4b38      	ldr	r3, [pc, #224]	; (8003290 <StartTaskEtat+0x1f0>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	f009 fcaf 	bl	800cb18 <xQueueGenericSend>
 80031ba:	e058      	b.n	800326e <StartTaskEtat+0x1ce>
				   }
			   }
		  }
		  else if(joystick_h < 1500)
 80031bc:	8bbb      	ldrh	r3, [r7, #28]
 80031be:	f240 52db 	movw	r2, #1499	; 0x5db
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d853      	bhi.n	800326e <StartTaskEtat+0x1ce>
		  {
			  etat_prec = etat_int;
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <StartTaskEtat+0x1ec>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	77fb      	strb	r3, [r7, #31]
			  etat_int += 1;
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <StartTaskEtat+0x1ec>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <StartTaskEtat+0x1ec>)
 80031d6:	701a      	strb	r2, [r3, #0]
			  if (etat_int > etat_max) etat_int = 2;
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <StartTaskEtat+0x1ec>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d902      	bls.n	80031e6 <StartTaskEtat+0x146>
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <StartTaskEtat+0x1ec>)
 80031e2:	2202      	movs	r2, #2
 80031e4:	701a      	strb	r2, [r3, #0]
			  if(myMutexLCDHandle != NULL)
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <StartTaskEtat+0x1f0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03f      	beq.n	800326e <StartTaskEtat+0x1ce>
			   {
				   if(xSemaphoreTake(myMutexLCDHandle,1) == pdTRUE)
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <StartTaskEtat+0x1f0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f009 fe2d 	bl	800ce54 <xQueueSemaphoreTake>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d136      	bne.n	800326e <StartTaskEtat+0x1ce>
				   {
					   BSP_LCD_SelectLayer(1);
 8003200:	2001      	movs	r0, #1
 8003202:	f000 faf9 	bl	80037f8 <BSP_LCD_SelectLayer>
					   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003206:	f04f 30ff 	mov.w	r0, #4294967295
 800320a:	f000 fb05 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_prec-170, 265, 35, 5);
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	b29b      	uxth	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	00d2      	lsls	r2, r2, #3
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	461a      	mov	r2, r3
 800321a:	00d2      	lsls	r2, r2, #3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	b29b      	uxth	r3, r3
 8003222:	3baa      	subs	r3, #170	; 0xaa
 8003224:	b298      	uxth	r0, r3
 8003226:	2305      	movs	r3, #5
 8003228:	2223      	movs	r2, #35	; 0x23
 800322a:	f240 1109 	movw	r1, #265	; 0x109
 800322e:	f000 fe33 	bl	8003e98 <BSP_LCD_FillRect>
					   BSP_LCD_SetTextColor(0xFFFF00FF); //violet
 8003232:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8003236:	f000 faef 	bl	8003818 <BSP_LCD_SetTextColor>
					   BSP_LCD_FillRect(98*etat_int-170, 265, 35, 5);
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <StartTaskEtat+0x1ec>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	00d2      	lsls	r2, r2, #3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	461a      	mov	r2, r3
 8003248:	00d2      	lsls	r2, r2, #3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	3baa      	subs	r3, #170	; 0xaa
 8003252:	b298      	uxth	r0, r3
 8003254:	2305      	movs	r3, #5
 8003256:	2223      	movs	r2, #35	; 0x23
 8003258:	f240 1109 	movw	r1, #265	; 0x109
 800325c:	f000 fe1c 	bl	8003e98 <BSP_LCD_FillRect>
					   xSemaphoreGive(myMutexLCDHandle);
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <StartTaskEtat+0x1f0>)
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	2200      	movs	r2, #0
 8003268:	2100      	movs	r1, #0
 800326a:	f009 fc55 	bl	800cb18 <xQueueGenericSend>
				   }
			   }
		  }
	  }
	  vTaskDelayUntil(&xLastWakeTime, 300);
 800326e:	f107 0318 	add.w	r3, r7, #24
 8003272:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003276:	4618      	mov	r0, r3
 8003278:	f00a f9a0 	bl	800d5bc <vTaskDelayUntil>
	  if(etat == 0)
 800327c:	e72d      	b.n	80030da <StartTaskEtat+0x3a>
 800327e:	bf00      	nop
 8003280:	20008a38 	.word	0x20008a38
 8003284:	20000029 	.word	0x20000029
 8003288:	200089f0 	.word	0x200089f0
 800328c:	2000002a 	.word	0x2000002a
 8003290:	200088c0 	.word	0x200088c0

08003294 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032a6:	f002 fb93 	bl	80059d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40001000 	.word	0x40001000

080032b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032be:	e7fe      	b.n	80032be <Error_Handler+0x6>

080032c0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a51      	ldr	r2, [pc, #324]	; (8003410 <I2Cx_MspInit+0x150>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d14d      	bne.n	800336c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <I2Cx_MspInit+0x154>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4a4f      	ldr	r2, [pc, #316]	; (8003414 <I2Cx_MspInit+0x154>)
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	6313      	str	r3, [r2, #48]	; 0x30
 80032dc:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <I2Cx_MspInit+0x154>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80032ec:	2312      	movs	r3, #18
 80032ee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80032f4:	2302      	movs	r3, #2
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80032f8:	2304      	movs	r3, #4
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	4619      	mov	r1, r3
 8003302:	4845      	ldr	r0, [pc, #276]	; (8003418 <I2Cx_MspInit+0x158>)
 8003304:	f003 fd9a 	bl	8006e3c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800330e:	f107 031c 	add.w	r3, r7, #28
 8003312:	4619      	mov	r1, r3
 8003314:	4840      	ldr	r0, [pc, #256]	; (8003418 <I2Cx_MspInit+0x158>)
 8003316:	f003 fd91 	bl	8006e3c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <I2Cx_MspInit+0x154>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a3d      	ldr	r2, [pc, #244]	; (8003414 <I2Cx_MspInit+0x154>)
 8003320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <I2Cx_MspInit+0x154>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <I2Cx_MspInit+0x154>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a37      	ldr	r2, [pc, #220]	; (8003414 <I2Cx_MspInit+0x154>)
 8003338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800333c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800333e:	4b35      	ldr	r3, [pc, #212]	; (8003414 <I2Cx_MspInit+0x154>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a34      	ldr	r2, [pc, #208]	; (8003414 <I2Cx_MspInit+0x154>)
 8003344:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003348:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	210f      	movs	r1, #15
 800334e:	2048      	movs	r0, #72	; 0x48
 8003350:	f003 f812 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003354:	2048      	movs	r0, #72	; 0x48
 8003356:	f003 f82b 	bl	80063b0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	210f      	movs	r1, #15
 800335e:	2049      	movs	r0, #73	; 0x49
 8003360:	f003 f80a 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003364:	2049      	movs	r0, #73	; 0x49
 8003366:	f003 f823 	bl	80063b0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800336a:	e04d      	b.n	8003408 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800336c:	4b29      	ldr	r3, [pc, #164]	; (8003414 <I2Cx_MspInit+0x154>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4a28      	ldr	r2, [pc, #160]	; (8003414 <I2Cx_MspInit+0x154>)
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	6313      	str	r3, [r2, #48]	; 0x30
 8003378:	4b26      	ldr	r3, [pc, #152]	; (8003414 <I2Cx_MspInit+0x154>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003388:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800338a:	2312      	movs	r3, #18
 800338c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003392:	2302      	movs	r3, #2
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003396:	2304      	movs	r3, #4
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800339a:	f107 031c 	add.w	r3, r7, #28
 800339e:	4619      	mov	r1, r3
 80033a0:	481e      	ldr	r0, [pc, #120]	; (800341c <I2Cx_MspInit+0x15c>)
 80033a2:	f003 fd4b 	bl	8006e3c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	481a      	ldr	r0, [pc, #104]	; (800341c <I2Cx_MspInit+0x15c>)
 80033b4:	f003 fd42 	bl	8006e3c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <I2Cx_MspInit+0x154>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	4a15      	ldr	r2, [pc, #84]	; (8003414 <I2Cx_MspInit+0x154>)
 80033be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c2:	6413      	str	r3, [r2, #64]	; 0x40
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <I2Cx_MspInit+0x154>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <I2Cx_MspInit+0x154>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <I2Cx_MspInit+0x154>)
 80033d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033da:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <I2Cx_MspInit+0x154>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <I2Cx_MspInit+0x154>)
 80033e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033e6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	210f      	movs	r1, #15
 80033ec:	201f      	movs	r0, #31
 80033ee:	f002 ffc3 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80033f2:	201f      	movs	r0, #31
 80033f4:	f002 ffdc 	bl	80063b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80033f8:	2200      	movs	r2, #0
 80033fa:	210f      	movs	r1, #15
 80033fc:	2020      	movs	r0, #32
 80033fe:	f002 ffbb 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003402:	2020      	movs	r0, #32
 8003404:	f002 ffd4 	bl	80063b0 <HAL_NVIC_EnableIRQ>
}
 8003408:	bf00      	nop
 800340a:	3730      	adds	r7, #48	; 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200003b4 	.word	0x200003b4
 8003414:	40023800 	.word	0x40023800
 8003418:	40021c00 	.word	0x40021c00
 800341c:	40020400 	.word	0x40020400

08003420 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f004 faf3 	bl	8007a14 <HAL_I2C_GetState>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d125      	bne.n	8003480 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <I2Cx_Init+0x68>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d103      	bne.n	8003444 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <I2Cx_Init+0x6c>)
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e002      	b.n	800344a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <I2Cx_Init+0x70>)
 8003448:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a11      	ldr	r2, [pc, #68]	; (8003494 <I2Cx_Init+0x74>)
 800344e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff23 	bl	80032c0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f003 ffdc 	bl	8007438 <HAL_I2C_Init>
  }
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200003b4 	.word	0x200003b4
 800348c:	40005c00 	.word	0x40005c00
 8003490:	40005400 	.word	0x40005400
 8003494:	40912732 	.word	0x40912732

08003498 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af04      	add	r7, sp, #16
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	72fb      	strb	r3, [r7, #11]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034b6:	7afb      	ldrb	r3, [r7, #11]
 80034b8:	b299      	uxth	r1, r3
 80034ba:	88f8      	ldrh	r0, [r7, #6]
 80034bc:	893a      	ldrh	r2, [r7, #8]
 80034be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c2:	9302      	str	r3, [sp, #8]
 80034c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4603      	mov	r3, r0
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f004 f986 	bl	80077e0 <HAL_I2C_Mem_Read>
 80034d4:	4603      	mov	r3, r0
 80034d6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	4619      	mov	r1, r3
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f832 	bl	800354c <I2Cx_Error>
  }
  return status;    
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08a      	sub	sp, #40	; 0x28
 80034f6:	af04      	add	r7, sp, #16
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	4608      	mov	r0, r1
 80034fc:	4611      	mov	r1, r2
 80034fe:	461a      	mov	r2, r3
 8003500:	4603      	mov	r3, r0
 8003502:	72fb      	strb	r3, [r7, #11]
 8003504:	460b      	mov	r3, r1
 8003506:	813b      	strh	r3, [r7, #8]
 8003508:	4613      	mov	r3, r2
 800350a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003510:	7afb      	ldrb	r3, [r7, #11]
 8003512:	b299      	uxth	r1, r3
 8003514:	88f8      	ldrh	r0, [r7, #6]
 8003516:	893a      	ldrh	r2, [r7, #8]
 8003518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800351c:	9302      	str	r3, [sp, #8]
 800351e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4603      	mov	r3, r0
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f004 f845 	bl	80075b8 <HAL_I2C_Mem_Write>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003538:	7afb      	ldrb	r3, [r7, #11]
 800353a:	4619      	mov	r1, r3
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f805 	bl	800354c <I2Cx_Error>
  }
  return status;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f003 fffd 	bl	8007558 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff5e 	bl	8003420 <I2Cx_Init>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <TS_IO_Init+0x10>)
 8003572:	f7ff ff55 	bl	8003420 <I2Cx_Init>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200003b4 	.word	0x200003b4

08003580 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af02      	add	r7, sp, #8
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
 800358a:	460b      	mov	r3, r1
 800358c:	71bb      	strb	r3, [r7, #6]
 800358e:	4613      	mov	r3, r2
 8003590:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	b29a      	uxth	r2, r3
 8003596:	79f9      	ldrb	r1, [r7, #7]
 8003598:	2301      	movs	r3, #1
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	1d7b      	adds	r3, r7, #5
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2301      	movs	r3, #1
 80035a2:	4803      	ldr	r0, [pc, #12]	; (80035b0 <TS_IO_Write+0x30>)
 80035a4:	f7ff ffa5 	bl	80034f2 <I2Cx_WriteMultiple>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200003b4 	.word	0x200003b4

080035b4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	4603      	mov	r3, r0
 80035bc:	460a      	mov	r2, r1
 80035be:	71fb      	strb	r3, [r7, #7]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80035c8:	79bb      	ldrb	r3, [r7, #6]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	79f9      	ldrb	r1, [r7, #7]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	f107 030f 	add.w	r3, r7, #15
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2301      	movs	r3, #1
 80035da:	4804      	ldr	r0, [pc, #16]	; (80035ec <TS_IO_Read+0x38>)
 80035dc:	f7ff ff5c 	bl	8003498 <I2Cx_ReadMultiple>

  return read_value;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200003b4 	.word	0x200003b4

080035f0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f002 fa09 	bl	8005a10 <HAL_Delay>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800360e:	2228      	movs	r2, #40	; 0x28
 8003610:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003614:	2209      	movs	r2, #9
 8003616:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800361a:	2235      	movs	r2, #53	; 0x35
 800361c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003620:	220b      	movs	r2, #11
 8003622:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003626:	f240 121b 	movw	r2, #283	; 0x11b
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800362e:	f240 2215 	movw	r2, #533	; 0x215
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003636:	f240 121d 	movw	r2, #285	; 0x11d
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800363e:	f240 2235 	movw	r2, #565	; 0x235
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003644:	2100      	movs	r1, #0
 8003646:	4823      	ldr	r0, [pc, #140]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003648:	f000 fe38 	bl	80042bc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800364e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003652:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003656:	f44f 7288 	mov.w	r2, #272	; 0x110
 800365a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <BSP_LCD_Init+0xcc>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <BSP_LCD_Init+0xd0>)
 8003690:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003692:	4810      	ldr	r0, [pc, #64]	; (80036d4 <BSP_LCD_Init+0xcc>)
 8003694:	f004 fe50 	bl	8008338 <HAL_LTDC_GetState>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800369e:	2100      	movs	r1, #0
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <BSP_LCD_Init+0xcc>)
 80036a2:	f000 fd31 	bl	8004108 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80036a6:	480b      	ldr	r0, [pc, #44]	; (80036d4 <BSP_LCD_Init+0xcc>)
 80036a8:	f004 fc76 	bl	8007f98 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80036ac:	2201      	movs	r2, #1
 80036ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036b2:	480a      	ldr	r0, [pc, #40]	; (80036dc <BSP_LCD_Init+0xd4>)
 80036b4:	f003 fe8e 	bl	80073d4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	2108      	movs	r1, #8
 80036bc:	4808      	ldr	r0, [pc, #32]	; (80036e0 <BSP_LCD_Init+0xd8>)
 80036be:	f003 fe89 	bl	80073d4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80036c2:	f000 ff1b 	bl	80044fc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036c6:	4807      	ldr	r0, [pc, #28]	; (80036e4 <BSP_LCD_Init+0xdc>)
 80036c8:	f000 f8d8 	bl	800387c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20008cc0 	.word	0x20008cc0
 80036d8:	40016800 	.word	0x40016800
 80036dc:	40022000 	.word	0x40022000
 80036e0:	40022800 	.word	0x40022800
 80036e4:	2000002c 	.word	0x2000002c

080036e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <BSP_LCD_GetXSize+0x20>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a06      	ldr	r2, [pc, #24]	; (800370c <BSP_LCD_GetXSize+0x24>)
 80036f2:	2134      	movs	r1, #52	; 0x34
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	681b      	ldr	r3, [r3, #0]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20000440 	.word	0x20000440
 800370c:	20008cc0 	.word	0x20008cc0

08003710 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <BSP_LCD_GetYSize+0x20>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <BSP_LCD_GetYSize+0x24>)
 800371a:	2134      	movs	r1, #52	; 0x34
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3364      	adds	r3, #100	; 0x64
 8003724:	681b      	ldr	r3, [r3, #0]
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000440 	.word	0x20000440
 8003734:	20008cc0 	.word	0x20008cc0

08003738 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003738:	b580      	push	{r7, lr}
 800373a:	b090      	sub	sp, #64	; 0x40
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003748:	f7ff ffce 	bl	80036e8 <BSP_LCD_GetXSize>
 800374c:	4603      	mov	r3, r0
 800374e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003754:	f7ff ffdc 	bl	8003710 <BSP_LCD_GetYSize>
 8003758:	4603      	mov	r3, r0
 800375a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003764:	23ff      	movs	r3, #255	; 0xff
 8003766:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800377e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003784:	2307      	movs	r3, #7
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003788:	f7ff ffae 	bl	80036e8 <BSP_LCD_GetXSize>
 800378c:	4603      	mov	r3, r0
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003790:	f7ff ffbe 	bl	8003710 <BSP_LCD_GetYSize>
 8003794:	4603      	mov	r3, r0
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	f107 030c 	add.w	r3, r7, #12
 800379e:	4619      	mov	r1, r3
 80037a0:	4812      	ldr	r0, [pc, #72]	; (80037ec <BSP_LCD_LayerDefaultInit+0xb4>)
 80037a2:	f004 fd8b 	bl	80082bc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	4911      	ldr	r1, [pc, #68]	; (80037f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3304      	adds	r3, #4
 80037b6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	490c      	ldr	r1, [pc, #48]	; (80037f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	3308      	adds	r3, #8
 80037cc:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80037ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	4907      	ldr	r1, [pc, #28]	; (80037f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20008cc0 	.word	0x20008cc0
 80037f0:	20000444 	.word	0x20000444
 80037f4:	2000002c 	.word	0x2000002c

080037f8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <BSP_LCD_SelectLayer+0x1c>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
} 
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000440 	.word	0x20000440

08003818 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <BSP_LCD_SetTextColor+0x28>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4907      	ldr	r1, [pc, #28]	; (8003844 <BSP_LCD_SetTextColor+0x2c>)
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	20000440 	.word	0x20000440
 8003844:	20000444 	.word	0x20000444

08003848 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003850:	4b08      	ldr	r3, [pc, #32]	; (8003874 <BSP_LCD_SetBackColor+0x2c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4908      	ldr	r1, [pc, #32]	; (8003878 <BSP_LCD_SetBackColor+0x30>)
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3304      	adds	r3, #4
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000440 	.word	0x20000440
 8003878:	20000444 	.word	0x20000444

0800387c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <BSP_LCD_SetFont+0x2c>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4908      	ldr	r1, [pc, #32]	; (80038ac <BSP_LCD_SetFont+0x30>)
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3308      	adds	r3, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000440 	.word	0x20000440
 80038ac:	20000444 	.word	0x20000444

080038b0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <BSP_LCD_GetFont+0x24>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4907      	ldr	r1, [pc, #28]	; (80038d8 <BSP_LCD_GetFont+0x28>)
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3308      	adds	r3, #8
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000440 	.word	0x20000440
 80038d8:	20000444 	.word	0x20000444

080038dc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	b085      	sub	sp, #20
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <BSP_LCD_Clear+0x48>)
 80038e6:	681c      	ldr	r4, [r3, #0]
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <BSP_LCD_Clear+0x48>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <BSP_LCD_Clear+0x4c>)
 80038ee:	2134      	movs	r1, #52	; 0x34
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	335c      	adds	r3, #92	; 0x5c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461d      	mov	r5, r3
 80038fc:	f7ff fef4 	bl	80036e8 <BSP_LCD_GetXSize>
 8003900:	4606      	mov	r6, r0
 8003902:	f7ff ff05 	bl	8003710 <BSP_LCD_GetYSize>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	4632      	mov	r2, r6
 8003914:	4629      	mov	r1, r5
 8003916:	4620      	mov	r0, r4
 8003918:	f000 fda4 	bl	8004464 <LL_FillBuffer>
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003924:	20000440 	.word	0x20000440
 8003928:	20008cc0 	.word	0x20008cc0

0800392c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	80fb      	strh	r3, [r7, #6]
 8003936:	460b      	mov	r3, r1
 8003938:	80bb      	strh	r3, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <BSP_LCD_DisplayChar+0x80>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	491b      	ldr	r1, [pc, #108]	; (80039b0 <BSP_LCD_DisplayChar+0x84>)
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	3308      	adds	r3, #8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <BSP_LCD_DisplayChar+0x80>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4c14      	ldr	r4, [pc, #80]	; (80039b0 <BSP_LCD_DisplayChar+0x84>)
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4423      	add	r3, r4
 800396a:	3308      	adds	r3, #8
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003970:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <BSP_LCD_DisplayChar+0x80>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <BSP_LCD_DisplayChar+0x84>)
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4423      	add	r3, r4
 8003984:	3308      	adds	r3, #8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	3307      	adds	r3, #7
 800398c:	2b00      	cmp	r3, #0
 800398e:	da00      	bge.n	8003992 <BSP_LCD_DisplayChar+0x66>
 8003990:	3307      	adds	r3, #7
 8003992:	10db      	asrs	r3, r3, #3
 8003994:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003998:	18ca      	adds	r2, r1, r3
 800399a:	88b9      	ldrh	r1, [r7, #4]
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fca8 	bl	80042f4 <DrawChar>
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd90      	pop	{r4, r7, pc}
 80039ac:	20000440 	.word	0x20000440
 80039b0:	20000444 	.word	0x20000444

080039b4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60ba      	str	r2, [r7, #8]
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	81fb      	strh	r3, [r7, #14]
 80039c2:	460b      	mov	r3, r1
 80039c4:	81bb      	strh	r3, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80039ca:	2301      	movs	r3, #1
 80039cc:	83fb      	strh	r3, [r7, #30]
 80039ce:	2300      	movs	r3, #0
 80039d0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80039de:	e002      	b.n	80039e6 <BSP_LCD_DisplayStringAt+0x32>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	3301      	adds	r3, #1
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	617a      	str	r2, [r7, #20]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f6      	bne.n	80039e0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80039f2:	f7ff fe79 	bl	80036e8 <BSP_LCD_GetXSize>
 80039f6:	4b4f      	ldr	r3, [pc, #316]	; (8003b34 <BSP_LCD_DisplayStringAt+0x180>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	494f      	ldr	r1, [pc, #316]	; (8003b38 <BSP_LCD_DisplayStringAt+0x184>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3308      	adds	r3, #8
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	889b      	ldrh	r3, [r3, #4]
 8003a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a10:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d01c      	beq.n	8003a52 <BSP_LCD_DisplayStringAt+0x9e>
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <BSP_LCD_DisplayStringAt+0x98>
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d12e      	bne.n	8003a7e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	1ad1      	subs	r1, r2, r3
 8003a26:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <BSP_LCD_DisplayStringAt+0x180>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4843      	ldr	r0, [pc, #268]	; (8003b38 <BSP_LCD_DisplayStringAt+0x184>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4403      	add	r3, r0
 8003a36:	3308      	adds	r3, #8
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	889b      	ldrh	r3, [r3, #4]
 8003a3c:	fb03 f301 	mul.w	r3, r3, r1
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	4413      	add	r3, r2
 8003a48:	83fb      	strh	r3, [r7, #30]
      break;
 8003a4a:	e01b      	b.n	8003a84 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003a4c:	89fb      	ldrh	r3, [r7, #14]
 8003a4e:	83fb      	strh	r3, [r7, #30]
      break;
 8003a50:	e018      	b.n	8003a84 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	b299      	uxth	r1, r3
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <BSP_LCD_DisplayStringAt+0x180>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4836      	ldr	r0, [pc, #216]	; (8003b38 <BSP_LCD_DisplayStringAt+0x184>)
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4403      	add	r3, r0
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	889b      	ldrh	r3, [r3, #4]
 8003a70:	fb11 f303 	smulbb	r3, r1, r3
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	89fb      	ldrh	r3, [r7, #14]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	83fb      	strh	r3, [r7, #30]
      break;
 8003a7c:	e002      	b.n	8003a84 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	83fb      	strh	r3, [r7, #30]
      break;
 8003a82:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003a84:	8bfb      	ldrh	r3, [r7, #30]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <BSP_LCD_DisplayStringAt+0xde>
 8003a8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da1d      	bge.n	8003ace <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a96:	e01a      	b.n	8003ace <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	89b9      	ldrh	r1, [r7, #12]
 8003a9e:	8bfb      	ldrh	r3, [r7, #30]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff43 	bl	800392c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <BSP_LCD_DisplayStringAt+0x180>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4923      	ldr	r1, [pc, #140]	; (8003b38 <BSP_LCD_DisplayStringAt+0x184>)
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	889a      	ldrh	r2, [r3, #4]
 8003abc:	8bfb      	ldrh	r3, [r7, #30]
 8003abe:	4413      	add	r3, r2
 8003ac0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
    i++;
 8003ac8:	8bbb      	ldrh	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2dc      	uxtb	r4, r3
 8003adc:	f7ff fe04 	bl	80036e8 <BSP_LCD_GetXSize>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	8bb9      	ldrh	r1, [r7, #28]
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <BSP_LCD_DisplayStringAt+0x180>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4813      	ldr	r0, [pc, #76]	; (8003b38 <BSP_LCD_DisplayStringAt+0x184>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4403      	add	r3, r0
 8003af4:	3308      	adds	r3, #8
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	889b      	ldrh	r3, [r3, #4]
 8003afa:	fb03 f301 	mul.w	r3, r3, r1
 8003afe:	1aeb      	subs	r3, r5, r3
 8003b00:	b299      	uxth	r1, r3
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <BSP_LCD_DisplayStringAt+0x180>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	480c      	ldr	r0, [pc, #48]	; (8003b38 <BSP_LCD_DisplayStringAt+0x184>)
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4403      	add	r3, r0
 8003b12:	3308      	adds	r3, #8
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	889b      	ldrh	r3, [r3, #4]
 8003b18:	4299      	cmp	r1, r3
 8003b1a:	bf2c      	ite	cs
 8003b1c:	2301      	movcs	r3, #1
 8003b1e:	2300      	movcc	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4023      	ands	r3, r4
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1b6      	bne.n	8003a98 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8003b2a:	bf00      	nop
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bdb0      	pop	{r4, r5, r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000440 	.word	0x20000440
 8003b38:	20000444 	.word	0x20000444

08003b3c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003b48:	f7ff feb2 	bl	80038b0 <BSP_LCD_GetFont>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	88db      	ldrh	r3, [r3, #6]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	fb12 f303 	smulbb	r3, r2, r3
 8003b56:	b299      	uxth	r1, r3
 8003b58:	2303      	movs	r3, #3
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7ff ff29 	bl	80039b4 <BSP_LCD_DisplayStringAt>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
 8003b76:	460b      	mov	r3, r1
 8003b78:	80bb      	strh	r3, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <BSP_LCD_DrawHLine+0xb0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <BSP_LCD_DrawHLine+0xb4>)
 8003b88:	2134      	movs	r1, #52	; 0x34
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3348      	adds	r3, #72	; 0x48
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d114      	bne.n	8003bc2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <BSP_LCD_DrawHLine+0xb0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <BSP_LCD_DrawHLine+0xb4>)
 8003b9e:	2134      	movs	r1, #52	; 0x34
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	335c      	adds	r3, #92	; 0x5c
 8003ba8:	681c      	ldr	r4, [r3, #0]
 8003baa:	f7ff fd9d 	bl	80036e8 <BSP_LCD_GetXSize>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	fb03 f202 	mul.w	r2, r3, r2
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	4413      	add	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4423      	add	r3, r4
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e013      	b.n	8003bea <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <BSP_LCD_DrawHLine+0xb0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <BSP_LCD_DrawHLine+0xb4>)
 8003bc8:	2134      	movs	r1, #52	; 0x34
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	335c      	adds	r3, #92	; 0x5c
 8003bd2:	681c      	ldr	r4, [r3, #0]
 8003bd4:	f7ff fd88 	bl	80036e8 <BSP_LCD_GetXSize>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	88bb      	ldrh	r3, [r7, #4]
 8003bdc:	fb03 f202 	mul.w	r2, r3, r2
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4423      	add	r3, r4
 8003be8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <BSP_LCD_DrawHLine+0xb0>)
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68fc      	ldr	r4, [r7, #12]
 8003bf0:	887d      	ldrh	r5, [r7, #2]
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <BSP_LCD_DrawHLine+0xb0>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	490b      	ldr	r1, [pc, #44]	; (8003c24 <BSP_LCD_DrawHLine+0xb8>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4621      	mov	r1, r4
 8003c10:	f000 fc28 	bl	8004464 <LL_FillBuffer>
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1c:	20000440 	.word	0x20000440
 8003c20:	20008cc0 	.word	0x20008cc0
 8003c24:	20000444 	.word	0x20000444

08003c28 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]
 8003c32:	460b      	mov	r3, r1
 8003c34:	80bb      	strh	r3, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	f1c3 0303 	rsb	r3, r3, #3
 8003c42:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003c48:	887b      	ldrh	r3, [r7, #2]
 8003c4a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003c4c:	e0cf      	b.n	8003dee <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4413      	add	r3, r2
 8003c56:	b298      	uxth	r0, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	88ba      	ldrh	r2, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b29c      	uxth	r4, r3
 8003c62:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4967      	ldr	r1, [pc, #412]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4621      	mov	r1, r4
 8003c78:	f000 f8c6 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	b298      	uxth	r0, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	88ba      	ldrh	r2, [r7, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	b29c      	uxth	r4, r3
 8003c90:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	495b      	ldr	r1, [pc, #364]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	f000 f8af 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	b298      	uxth	r0, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	88ba      	ldrh	r2, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	b29c      	uxth	r4, r3
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4950      	ldr	r1, [pc, #320]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	f000 f898 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b298      	uxth	r0, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	88ba      	ldrh	r2, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	b29c      	uxth	r4, r3
 8003cec:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4944      	ldr	r1, [pc, #272]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4621      	mov	r1, r4
 8003d02:	f000 f881 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	b298      	uxth	r0, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	88bb      	ldrh	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	b29c      	uxth	r4, r3
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4939      	ldr	r1, [pc, #228]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4621      	mov	r1, r4
 8003d30:	f000 f86a 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	b298      	uxth	r0, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	88bb      	ldrh	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	b29c      	uxth	r4, r3
 8003d48:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	492d      	ldr	r1, [pc, #180]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	f000 f853 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b298      	uxth	r0, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	88bb      	ldrh	r3, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	b29c      	uxth	r4, r3
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	f000 f83c 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	b298      	uxth	r0, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	88bb      	ldrh	r3, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	b29c      	uxth	r4, r3
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <BSP_LCD_DrawCircle+0x1d8>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4916      	ldr	r1, [pc, #88]	; (8003e04 <BSP_LCD_DrawCircle+0x1dc>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4621      	mov	r1, r4
 8003dba:	f000 f825 	bl	8003e08 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da06      	bge.n	8003dd2 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	009a      	lsls	r2, r3, #2
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3306      	adds	r3, #6
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e00a      	b.n	8003de8 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	009a      	lsls	r2, r3, #2
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	330a      	adds	r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
      current_y--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3301      	adds	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f67f af2b 	bls.w	8003c4e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd90      	pop	{r4, r7, pc}
 8003e00:	20000440 	.word	0x20000440
 8003e04:	20000444 	.word	0x20000444

08003e08 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	603a      	str	r2, [r7, #0]
 8003e12:	80fb      	strh	r3, [r7, #6]
 8003e14:	460b      	mov	r3, r1
 8003e16:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <BSP_LCD_DrawPixel+0x88>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <BSP_LCD_DrawPixel+0x8c>)
 8003e1e:	2134      	movs	r1, #52	; 0x34
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	3348      	adds	r3, #72	; 0x48
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d116      	bne.n	8003e5c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <BSP_LCD_DrawPixel+0x88>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a18      	ldr	r2, [pc, #96]	; (8003e94 <BSP_LCD_DrawPixel+0x8c>)
 8003e34:	2134      	movs	r1, #52	; 0x34
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	335c      	adds	r3, #92	; 0x5c
 8003e3e:	681c      	ldr	r4, [r3, #0]
 8003e40:	88bd      	ldrh	r5, [r7, #4]
 8003e42:	f7ff fc51 	bl	80036e8 <BSP_LCD_GetXSize>
 8003e46:	4603      	mov	r3, r0
 8003e48:	fb03 f205 	mul.w	r2, r3, r5
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	4413      	add	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4423      	add	r3, r4
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	b292      	uxth	r2, r2
 8003e58:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003e5a:	e015      	b.n	8003e88 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <BSP_LCD_DrawPixel+0x88>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <BSP_LCD_DrawPixel+0x8c>)
 8003e62:	2134      	movs	r1, #52	; 0x34
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	335c      	adds	r3, #92	; 0x5c
 8003e6c:	681c      	ldr	r4, [r3, #0]
 8003e6e:	88bd      	ldrh	r5, [r7, #4]
 8003e70:	f7ff fc3a 	bl	80036e8 <BSP_LCD_GetXSize>
 8003e74:	4603      	mov	r3, r0
 8003e76:	fb03 f205 	mul.w	r2, r3, r5
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4423      	add	r3, r4
 8003e82:	461a      	mov	r2, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e90:	20000440 	.word	0x20000440
 8003e94:	20008cc0 	.word	0x20008cc0

08003e98 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af02      	add	r7, sp, #8
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	80fb      	strh	r3, [r7, #6]
 8003eac:	4603      	mov	r3, r0
 8003eae:	80bb      	strh	r3, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003ebc:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <BSP_LCD_FillRect+0xe8>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4930      	ldr	r1, [pc, #192]	; (8003f84 <BSP_LCD_FillRect+0xec>)
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fca2 	bl	8003818 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <BSP_LCD_FillRect+0xe8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <BSP_LCD_FillRect+0xf0>)
 8003eda:	2134      	movs	r1, #52	; 0x34
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3348      	adds	r3, #72	; 0x48
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d114      	bne.n	8003f14 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <BSP_LCD_FillRect+0xe8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <BSP_LCD_FillRect+0xf0>)
 8003ef0:	2134      	movs	r1, #52	; 0x34
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	335c      	adds	r3, #92	; 0x5c
 8003efa:	681c      	ldr	r4, [r3, #0]
 8003efc:	f7ff fbf4 	bl	80036e8 <BSP_LCD_GetXSize>
 8003f00:	4602      	mov	r2, r0
 8003f02:	88bb      	ldrh	r3, [r7, #4]
 8003f04:	fb03 f202 	mul.w	r2, r3, r2
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4423      	add	r3, r4
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e013      	b.n	8003f3c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <BSP_LCD_FillRect+0xe8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <BSP_LCD_FillRect+0xf0>)
 8003f1a:	2134      	movs	r1, #52	; 0x34
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	335c      	adds	r3, #92	; 0x5c
 8003f24:	681c      	ldr	r4, [r3, #0]
 8003f26:	f7ff fbdf 	bl	80036e8 <BSP_LCD_GetXSize>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	88bb      	ldrh	r3, [r7, #4]
 8003f2e:	fb03 f202 	mul.w	r2, r3, r2
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4423      	add	r3, r4
 8003f3a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <BSP_LCD_FillRect+0xe8>)
 8003f3e:	681c      	ldr	r4, [r3, #0]
 8003f40:	68fd      	ldr	r5, [r7, #12]
 8003f42:	887e      	ldrh	r6, [r7, #2]
 8003f44:	f8b7 8000 	ldrh.w	r8, [r7]
 8003f48:	f7ff fbce 	bl	80036e8 <BSP_LCD_GetXSize>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	1ad1      	subs	r1, r2, r3
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <BSP_LCD_FillRect+0xe8>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	480b      	ldr	r0, [pc, #44]	; (8003f84 <BSP_LCD_FillRect+0xec>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4403      	add	r3, r0
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	9100      	str	r1, [sp, #0]
 8003f68:	4643      	mov	r3, r8
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4620      	mov	r0, r4
 8003f70:	f000 fa78 	bl	8004464 <LL_FillBuffer>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000440 	.word	0x20000440
 8003f84:	20000444 	.word	0x20000444
 8003f88:	20008cc0 	.word	0x20008cc0

08003f8c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
 8003f96:	460b      	mov	r3, r1
 8003f98:	80bb      	strh	r3, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	f1c3 0303 	rsb	r3, r3, #3
 8003fa6:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003fb0:	4b44      	ldr	r3, [pc, #272]	; (80040c4 <BSP_LCD_FillCircle+0x138>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4944      	ldr	r1, [pc, #272]	; (80040c8 <BSP_LCD_FillCircle+0x13c>)
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fc28 	bl	8003818 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003fc8:	e061      	b.n	800408e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d021      	beq.n	8004014 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	b298      	uxth	r0, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	88bb      	ldrh	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	b299      	uxth	r1, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	f7ff fdbd 	bl	8003b6c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	b298      	uxth	r0, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	88ba      	ldrh	r2, [r7, #4]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	b299      	uxth	r1, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	b29b      	uxth	r3, r3
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	b29b      	uxth	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	f7ff fdac 	bl	8003b6c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d021      	beq.n	800405e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	b29b      	uxth	r3, r3
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	b298      	uxth	r0, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	b29b      	uxth	r3, r3
 8004028:	88ba      	ldrh	r2, [r7, #4]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	b299      	uxth	r1, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	b29b      	uxth	r3, r3
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	f7ff fd98 	bl	8003b6c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	b29b      	uxth	r3, r3
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	b298      	uxth	r0, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	b29a      	uxth	r2, r3
 800404a:	88bb      	ldrh	r3, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	b299      	uxth	r1, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	b29b      	uxth	r3, r3
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	f7ff fd87 	bl	8003b6c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	da06      	bge.n	8004072 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	009a      	lsls	r2, r3, #2
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4413      	add	r3, r2
 800406c:	3306      	adds	r3, #6
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e00a      	b.n	8004088 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	009a      	lsls	r2, r3, #2
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4413      	add	r3, r2
 800407e:	330a      	adds	r3, #10
 8004080:	617b      	str	r3, [r7, #20]
      current_y--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b01      	subs	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	3301      	adds	r3, #1
 800408c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d999      	bls.n	8003fca <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <BSP_LCD_FillCircle+0x138>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	490b      	ldr	r1, [pc, #44]	; (80040c8 <BSP_LCD_FillCircle+0x13c>)
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fbb5 	bl	8003818 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	88b9      	ldrh	r1, [r7, #4]
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fdb7 	bl	8003c28 <BSP_LCD_DrawCircle>
}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000440 	.word	0x20000440
 80040c8:	20000444 	.word	0x20000444

080040cc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <BSP_LCD_DisplayOn+0x30>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <BSP_LCD_DisplayOn+0x30>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80040e0:	2201      	movs	r2, #1
 80040e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e6:	4806      	ldr	r0, [pc, #24]	; (8004100 <BSP_LCD_DisplayOn+0x34>)
 80040e8:	f003 f974 	bl	80073d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80040ec:	2201      	movs	r2, #1
 80040ee:	2108      	movs	r1, #8
 80040f0:	4804      	ldr	r0, [pc, #16]	; (8004104 <BSP_LCD_DisplayOn+0x38>)
 80040f2:	f003 f96f 	bl	80073d4 <HAL_GPIO_WritePin>
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20008cc0 	.word	0x20008cc0
 8004100:	40022000 	.word	0x40022000
 8004104:	40022800 	.word	0x40022800

08004108 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b090      	sub	sp, #64	; 0x40
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004112:	4b64      	ldr	r3, [pc, #400]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4a63      	ldr	r2, [pc, #396]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800411c:	6453      	str	r3, [r2, #68]	; 0x44
 800411e:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800412a:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004130:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004134:	6313      	str	r3, [r2, #48]	; 0x30
 8004136:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004142:	4b58      	ldr	r3, [pc, #352]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	4a57      	ldr	r2, [pc, #348]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004148:	f043 0310 	orr.w	r3, r3, #16
 800414c:	6313      	str	r3, [r2, #48]	; 0x30
 800414e:	4b55      	ldr	r3, [pc, #340]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800415a:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	4a51      	ldr	r2, [pc, #324]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004164:	6313      	str	r3, [r2, #48]	; 0x30
 8004166:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004172:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a4b      	ldr	r2, [pc, #300]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a45      	ldr	r2, [pc, #276]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ac:	6313      	str	r3, [r2, #48]	; 0x30
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6313      	str	r3, [r2, #48]	; 0x30
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80041d2:	4b34      	ldr	r3, [pc, #208]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a33      	ldr	r2, [pc, #204]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <BSP_LCD_MspInit+0x19c>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80041ea:	2310      	movs	r3, #16
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80041f6:	2302      	movs	r3, #2
 80041f8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80041fa:	230e      	movs	r3, #14
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80041fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004202:	4619      	mov	r1, r3
 8004204:	4828      	ldr	r0, [pc, #160]	; (80042a8 <BSP_LCD_MspInit+0x1a0>)
 8004206:	f002 fe19 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800420a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004214:	2309      	movs	r3, #9
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800421c:	4619      	mov	r1, r3
 800421e:	4823      	ldr	r0, [pc, #140]	; (80042ac <BSP_LCD_MspInit+0x1a4>)
 8004220:	f002 fe0c 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004224:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800422e:	230e      	movs	r3, #14
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004236:	4619      	mov	r1, r3
 8004238:	481d      	ldr	r0, [pc, #116]	; (80042b0 <BSP_LCD_MspInit+0x1a8>)
 800423a:	f002 fdff 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800423e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004248:	230e      	movs	r3, #14
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800424c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004250:	4619      	mov	r1, r3
 8004252:	4818      	ldr	r0, [pc, #96]	; (80042b4 <BSP_LCD_MspInit+0x1ac>)
 8004254:	f002 fdf2 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004258:	23f7      	movs	r3, #247	; 0xf7
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800425c:	2302      	movs	r3, #2
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004260:	230e      	movs	r3, #14
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004268:	4619      	mov	r1, r3
 800426a:	4813      	ldr	r0, [pc, #76]	; (80042b8 <BSP_LCD_MspInit+0x1b0>)
 800426c:	f002 fde6 	bl	8006e3c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004276:	2301      	movs	r3, #1
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800427a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800427e:	4619      	mov	r1, r3
 8004280:	480b      	ldr	r0, [pc, #44]	; (80042b0 <BSP_LCD_MspInit+0x1a8>)
 8004282:	f002 fddb 	bl	8006e3c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004286:	2308      	movs	r3, #8
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800428a:	2301      	movs	r3, #1
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800428e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004292:	4619      	mov	r1, r3
 8004294:	4808      	ldr	r0, [pc, #32]	; (80042b8 <BSP_LCD_MspInit+0x1b0>)
 8004296:	f002 fdd1 	bl	8006e3c <HAL_GPIO_Init>
}
 800429a:	bf00      	nop
 800429c:	3740      	adds	r7, #64	; 0x40
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40021800 	.word	0x40021800
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40022400 	.word	0x40022400
 80042b8:	40022800 	.word	0x40022800

080042bc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <BSP_LCD_ClockConfig+0x34>)
 80042c8:	2208      	movs	r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80042cc:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <BSP_LCD_ClockConfig+0x34>)
 80042ce:	22c0      	movs	r2, #192	; 0xc0
 80042d0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <BSP_LCD_ClockConfig+0x34>)
 80042d4:	2205      	movs	r2, #5
 80042d6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <BSP_LCD_ClockConfig+0x34>)
 80042da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80042e0:	4803      	ldr	r0, [pc, #12]	; (80042f0 <BSP_LCD_ClockConfig+0x34>)
 80042e2:	f004 fed9 	bl	8009098 <HAL_RCCEx_PeriphCLKConfig>
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000045c 	.word	0x2000045c

080042f4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	603a      	str	r2, [r7, #0]
 80042fe:	80fb      	strh	r3, [r7, #6]
 8004300:	460b      	mov	r3, r1
 8004302:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <DrawChar+0x168>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4953      	ldr	r1, [pc, #332]	; (8004460 <DrawChar+0x16c>)
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3308      	adds	r3, #8
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	88db      	ldrh	r3, [r3, #6]
 8004322:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004324:	4b4d      	ldr	r3, [pc, #308]	; (800445c <DrawChar+0x168>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	494d      	ldr	r1, [pc, #308]	; (8004460 <DrawChar+0x16c>)
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3308      	adds	r3, #8
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	889b      	ldrh	r3, [r3, #4]
 800433a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800433c:	8a3b      	ldrh	r3, [r7, #16]
 800433e:	3307      	adds	r3, #7
 8004340:	2b00      	cmp	r3, #0
 8004342:	da00      	bge.n	8004346 <DrawChar+0x52>
 8004344:	3307      	adds	r3, #7
 8004346:	10db      	asrs	r3, r3, #3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8a3b      	ldrh	r3, [r7, #16]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e076      	b.n	800444a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800435c:	8a3b      	ldrh	r3, [r7, #16]
 800435e:	3307      	adds	r3, #7
 8004360:	2b00      	cmp	r3, #0
 8004362:	da00      	bge.n	8004366 <DrawChar+0x72>
 8004364:	3307      	adds	r3, #7
 8004366:	10db      	asrs	r3, r3, #3
 8004368:	461a      	mov	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fb03 f302 	mul.w	r3, r3, r2
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4413      	add	r3, r2
 8004374:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004376:	8a3b      	ldrh	r3, [r7, #16]
 8004378:	3307      	adds	r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	da00      	bge.n	8004380 <DrawChar+0x8c>
 800437e:	3307      	adds	r3, #7
 8004380:	10db      	asrs	r3, r3, #3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d002      	beq.n	800438c <DrawChar+0x98>
 8004386:	2b02      	cmp	r3, #2
 8004388:	d004      	beq.n	8004394 <DrawChar+0xa0>
 800438a:	e00c      	b.n	80043a6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	617b      	str	r3, [r7, #20]
      break;
 8004392:	e016      	b.n	80043c2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	3201      	adds	r2, #1
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
      break;
 80043a4:	e00d      	b.n	80043c2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	041a      	lsls	r2, r3, #16
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	3301      	adds	r3, #1
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	4313      	orrs	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	3202      	adds	r2, #2
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
      break;
 80043c0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e036      	b.n	8004436 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80043c8:	8a3a      	ldrh	r2, [r7, #16]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	1ad2      	subs	r2, r2, r3
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	4413      	add	r3, r2
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2201      	movs	r2, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d012      	beq.n	800440a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	4413      	add	r3, r2
 80043ec:	b298      	uxth	r0, r3
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <DrawChar+0x168>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	491b      	ldr	r1, [pc, #108]	; (8004460 <DrawChar+0x16c>)
 80043f4:	4613      	mov	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	88bb      	ldrh	r3, [r7, #4]
 8004402:	4619      	mov	r1, r3
 8004404:	f7ff fd00 	bl	8003e08 <BSP_LCD_DrawPixel>
 8004408:	e012      	b.n	8004430 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	b29a      	uxth	r2, r3
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	4413      	add	r3, r2
 8004412:	b298      	uxth	r0, r3
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <DrawChar+0x168>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4911      	ldr	r1, [pc, #68]	; (8004460 <DrawChar+0x16c>)
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	3304      	adds	r3, #4
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	88bb      	ldrh	r3, [r7, #4]
 800442a:	4619      	mov	r1, r3
 800442c:	f7ff fcec 	bl	8003e08 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	3301      	adds	r3, #1
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	8a3b      	ldrh	r3, [r7, #16]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3c4      	bcc.n	80043c8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800443e:	88bb      	ldrh	r3, [r7, #4]
 8004440:	3301      	adds	r3, #1
 8004442:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	3301      	adds	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	8a7b      	ldrh	r3, [r7, #18]
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	429a      	cmp	r2, r3
 8004450:	d384      	bcc.n	800435c <DrawChar+0x68>
  }
}
 8004452:	bf00      	nop
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000440 	.word	0x20000440
 8004460:	20000444 	.word	0x20000444

08004464 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <LL_FillBuffer+0x88>)
 8004474:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004478:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <LL_FillBuffer+0x8c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <LL_FillBuffer+0x90>)
 8004480:	2134      	movs	r1, #52	; 0x34
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3348      	adds	r3, #72	; 0x48
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d103      	bne.n	8004498 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <LL_FillBuffer+0x88>)
 8004492:	2202      	movs	r2, #2
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	e002      	b.n	800449e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <LL_FillBuffer+0x88>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <LL_FillBuffer+0x88>)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <LL_FillBuffer+0x88>)
 80044a6:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <LL_FillBuffer+0x94>)
 80044a8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80044aa:	4810      	ldr	r0, [pc, #64]	; (80044ec <LL_FillBuffer+0x88>)
 80044ac:	f002 fa3a 	bl	8006924 <HAL_DMA2D_Init>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d115      	bne.n	80044e2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	480c      	ldr	r0, [pc, #48]	; (80044ec <LL_FillBuffer+0x88>)
 80044ba:	f002 fb91 	bl	8006be0 <HAL_DMA2D_ConfigLayer>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10e      	bne.n	80044e2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69f9      	ldr	r1, [r7, #28]
 80044ce:	4807      	ldr	r0, [pc, #28]	; (80044ec <LL_FillBuffer+0x88>)
 80044d0:	f002 fa72 	bl	80069b8 <HAL_DMA2D_Start>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80044da:	210a      	movs	r1, #10
 80044dc:	4803      	ldr	r0, [pc, #12]	; (80044ec <LL_FillBuffer+0x88>)
 80044de:	f002 fa96 	bl	8006a0e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000400 	.word	0x20000400
 80044f0:	20000440 	.word	0x20000440
 80044f4:	20008cc0 	.word	0x20008cc0
 80044f8:	4002b000 	.word	0x4002b000

080044fc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <BSP_SDRAM_Init+0xb0>)
 8004504:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 8004508:	2202      	movs	r2, #2
 800450a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800450c:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 800450e:	2207      	movs	r2, #7
 8004510:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 8004514:	2204      	movs	r2, #4
 8004516:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 800451a:	2207      	movs	r2, #7
 800451c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 8004520:	2202      	movs	r2, #2
 8004522:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 8004526:	2202      	movs	r2, #2
 8004528:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800452a:	4b21      	ldr	r3, [pc, #132]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 800452c:	2202      	movs	r2, #2
 800452e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004532:	2200      	movs	r2, #0
 8004534:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004538:	2200      	movs	r2, #0
 800453a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 800453e:	2204      	movs	r2, #4
 8004540:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004544:	2210      	movs	r2, #16
 8004546:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004554:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004558:	2200      	movs	r2, #0
 800455a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800455c:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 800455e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004562:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 800456e:	2200      	movs	r2, #0
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004572:	2100      	movs	r1, #0
 8004574:	480c      	ldr	r0, [pc, #48]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 8004576:	f000 f87f 	bl	8004678 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800457a:	490d      	ldr	r1, [pc, #52]	; (80045b0 <BSP_SDRAM_Init+0xb4>)
 800457c:	480a      	ldr	r0, [pc, #40]	; (80045a8 <BSP_SDRAM_Init+0xac>)
 800457e:	f005 fd3b 	bl	8009ff8 <HAL_SDRAM_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <BSP_SDRAM_Init+0xb8>)
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e002      	b.n	8004596 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <BSP_SDRAM_Init+0xb8>)
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004596:	f240 6003 	movw	r0, #1539	; 0x603
 800459a:	f000 f80d 	bl	80045b8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <BSP_SDRAM_Init+0xb8>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20008d68 	.word	0x20008d68
 80045ac:	a0000140 	.word	0xa0000140
 80045b0:	200004e0 	.word	0x200004e0
 80045b4:	2000003c 	.word	0x2000003c

080045b8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045cc:	2210      	movs	r2, #16
 80045ce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045d8:	2200      	movs	r2, #0
 80045da:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80045dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e0:	4923      	ldr	r1, [pc, #140]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045e2:	4824      	ldr	r0, [pc, #144]	; (8004674 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80045e4:	f005 fd3c 	bl	800a060 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80045e8:	2001      	movs	r0, #1
 80045ea:	f001 fa11 	bl	8005a10 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045f0:	2202      	movs	r2, #2
 80045f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045f6:	2210      	movs	r2, #16
 80045f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800460a:	4919      	ldr	r1, [pc, #100]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800460c:	4819      	ldr	r0, [pc, #100]	; (8004674 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800460e:	f005 fd27 	bl	800a060 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004612:	4b17      	ldr	r3, [pc, #92]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004614:	2203      	movs	r2, #3
 8004616:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004618:	4b15      	ldr	r3, [pc, #84]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800461a:	2210      	movs	r2, #16
 800461c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800461e:	4b14      	ldr	r3, [pc, #80]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004620:	2208      	movs	r2, #8
 8004622:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800462a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800462e:	4910      	ldr	r1, [pc, #64]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004630:	4810      	ldr	r0, [pc, #64]	; (8004674 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004632:	f005 fd15 	bl	800a060 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004636:	f44f 7308 	mov.w	r3, #544	; 0x220
 800463a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800463e:	2204      	movs	r2, #4
 8004640:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004644:	2210      	movs	r2, #16
 8004646:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800464a:	2201      	movs	r2, #1
 800464c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a07      	ldr	r2, [pc, #28]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004652:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004658:	4905      	ldr	r1, [pc, #20]	; (8004670 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800465a:	4806      	ldr	r0, [pc, #24]	; (8004674 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800465c:	f005 fd00 	bl	800a060 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4804      	ldr	r0, [pc, #16]	; (8004674 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004664:	f005 fd27 	bl	800a0b6 <HAL_SDRAM_ProgramRefreshRate>
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200004fc 	.word	0x200004fc
 8004674:	20008d68 	.word	0x20008d68

08004678 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004678:	b580      	push	{r7, lr}
 800467a:	b090      	sub	sp, #64	; 0x40
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004682:	4b70      	ldr	r3, [pc, #448]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	4a6f      	ldr	r2, [pc, #444]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6393      	str	r3, [r2, #56]	; 0x38
 800468e:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800469a:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a69      	ldr	r2, [pc, #420]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b67      	ldr	r3, [pc, #412]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b2:	4b64      	ldr	r3, [pc, #400]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	4a63      	ldr	r2, [pc, #396]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046b8:	f043 0304 	orr.w	r3, r3, #4
 80046bc:	6313      	str	r3, [r2, #48]	; 0x30
 80046be:	4b61      	ldr	r3, [pc, #388]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ca:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a5d      	ldr	r2, [pc, #372]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046d0:	f043 0308 	orr.w	r3, r3, #8
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a57      	ldr	r2, [pc, #348]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046e8:	f043 0310 	orr.w	r3, r3, #16
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b55      	ldr	r3, [pc, #340]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80046fa:	4b52      	ldr	r3, [pc, #328]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a51      	ldr	r2, [pc, #324]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004700:	f043 0320 	orr.w	r3, r3, #32
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004712:	4b4c      	ldr	r3, [pc, #304]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471c:	6313      	str	r3, [r2, #48]	; 0x30
 800471e:	4b49      	ldr	r3, [pc, #292]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800472a:	4b46      	ldr	r3, [pc, #280]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	4a45      	ldr	r2, [pc, #276]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	6313      	str	r3, [r2, #48]	; 0x30
 8004736:	4b43      	ldr	r3, [pc, #268]	; (8004844 <BSP_SDRAM_MspInit+0x1cc>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004742:	2302      	movs	r3, #2
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004746:	2301      	movs	r3, #1
 8004748:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800474a:	2302      	movs	r3, #2
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800474e:	230c      	movs	r3, #12
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004752:	2308      	movs	r3, #8
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800475a:	4619      	mov	r1, r3
 800475c:	483a      	ldr	r0, [pc, #232]	; (8004848 <BSP_SDRAM_MspInit+0x1d0>)
 800475e:	f002 fb6d 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004762:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800476c:	4619      	mov	r1, r3
 800476e:	4837      	ldr	r0, [pc, #220]	; (800484c <BSP_SDRAM_MspInit+0x1d4>)
 8004770:	f002 fb64 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004774:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800477a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800477e:	4619      	mov	r1, r3
 8004780:	4833      	ldr	r0, [pc, #204]	; (8004850 <BSP_SDRAM_MspInit+0x1d8>)
 8004782:	f002 fb5b 	bl	8006e3c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004786:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800478c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004790:	4619      	mov	r1, r3
 8004792:	4830      	ldr	r0, [pc, #192]	; (8004854 <BSP_SDRAM_MspInit+0x1dc>)
 8004794:	f002 fb52 	bl	8006e3c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004798:	f248 1333 	movw	r3, #33075	; 0x8133
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800479e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047a2:	4619      	mov	r1, r3
 80047a4:	482c      	ldr	r0, [pc, #176]	; (8004858 <BSP_SDRAM_MspInit+0x1e0>)
 80047a6:	f002 fb49 	bl	8006e3c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80047aa:	2328      	movs	r3, #40	; 0x28
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80047ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	4829      	ldr	r0, [pc, #164]	; (800485c <BSP_SDRAM_MspInit+0x1e4>)
 80047b6:	f002 fb41 	bl	8006e3c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047cc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047dc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047e4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80047e6:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80047f4:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 80047fc:	2203      	movs	r2, #3
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 8004802:	2200      	movs	r2, #0
 8004804:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <BSP_SDRAM_MspInit+0x1ec>)
 8004810:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a12      	ldr	r2, [pc, #72]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
 8004818:	4a11      	ldr	r2, [pc, #68]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800481e:	4810      	ldr	r0, [pc, #64]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 8004820:	f001 ff50 	bl	80066c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004824:	480e      	ldr	r0, [pc, #56]	; (8004860 <BSP_SDRAM_MspInit+0x1e8>)
 8004826:	f001 fe9f 	bl	8006568 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	210f      	movs	r1, #15
 800482e:	2038      	movs	r0, #56	; 0x38
 8004830:	f001 fda2 	bl	8006378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004834:	2038      	movs	r0, #56	; 0x38
 8004836:	f001 fdbb 	bl	80063b0 <HAL_NVIC_EnableIRQ>
}
 800483a:	bf00      	nop
 800483c:	3740      	adds	r7, #64	; 0x40
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	40020800 	.word	0x40020800
 800484c:	40020c00 	.word	0x40020c00
 8004850:	40021000 	.word	0x40021000
 8004854:	40021400 	.word	0x40021400
 8004858:	40021800 	.word	0x40021800
 800485c:	40021c00 	.word	0x40021c00
 8004860:	2000050c 	.word	0x2000050c
 8004864:	40026410 	.word	0x40026410

08004868 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	460a      	mov	r2, r1
 8004872:	80fb      	strh	r3, [r7, #6]
 8004874:	4613      	mov	r3, r2
 8004876:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <BSP_TS_Init+0x68>)
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004882:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <BSP_TS_Init+0x6c>)
 8004884:	88bb      	ldrh	r3, [r7, #4]
 8004886:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <BSP_TS_Init+0x70>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2070      	movs	r0, #112	; 0x70
 800488e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <BSP_TS_Init+0x70>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2070      	movs	r0, #112	; 0x70
 8004896:	4798      	blx	r3
 8004898:	4603      	mov	r3, r0
 800489a:	2b51      	cmp	r3, #81	; 0x51
 800489c:	d111      	bne.n	80048c2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <BSP_TS_Init+0x74>)
 80048a0:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <BSP_TS_Init+0x70>)
 80048a2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <BSP_TS_Init+0x78>)
 80048a6:	2270      	movs	r2, #112	; 0x70
 80048a8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <BSP_TS_Init+0x7c>)
 80048ac:	2208      	movs	r2, #8
 80048ae:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <BSP_TS_Init+0x74>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <BSP_TS_Init+0x78>)
 80048b8:	7812      	ldrb	r2, [r2, #0]
 80048ba:	b292      	uxth	r2, r2
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
 80048c0:	e001      	b.n	80048c6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80048c2:	2303      	movs	r3, #3
 80048c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000570 	.word	0x20000570
 80048d4:	20000572 	.word	0x20000572
 80048d8:	20000000 	.word	0x20000000
 80048dc:	2000056c 	.word	0x2000056c
 80048e0:	20000575 	.word	0x20000575
 80048e4:	20000574 	.word	0x20000574

080048e8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80048e8:	b590      	push	{r4, r7, lr}
 80048ea:	b097      	sub	sp, #92	; 0x5c
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004902:	4b97      	ldr	r3, [pc, #604]	; (8004b60 <BSP_TS_GetState+0x278>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	4a96      	ldr	r2, [pc, #600]	; (8004b64 <BSP_TS_GetState+0x27c>)
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	b292      	uxth	r2, r2
 800490e:	4610      	mov	r0, r2
 8004910:	4798      	blx	r3
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 81a8 	beq.w	8004c74 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004924:	2300      	movs	r3, #0
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	e197      	b.n	8004c5a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800492a:	4b8d      	ldr	r3, [pc, #564]	; (8004b60 <BSP_TS_GetState+0x278>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	4a8c      	ldr	r2, [pc, #560]	; (8004b64 <BSP_TS_GetState+0x27c>)
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	b290      	uxth	r0, r2
 8004936:	f107 0120 	add.w	r1, r7, #32
 800493a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800493c:	0052      	lsls	r2, r2, #1
 800493e:	188c      	adds	r4, r1, r2
 8004940:	f107 0114 	add.w	r1, r7, #20
 8004944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004946:	0052      	lsls	r2, r2, #1
 8004948:	440a      	add	r2, r1
 800494a:	4621      	mov	r1, r4
 800494c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800494e:	4b86      	ldr	r3, [pc, #536]	; (8004b68 <BSP_TS_GetState+0x280>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d11b      	bne.n	800498e <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800495e:	4413      	add	r3, r2
 8004960:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800496c:	440b      	add	r3, r1
 800496e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800497a:	4413      	add	r3, r2
 800497c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004988:	440b      	add	r3, r1
 800498a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800498e:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <BSP_TS_GetState+0x280>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80049a2:	4413      	add	r3, r2
 80049a4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80049a8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80049b6:	440b      	add	r3, r1
 80049b8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80049bc:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <BSP_TS_GetState+0x280>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d010      	beq.n	80049ea <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80049c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80049d0:	4413      	add	r3, r2
 80049d2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80049d6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80049e4:	440b      	add	r3, r1
 80049e6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80049ea:	4b5f      	ldr	r3, [pc, #380]	; (8004b68 <BSP_TS_GetState+0x280>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01b      	beq.n	8004a2e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80049f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80049fe:	4413      	add	r3, r2
 8004a00:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004a28:	440b      	add	r3, r1
 8004a2a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004a36:	4413      	add	r3, r2
 8004a38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <BSP_TS_GetState+0x284>)
 8004a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a46:	4299      	cmp	r1, r3
 8004a48:	d90e      	bls.n	8004a68 <BSP_TS_GetState+0x180>
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004a52:	4413      	add	r3, r2
 8004a54:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004a58:	4944      	ldr	r1, [pc, #272]	; (8004b6c <BSP_TS_GetState+0x284>)
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	e00d      	b.n	8004a84 <BSP_TS_GetState+0x19c>
 8004a68:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <BSP_TS_GetState+0x284>)
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004a7a:	440b      	add	r3, r1
 8004a7c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004a90:	4413      	add	r3, r2
 8004a92:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4a35      	ldr	r2, [pc, #212]	; (8004b70 <BSP_TS_GetState+0x288>)
 8004a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	d90e      	bls.n	8004ac2 <BSP_TS_GetState+0x1da>
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004aac:	4413      	add	r3, r2
 8004aae:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004ab2:	492f      	ldr	r1, [pc, #188]	; (8004b70 <BSP_TS_GetState+0x288>)
 8004ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	e00d      	b.n	8004ade <BSP_TS_GetState+0x1f6>
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	; (8004b70 <BSP_TS_GetState+0x288>)
 8004ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004ae2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004ae6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004aea:	4413      	add	r3, r2
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	dd17      	ble.n	8004b20 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004af8:	4413      	add	r3, r2
 8004afa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004afe:	4619      	mov	r1, r3
 8004b00:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <BSP_TS_GetState+0x284>)
 8004b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004b10:	4413      	add	r3, r2
 8004b12:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <BSP_TS_GetState+0x288>)
 8004b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <BSP_TS_GetState+0x27c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b70      	cmp	r3, #112	; 0x70
 8004b26:	d125      	bne.n	8004b74 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004b30:	4413      	add	r3, r2
 8004b32:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	460a      	mov	r2, r1
 8004b40:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b54:	3304      	adds	r3, #4
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	809a      	strh	r2, [r3, #4]
 8004b5e:	e02c      	b.n	8004bba <BSP_TS_GetState+0x2d2>
 8004b60:	2000056c 	.word	0x2000056c
 8004b64:	20000575 	.word	0x20000575
 8004b68:	20000574 	.word	0x20000574
 8004b6c:	20000578 	.word	0x20000578
 8004b70:	2000058c 	.word	0x2000058c
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004b74:	4b42      	ldr	r3, [pc, #264]	; (8004c80 <BSP_TS_GetState+0x398>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4a42      	ldr	r2, [pc, #264]	; (8004c84 <BSP_TS_GetState+0x39c>)
 8004b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b82:	fb03 f301 	mul.w	r3, r3, r1
 8004b86:	0b1b      	lsrs	r3, r3, #12
 8004b88:	b299      	uxth	r1, r3
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	460a      	mov	r2, r1
 8004b94:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004b96:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <BSP_TS_GetState+0x3a0>)
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <BSP_TS_GetState+0x3a4>)
 8004b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	fb03 f301 	mul.w	r3, r3, r1
 8004ba8:	0b1b      	lsrs	r3, r3, #12
 8004baa:	b299      	uxth	r1, r3
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004bba:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <BSP_TS_GetState+0x3a8>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b298      	uxth	r0, r3
 8004bc0:	f107 010c 	add.w	r1, r7, #12
 8004bc4:	f107 0210 	add.w	r2, r7, #16
 8004bc8:	f107 0308 	add.w	r3, r7, #8
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bd2:	f7fb feeb 	bl	80009ac <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	b2d9      	uxtb	r1, r3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bde:	4413      	add	r3, r2
 8004be0:	3316      	adds	r3, #22
 8004be2:	460a      	mov	r2, r1
 8004be4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	b2d9      	uxtb	r1, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bee:	4413      	add	r3, r2
 8004bf0:	3320      	adds	r3, #32
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d827      	bhi.n	8004c4c <BSP_TS_GetState+0x364>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <BSP_TS_GetState+0x31c>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c23 	.word	0x08004c23
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c3f 	.word	0x08004c3f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c18:	4413      	add	r3, r2
 8004c1a:	331b      	adds	r3, #27
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
          break;
 8004c20:	e018      	b.n	8004c54 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	4413      	add	r3, r2
 8004c28:	331b      	adds	r3, #27
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]
          break;
 8004c2e:	e011      	b.n	8004c54 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	4413      	add	r3, r2
 8004c36:	331b      	adds	r3, #27
 8004c38:	2203      	movs	r2, #3
 8004c3a:	701a      	strb	r2, [r3, #0]
          break;
 8004c3c:	e00a      	b.n	8004c54 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c42:	4413      	add	r3, r2
 8004c44:	331b      	adds	r3, #27
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
          break;
 8004c4a:	e003      	b.n	8004c54 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004c52:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c56:	3301      	adds	r3, #1
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	4293      	cmp	r3, r2
 8004c64:	f4ff ae61 	bcc.w	800492a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f813 	bl	8004c94 <BSP_TS_Get_GestureId>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004c74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3754      	adds	r7, #84	; 0x54
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd90      	pop	{r4, r7, pc}
 8004c80:	20000570 	.word	0x20000570
 8004c84:	20000578 	.word	0x20000578
 8004c88:	20000572 	.word	0x20000572
 8004c8c:	2000058c 	.word	0x2000058c
 8004c90:	20000575 	.word	0x20000575

08004c94 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004ca4:	4b1f      	ldr	r3, [pc, #124]	; (8004d24 <BSP_TS_Get_GestureId+0x90>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f107 0208 	add.w	r2, r7, #8
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fb fe62 	bl	800097a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b18      	cmp	r3, #24
 8004cba:	d01b      	beq.n	8004cf4 <BSP_TS_Get_GestureId+0x60>
 8004cbc:	2b18      	cmp	r3, #24
 8004cbe:	d806      	bhi.n	8004cce <BSP_TS_Get_GestureId+0x3a>
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d00f      	beq.n	8004ce4 <BSP_TS_Get_GestureId+0x50>
 8004cc4:	2b14      	cmp	r3, #20
 8004cc6:	d011      	beq.n	8004cec <BSP_TS_Get_GestureId+0x58>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <BSP_TS_Get_GestureId+0x48>
 8004ccc:	e022      	b.n	8004d14 <BSP_TS_Get_GestureId+0x80>
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d018      	beq.n	8004d04 <BSP_TS_Get_GestureId+0x70>
 8004cd2:	2b49      	cmp	r3, #73	; 0x49
 8004cd4:	d01a      	beq.n	8004d0c <BSP_TS_Get_GestureId+0x78>
 8004cd6:	2b1c      	cmp	r3, #28
 8004cd8:	d010      	beq.n	8004cfc <BSP_TS_Get_GestureId+0x68>
 8004cda:	e01b      	b.n	8004d14 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004ce2:	e01a      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004cea:	e016      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004cf2:	e012      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004cfa:	e00e      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004d02:	e00a      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2205      	movs	r2, #5
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004d0a:	e006      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2206      	movs	r2, #6
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004d12:	e002      	b.n	8004d1a <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000575 	.word	0x20000575

08004d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_MspInit+0x4c>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_MspInit+0x4c>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_MspInit+0x4c>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_MspInit+0x4c>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <HAL_MspInit+0x4c>)
 8004d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d50:	6453      	str	r3, [r2, #68]	; 0x44
 8004d52:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_MspInit+0x4c>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	210f      	movs	r1, #15
 8004d62:	f06f 0001 	mvn.w	r0, #1
 8004d66:	f001 fb07 	bl	8006378 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800

08004d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d80:	f107 031c 	add.w	r3, r7, #28
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <HAL_ADC_MspInit+0xc8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d124      	bne.n	8004de4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a29      	ldr	r2, [pc, #164]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dd6:	f107 031c 	add.w	r3, r7, #28
 8004dda:	4619      	mov	r1, r3
 8004ddc:	481a      	ldr	r0, [pc, #104]	; (8004e48 <HAL_ADC_MspInit+0xd0>)
 8004dde:	f002 f82d 	bl	8006e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004de2:	e029      	b.n	8004e38 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_ADC_MspInit+0xd4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d124      	bne.n	8004e38 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004df4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a0e      	ldr	r2, [pc, #56]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004e0c:	f043 0320 	orr.w	r3, r3, #32
 8004e10:	6313      	str	r3, [r2, #48]	; 0x30
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <HAL_ADC_MspInit+0xcc>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8004e1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e24:	2303      	movs	r3, #3
 8004e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e2c:	f107 031c 	add.w	r3, r7, #28
 8004e30:	4619      	mov	r1, r3
 8004e32:	4807      	ldr	r0, [pc, #28]	; (8004e50 <HAL_ADC_MspInit+0xd8>)
 8004e34:	f002 f802 	bl	8006e3c <HAL_GPIO_Init>
}
 8004e38:	bf00      	nop
 8004e3a:	3730      	adds	r7, #48	; 0x30
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40012000 	.word	0x40012000
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40020000 	.word	0x40020000
 8004e4c:	40012200 	.word	0x40012200
 8004e50:	40021400 	.word	0x40021400

08004e54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e5c:	f107 0314 	add.w	r3, r7, #20
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <HAL_DAC_MspInit+0x84>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d12b      	bne.n	8004ece <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_DAC_MspInit+0x88>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_DAC_MspInit+0x88>)
 8004e7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <HAL_DAC_MspInit+0x88>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8e:	4b13      	ldr	r3, [pc, #76]	; (8004edc <HAL_DAC_MspInit+0x88>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	4a12      	ldr	r2, [pc, #72]	; (8004edc <HAL_DAC_MspInit+0x88>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <HAL_DAC_MspInit+0x88>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4809      	ldr	r0, [pc, #36]	; (8004ee0 <HAL_DAC_MspInit+0x8c>)
 8004eba:	f001 ffbf 	bl	8006e3c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2036      	movs	r0, #54	; 0x36
 8004ec4:	f001 fa58 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ec8:	2036      	movs	r0, #54	; 0x36
 8004eca:	f001 fa71 	bl	80063b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004ece:	bf00      	nop
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40007400 	.word	0x40007400
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40020000 	.word	0x40020000

08004ee4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <HAL_DMA2D_MspInit+0x38>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10b      	bne.n	8004f0e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_DMA2D_MspInit+0x3c>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_DMA2D_MspInit+0x3c>)
 8004efc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f00:	6313      	str	r3, [r2, #48]	; 0x30
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <HAL_DMA2D_MspInit+0x3c>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	4002b000 	.word	0x4002b000
 8004f20:	40023800 	.word	0x40023800

08004f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <HAL_I2C_MspInit+0xdc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d129      	bne.n	8004f9a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b2c      	ldr	r3, [pc, #176]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f64:	2312      	movs	r3, #18
 8004f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f70:	2304      	movs	r3, #4
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f74:	f107 031c 	add.w	r3, r7, #28
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4823      	ldr	r0, [pc, #140]	; (8005008 <HAL_I2C_MspInit+0xe4>)
 8004f7c:	f001 ff5e 	bl	8006e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f80:	4b20      	ldr	r3, [pc, #128]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004f98:	e02d      	b.n	8004ff6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	; (800500c <HAL_I2C_MspInit+0xe8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d128      	bne.n	8004ff6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fa4:	4b17      	ldr	r3, [pc, #92]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004fbc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fc2:	2312      	movs	r3, #18
 8004fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004fce:	2304      	movs	r3, #4
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fd2:	f107 031c 	add.w	r3, r7, #28
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	480d      	ldr	r0, [pc, #52]	; (8005010 <HAL_I2C_MspInit+0xec>)
 8004fda:	f001 ff2f 	bl	8006e3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	4a08      	ldr	r2, [pc, #32]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004fe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_I2C_MspInit+0xe0>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40005400 	.word	0x40005400
 8005004:	40023800 	.word	0x40023800
 8005008:	40020400 	.word	0x40020400
 800500c:	40005c00 	.word	0x40005c00
 8005010:	40021c00 	.word	0x40021c00

08005014 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_I2C_MspDeInit+0x64>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d110      	bne.n	8005048 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_I2C_MspDeInit+0x68>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a14      	ldr	r2, [pc, #80]	; (800507c <HAL_I2C_MspDeInit+0x68>)
 800502c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005030:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8005032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005036:	4812      	ldr	r0, [pc, #72]	; (8005080 <HAL_I2C_MspDeInit+0x6c>)
 8005038:	f002 f8aa 	bl	8007190 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 800503c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005040:	480f      	ldr	r0, [pc, #60]	; (8005080 <HAL_I2C_MspDeInit+0x6c>)
 8005042:	f002 f8a5 	bl	8007190 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005046:	e013      	b.n	8005070 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <HAL_I2C_MspDeInit+0x70>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d10e      	bne.n	8005070 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_I2C_MspDeInit+0x68>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <HAL_I2C_MspDeInit+0x68>)
 8005058:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	4809      	ldr	r0, [pc, #36]	; (8005088 <HAL_I2C_MspDeInit+0x74>)
 8005062:	f002 f895 	bl	8007190 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800506a:	4807      	ldr	r0, [pc, #28]	; (8005088 <HAL_I2C_MspDeInit+0x74>)
 800506c:	f002 f890 	bl	8007190 <HAL_GPIO_DeInit>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40005400 	.word	0x40005400
 800507c:	40023800 	.word	0x40023800
 8005080:	40020400 	.word	0x40020400
 8005084:	40005c00 	.word	0x40005c00
 8005088:	40021c00 	.word	0x40021c00

0800508c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08e      	sub	sp, #56	; 0x38
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
 80050a2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a55      	ldr	r2, [pc, #340]	; (8005200 <HAL_LTDC_MspInit+0x174>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f040 80a3 	bne.w	80051f6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80050b0:	4b54      	ldr	r3, [pc, #336]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	4a53      	ldr	r2, [pc, #332]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050ba:	6453      	str	r3, [r2, #68]	; 0x44
 80050bc:	4b51      	ldr	r3, [pc, #324]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050c8:	4b4e      	ldr	r3, [pc, #312]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4a4d      	ldr	r2, [pc, #308]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050ce:	f043 0310 	orr.w	r3, r3, #16
 80050d2:	6313      	str	r3, [r2, #48]	; 0x30
 80050d4:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80050e0:	4b48      	ldr	r3, [pc, #288]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	4a47      	ldr	r2, [pc, #284]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ea:	6313      	str	r3, [r2, #48]	; 0x30
 80050ec:	4b45      	ldr	r3, [pc, #276]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	4a41      	ldr	r2, [pc, #260]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 80050fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005102:	6313      	str	r3, [r2, #48]	; 0x30
 8005104:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005110:	4b3c      	ldr	r3, [pc, #240]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 8005116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511a:	6313      	str	r3, [r2, #48]	; 0x30
 800511c:	4b39      	ldr	r3, [pc, #228]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005128:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	4a35      	ldr	r2, [pc, #212]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 800512e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005132:	6313      	str	r3, [r2, #48]	; 0x30
 8005134:	4b33      	ldr	r3, [pc, #204]	; (8005204 <HAL_LTDC_MspInit+0x178>)
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005140:	2310      	movs	r3, #16
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005144:	2302      	movs	r3, #2
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005150:	230e      	movs	r3, #14
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005158:	4619      	mov	r1, r3
 800515a:	482b      	ldr	r0, [pc, #172]	; (8005208 <HAL_LTDC_MspInit+0x17c>)
 800515c:	f001 fe6e 	bl	8006e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005160:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516e:	2300      	movs	r3, #0
 8005170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005172:	230e      	movs	r3, #14
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800517a:	4619      	mov	r1, r3
 800517c:	4823      	ldr	r0, [pc, #140]	; (800520c <HAL_LTDC_MspInit+0x180>)
 800517e:	f001 fe5d 	bl	8006e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005182:	23f7      	movs	r3, #247	; 0xf7
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005186:	2302      	movs	r3, #2
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518a:	2300      	movs	r3, #0
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	2300      	movs	r3, #0
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005192:	230e      	movs	r3, #14
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800519a:	4619      	mov	r1, r3
 800519c:	481c      	ldr	r0, [pc, #112]	; (8005210 <HAL_LTDC_MspInit+0x184>)
 800519e:	f001 fe4d 	bl	8006e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80051a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	2300      	movs	r3, #0
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80051b4:	2309      	movs	r3, #9
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80051b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051bc:	4619      	mov	r1, r3
 80051be:	4815      	ldr	r0, [pc, #84]	; (8005214 <HAL_LTDC_MspInit+0x188>)
 80051c0:	f001 fe3c 	bl	8006e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80051c4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ca:	2302      	movs	r3, #2
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d2:	2300      	movs	r3, #0
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80051d6:	230e      	movs	r3, #14
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051de:	4619      	mov	r1, r3
 80051e0:	480d      	ldr	r0, [pc, #52]	; (8005218 <HAL_LTDC_MspInit+0x18c>)
 80051e2:	f001 fe2b 	bl	8006e3c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80051e6:	2200      	movs	r2, #0
 80051e8:	2105      	movs	r1, #5
 80051ea:	2058      	movs	r0, #88	; 0x58
 80051ec:	f001 f8c4 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80051f0:	2058      	movs	r0, #88	; 0x58
 80051f2:	f001 f8dd 	bl	80063b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80051f6:	bf00      	nop
 80051f8:	3738      	adds	r7, #56	; 0x38
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40016800 	.word	0x40016800
 8005204:	40023800 	.word	0x40023800
 8005208:	40021000 	.word	0x40021000
 800520c:	40022400 	.word	0x40022400
 8005210:	40022800 	.word	0x40022800
 8005214:	40021800 	.word	0x40021800
 8005218:	40022000 	.word	0x40022000

0800521c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a07      	ldr	r2, [pc, #28]	; (8005248 <HAL_RTC_MspInit+0x2c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d105      	bne.n	800523a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800522e:	4b07      	ldr	r3, [pc, #28]	; (800524c <HAL_RTC_MspInit+0x30>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	4a06      	ldr	r2, [pc, #24]	; (800524c <HAL_RTC_MspInit+0x30>)
 8005234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005238:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40002800 	.word	0x40002800
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <HAL_SPI_MspInit+0xd4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d154      	bne.n	800531c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005272:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 8005278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	4a26      	ldr	r2, [pc, #152]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6313      	str	r3, [r2, #48]	; 0x30
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a2:	4b21      	ldr	r3, [pc, #132]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a20      	ldr	r2, [pc, #128]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <HAL_SPI_MspInit+0xd8>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80052ba:	2302      	movs	r3, #2
 80052bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052ca:	2305      	movs	r3, #5
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4619      	mov	r1, r3
 80052d4:	4815      	ldr	r0, [pc, #84]	; (800532c <HAL_SPI_MspInit+0xdc>)
 80052d6:	f001 fdb1 	bl	8006e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052da:	2301      	movs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052de:	2302      	movs	r3, #2
 80052e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e6:	2303      	movs	r3, #3
 80052e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052ea:	2305      	movs	r3, #5
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80052ee:	f107 0314 	add.w	r3, r7, #20
 80052f2:	4619      	mov	r1, r3
 80052f4:	480d      	ldr	r0, [pc, #52]	; (800532c <HAL_SPI_MspInit+0xdc>)
 80052f6:	f001 fda1 	bl	8006e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80052fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80052fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005300:	2302      	movs	r3, #2
 8005302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005308:	2303      	movs	r3, #3
 800530a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800530c:	2305      	movs	r3, #5
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005310:	f107 0314 	add.w	r3, r7, #20
 8005314:	4619      	mov	r1, r3
 8005316:	4806      	ldr	r0, [pc, #24]	; (8005330 <HAL_SPI_MspInit+0xe0>)
 8005318:	f001 fd90 	bl	8006e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800531c:	bf00      	nop
 800531e:	3728      	adds	r7, #40	; 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40003800 	.word	0x40003800
 8005328:	40023800 	.word	0x40023800
 800532c:	40022000 	.word	0x40022000
 8005330:	40020400 	.word	0x40020400

08005334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	; 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2e      	ldr	r2, [pc, #184]	; (80053fc <HAL_TIM_Base_MspInit+0xc8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10c      	bne.n	8005360 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005346:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	6453      	str	r3, [r2, #68]	; 0x44
 8005352:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800535e:	e046      	b.n	80053ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d10c      	bne.n	8005384 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	4a24      	ldr	r2, [pc, #144]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	6413      	str	r3, [r2, #64]	; 0x40
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	69bb      	ldr	r3, [r7, #24]
}
 8005382:	e034      	b.n	80053ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_TIM_Base_MspInit+0xd0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10c      	bne.n	80053a8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800538e:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	6413      	str	r3, [r2, #64]	; 0x40
 800539a:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	697b      	ldr	r3, [r7, #20]
}
 80053a6:	e022      	b.n	80053ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <HAL_TIM_Base_MspInit+0xd4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10c      	bne.n	80053cc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	4a12      	ldr	r2, [pc, #72]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 80053b8:	f043 0308 	orr.w	r3, r3, #8
 80053bc:	6413      	str	r3, [r2, #64]	; 0x40
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]
}
 80053ca:	e010      	b.n	80053ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0e      	ldr	r2, [pc, #56]	; (800540c <HAL_TIM_Base_MspInit+0xd8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10b      	bne.n	80053ee <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	6453      	str	r3, [r2, #68]	; 0x44
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <HAL_TIM_Base_MspInit+0xcc>)
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	bf00      	nop
 80053f0:	3724      	adds	r7, #36	; 0x24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40023800 	.word	0x40023800
 8005404:	40000400 	.word	0x40000400
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40010400 	.word	0x40010400

08005410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	; 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <HAL_TIM_MspPostInit+0xa8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d11c      	bne.n	800546c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_TIM_MspPostInit+0xac>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_TIM_MspPostInit+0xac>)
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	6313      	str	r3, [r2, #48]	; 0x30
 800543e:	4b1f      	ldr	r3, [pc, #124]	; (80054bc <HAL_TIM_MspPostInit+0xac>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800544a:	2310      	movs	r3, #16
 800544c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544e:	2302      	movs	r3, #2
 8005450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005456:	2300      	movs	r3, #0
 8005458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800545a:	2302      	movs	r3, #2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800545e:	f107 0314 	add.w	r3, r7, #20
 8005462:	4619      	mov	r1, r3
 8005464:	4816      	ldr	r0, [pc, #88]	; (80054c0 <HAL_TIM_MspPostInit+0xb0>)
 8005466:	f001 fce9 	bl	8006e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800546a:	e020      	b.n	80054ae <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <HAL_TIM_MspPostInit+0xb4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d11b      	bne.n	80054ae <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <HAL_TIM_MspPostInit+0xac>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <HAL_TIM_MspPostInit+0xac>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_TIM_MspPostInit+0xac>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800548e:	2304      	movs	r3, #4
 8005490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005492:	2302      	movs	r3, #2
 8005494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549a:	2300      	movs	r3, #0
 800549c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800549e:	2303      	movs	r3, #3
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4619      	mov	r1, r3
 80054a8:	4807      	ldr	r0, [pc, #28]	; (80054c8 <HAL_TIM_MspPostInit+0xb8>)
 80054aa:	f001 fcc7 	bl	8006e3c <HAL_GPIO_Init>
}
 80054ae:	bf00      	nop
 80054b0:	3728      	adds	r7, #40	; 0x28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40023800 	.word	0x40023800
 80054c0:	40020400 	.word	0x40020400
 80054c4:	40010400 	.word	0x40010400
 80054c8:	40022000 	.word	0x40022000

080054cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	; 0x38
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a57      	ldr	r2, [pc, #348]	; (8005648 <HAL_UART_MspInit+0x17c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d128      	bne.n	8005540 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80054ee:	4b57      	ldr	r3, [pc, #348]	; (800564c <HAL_UART_MspInit+0x180>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	4a56      	ldr	r2, [pc, #344]	; (800564c <HAL_UART_MspInit+0x180>)
 80054f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054f8:	6413      	str	r3, [r2, #64]	; 0x40
 80054fa:	4b54      	ldr	r3, [pc, #336]	; (800564c <HAL_UART_MspInit+0x180>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005506:	4b51      	ldr	r3, [pc, #324]	; (800564c <HAL_UART_MspInit+0x180>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	4a50      	ldr	r2, [pc, #320]	; (800564c <HAL_UART_MspInit+0x180>)
 800550c:	f043 0320 	orr.w	r3, r3, #32
 8005510:	6313      	str	r3, [r2, #48]	; 0x30
 8005512:	4b4e      	ldr	r3, [pc, #312]	; (800564c <HAL_UART_MspInit+0x180>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800551e:	23c0      	movs	r3, #192	; 0xc0
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005522:	2302      	movs	r3, #2
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005526:	2300      	movs	r3, #0
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552a:	2303      	movs	r3, #3
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800552e:	2308      	movs	r3, #8
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005536:	4619      	mov	r1, r3
 8005538:	4845      	ldr	r0, [pc, #276]	; (8005650 <HAL_UART_MspInit+0x184>)
 800553a:	f001 fc7f 	bl	8006e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800553e:	e07f      	b.n	8005640 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a43      	ldr	r2, [pc, #268]	; (8005654 <HAL_UART_MspInit+0x188>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d14d      	bne.n	80055e6 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <HAL_UART_MspInit+0x180>)
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	4a3f      	ldr	r2, [pc, #252]	; (800564c <HAL_UART_MspInit+0x180>)
 8005550:	f043 0310 	orr.w	r3, r3, #16
 8005554:	6453      	str	r3, [r2, #68]	; 0x44
 8005556:	4b3d      	ldr	r3, [pc, #244]	; (800564c <HAL_UART_MspInit+0x180>)
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <HAL_UART_MspInit+0x180>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4a39      	ldr	r2, [pc, #228]	; (800564c <HAL_UART_MspInit+0x180>)
 8005568:	f043 0302 	orr.w	r3, r3, #2
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_UART_MspInit+0x180>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557a:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_UART_MspInit+0x180>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	4a33      	ldr	r2, [pc, #204]	; (800564c <HAL_UART_MspInit+0x180>)
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	6313      	str	r3, [r2, #48]	; 0x30
 8005586:	4b31      	ldr	r3, [pc, #196]	; (800564c <HAL_UART_MspInit+0x180>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005596:	2302      	movs	r3, #2
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559a:	2300      	movs	r3, #0
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800559e:	2300      	movs	r3, #0
 80055a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055a2:	2307      	movs	r3, #7
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80055a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055aa:	4619      	mov	r1, r3
 80055ac:	482a      	ldr	r0, [pc, #168]	; (8005658 <HAL_UART_MspInit+0x18c>)
 80055ae:	f001 fc45 	bl	8006e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80055b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b8:	2302      	movs	r3, #2
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c0:	2300      	movs	r3, #0
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055c4:	2307      	movs	r3, #7
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80055c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055cc:	4619      	mov	r1, r3
 80055ce:	4823      	ldr	r0, [pc, #140]	; (800565c <HAL_UART_MspInit+0x190>)
 80055d0:	f001 fc34 	bl	8006e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80055d4:	2200      	movs	r2, #0
 80055d6:	2105      	movs	r1, #5
 80055d8:	2025      	movs	r0, #37	; 0x25
 80055da:	f000 fecd 	bl	8006378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055de:	2025      	movs	r0, #37	; 0x25
 80055e0:	f000 fee6 	bl	80063b0 <HAL_NVIC_EnableIRQ>
}
 80055e4:	e02c      	b.n	8005640 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_UART_MspInit+0x194>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d127      	bne.n	8005640 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_UART_MspInit+0x180>)
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_UART_MspInit+0x180>)
 80055f6:	f043 0320 	orr.w	r3, r3, #32
 80055fa:	6453      	str	r3, [r2, #68]	; 0x44
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_UART_MspInit+0x180>)
 80055fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <HAL_UART_MspInit+0x180>)
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	4a0f      	ldr	r2, [pc, #60]	; (800564c <HAL_UART_MspInit+0x180>)
 800560e:	f043 0304 	orr.w	r3, r3, #4
 8005612:	6313      	str	r3, [r2, #48]	; 0x30
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_UART_MspInit+0x180>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005620:	23c0      	movs	r3, #192	; 0xc0
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005624:	2302      	movs	r3, #2
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562c:	2303      	movs	r3, #3
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005630:	2308      	movs	r3, #8
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005638:	4619      	mov	r1, r3
 800563a:	480a      	ldr	r0, [pc, #40]	; (8005664 <HAL_UART_MspInit+0x198>)
 800563c:	f001 fbfe 	bl	8006e3c <HAL_GPIO_Init>
}
 8005640:	bf00      	nop
 8005642:	3738      	adds	r7, #56	; 0x38
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40007800 	.word	0x40007800
 800564c:	40023800 	.word	0x40023800
 8005650:	40021400 	.word	0x40021400
 8005654:	40011000 	.word	0x40011000
 8005658:	40020400 	.word	0x40020400
 800565c:	40020000 	.word	0x40020000
 8005660:	40011400 	.word	0x40011400
 8005664:	40020800 	.word	0x40020800

08005668 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800566e:	1d3b      	adds	r3, r7, #4
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	60da      	str	r2, [r3, #12]
 800567a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800567c:	4b3a      	ldr	r3, [pc, #232]	; (8005768 <HAL_FMC_MspInit+0x100>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d16d      	bne.n	8005760 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005684:	4b38      	ldr	r3, [pc, #224]	; (8005768 <HAL_FMC_MspInit+0x100>)
 8005686:	2201      	movs	r2, #1
 8005688:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800568a:	4b38      	ldr	r3, [pc, #224]	; (800576c <HAL_FMC_MspInit+0x104>)
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	4a37      	ldr	r2, [pc, #220]	; (800576c <HAL_FMC_MspInit+0x104>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6393      	str	r3, [r2, #56]	; 0x38
 8005696:	4b35      	ldr	r3, [pc, #212]	; (800576c <HAL_FMC_MspInit+0x104>)
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80056a2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80056a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b0:	2303      	movs	r3, #3
 80056b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80056b4:	230c      	movs	r3, #12
 80056b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	482c      	ldr	r0, [pc, #176]	; (8005770 <HAL_FMC_MspInit+0x108>)
 80056be:	f001 fbbd 	bl	8006e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80056c2:	f248 1333 	movw	r3, #33075	; 0x8133
 80056c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c8:	2302      	movs	r3, #2
 80056ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d0:	2303      	movs	r3, #3
 80056d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80056d4:	230c      	movs	r3, #12
 80056d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4825      	ldr	r0, [pc, #148]	; (8005774 <HAL_FMC_MspInit+0x10c>)
 80056de:	f001 fbad 	bl	8006e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80056e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80056e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e8:	2302      	movs	r3, #2
 80056ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f0:	2303      	movs	r3, #3
 80056f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80056f4:	230c      	movs	r3, #12
 80056f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056f8:	1d3b      	adds	r3, r7, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	481e      	ldr	r0, [pc, #120]	; (8005778 <HAL_FMC_MspInit+0x110>)
 80056fe:	f001 fb9d 	bl	8006e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005702:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005706:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	2302      	movs	r3, #2
 800570a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005710:	2303      	movs	r3, #3
 8005712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005714:	230c      	movs	r3, #12
 8005716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4817      	ldr	r0, [pc, #92]	; (800577c <HAL_FMC_MspInit+0x114>)
 800571e:	f001 fb8d 	bl	8006e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8005722:	2328      	movs	r3, #40	; 0x28
 8005724:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005726:	2302      	movs	r3, #2
 8005728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572e:	2303      	movs	r3, #3
 8005730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005732:	230c      	movs	r3, #12
 8005734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4811      	ldr	r0, [pc, #68]	; (8005780 <HAL_FMC_MspInit+0x118>)
 800573c:	f001 fb7e 	bl	8006e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005740:	2308      	movs	r3, #8
 8005742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005744:	2302      	movs	r3, #2
 8005746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574c:	2303      	movs	r3, #3
 800574e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005750:	230c      	movs	r3, #12
 8005752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005754:	1d3b      	adds	r3, r7, #4
 8005756:	4619      	mov	r1, r3
 8005758:	480a      	ldr	r0, [pc, #40]	; (8005784 <HAL_FMC_MspInit+0x11c>)
 800575a:	f001 fb6f 	bl	8006e3c <HAL_GPIO_Init>
 800575e:	e000      	b.n	8005762 <HAL_FMC_MspInit+0xfa>
    return;
 8005760:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200005a0 	.word	0x200005a0
 800576c:	40023800 	.word	0x40023800
 8005770:	40021000 	.word	0x40021000
 8005774:	40021800 	.word	0x40021800
 8005778:	40020c00 	.word	0x40020c00
 800577c:	40021400 	.word	0x40021400
 8005780:	40021c00 	.word	0x40021c00
 8005784:	40020800 	.word	0x40020800

08005788 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005790:	f7ff ff6a 	bl	8005668 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	; 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80057ac:	2200      	movs	r2, #0
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	2036      	movs	r0, #54	; 0x36
 80057b2:	f000 fde1 	bl	8006378 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057b6:	2036      	movs	r0, #54	; 0x36
 80057b8:	f000 fdfa 	bl	80063b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80057bc:	4b1f      	ldr	r3, [pc, #124]	; (800583c <HAL_InitTick+0xa0>)
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	4a1e      	ldr	r2, [pc, #120]	; (800583c <HAL_InitTick+0xa0>)
 80057c2:	f043 0310 	orr.w	r3, r3, #16
 80057c6:	6413      	str	r3, [r2, #64]	; 0x40
 80057c8:	4b1c      	ldr	r3, [pc, #112]	; (800583c <HAL_InitTick+0xa0>)
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057d4:	f107 0210 	add.w	r2, r7, #16
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f003 fc28 	bl	8009034 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80057e4:	f003 fbfe 	bl	8008fe4 <HAL_RCC_GetPCLK1Freq>
 80057e8:	4603      	mov	r3, r0
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <HAL_InitTick+0xa4>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	0c9b      	lsrs	r3, r3, #18
 80057f8:	3b01      	subs	r3, #1
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80057fc:	4b11      	ldr	r3, [pc, #68]	; (8005844 <HAL_InitTick+0xa8>)
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <HAL_InitTick+0xac>)
 8005800:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <HAL_InitTick+0xa8>)
 8005804:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005808:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800580a:	4a0e      	ldr	r2, [pc, #56]	; (8005844 <HAL_InitTick+0xa8>)
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <HAL_InitTick+0xa8>)
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_InitTick+0xa8>)
 8005818:	2200      	movs	r2, #0
 800581a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800581c:	4809      	ldr	r0, [pc, #36]	; (8005844 <HAL_InitTick+0xa8>)
 800581e:	f004 fcfc 	bl	800a21a <HAL_TIM_Base_Init>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005828:	4806      	ldr	r0, [pc, #24]	; (8005844 <HAL_InitTick+0xa8>)
 800582a:	f004 fd21 	bl	800a270 <HAL_TIM_Base_Start_IT>
 800582e:	4603      	mov	r3, r0
 8005830:	e000      	b.n	8005834 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
}
 8005834:	4618      	mov	r0, r3
 8005836:	3730      	adds	r7, #48	; 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40023800 	.word	0x40023800
 8005840:	431bde83 	.word	0x431bde83
 8005844:	20008d9c 	.word	0x20008d9c
 8005848:	40001000 	.word	0x40001000

0800584c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005850:	e7fe      	b.n	8005850 <NMI_Handler+0x4>

08005852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005856:	e7fe      	b.n	8005856 <HardFault_Handler+0x4>

08005858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800585c:	e7fe      	b.n	800585c <MemManage_Handler+0x4>

0800585e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800585e:	b480      	push	{r7}
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005862:	e7fe      	b.n	8005862 <BusFault_Handler+0x4>

08005864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005868:	e7fe      	b.n	8005868 <UsageFault_Handler+0x4>

0800586a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800586e:	bf00      	nop
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800587c:	2080      	movs	r0, #128	; 0x80
 800587e:	f001 fdc3 	bl	8007408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800588c:	4802      	ldr	r0, [pc, #8]	; (8005898 <USART1_IRQHandler+0x10>)
 800588e:	f005 fee3 	bl	800b658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20008a80 	.word	0x20008a80

0800589c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <TIM6_DAC_IRQHandler+0x14>)
 80058a2:	f000 fdb5 	bl	8006410 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80058a6:	4803      	ldr	r0, [pc, #12]	; (80058b4 <TIM6_DAC_IRQHandler+0x18>)
 80058a8:	f004 fd41 	bl	800a32e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20008b00 	.word	0x20008b00
 80058b4:	20008d9c 	.word	0x20008d9c

080058b8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80058bc:	4802      	ldr	r0, [pc, #8]	; (80058c8 <LTDC_IRQHandler+0x10>)
 80058be:	f002 fc3b 	bl	8008138 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20008948 	.word	0x20008948

080058cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <_sbrk+0x5c>)
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <_sbrk+0x60>)
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <_sbrk+0x64>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058e8:	4b11      	ldr	r3, [pc, #68]	; (8005930 <_sbrk+0x64>)
 80058ea:	4a12      	ldr	r2, [pc, #72]	; (8005934 <_sbrk+0x68>)
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <_sbrk+0x64>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d207      	bcs.n	800590c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058fc:	f009 f9a2 	bl	800ec44 <__errno>
 8005900:	4602      	mov	r2, r0
 8005902:	230c      	movs	r3, #12
 8005904:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	e009      	b.n	8005920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <_sbrk+0x64>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005912:	4b07      	ldr	r3, [pc, #28]	; (8005930 <_sbrk+0x64>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <_sbrk+0x64>)
 800591c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800591e:	68fb      	ldr	r3, [r7, #12]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20050000 	.word	0x20050000
 800592c:	00000400 	.word	0x00000400
 8005930:	200005a4 	.word	0x200005a4
 8005934:	20008de8 	.word	0x20008de8

08005938 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <SystemInit+0x28>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	4a07      	ldr	r2, [pc, #28]	; (8005960 <SystemInit+0x28>)
 8005944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <SystemInit+0x28>)
 800594e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005952:	609a      	str	r2, [r3, #8]
#endif
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800599c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800596a:	e003      	b.n	8005974 <LoopCopyDataInit>

0800596c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800596e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005972:	3104      	adds	r1, #4

08005974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005974:	480b      	ldr	r0, [pc, #44]	; (80059a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800597a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800597c:	d3f6      	bcc.n	800596c <CopyDataInit>
  ldr  r2, =_sbss
 800597e:	4a0b      	ldr	r2, [pc, #44]	; (80059ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005980:	e002      	b.n	8005988 <LoopFillZerobss>

08005982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005984:	f842 3b04 	str.w	r3, [r2], #4

08005988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800598a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800598c:	d3f9      	bcc.n	8005982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800598e:	f7ff ffd3 	bl	8005938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005992:	f009 f95d 	bl	800ec50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005996:	f7fb f8e1 	bl	8000b5c <main>
  bx  lr    
 800599a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800599c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80059a0:	08011600 	.word	0x08011600
  ldr  r0, =_sdata
 80059a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80059a8:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80059ac:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80059b0:	20008de4 	.word	0x20008de4

080059b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059b4:	e7fe      	b.n	80059b4 <ADC_IRQHandler>

080059b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059ba:	2003      	movs	r0, #3
 80059bc:	f000 fcd1 	bl	8006362 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059c0:	2000      	movs	r0, #0
 80059c2:	f7ff feeb 	bl	800579c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80059c6:	f7ff f9af 	bl	8004d28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_IncTick+0x20>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_IncTick+0x24>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	4a04      	ldr	r2, [pc, #16]	; (80059f4 <HAL_IncTick+0x24>)
 80059e2:	6013      	str	r3, [r2, #0]
}
 80059e4:	bf00      	nop
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000048 	.word	0x20000048
 80059f4:	20008ddc 	.word	0x20008ddc

080059f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return uwTick;
 80059fc:	4b03      	ldr	r3, [pc, #12]	; (8005a0c <HAL_GetTick+0x14>)
 80059fe:	681b      	ldr	r3, [r3, #0]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20008ddc 	.word	0x20008ddc

08005a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a18:	f7ff ffee 	bl	80059f8 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d005      	beq.n	8005a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_Delay+0x40>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a36:	bf00      	nop
 8005a38:	f7ff ffde 	bl	80059f8 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d8f7      	bhi.n	8005a38 <HAL_Delay+0x28>
  {
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000048 	.word	0x20000048

08005a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e031      	b.n	8005ace <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f980 	bl	8004d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d116      	bne.n	8005ac0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a96:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <HAL_ADC_Init+0x84>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	f043 0202 	orr.w	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fab6 	bl	8006014 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
 8005abe:	e001      	b.n	8005ac4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	ffffeefd 	.word	0xffffeefd

08005adc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_ADC_Start+0x1a>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e0a0      	b.n	8005c38 <HAL_ADC_Start+0x15c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d018      	beq.n	8005b3e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005b1c:	4b49      	ldr	r3, [pc, #292]	; (8005c44 <HAL_ADC_Start+0x168>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a49      	ldr	r2, [pc, #292]	; (8005c48 <HAL_ADC_Start+0x16c>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	0c9a      	lsrs	r2, r3, #18
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005b30:	e002      	b.n	8005b38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f9      	bne.n	8005b32 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d174      	bne.n	8005c36 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b50:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <HAL_ADC_Start+0x170>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b86:	d106      	bne.n	8005b96 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f023 0206 	bic.w	r2, r3, #6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
 8005b94:	e002      	b.n	8005b9c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005bac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005bae:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <HAL_ADC_Start+0x174>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d136      	bne.n	8005c36 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	e02d      	b.n	8005c36 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_ADC_Start+0x178>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10e      	bne.n	8005c02 <HAL_ADC_Start+0x126>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c00:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005c02:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <HAL_ADC_Start+0x174>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d113      	bne.n	8005c36 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a11      	ldr	r2, [pc, #68]	; (8005c58 <HAL_ADC_Start+0x17c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10e      	bne.n	8005c36 <HAL_ADC_Start+0x15a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c34:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20000040 	.word	0x20000040
 8005c48:	431bde83 	.word	0x431bde83
 8005c4c:	fffff8fe 	.word	0xfffff8fe
 8005c50:	40012300 	.word	0x40012300
 8005c54:	40012000 	.word	0x40012000
 8005c58:	40012200 	.word	0x40012200

08005c5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c78:	d113      	bne.n	8005ca2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c88:	d10b      	bne.n	8005ca2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f043 0220 	orr.w	r2, r3, #32
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e05c      	b.n	8005d5c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005ca2:	f7ff fea9 	bl	80059f8 <HAL_GetTick>
 8005ca6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ca8:	e01a      	b.n	8005ce0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d016      	beq.n	8005ce0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <HAL_ADC_PollForConversion+0x6c>
 8005cb8:	f7ff fe9e 	bl	80059f8 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d20b      	bcs.n	8005ce0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f043 0204 	orr.w	r2, r3, #4
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e03d      	b.n	8005d5c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d1dd      	bne.n	8005caa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0212 	mvn.w	r2, #18
 8005cf6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d123      	bne.n	8005d5a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11f      	bne.n	8005d5a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d006      	beq.n	8005d36 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d111      	bne.n	8005d5a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0201 	orr.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x1c>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e12a      	b.n	8005ff2 <HAL_ADC_ConfigChannel+0x272>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b09      	cmp	r3, #9
 8005daa:	d93a      	bls.n	8005e22 <HAL_ADC_ConfigChannel+0xa2>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db4:	d035      	beq.n	8005e22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68d9      	ldr	r1, [r3, #12]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	3b1e      	subs	r3, #30
 8005dcc:	2207      	movs	r2, #7
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43da      	mvns	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	400a      	ands	r2, r1
 8005dda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a87      	ldr	r2, [pc, #540]	; (8006000 <HAL_ADC_ConfigChannel+0x280>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10a      	bne.n	8005dfc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68d9      	ldr	r1, [r3, #12]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	061a      	lsls	r2, r3, #24
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dfa:	e035      	b.n	8005e68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68d9      	ldr	r1, [r3, #12]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4403      	add	r3, r0
 8005e14:	3b1e      	subs	r3, #30
 8005e16:	409a      	lsls	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e20:	e022      	b.n	8005e68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6919      	ldr	r1, [r3, #16]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4613      	mov	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	2207      	movs	r2, #7
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43da      	mvns	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	400a      	ands	r2, r1
 8005e44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6919      	ldr	r1, [r3, #16]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4618      	mov	r0, r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	4403      	add	r3, r0
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b06      	cmp	r3, #6
 8005e6e:	d824      	bhi.n	8005eba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	3b05      	subs	r3, #5
 8005e82:	221f      	movs	r2, #31
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43da      	mvns	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	400a      	ands	r2, r1
 8005e90:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3b05      	subs	r3, #5
 8005eac:	fa00 f203 	lsl.w	r2, r0, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8005eb8:	e04c      	b.n	8005f54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b0c      	cmp	r3, #12
 8005ec0:	d824      	bhi.n	8005f0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3b23      	subs	r3, #35	; 0x23
 8005ed4:	221f      	movs	r2, #31
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43da      	mvns	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	400a      	ands	r2, r1
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	3b23      	subs	r3, #35	; 0x23
 8005efe:	fa00 f203 	lsl.w	r2, r0, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
 8005f0a:	e023      	b.n	8005f54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3b41      	subs	r3, #65	; 0x41
 8005f1e:	221f      	movs	r2, #31
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43da      	mvns	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	3b41      	subs	r3, #65	; 0x41
 8005f48:	fa00 f203 	lsl.w	r2, r0, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a2a      	ldr	r2, [pc, #168]	; (8006004 <HAL_ADC_ConfigChannel+0x284>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10a      	bne.n	8005f74 <HAL_ADC_ConfigChannel+0x1f4>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f66:	d105      	bne.n	8005f74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005f68:	4b27      	ldr	r3, [pc, #156]	; (8006008 <HAL_ADC_ConfigChannel+0x288>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4a26      	ldr	r2, [pc, #152]	; (8006008 <HAL_ADC_ConfigChannel+0x288>)
 8005f6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005f72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a22      	ldr	r2, [pc, #136]	; (8006004 <HAL_ADC_ConfigChannel+0x284>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d109      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x212>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b12      	cmp	r3, #18
 8005f84:	d105      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005f86:	4b20      	ldr	r3, [pc, #128]	; (8006008 <HAL_ADC_ConfigChannel+0x288>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_ADC_ConfigChannel+0x288>)
 8005f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	; (8006004 <HAL_ADC_ConfigChannel+0x284>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d125      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x268>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_ADC_ConfigChannel+0x280>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <HAL_ADC_ConfigChannel+0x22e>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b11      	cmp	r3, #17
 8005fac:	d11c      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <HAL_ADC_ConfigChannel+0x288>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4a15      	ldr	r2, [pc, #84]	; (8006008 <HAL_ADC_ConfigChannel+0x288>)
 8005fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fb8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a10      	ldr	r2, [pc, #64]	; (8006000 <HAL_ADC_ConfigChannel+0x280>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005fc4:	4b11      	ldr	r3, [pc, #68]	; (800600c <HAL_ADC_ConfigChannel+0x28c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a11      	ldr	r2, [pc, #68]	; (8006010 <HAL_ADC_ConfigChannel+0x290>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	0c9a      	lsrs	r2, r3, #18
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005fda:	e002      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f9      	bne.n	8005fdc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	10000012 	.word	0x10000012
 8006004:	40012000 	.word	0x40012000
 8006008:	40012300 	.word	0x40012300
 800600c:	20000040 	.word	0x20000040
 8006010:	431bde83 	.word	0x431bde83

08006014 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800601c:	4b78      	ldr	r3, [pc, #480]	; (8006200 <ADC_Init+0x1ec>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a77      	ldr	r2, [pc, #476]	; (8006200 <ADC_Init+0x1ec>)
 8006022:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006026:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006028:	4b75      	ldr	r3, [pc, #468]	; (8006200 <ADC_Init+0x1ec>)
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4973      	ldr	r1, [pc, #460]	; (8006200 <ADC_Init+0x1ec>)
 8006032:	4313      	orrs	r3, r2
 8006034:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6859      	ldr	r1, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	021a      	lsls	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6859      	ldr	r1, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800608a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6899      	ldr	r1, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	4a58      	ldr	r2, [pc, #352]	; (8006204 <ADC_Init+0x1f0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6899      	ldr	r1, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	e00f      	b.n	800610e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800610c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0202 	bic.w	r2, r2, #2
 800611c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6899      	ldr	r1, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	005a      	lsls	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01b      	beq.n	8006174 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800615a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6859      	ldr	r1, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	3b01      	subs	r3, #1
 8006168:	035a      	lsls	r2, r3, #13
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	e007      	b.n	8006184 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006182:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	3b01      	subs	r3, #1
 80061a0:	051a      	lsls	r2, r3, #20
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80061b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6899      	ldr	r1, [r3, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061c6:	025a      	lsls	r2, r3, #9
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6899      	ldr	r1, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	029a      	lsls	r2, r3, #10
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40012300 	.word	0x40012300
 8006204:	0f000001 	.word	0x0f000001

08006208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <__NVIC_SetPriorityGrouping+0x40>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006224:	4013      	ands	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <__NVIC_SetPriorityGrouping+0x44>)
 8006232:	4313      	orrs	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006236:	4a04      	ldr	r2, [pc, #16]	; (8006248 <__NVIC_SetPriorityGrouping+0x40>)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	60d3      	str	r3, [r2, #12]
}
 800623c:	bf00      	nop
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	e000ed00 	.word	0xe000ed00
 800624c:	05fa0000 	.word	0x05fa0000

08006250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <__NVIC_GetPriorityGrouping+0x18>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	0a1b      	lsrs	r3, r3, #8
 800625a:	f003 0307 	and.w	r3, r3, #7
}
 800625e:	4618      	mov	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800627a:	2b00      	cmp	r3, #0
 800627c:	db0b      	blt.n	8006296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	f003 021f 	and.w	r2, r3, #31
 8006284:	4907      	ldr	r1, [pc, #28]	; (80062a4 <__NVIC_EnableIRQ+0x38>)
 8006286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	2001      	movs	r0, #1
 800628e:	fa00 f202 	lsl.w	r2, r0, r2
 8006292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	e000e100 	.word	0xe000e100

080062a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	6039      	str	r1, [r7, #0]
 80062b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	db0a      	blt.n	80062d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	490c      	ldr	r1, [pc, #48]	; (80062f4 <__NVIC_SetPriority+0x4c>)
 80062c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	440b      	add	r3, r1
 80062cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062d0:	e00a      	b.n	80062e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	4908      	ldr	r1, [pc, #32]	; (80062f8 <__NVIC_SetPriority+0x50>)
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	3b04      	subs	r3, #4
 80062e0:	0112      	lsls	r2, r2, #4
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	440b      	add	r3, r1
 80062e6:	761a      	strb	r2, [r3, #24]
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	e000e100 	.word	0xe000e100
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f1c3 0307 	rsb	r3, r3, #7
 8006316:	2b04      	cmp	r3, #4
 8006318:	bf28      	it	cs
 800631a:	2304      	movcs	r3, #4
 800631c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3304      	adds	r3, #4
 8006322:	2b06      	cmp	r3, #6
 8006324:	d902      	bls.n	800632c <NVIC_EncodePriority+0x30>
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3b03      	subs	r3, #3
 800632a:	e000      	b.n	800632e <NVIC_EncodePriority+0x32>
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43da      	mvns	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	401a      	ands	r2, r3
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006344:	f04f 31ff 	mov.w	r1, #4294967295
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	fa01 f303 	lsl.w	r3, r1, r3
 800634e:	43d9      	mvns	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006354:	4313      	orrs	r3, r2
         );
}
 8006356:	4618      	mov	r0, r3
 8006358:	3724      	adds	r7, #36	; 0x24
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff ff4c 	bl	8006208 <__NVIC_SetPriorityGrouping>
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800638a:	f7ff ff61 	bl	8006250 <__NVIC_GetPriorityGrouping>
 800638e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7ff ffb1 	bl	80062fc <NVIC_EncodePriority>
 800639a:	4602      	mov	r2, r0
 800639c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff ff80 	bl	80062a8 <__NVIC_SetPriority>
}
 80063a8:	bf00      	nop
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ff54 	bl	800626c <__NVIC_EnableIRQ>
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e014      	b.n	8006408 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	791b      	ldrb	r3, [r3, #4]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fe fd30 	bl	8004e54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	d118      	bne.n	800645a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2204      	movs	r2, #4
 800642c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006442:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006452:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f825 	bl	80064a4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006468:	d118      	bne.n	800649c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2204      	movs	r2, #4
 800646e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f043 0202 	orr.w	r2, r3, #2
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006484:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006494:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f85b 	bl	8006552 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	795b      	ldrb	r3, [r3, #5]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_DAC_ConfigChannel+0x20>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e036      	b.n	8006546 <HAL_DAC_ConfigChannel+0x8e>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2202      	movs	r2, #2
 80064e2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80064ec:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4013      	ands	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	22c0      	movs	r2, #192	; 0xc0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	43da      	mvns	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	400a      	ands	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006574:	f7ff fa40 	bl	80059f8 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e099      	b.n	80066b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065a4:	e00f      	b.n	80065c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065a6:	f7ff fa27 	bl	80059f8 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b05      	cmp	r3, #5
 80065b2:	d908      	bls.n	80065c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2203      	movs	r2, #3
 80065be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e078      	b.n	80066b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e8      	bne.n	80065a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4b38      	ldr	r3, [pc, #224]	; (80066c0 <HAL_DMA_Init+0x158>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800660a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	2b04      	cmp	r3, #4
 800661e:	d107      	bne.n	8006630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	4313      	orrs	r3, r2
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	2b04      	cmp	r3, #4
 8006658:	d117      	bne.n	800668a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8df 	bl	8006830 <DMA_CheckFifoParam>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d008      	beq.n	800668a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2240      	movs	r2, #64	; 0x40
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006686:	2301      	movs	r3, #1
 8006688:	e016      	b.n	80066b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f896 	bl	80067c4 <DMA_CalcBaseAndBitshift>
 8006698:	4603      	mov	r3, r0
 800669a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a0:	223f      	movs	r2, #63	; 0x3f
 80066a2:	409a      	lsls	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	f010803f 	.word	0xf010803f

080066c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e050      	b.n	8006778 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d101      	bne.n	80066e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80066e2:	2302      	movs	r3, #2
 80066e4:	e048      	b.n	8006778 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2200      	movs	r2, #0
 800671c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2221      	movs	r2, #33	; 0x21
 8006724:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f84c 	bl	80067c4 <DMA_CalcBaseAndBitshift>
 800672c:	4603      	mov	r3, r0
 800672e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006734:	223f      	movs	r2, #63	; 0x3f
 8006736:	409a      	lsls	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d004      	beq.n	800679e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2280      	movs	r2, #128	; 0x80
 8006798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e00c      	b.n	80067b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2205      	movs	r2, #5
 80067a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	3b10      	subs	r3, #16
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <DMA_CalcBaseAndBitshift+0x60>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <DMA_CalcBaseAndBitshift+0x64>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d908      	bls.n	8006804 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <DMA_CalcBaseAndBitshift+0x68>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	1d1a      	adds	r2, r3, #4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	659a      	str	r2, [r3, #88]	; 0x58
 8006802:	e006      	b.n	8006812 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <DMA_CalcBaseAndBitshift+0x68>)
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	aaaaaaab 	.word	0xaaaaaaab
 8006828:	080115b4 	.word	0x080115b4
 800682c:	fffffc00 	.word	0xfffffc00

08006830 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d11f      	bne.n	800688a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d855      	bhi.n	80068fc <DMA_CheckFifoParam+0xcc>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <DMA_CheckFifoParam+0x28>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006869 	.word	0x08006869
 800685c:	0800687b 	.word	0x0800687b
 8006860:	08006869 	.word	0x08006869
 8006864:	080068fd 	.word	0x080068fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d045      	beq.n	8006900 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006878:	e042      	b.n	8006900 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006882:	d13f      	bne.n	8006904 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006888:	e03c      	b.n	8006904 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006892:	d121      	bne.n	80068d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d836      	bhi.n	8006908 <DMA_CheckFifoParam+0xd8>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <DMA_CheckFifoParam+0x70>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068b7 	.word	0x080068b7
 80068a8:	080068b1 	.word	0x080068b1
 80068ac:	080068c9 	.word	0x080068c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
      break;
 80068b4:	e02f      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d024      	beq.n	800690c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c6:	e021      	b.n	800690c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068d0:	d11e      	bne.n	8006910 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068d6:	e01b      	b.n	8006910 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d902      	bls.n	80068e4 <DMA_CheckFifoParam+0xb4>
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d003      	beq.n	80068ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068e2:	e018      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]
      break;
 80068e8:	e015      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00e      	beq.n	8006914 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
      break;
 80068fa:	e00b      	b.n	8006914 <DMA_CheckFifoParam+0xe4>
      break;
 80068fc:	bf00      	nop
 80068fe:	e00a      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      break;
 8006900:	bf00      	nop
 8006902:	e008      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      break;
 8006904:	bf00      	nop
 8006906:	e006      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      break;
 8006908:	bf00      	nop
 800690a:	e004      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      break;
 800690c:	bf00      	nop
 800690e:	e002      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      break;   
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <DMA_CheckFifoParam+0xe6>
      break;
 8006914:	bf00      	nop
    }
  } 
  
  return status; 
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e039      	b.n	80069aa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fe faca 	bl	8004ee4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	f023 0107 	bic.w	r1, r3, #7
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_DMA2D_Init+0x90>)
 800698c:	4013      	ands	r3, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68d1      	ldr	r1, [r2, #12]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	430b      	orrs	r3, r1
 8006998:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	ffffc000 	.word	0xffffc000

080069b8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_DMA2D_Start+0x1c>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e018      	b.n	8006a06 <HAL_DMA2D_Start+0x4e>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f988 	bl	8006d04 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d056      	beq.n	8006ad8 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006a2a:	f7fe ffe5 	bl	80059f8 <HAL_GetTick>
 8006a2e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a30:	e04b      	b.n	8006aca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d023      	beq.n	8006a8c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a52:	f043 0202 	orr.w	r2, r3, #2
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	f043 0201 	orr.w	r2, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2221      	movs	r2, #33	; 0x21
 8006a76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0a5      	b.n	8006bd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d01a      	beq.n	8006aca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006a94:	f7fe ffb0 	bl	80059f8 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <HAL_DMA2D_PollForTransfer+0x9c>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2203      	movs	r2, #3
 8006aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e086      	b.n	8006bd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0ac      	beq.n	8006a32 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d061      	beq.n	8006bbe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006afa:	f7fe ff7d 	bl	80059f8 <HAL_GetTick>
 8006afe:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b00:	e056      	b.n	8006bb0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d02e      	beq.n	8006b72 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	f043 0202 	orr.w	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	f043 0201 	orr.w	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2229      	movs	r2, #41	; 0x29
 8006b5c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2204      	movs	r2, #4
 8006b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e032      	b.n	8006bd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d01a      	beq.n	8006bb0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006b7a:	f7fe ff3d 	bl	80059f8 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <HAL_DMA2D_PollForTransfer+0x182>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	f043 0220 	orr.w	r2, r3, #32
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e013      	b.n	8006bd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0a1      	beq.n	8006b02 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2212      	movs	r2, #18
 8006bc4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_DMA2D_ConfigLayer+0x20>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e079      	b.n	8006cf4 <HAL_DMA2D_ConfigLayer+0x114>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	3318      	adds	r3, #24
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	4413      	add	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006c2a:	4b35      	ldr	r3, [pc, #212]	; (8006d00 <HAL_DMA2D_ConfigLayer+0x120>)
 8006c2c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b0a      	cmp	r3, #10
 8006c34:	d003      	beq.n	8006c3e <HAL_DMA2D_ConfigLayer+0x5e>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	d107      	bne.n	8006c4e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e005      	b.n	8006c5a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d120      	bne.n	8006ca2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	ea02 0103 	and.w	r1, r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b0a      	cmp	r3, #10
 8006c88:	d003      	beq.n	8006c92 <HAL_DMA2D_ConfigLayer+0xb2>
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b09      	cmp	r3, #9
 8006c90:	d127      	bne.n	8006ce2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca0:	e01f      	b.n	8006ce2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	43db      	mvns	r3, r3
 8006cac:	ea02 0103 	and.w	r1, r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	6812      	ldr	r2, [r2, #0]
 8006cc2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b0a      	cmp	r3, #10
 8006cca:	d003      	beq.n	8006cd4 <HAL_DMA2D_ConfigLayer+0xf4>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d106      	bne.n	8006ce2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006ce0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	ff03000f 	.word	0xff03000f

08006d04 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b08b      	sub	sp, #44	; 0x2c
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	041a      	lsls	r2, r3, #16
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d3c:	d174      	bne.n	8006e28 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d44:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d54:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
 8006d74:	e053      	b.n	8006e1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d106      	bne.n	8006d8c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8a:	e048      	b.n	8006e1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d111      	bne.n	8006db8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	0cdb      	lsrs	r3, r3, #19
 8006d98:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	0a9b      	lsrs	r3, r3, #10
 8006d9e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	02db      	lsls	r3, r3, #11
 8006dae:	4313      	orrs	r3, r2
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
 8006db6:	e032      	b.n	8006e1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d117      	bne.n	8006df0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	0fdb      	lsrs	r3, r3, #31
 8006dc4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	0cdb      	lsrs	r3, r3, #19
 8006dca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	0adb      	lsrs	r3, r3, #11
 8006dd0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	029b      	lsls	r3, r3, #10
 8006de0:	431a      	orrs	r2, r3
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	03db      	lsls	r3, r3, #15
 8006de6:	4313      	orrs	r3, r2
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
 8006dee:	e016      	b.n	8006e1e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	0f1b      	lsrs	r3, r3, #28
 8006df4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	0d1b      	lsrs	r3, r3, #20
 8006dfa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	0b1b      	lsrs	r3, r3, #12
 8006e00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	011a      	lsls	r2, r3, #4
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	431a      	orrs	r2, r3
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	031b      	lsls	r3, r3, #12
 8006e16:	4313      	orrs	r3, r2
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e26:	e003      	b.n	8006e30 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	60da      	str	r2, [r3, #12]
}
 8006e30:	bf00      	nop
 8006e32:	372c      	adds	r7, #44	; 0x2c
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b089      	sub	sp, #36	; 0x24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e175      	b.n	8007148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	f040 8164 	bne.w	8007142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d00b      	beq.n	8006e9a <HAL_GPIO_Init+0x5e>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d007      	beq.n	8006e9a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e8e:	2b11      	cmp	r3, #17
 8006e90:	d003      	beq.n	8006e9a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	2b12      	cmp	r3, #18
 8006e98:	d130      	bne.n	8006efc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	2203      	movs	r2, #3
 8006ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4013      	ands	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	091b      	lsrs	r3, r3, #4
 8006ee6:	f003 0201 	and.w	r2, r3, #1
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	2203      	movs	r2, #3
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x100>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b12      	cmp	r3, #18
 8006f3a:	d123      	bne.n	8006f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	08da      	lsrs	r2, r3, #3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3208      	adds	r2, #8
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	220f      	movs	r2, #15
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	08da      	lsrs	r2, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3208      	adds	r2, #8
 8006f7e:	69b9      	ldr	r1, [r7, #24]
 8006f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	2203      	movs	r2, #3
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43db      	mvns	r3, r3
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f003 0203 	and.w	r2, r3, #3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80be 	beq.w	8007142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc6:	4b65      	ldr	r3, [pc, #404]	; (800715c <HAL_GPIO_Init+0x320>)
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	4a64      	ldr	r2, [pc, #400]	; (800715c <HAL_GPIO_Init+0x320>)
 8006fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fd2:	4b62      	ldr	r3, [pc, #392]	; (800715c <HAL_GPIO_Init+0x320>)
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fde:	4a60      	ldr	r2, [pc, #384]	; (8007160 <HAL_GPIO_Init+0x324>)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	220f      	movs	r2, #15
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	43db      	mvns	r3, r3
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	4013      	ands	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a57      	ldr	r2, [pc, #348]	; (8007164 <HAL_GPIO_Init+0x328>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d037      	beq.n	800707a <HAL_GPIO_Init+0x23e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a56      	ldr	r2, [pc, #344]	; (8007168 <HAL_GPIO_Init+0x32c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_GPIO_Init+0x23a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a55      	ldr	r2, [pc, #340]	; (800716c <HAL_GPIO_Init+0x330>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02b      	beq.n	8007072 <HAL_GPIO_Init+0x236>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a54      	ldr	r2, [pc, #336]	; (8007170 <HAL_GPIO_Init+0x334>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d025      	beq.n	800706e <HAL_GPIO_Init+0x232>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a53      	ldr	r2, [pc, #332]	; (8007174 <HAL_GPIO_Init+0x338>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01f      	beq.n	800706a <HAL_GPIO_Init+0x22e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a52      	ldr	r2, [pc, #328]	; (8007178 <HAL_GPIO_Init+0x33c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d019      	beq.n	8007066 <HAL_GPIO_Init+0x22a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a51      	ldr	r2, [pc, #324]	; (800717c <HAL_GPIO_Init+0x340>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <HAL_GPIO_Init+0x226>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a50      	ldr	r2, [pc, #320]	; (8007180 <HAL_GPIO_Init+0x344>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00d      	beq.n	800705e <HAL_GPIO_Init+0x222>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a4f      	ldr	r2, [pc, #316]	; (8007184 <HAL_GPIO_Init+0x348>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d007      	beq.n	800705a <HAL_GPIO_Init+0x21e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a4e      	ldr	r2, [pc, #312]	; (8007188 <HAL_GPIO_Init+0x34c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_GPIO_Init+0x21a>
 8007052:	2309      	movs	r3, #9
 8007054:	e012      	b.n	800707c <HAL_GPIO_Init+0x240>
 8007056:	230a      	movs	r3, #10
 8007058:	e010      	b.n	800707c <HAL_GPIO_Init+0x240>
 800705a:	2308      	movs	r3, #8
 800705c:	e00e      	b.n	800707c <HAL_GPIO_Init+0x240>
 800705e:	2307      	movs	r3, #7
 8007060:	e00c      	b.n	800707c <HAL_GPIO_Init+0x240>
 8007062:	2306      	movs	r3, #6
 8007064:	e00a      	b.n	800707c <HAL_GPIO_Init+0x240>
 8007066:	2305      	movs	r3, #5
 8007068:	e008      	b.n	800707c <HAL_GPIO_Init+0x240>
 800706a:	2304      	movs	r3, #4
 800706c:	e006      	b.n	800707c <HAL_GPIO_Init+0x240>
 800706e:	2303      	movs	r3, #3
 8007070:	e004      	b.n	800707c <HAL_GPIO_Init+0x240>
 8007072:	2302      	movs	r3, #2
 8007074:	e002      	b.n	800707c <HAL_GPIO_Init+0x240>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_GPIO_Init+0x240>
 800707a:	2300      	movs	r3, #0
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	f002 0203 	and.w	r2, r2, #3
 8007082:	0092      	lsls	r2, r2, #2
 8007084:	4093      	lsls	r3, r2
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	4313      	orrs	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800708c:	4934      	ldr	r1, [pc, #208]	; (8007160 <HAL_GPIO_Init+0x324>)
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	089b      	lsrs	r3, r3, #2
 8007092:	3302      	adds	r3, #2
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800709a:	4b3c      	ldr	r3, [pc, #240]	; (800718c <HAL_GPIO_Init+0x350>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	43db      	mvns	r3, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4013      	ands	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070be:	4a33      	ldr	r2, [pc, #204]	; (800718c <HAL_GPIO_Init+0x350>)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070c4:	4b31      	ldr	r3, [pc, #196]	; (800718c <HAL_GPIO_Init+0x350>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	4013      	ands	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070e8:	4a28      	ldr	r2, [pc, #160]	; (800718c <HAL_GPIO_Init+0x350>)
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ee:	4b27      	ldr	r3, [pc, #156]	; (800718c <HAL_GPIO_Init+0x350>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007112:	4a1e      	ldr	r2, [pc, #120]	; (800718c <HAL_GPIO_Init+0x350>)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007118:	4b1c      	ldr	r3, [pc, #112]	; (800718c <HAL_GPIO_Init+0x350>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	43db      	mvns	r3, r3
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	4013      	ands	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <HAL_GPIO_Init+0x350>)
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	3301      	adds	r3, #1
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	2b0f      	cmp	r3, #15
 800714c:	f67f ae86 	bls.w	8006e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007150:	bf00      	nop
 8007152:	3724      	adds	r7, #36	; 0x24
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40023800 	.word	0x40023800
 8007160:	40013800 	.word	0x40013800
 8007164:	40020000 	.word	0x40020000
 8007168:	40020400 	.word	0x40020400
 800716c:	40020800 	.word	0x40020800
 8007170:	40020c00 	.word	0x40020c00
 8007174:	40021000 	.word	0x40021000
 8007178:	40021400 	.word	0x40021400
 800717c:	40021800 	.word	0x40021800
 8007180:	40021c00 	.word	0x40021c00
 8007184:	40022000 	.word	0x40022000
 8007188:	40022400 	.word	0x40022400
 800718c:	40013c00 	.word	0x40013c00

08007190 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	e0d9      	b.n	8007360 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80071ac:	2201      	movs	r2, #1
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4013      	ands	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	f040 80c9 	bne.w	800735a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80071c8:	4a6a      	ldr	r2, [pc, #424]	; (8007374 <HAL_GPIO_DeInit+0x1e4>)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	089b      	lsrs	r3, r3, #2
 80071ce:	3302      	adds	r3, #2
 80071d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f003 0303 	and.w	r3, r3, #3
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	220f      	movs	r2, #15
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a62      	ldr	r2, [pc, #392]	; (8007378 <HAL_GPIO_DeInit+0x1e8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d037      	beq.n	8007262 <HAL_GPIO_DeInit+0xd2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a61      	ldr	r2, [pc, #388]	; (800737c <HAL_GPIO_DeInit+0x1ec>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d031      	beq.n	800725e <HAL_GPIO_DeInit+0xce>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a60      	ldr	r2, [pc, #384]	; (8007380 <HAL_GPIO_DeInit+0x1f0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02b      	beq.n	800725a <HAL_GPIO_DeInit+0xca>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a5f      	ldr	r2, [pc, #380]	; (8007384 <HAL_GPIO_DeInit+0x1f4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d025      	beq.n	8007256 <HAL_GPIO_DeInit+0xc6>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a5e      	ldr	r2, [pc, #376]	; (8007388 <HAL_GPIO_DeInit+0x1f8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01f      	beq.n	8007252 <HAL_GPIO_DeInit+0xc2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a5d      	ldr	r2, [pc, #372]	; (800738c <HAL_GPIO_DeInit+0x1fc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d019      	beq.n	800724e <HAL_GPIO_DeInit+0xbe>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a5c      	ldr	r2, [pc, #368]	; (8007390 <HAL_GPIO_DeInit+0x200>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <HAL_GPIO_DeInit+0xba>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a5b      	ldr	r2, [pc, #364]	; (8007394 <HAL_GPIO_DeInit+0x204>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00d      	beq.n	8007246 <HAL_GPIO_DeInit+0xb6>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a5a      	ldr	r2, [pc, #360]	; (8007398 <HAL_GPIO_DeInit+0x208>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <HAL_GPIO_DeInit+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a59      	ldr	r2, [pc, #356]	; (800739c <HAL_GPIO_DeInit+0x20c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <HAL_GPIO_DeInit+0xae>
 800723a:	2309      	movs	r3, #9
 800723c:	e012      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 800723e:	230a      	movs	r3, #10
 8007240:	e010      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 8007242:	2308      	movs	r3, #8
 8007244:	e00e      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 8007246:	2307      	movs	r3, #7
 8007248:	e00c      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 800724a:	2306      	movs	r3, #6
 800724c:	e00a      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 800724e:	2305      	movs	r3, #5
 8007250:	e008      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 8007252:	2304      	movs	r3, #4
 8007254:	e006      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 8007256:	2303      	movs	r3, #3
 8007258:	e004      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 800725a:	2302      	movs	r3, #2
 800725c:	e002      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_GPIO_DeInit+0xd4>
 8007262:	2300      	movs	r3, #0
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	f002 0203 	and.w	r2, r2, #3
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	4093      	lsls	r3, r2
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d132      	bne.n	80072da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007274:	4b4a      	ldr	r3, [pc, #296]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	43db      	mvns	r3, r3
 800727c:	4948      	ldr	r1, [pc, #288]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 800727e:	4013      	ands	r3, r2
 8007280:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007282:	4b47      	ldr	r3, [pc, #284]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	43db      	mvns	r3, r3
 800728a:	4945      	ldr	r1, [pc, #276]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 800728c:	4013      	ands	r3, r2
 800728e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007290:	4b43      	ldr	r3, [pc, #268]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	43db      	mvns	r3, r3
 8007298:	4941      	ldr	r1, [pc, #260]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 800729a:	4013      	ands	r3, r2
 800729c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800729e:	4b40      	ldr	r3, [pc, #256]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	43db      	mvns	r3, r3
 80072a6:	493e      	ldr	r1, [pc, #248]	; (80073a0 <HAL_GPIO_DeInit+0x210>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	220f      	movs	r2, #15
 80072b6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80072bc:	4a2d      	ldr	r2, [pc, #180]	; (8007374 <HAL_GPIO_DeInit+0x1e4>)
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	089b      	lsrs	r3, r3, #2
 80072c2:	3302      	adds	r3, #2
 80072c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	43da      	mvns	r2, r3
 80072cc:	4829      	ldr	r0, [pc, #164]	; (8007374 <HAL_GPIO_DeInit+0x1e4>)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	400a      	ands	r2, r1
 80072d4:	3302      	adds	r3, #2
 80072d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	2103      	movs	r1, #3
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	08da      	lsrs	r2, r3, #3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3208      	adds	r2, #8
 80072f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	220f      	movs	r2, #15
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	43db      	mvns	r3, r3
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	08d2      	lsrs	r2, r2, #3
 8007310:	4019      	ands	r1, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3208      	adds	r2, #8
 8007316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	2103      	movs	r1, #3
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	2101      	movs	r1, #1
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	fa01 f303 	lsl.w	r3, r1, r3
 800733c:	43db      	mvns	r3, r3
 800733e:	401a      	ands	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	2103      	movs	r1, #3
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	401a      	ands	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	3301      	adds	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2b0f      	cmp	r3, #15
 8007364:	f67f af22 	bls.w	80071ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007368:	bf00      	nop
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40013800 	.word	0x40013800
 8007378:	40020000 	.word	0x40020000
 800737c:	40020400 	.word	0x40020400
 8007380:	40020800 	.word	0x40020800
 8007384:	40020c00 	.word	0x40020c00
 8007388:	40021000 	.word	0x40021000
 800738c:	40021400 	.word	0x40021400
 8007390:	40021800 	.word	0x40021800
 8007394:	40021c00 	.word	0x40021c00
 8007398:	40022000 	.word	0x40022000
 800739c:	40022400 	.word	0x40022400
 80073a0:	40013c00 	.word	0x40013c00

080073a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	887b      	ldrh	r3, [r7, #2]
 80073b6:	4013      	ands	r3, r2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073bc:	2301      	movs	r3, #1
 80073be:	73fb      	strb	r3, [r7, #15]
 80073c0:	e001      	b.n	80073c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	807b      	strh	r3, [r7, #2]
 80073e0:	4613      	mov	r3, r2
 80073e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073e4:	787b      	ldrb	r3, [r7, #1]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073ea:	887a      	ldrh	r2, [r7, #2]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80073f0:	e003      	b.n	80073fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80073f2:	887b      	ldrh	r3, [r7, #2]
 80073f4:	041a      	lsls	r2, r3, #16
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	619a      	str	r2, [r3, #24]
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007414:	695a      	ldr	r2, [r3, #20]
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	4013      	ands	r3, r2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800741e:	4a05      	ldr	r2, [pc, #20]	; (8007434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	4618      	mov	r0, r3
 8007428:	f7fa fe36 	bl	8002098 <HAL_GPIO_EXTI_Callback>
  }
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40013c00 	.word	0x40013c00

08007438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e07f      	b.n	800754a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fd fd60 	bl	8004f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2224      	movs	r2, #36	; 0x24
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d107      	bne.n	80074b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	e006      	b.n	80074c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d104      	bne.n	80074d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6859      	ldr	r1, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <HAL_I2C_Init+0x11c>)
 80074de:	430b      	orrs	r3, r1
 80074e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	ea42 0103 	orr.w	r1, r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	021a      	lsls	r2, r3, #8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69d9      	ldr	r1, [r3, #28]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1a      	ldr	r2, [r3, #32]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	02008000 	.word	0x02008000

08007558 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e021      	b.n	80075ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2224      	movs	r2, #36	; 0x24
 800756e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fd fd46 	bl	8005014 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	4608      	mov	r0, r1
 80075c2:	4611      	mov	r1, r2
 80075c4:	461a      	mov	r2, r3
 80075c6:	4603      	mov	r3, r0
 80075c8:	817b      	strh	r3, [r7, #10]
 80075ca:	460b      	mov	r3, r1
 80075cc:	813b      	strh	r3, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b20      	cmp	r3, #32
 80075dc:	f040 80f9 	bne.w	80077d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <HAL_I2C_Mem_Write+0x34>
 80075e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d105      	bne.n	80075f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0ed      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <HAL_I2C_Mem_Write+0x4e>
 8007602:	2302      	movs	r3, #2
 8007604:	e0e6      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800760e:	f7fe f9f3 	bl	80059f8 <HAL_GetTick>
 8007612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	2319      	movs	r3, #25
 800761a:	2201      	movs	r2, #1
 800761c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fad1 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0d1      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2221      	movs	r2, #33	; 0x21
 8007634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2240      	movs	r2, #64	; 0x40
 800763c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a3a      	ldr	r2, [r7, #32]
 800764a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007658:	88f8      	ldrh	r0, [r7, #6]
 800765a:	893a      	ldrh	r2, [r7, #8]
 800765c:	8979      	ldrh	r1, [r7, #10]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	4603      	mov	r3, r0
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f9e1 	bl	8007a30 <I2C_RequestMemoryWrite>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e0a9      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	2bff      	cmp	r3, #255	; 0xff
 8007688:	d90e      	bls.n	80076a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	22ff      	movs	r2, #255	; 0xff
 800768e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007694:	b2da      	uxtb	r2, r3
 8007696:	8979      	ldrh	r1, [r7, #10]
 8007698:	2300      	movs	r3, #0
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fbb3 	bl	8007e0c <I2C_TransferConfig>
 80076a6:	e00f      	b.n	80076c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	8979      	ldrh	r1, [r7, #10]
 80076ba:	2300      	movs	r3, #0
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fba2 	bl	8007e0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fabb 	bl	8007c48 <I2C_WaitOnTXISFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e07b      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d034      	beq.n	8007780 <HAL_I2C_Mem_Write+0x1c8>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d130      	bne.n	8007780 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	2200      	movs	r2, #0
 8007726:	2180      	movs	r1, #128	; 0x80
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa4d 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e04d      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	2bff      	cmp	r3, #255	; 0xff
 8007740:	d90e      	bls.n	8007760 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774c:	b2da      	uxtb	r2, r3
 800774e:	8979      	ldrh	r1, [r7, #10]
 8007750:	2300      	movs	r3, #0
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fb57 	bl	8007e0c <I2C_TransferConfig>
 800775e:	e00f      	b.n	8007780 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776e:	b2da      	uxtb	r2, r3
 8007770:	8979      	ldrh	r1, [r7, #10]
 8007772:	2300      	movs	r3, #0
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fb46 	bl	8007e0c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d19e      	bne.n	80076c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fa9a 	bl	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e01a      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2220      	movs	r2, #32
 80077a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <HAL_I2C_Mem_Write+0x224>)
 80077b2:	400b      	ands	r3, r1
 80077b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e000      	b.n	80077d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
  }
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	fe00e800 	.word	0xfe00e800

080077e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	461a      	mov	r2, r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	817b      	strh	r3, [r7, #10]
 80077f2:	460b      	mov	r3, r1
 80077f4:	813b      	strh	r3, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b20      	cmp	r3, #32
 8007804:	f040 80fd 	bne.w	8007a02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_I2C_Mem_Read+0x34>
 800780e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e0f1      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_I2C_Mem_Read+0x4e>
 800782a:	2302      	movs	r3, #2
 800782c:	e0ea      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007836:	f7fe f8df 	bl	80059f8 <HAL_GetTick>
 800783a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2319      	movs	r3, #25
 8007842:	2201      	movs	r2, #1
 8007844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f9bd 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0d5      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2222      	movs	r2, #34	; 0x22
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2240      	movs	r2, #64	; 0x40
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007880:	88f8      	ldrh	r0, [r7, #6]
 8007882:	893a      	ldrh	r2, [r7, #8]
 8007884:	8979      	ldrh	r1, [r7, #10]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	4603      	mov	r3, r0
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 f921 	bl	8007ad8 <I2C_RequestMemoryRead>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0ad      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2bff      	cmp	r3, #255	; 0xff
 80078b0:	d90e      	bls.n	80078d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	8979      	ldrh	r1, [r7, #10]
 80078c0:	4b52      	ldr	r3, [pc, #328]	; (8007a0c <HAL_I2C_Mem_Read+0x22c>)
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fa9f 	bl	8007e0c <I2C_TransferConfig>
 80078ce:	e00f      	b.n	80078f0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	8979      	ldrh	r1, [r7, #10]
 80078e2:	4b4a      	ldr	r3, [pc, #296]	; (8007a0c <HAL_I2C_Mem_Read+0x22c>)
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fa8e 	bl	8007e0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	2200      	movs	r2, #0
 80078f8:	2104      	movs	r1, #4
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f964 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07c      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007932:	b29b      	uxth	r3, r3
 8007934:	3b01      	subs	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d034      	beq.n	80079b0 <HAL_I2C_Mem_Read+0x1d0>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	d130      	bne.n	80079b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	2200      	movs	r2, #0
 8007956:	2180      	movs	r1, #128	; 0x80
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f935 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e04d      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2bff      	cmp	r3, #255	; 0xff
 8007970:	d90e      	bls.n	8007990 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797c:	b2da      	uxtb	r2, r3
 800797e:	8979      	ldrh	r1, [r7, #10]
 8007980:	2300      	movs	r3, #0
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fa3f 	bl	8007e0c <I2C_TransferConfig>
 800798e:	e00f      	b.n	80079b0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	8979      	ldrh	r1, [r7, #10]
 80079a2:	2300      	movs	r3, #0
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fa2e 	bl	8007e0c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d19a      	bne.n	80078f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f982 	bl	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e01a      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2220      	movs	r2, #32
 80079d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6859      	ldr	r1, [r3, #4]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <HAL_I2C_Mem_Read+0x230>)
 80079e2:	400b      	ands	r3, r1
 80079e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e000      	b.n	8007a04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
  }
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	80002400 	.word	0x80002400
 8007a10:	fe00e800 	.word	0xfe00e800

08007a14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a22:	b2db      	uxtb	r3, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	817b      	strh	r3, [r7, #10]
 8007a42:	460b      	mov	r3, r1
 8007a44:	813b      	strh	r3, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	8979      	ldrh	r1, [r7, #10]
 8007a50:	4b20      	ldr	r3, [pc, #128]	; (8007ad4 <I2C_RequestMemoryWrite+0xa4>)
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f9d7 	bl	8007e0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	69b9      	ldr	r1, [r7, #24]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f8f0 	bl	8007c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e02c      	b.n	8007acc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d105      	bne.n	8007a84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a78:	893b      	ldrh	r3, [r7, #8]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28
 8007a82:	e015      	b.n	8007ab0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a84:	893b      	ldrh	r3, [r7, #8]
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	69b9      	ldr	r1, [r7, #24]
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f8d6 	bl	8007c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e012      	b.n	8007acc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2180      	movs	r1, #128	; 0x80
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f884 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	80002000 	.word	0x80002000

08007ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	460b      	mov	r3, r1
 8007aec:	813b      	strh	r3, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	8979      	ldrh	r1, [r7, #10]
 8007af8:	4b20      	ldr	r3, [pc, #128]	; (8007b7c <I2C_RequestMemoryRead+0xa4>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2300      	movs	r3, #0
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f984 	bl	8007e0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	69b9      	ldr	r1, [r7, #24]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f89d 	bl	8007c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e02c      	b.n	8007b72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d105      	bne.n	8007b2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b1e:	893b      	ldrh	r3, [r7, #8]
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	629a      	str	r2, [r3, #40]	; 0x28
 8007b28:	e015      	b.n	8007b56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b2a:	893b      	ldrh	r3, [r7, #8]
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	69b9      	ldr	r1, [r7, #24]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f883 	bl	8007c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e012      	b.n	8007b72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b4c:	893b      	ldrh	r3, [r7, #8]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2140      	movs	r1, #64	; 0x40
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f831 	bl	8007bc8 <I2C_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	80002000 	.word	0x80002000

08007b80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d103      	bne.n	8007b9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d007      	beq.n	8007bbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	619a      	str	r2, [r3, #24]
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bd8:	e022      	b.n	8007c20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d01e      	beq.n	8007c20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7fd ff09 	bl	80059f8 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d113      	bne.n	8007c20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f043 0220 	orr.w	r2, r3, #32
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e00f      	b.n	8007c40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bf0c      	ite	eq
 8007c30:	2301      	moveq	r3, #1
 8007c32:	2300      	movne	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d0cd      	beq.n	8007bda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c54:	e02c      	b.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	68b9      	ldr	r1, [r7, #8]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 f870 	bl	8007d40 <I2C_IsAcknowledgeFailed>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e02a      	b.n	8007cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c70:	d01e      	beq.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c72:	f7fd fec1 	bl	80059f8 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d302      	bcc.n	8007c88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d113      	bne.n	8007cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8c:	f043 0220 	orr.w	r2, r3, #32
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e007      	b.n	8007cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d1cb      	bne.n	8007c56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cd4:	e028      	b.n	8007d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f830 	bl	8007d40 <I2C_IsAcknowledgeFailed>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e026      	b.n	8007d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cea:	f7fd fe85 	bl	80059f8 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d302      	bcc.n	8007d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d113      	bne.n	8007d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e007      	b.n	8007d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d1cf      	bne.n	8007cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f003 0310 	and.w	r3, r3, #16
 8007d56:	2b10      	cmp	r3, #16
 8007d58:	d151      	bne.n	8007dfe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d5a:	e022      	b.n	8007da2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d01e      	beq.n	8007da2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d64:	f7fd fe48 	bl	80059f8 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d302      	bcc.n	8007d7a <I2C_IsAcknowledgeFailed+0x3a>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d113      	bne.n	8007da2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	f043 0220 	orr.w	r2, r3, #32
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e02e      	b.n	8007e00 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f003 0320 	and.w	r3, r3, #32
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d1d5      	bne.n	8007d5c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2210      	movs	r2, #16
 8007db6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f7ff fedd 	bl	8007b80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6859      	ldr	r1, [r3, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <I2C_IsAcknowledgeFailed+0xc8>)
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	f043 0204 	orr.w	r2, r3, #4
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	fe00e800 	.word	0xfe00e800

08007e0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607b      	str	r3, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	817b      	strh	r3, [r7, #10]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	0d5b      	lsrs	r3, r3, #21
 8007e28:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <I2C_TransferConfig+0x58>)
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	43db      	mvns	r3, r3
 8007e32:	ea02 0103 	and.w	r1, r2, r3
 8007e36:	897b      	ldrh	r3, [r7, #10]
 8007e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e3c:	7a7b      	ldrb	r3, [r7, #9]
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	03ff63ff 	.word	0x03ff63ff

08007e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d138      	bne.n	8007ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e032      	b.n	8007ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2224      	movs	r2, #36	; 0x24
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0201 	bic.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e000      	b.n	8007ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ef0:	2302      	movs	r3, #2
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d139      	bne.n	8007f88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e033      	b.n	8007f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	; 0x24
 8007f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e000      	b.n	8007f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
  }
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e0bf      	b.n	800812a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fd f864 	bl	800508c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007fda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6999      	ldr	r1, [r3, #24]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ff0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6899      	ldr	r1, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b4a      	ldr	r3, [pc, #296]	; (8008134 <HAL_LTDC_Init+0x19c>)
 800800c:	400b      	ands	r3, r1
 800800e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6899      	ldr	r1, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68d9      	ldr	r1, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	4b3e      	ldr	r3, [pc, #248]	; (8008134 <HAL_LTDC_Init+0x19c>)
 800803a:	400b      	ands	r3, r1
 800803c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68d9      	ldr	r1, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a1a      	ldr	r2, [r3, #32]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	431a      	orrs	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6919      	ldr	r1, [r3, #16]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b33      	ldr	r3, [pc, #204]	; (8008134 <HAL_LTDC_Init+0x19c>)
 8008068:	400b      	ands	r3, r1
 800806a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	041b      	lsls	r3, r3, #16
 8008072:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6919      	ldr	r1, [r3, #16]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6959      	ldr	r1, [r3, #20]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b27      	ldr	r3, [pc, #156]	; (8008134 <HAL_LTDC_Init+0x19c>)
 8008096:	400b      	ands	r3, r1
 8008098:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	041b      	lsls	r3, r3, #16
 80080a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6959      	ldr	r1, [r3, #20]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0206 	orr.w	r2, r2, #6
 8008106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	f000f800 	.word	0xf000f800

08008138 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d023      	beq.n	80081a2 <HAL_LTDC_IRQHandler+0x6a>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01e      	beq.n	80081a2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0204 	bic.w	r2, r2, #4
 8008172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2204      	movs	r2, #4
 800817a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2204      	movs	r2, #4
 8008190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f86f 	bl	8008280 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d023      	beq.n	80081f4 <HAL_LTDC_IRQHandler+0xbc>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01e      	beq.n	80081f4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0202 	bic.w	r2, r2, #2
 80081c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2202      	movs	r2, #2
 80081cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081d4:	f043 0202 	orr.w	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2204      	movs	r2, #4
 80081e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f846 	bl	8008280 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d01b      	beq.n	8008236 <HAL_LTDC_IRQHandler+0xfe>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d016      	beq.n	8008236 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2201      	movs	r2, #1
 800821e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f82f 	bl	8008294 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <HAL_LTDC_IRQHandler+0x140>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0208 	bic.w	r2, r2, #8
 8008258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2208      	movs	r2, #8
 8008260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f818 	bl	80082a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80082bc:	b5b0      	push	{r4, r5, r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <HAL_LTDC_ConfigLayer+0x1a>
 80082d2:	2302      	movs	r3, #2
 80082d4:	e02c      	b.n	8008330 <HAL_LTDC_ConfigLayer+0x74>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2202      	movs	r2, #2
 80082e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2134      	movs	r1, #52	; 0x34
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4614      	mov	r4, r2
 80082fa:	461d      	mov	r5, r3
 80082fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f81f 	bl	8008354 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2201      	movs	r2, #1
 800831c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bdb0      	pop	{r4, r5, r7, pc}

08008338 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008346:	b2db      	uxtb	r3, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008354:	b480      	push	{r7}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	0c1b      	lsrs	r3, r3, #16
 800836c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008370:	4413      	add	r3, r2
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	01db      	lsls	r3, r3, #7
 8008380:	4413      	add	r3, r2
 8008382:	3384      	adds	r3, #132	; 0x84
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	4611      	mov	r1, r2
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	01d2      	lsls	r2, r2, #7
 8008390:	440a      	add	r2, r1
 8008392:	3284      	adds	r2, #132	; 0x84
 8008394:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008398:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	0c1b      	lsrs	r3, r3, #16
 80083a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083aa:	4413      	add	r3, r2
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4619      	mov	r1, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	01db      	lsls	r3, r3, #7
 80083b8:	440b      	add	r3, r1
 80083ba:	3384      	adds	r3, #132	; 0x84
 80083bc:	4619      	mov	r1, r3
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083d2:	4413      	add	r3, r2
 80083d4:	041b      	lsls	r3, r3, #16
 80083d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	01db      	lsls	r3, r3, #7
 80083e2:	4413      	add	r3, r2
 80083e4:	3384      	adds	r3, #132	; 0x84
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	4611      	mov	r1, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	01d2      	lsls	r2, r2, #7
 80083f2:	440a      	add	r2, r1
 80083f4:	3284      	adds	r2, #132	; 0x84
 80083f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80083fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800840a:	4413      	add	r3, r2
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	01db      	lsls	r3, r3, #7
 8008418:	440b      	add	r3, r1
 800841a:	3384      	adds	r3, #132	; 0x84
 800841c:	4619      	mov	r1, r3
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4313      	orrs	r3, r2
 8008422:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	01db      	lsls	r3, r3, #7
 800842e:	4413      	add	r3, r2
 8008430:	3384      	adds	r3, #132	; 0x84
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	4611      	mov	r1, r2
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	01d2      	lsls	r2, r2, #7
 800843e:	440a      	add	r2, r1
 8008440:	3284      	adds	r2, #132	; 0x84
 8008442:	f023 0307 	bic.w	r3, r3, #7
 8008446:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	01db      	lsls	r3, r3, #7
 8008452:	4413      	add	r3, r2
 8008454:	3384      	adds	r3, #132	; 0x84
 8008456:	461a      	mov	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	061b      	lsls	r3, r3, #24
 8008478:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	01db      	lsls	r3, r3, #7
 8008484:	4413      	add	r3, r2
 8008486:	3384      	adds	r3, #132	; 0x84
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	01db      	lsls	r3, r3, #7
 8008494:	4413      	add	r3, r2
 8008496:	3384      	adds	r3, #132	; 0x84
 8008498:	461a      	mov	r2, r3
 800849a:	2300      	movs	r3, #0
 800849c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084a4:	461a      	mov	r2, r3
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	431a      	orrs	r2, r3
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4619      	mov	r1, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	01db      	lsls	r3, r3, #7
 80084b8:	440b      	add	r3, r1
 80084ba:	3384      	adds	r3, #132	; 0x84
 80084bc:	4619      	mov	r1, r3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	01db      	lsls	r3, r3, #7
 80084ce:	4413      	add	r3, r2
 80084d0:	3384      	adds	r3, #132	; 0x84
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	4611      	mov	r1, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	01d2      	lsls	r2, r2, #7
 80084de:	440a      	add	r2, r1
 80084e0:	3284      	adds	r2, #132	; 0x84
 80084e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	01db      	lsls	r3, r3, #7
 80084f2:	4413      	add	r3, r2
 80084f4:	3384      	adds	r3, #132	; 0x84
 80084f6:	461a      	mov	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	01db      	lsls	r3, r3, #7
 8008508:	4413      	add	r3, r2
 800850a:	3384      	adds	r3, #132	; 0x84
 800850c:	69da      	ldr	r2, [r3, #28]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	440b      	add	r3, r1
 800851a:	3384      	adds	r3, #132	; 0x84
 800851c:	4619      	mov	r1, r3
 800851e:	4b58      	ldr	r3, [pc, #352]	; (8008680 <LTDC_SetConfig+0x32c>)
 8008520:	4013      	ands	r3, r2
 8008522:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	69da      	ldr	r2, [r3, #28]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	68f9      	ldr	r1, [r7, #12]
 800852e:	6809      	ldr	r1, [r1, #0]
 8008530:	4608      	mov	r0, r1
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	01c9      	lsls	r1, r1, #7
 8008536:	4401      	add	r1, r0
 8008538:	3184      	adds	r1, #132	; 0x84
 800853a:	4313      	orrs	r3, r2
 800853c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	01db      	lsls	r3, r3, #7
 8008548:	4413      	add	r3, r2
 800854a:	3384      	adds	r3, #132	; 0x84
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	01db      	lsls	r3, r3, #7
 8008558:	4413      	add	r3, r2
 800855a:	3384      	adds	r3, #132	; 0x84
 800855c:	461a      	mov	r2, r3
 800855e:	2300      	movs	r3, #0
 8008560:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	01db      	lsls	r3, r3, #7
 800856c:	4413      	add	r3, r2
 800856e:	3384      	adds	r3, #132	; 0x84
 8008570:	461a      	mov	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008580:	2304      	movs	r3, #4
 8008582:	61fb      	str	r3, [r7, #28]
 8008584:	e01b      	b.n	80085be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d102      	bne.n	8008594 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800858e:	2303      	movs	r3, #3
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	e014      	b.n	80085be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b04      	cmp	r3, #4
 800859a:	d00b      	beq.n	80085b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d007      	beq.n	80085b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d003      	beq.n	80085b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80085b0:	2b07      	cmp	r3, #7
 80085b2:	d102      	bne.n	80085ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80085b4:	2302      	movs	r3, #2
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e001      	b.n	80085be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80085ba:	2301      	movs	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	4413      	add	r3, r2
 80085ca:	3384      	adds	r3, #132	; 0x84
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	4611      	mov	r1, r2
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	01d2      	lsls	r2, r2, #7
 80085d8:	440a      	add	r2, r1
 80085da:	3284      	adds	r2, #132	; 0x84
 80085dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80085e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	fb02 f303 	mul.w	r3, r2, r3
 80085ec:	041a      	lsls	r2, r3, #16
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6859      	ldr	r1, [r3, #4]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1acb      	subs	r3, r1, r3
 80085f8:	69f9      	ldr	r1, [r7, #28]
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	3303      	adds	r3, #3
 8008600:	68f9      	ldr	r1, [r7, #12]
 8008602:	6809      	ldr	r1, [r1, #0]
 8008604:	4608      	mov	r0, r1
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	01c9      	lsls	r1, r1, #7
 800860a:	4401      	add	r1, r0
 800860c:	3184      	adds	r1, #132	; 0x84
 800860e:	4313      	orrs	r3, r2
 8008610:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	01db      	lsls	r3, r3, #7
 800861c:	4413      	add	r3, r2
 800861e:	3384      	adds	r3, #132	; 0x84
 8008620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4619      	mov	r1, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	01db      	lsls	r3, r3, #7
 800862c:	440b      	add	r3, r1
 800862e:	3384      	adds	r3, #132	; 0x84
 8008630:	4619      	mov	r1, r3
 8008632:	4b14      	ldr	r3, [pc, #80]	; (8008684 <LTDC_SetConfig+0x330>)
 8008634:	4013      	ands	r3, r2
 8008636:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	01db      	lsls	r3, r3, #7
 8008642:	4413      	add	r3, r2
 8008644:	3384      	adds	r3, #132	; 0x84
 8008646:	461a      	mov	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	01db      	lsls	r3, r3, #7
 8008658:	4413      	add	r3, r2
 800865a:	3384      	adds	r3, #132	; 0x84
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	6812      	ldr	r2, [r2, #0]
 8008662:	4611      	mov	r1, r2
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	01d2      	lsls	r2, r2, #7
 8008668:	440a      	add	r2, r1
 800866a:	3284      	adds	r2, #132	; 0x84
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	6013      	str	r3, [r2, #0]
}
 8008672:	bf00      	nop
 8008674:	3724      	adds	r7, #36	; 0x24
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	fffff8f8 	.word	0xfffff8f8
 8008684:	fffff800 	.word	0xfffff800

08008688 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800868c:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008696:	6013      	str	r3, [r2, #0]
}
 8008698:	bf00      	nop
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	40007000 	.word	0x40007000

080086a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80086b2:	4b23      	ldr	r3, [pc, #140]	; (8008740 <HAL_PWREx_EnableOverDrive+0x98>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	4a22      	ldr	r2, [pc, #136]	; (8008740 <HAL_PWREx_EnableOverDrive+0x98>)
 80086b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086bc:	6413      	str	r3, [r2, #64]	; 0x40
 80086be:	4b20      	ldr	r3, [pc, #128]	; (8008740 <HAL_PWREx_EnableOverDrive+0x98>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80086ca:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086d6:	f7fd f98f 	bl	80059f8 <HAL_GetTick>
 80086da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086dc:	e009      	b.n	80086f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086de:	f7fd f98b 	bl	80059f8 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ec:	d901      	bls.n	80086f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e022      	b.n	8008738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fe:	d1ee      	bne.n	80086de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a0f      	ldr	r2, [pc, #60]	; (8008744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800870c:	f7fd f974 	bl	80059f8 <HAL_GetTick>
 8008710:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008712:	e009      	b.n	8008728 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008714:	f7fd f970 	bl	80059f8 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008722:	d901      	bls.n	8008728 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e007      	b.n	8008738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <HAL_PWREx_EnableOverDrive+0x9c>)
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008734:	d1ee      	bne.n	8008714 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	40023800 	.word	0x40023800
 8008744:	40007000 	.word	0x40007000

08008748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008750:	2300      	movs	r3, #0
 8008752:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e291      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8087 	beq.w	800887a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800876c:	4b96      	ldr	r3, [pc, #600]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 030c 	and.w	r3, r3, #12
 8008774:	2b04      	cmp	r3, #4
 8008776:	d00c      	beq.n	8008792 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008778:	4b93      	ldr	r3, [pc, #588]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 030c 	and.w	r3, r3, #12
 8008780:	2b08      	cmp	r3, #8
 8008782:	d112      	bne.n	80087aa <HAL_RCC_OscConfig+0x62>
 8008784:	4b90      	ldr	r3, [pc, #576]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800878c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008790:	d10b      	bne.n	80087aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008792:	4b8d      	ldr	r3, [pc, #564]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d06c      	beq.n	8008878 <HAL_RCC_OscConfig+0x130>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d168      	bne.n	8008878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e26b      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b2:	d106      	bne.n	80087c2 <HAL_RCC_OscConfig+0x7a>
 80087b4:	4b84      	ldr	r3, [pc, #528]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a83      	ldr	r2, [pc, #524]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e02e      	b.n	8008820 <HAL_RCC_OscConfig+0xd8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10c      	bne.n	80087e4 <HAL_RCC_OscConfig+0x9c>
 80087ca:	4b7f      	ldr	r3, [pc, #508]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a7e      	ldr	r2, [pc, #504]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	4b7c      	ldr	r3, [pc, #496]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a7b      	ldr	r2, [pc, #492]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	e01d      	b.n	8008820 <HAL_RCC_OscConfig+0xd8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087ec:	d10c      	bne.n	8008808 <HAL_RCC_OscConfig+0xc0>
 80087ee:	4b76      	ldr	r3, [pc, #472]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a75      	ldr	r2, [pc, #468]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	4b73      	ldr	r3, [pc, #460]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a72      	ldr	r2, [pc, #456]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	e00b      	b.n	8008820 <HAL_RCC_OscConfig+0xd8>
 8008808:	4b6f      	ldr	r3, [pc, #444]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a6e      	ldr	r2, [pc, #440]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800880e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	4b6c      	ldr	r3, [pc, #432]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a6b      	ldr	r2, [pc, #428]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800881a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800881e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d013      	beq.n	8008850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fd f8e6 	bl	80059f8 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008830:	f7fd f8e2 	bl	80059f8 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	; 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e21f      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008842:	4b61      	ldr	r3, [pc, #388]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0f0      	beq.n	8008830 <HAL_RCC_OscConfig+0xe8>
 800884e:	e014      	b.n	800887a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7fd f8d2 	bl	80059f8 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008858:	f7fd f8ce 	bl	80059f8 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b64      	cmp	r3, #100	; 0x64
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e20b      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800886a:	4b57      	ldr	r3, [pc, #348]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x110>
 8008876:	e000      	b.n	800887a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d069      	beq.n	800895a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008886:	4b50      	ldr	r3, [pc, #320]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 030c 	and.w	r3, r3, #12
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008892:	4b4d      	ldr	r3, [pc, #308]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 030c 	and.w	r3, r3, #12
 800889a:	2b08      	cmp	r3, #8
 800889c:	d11c      	bne.n	80088d8 <HAL_RCC_OscConfig+0x190>
 800889e:	4b4a      	ldr	r3, [pc, #296]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d116      	bne.n	80088d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088aa:	4b47      	ldr	r3, [pc, #284]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <HAL_RCC_OscConfig+0x17a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d001      	beq.n	80088c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e1df      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088c2:	4b41      	ldr	r3, [pc, #260]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	493d      	ldr	r1, [pc, #244]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088d6:	e040      	b.n	800895a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d023      	beq.n	8008928 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088e0:	4b39      	ldr	r3, [pc, #228]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ec:	f7fd f884 	bl	80059f8 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f4:	f7fd f880 	bl	80059f8 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e1bd      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008906:	4b30      	ldr	r3, [pc, #192]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008912:	4b2d      	ldr	r3, [pc, #180]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	4929      	ldr	r1, [pc, #164]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008922:	4313      	orrs	r3, r2
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	e018      	b.n	800895a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008928:	4b27      	ldr	r3, [pc, #156]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fd f860 	bl	80059f8 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800893c:	f7fd f85c 	bl	80059f8 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e199      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800894e:	4b1e      	ldr	r3, [pc, #120]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d038      	beq.n	80089d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d019      	beq.n	80089a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800896e:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008974:	f043 0301 	orr.w	r3, r3, #1
 8008978:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897a:	f7fd f83d 	bl	80059f8 <HAL_GetTick>
 800897e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008980:	e008      	b.n	8008994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008982:	f7fd f839 	bl	80059f8 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e176      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 8008996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0f0      	beq.n	8008982 <HAL_RCC_OscConfig+0x23a>
 80089a0:	e01a      	b.n	80089d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80089a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a6:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <HAL_RCC_OscConfig+0x280>)
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089ae:	f7fd f823 	bl	80059f8 <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089b4:	e00a      	b.n	80089cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089b6:	f7fd f81f 	bl	80059f8 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d903      	bls.n	80089cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e15c      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
 80089c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089cc:	4b91      	ldr	r3, [pc, #580]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 80089ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1ee      	bne.n	80089b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 80a4 	beq.w	8008b2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089e6:	4b8b      	ldr	r3, [pc, #556]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10d      	bne.n	8008a0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80089f2:	4b88      	ldr	r3, [pc, #544]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	4a87      	ldr	r2, [pc, #540]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 80089f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6413      	str	r3, [r2, #64]	; 0x40
 80089fe:	4b85      	ldr	r3, [pc, #532]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	60bb      	str	r3, [r7, #8]
 8008a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a0e:	4b82      	ldr	r3, [pc, #520]	; (8008c18 <HAL_RCC_OscConfig+0x4d0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d118      	bne.n	8008a4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008a1a:	4b7f      	ldr	r3, [pc, #508]	; (8008c18 <HAL_RCC_OscConfig+0x4d0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a7e      	ldr	r2, [pc, #504]	; (8008c18 <HAL_RCC_OscConfig+0x4d0>)
 8008a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a26:	f7fc ffe7 	bl	80059f8 <HAL_GetTick>
 8008a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a2c:	e008      	b.n	8008a40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a2e:	f7fc ffe3 	bl	80059f8 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b64      	cmp	r3, #100	; 0x64
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e120      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a40:	4b75      	ldr	r3, [pc, #468]	; (8008c18 <HAL_RCC_OscConfig+0x4d0>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f0      	beq.n	8008a2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d106      	bne.n	8008a62 <HAL_RCC_OscConfig+0x31a>
 8008a54:	4b6f      	ldr	r3, [pc, #444]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a58:	4a6e      	ldr	r2, [pc, #440]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a60:	e02d      	b.n	8008abe <HAL_RCC_OscConfig+0x376>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10c      	bne.n	8008a84 <HAL_RCC_OscConfig+0x33c>
 8008a6a:	4b6a      	ldr	r3, [pc, #424]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6e:	4a69      	ldr	r2, [pc, #420]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	6713      	str	r3, [r2, #112]	; 0x70
 8008a76:	4b67      	ldr	r3, [pc, #412]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	4a66      	ldr	r2, [pc, #408]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a7c:	f023 0304 	bic.w	r3, r3, #4
 8008a80:	6713      	str	r3, [r2, #112]	; 0x70
 8008a82:	e01c      	b.n	8008abe <HAL_RCC_OscConfig+0x376>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b05      	cmp	r3, #5
 8008a8a:	d10c      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x35e>
 8008a8c:	4b61      	ldr	r3, [pc, #388]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a90:	4a60      	ldr	r2, [pc, #384]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a92:	f043 0304 	orr.w	r3, r3, #4
 8008a96:	6713      	str	r3, [r2, #112]	; 0x70
 8008a98:	4b5e      	ldr	r3, [pc, #376]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9c:	4a5d      	ldr	r2, [pc, #372]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa4:	e00b      	b.n	8008abe <HAL_RCC_OscConfig+0x376>
 8008aa6:	4b5b      	ldr	r3, [pc, #364]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aaa:	4a5a      	ldr	r2, [pc, #360]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab2:	4b58      	ldr	r3, [pc, #352]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	4a57      	ldr	r2, [pc, #348]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008ab8:	f023 0304 	bic.w	r3, r3, #4
 8008abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d015      	beq.n	8008af2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac6:	f7fc ff97 	bl	80059f8 <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008acc:	e00a      	b.n	8008ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ace:	f7fc ff93 	bl	80059f8 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e0ce      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ae4:	4b4b      	ldr	r3, [pc, #300]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0ee      	beq.n	8008ace <HAL_RCC_OscConfig+0x386>
 8008af0:	e014      	b.n	8008b1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008af2:	f7fc ff81 	bl	80059f8 <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008af8:	e00a      	b.n	8008b10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008afa:	f7fc ff7d 	bl	80059f8 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e0b8      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b10:	4b40      	ldr	r3, [pc, #256]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1ee      	bne.n	8008afa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d105      	bne.n	8008b2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b22:	4b3c      	ldr	r3, [pc, #240]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	4a3b      	ldr	r2, [pc, #236]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 80a4 	beq.w	8008c80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b38:	4b36      	ldr	r3, [pc, #216]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f003 030c 	and.w	r3, r3, #12
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d06b      	beq.n	8008c1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d149      	bne.n	8008be0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4c:	4b31      	ldr	r3, [pc, #196]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a30      	ldr	r2, [pc, #192]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b58:	f7fc ff4e 	bl	80059f8 <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fc ff4a 	bl	80059f8 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e087      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b72:	4b28      	ldr	r3, [pc, #160]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69da      	ldr	r2, [r3, #28]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	019b      	lsls	r3, r3, #6
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	3b01      	subs	r3, #1
 8008b98:	041b      	lsls	r3, r3, #16
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	4a1b      	ldr	r2, [pc, #108]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008baa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bac:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a18      	ldr	r2, [pc, #96]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb8:	f7fc ff1e 	bl	80059f8 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc0:	f7fc ff1a 	bl	80059f8 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e057      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x478>
 8008bde:	e04f      	b.n	8008c80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be0:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a0b      	ldr	r2, [pc, #44]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bec:	f7fc ff04 	bl	80059f8 <HAL_GetTick>
 8008bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf4:	f7fc ff00 	bl	80059f8 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e03d      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c06:	4b03      	ldr	r3, [pc, #12]	; (8008c14 <HAL_RCC_OscConfig+0x4cc>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f0      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x4ac>
 8008c12:	e035      	b.n	8008c80 <HAL_RCC_OscConfig+0x538>
 8008c14:	40023800 	.word	0x40023800
 8008c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008c1c:	4b1b      	ldr	r3, [pc, #108]	; (8008c8c <HAL_RCC_OscConfig+0x544>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d028      	beq.n	8008c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d121      	bne.n	8008c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d11a      	bne.n	8008c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d111      	bne.n	8008c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	3b01      	subs	r3, #1
 8008c66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d107      	bne.n	8008c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d001      	beq.n	8008c80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e000      	b.n	8008c82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	40023800 	.word	0x40023800

08008c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e0d0      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca8:	4b6a      	ldr	r3, [pc, #424]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	683a      	ldr	r2, [r7, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d910      	bls.n	8008cd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb6:	4b67      	ldr	r3, [pc, #412]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f023 020f 	bic.w	r2, r3, #15
 8008cbe:	4965      	ldr	r1, [pc, #404]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cc6:	4b63      	ldr	r3, [pc, #396]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d001      	beq.n	8008cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e0b8      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d020      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cf0:	4b59      	ldr	r3, [pc, #356]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4a58      	ldr	r2, [pc, #352]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d08:	4b53      	ldr	r3, [pc, #332]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	4a52      	ldr	r2, [pc, #328]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d14:	4b50      	ldr	r3, [pc, #320]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	494d      	ldr	r1, [pc, #308]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d040      	beq.n	8008db4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d107      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d3a:	4b47      	ldr	r3, [pc, #284]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d115      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e07f      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d107      	bne.n	8008d62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d52:	4b41      	ldr	r3, [pc, #260]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e073      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d62:	4b3d      	ldr	r3, [pc, #244]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e06b      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d72:	4b39      	ldr	r3, [pc, #228]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 0203 	bic.w	r2, r3, #3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	4936      	ldr	r1, [pc, #216]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d84:	f7fc fe38 	bl	80059f8 <HAL_GetTick>
 8008d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d8a:	e00a      	b.n	8008da2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d8c:	f7fc fe34 	bl	80059f8 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e053      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da2:	4b2d      	ldr	r3, [pc, #180]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 020c 	and.w	r2, r3, #12
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d1eb      	bne.n	8008d8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008db4:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d210      	bcs.n	8008de4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f023 020f 	bic.w	r2, r3, #15
 8008dca:	4922      	ldr	r1, [pc, #136]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dd2:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <HAL_RCC_ClockConfig+0x1c4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d001      	beq.n	8008de4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e032      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008df0:	4b19      	ldr	r3, [pc, #100]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	4916      	ldr	r1, [pc, #88]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0308 	and.w	r3, r3, #8
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e0e:	4b12      	ldr	r3, [pc, #72]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	490e      	ldr	r1, [pc, #56]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008e22:	f000 f821 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 8008e26:	4601      	mov	r1, r0
 8008e28:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <HAL_RCC_ClockConfig+0x1c8>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	091b      	lsrs	r3, r3, #4
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <HAL_RCC_ClockConfig+0x1cc>)
 8008e34:	5cd3      	ldrb	r3, [r2, r3]
 8008e36:	fa21 f303 	lsr.w	r3, r1, r3
 8008e3a:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <HAL_RCC_ClockConfig+0x1d0>)
 8008e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <HAL_RCC_ClockConfig+0x1d4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fc fcaa 	bl	800579c <HAL_InitTick>

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40023c00 	.word	0x40023c00
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	0801159c 	.word	0x0801159c
 8008e60:	20000040 	.word	0x20000040
 8008e64:	20000044 	.word	0x20000044

08008e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	2300      	movs	r3, #0
 8008e78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e7e:	4b50      	ldr	r3, [pc, #320]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 030c 	and.w	r3, r3, #12
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d007      	beq.n	8008e9a <HAL_RCC_GetSysClockFreq+0x32>
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d008      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0x38>
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 808d 	bne.w	8008fae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e94:	4b4b      	ldr	r3, [pc, #300]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008e96:	60bb      	str	r3, [r7, #8]
      break;
 8008e98:	e08c      	b.n	8008fb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e9a:	4b4b      	ldr	r3, [pc, #300]	; (8008fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e9c:	60bb      	str	r3, [r7, #8]
      break;
 8008e9e:	e089      	b.n	8008fb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ea0:	4b47      	ldr	r3, [pc, #284]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008eaa:	4b45      	ldr	r3, [pc, #276]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d023      	beq.n	8008efe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eb6:	4b42      	ldr	r3, [pc, #264]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	099b      	lsrs	r3, r3, #6
 8008ebc:	f04f 0400 	mov.w	r4, #0
 8008ec0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	ea03 0501 	and.w	r5, r3, r1
 8008ecc:	ea04 0602 	and.w	r6, r4, r2
 8008ed0:	4a3d      	ldr	r2, [pc, #244]	; (8008fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ed2:	fb02 f106 	mul.w	r1, r2, r6
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	fb02 f205 	mul.w	r2, r2, r5
 8008edc:	440a      	add	r2, r1
 8008ede:	493a      	ldr	r1, [pc, #232]	; (8008fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ee0:	fba5 0101 	umull	r0, r1, r5, r1
 8008ee4:	1853      	adds	r3, r2, r1
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f04f 0400 	mov.w	r4, #0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	f7f7 f9dd 	bl	80002b0 <__aeabi_uldivmod>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e049      	b.n	8008f92 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008efe:	4b30      	ldr	r3, [pc, #192]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	099b      	lsrs	r3, r3, #6
 8008f04:	f04f 0400 	mov.w	r4, #0
 8008f08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	ea03 0501 	and.w	r5, r3, r1
 8008f14:	ea04 0602 	and.w	r6, r4, r2
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	f04f 0300 	mov.w	r3, #0
 8008f20:	f04f 0400 	mov.w	r4, #0
 8008f24:	0154      	lsls	r4, r2, #5
 8008f26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008f2a:	014b      	lsls	r3, r1, #5
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4622      	mov	r2, r4
 8008f30:	1b49      	subs	r1, r1, r5
 8008f32:	eb62 0206 	sbc.w	r2, r2, r6
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	f04f 0400 	mov.w	r4, #0
 8008f3e:	0194      	lsls	r4, r2, #6
 8008f40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008f44:	018b      	lsls	r3, r1, #6
 8008f46:	1a5b      	subs	r3, r3, r1
 8008f48:	eb64 0402 	sbc.w	r4, r4, r2
 8008f4c:	f04f 0100 	mov.w	r1, #0
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	00e2      	lsls	r2, r4, #3
 8008f56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008f5a:	00d9      	lsls	r1, r3, #3
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4614      	mov	r4, r2
 8008f60:	195b      	adds	r3, r3, r5
 8008f62:	eb44 0406 	adc.w	r4, r4, r6
 8008f66:	f04f 0100 	mov.w	r1, #0
 8008f6a:	f04f 0200 	mov.w	r2, #0
 8008f6e:	02a2      	lsls	r2, r4, #10
 8008f70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008f74:	0299      	lsls	r1, r3, #10
 8008f76:	460b      	mov	r3, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f04f 0400 	mov.w	r4, #0
 8008f84:	461a      	mov	r2, r3
 8008f86:	4623      	mov	r3, r4
 8008f88:	f7f7 f992 	bl	80002b0 <__aeabi_uldivmod>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	f003 0303 	and.w	r3, r3, #3
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008faa:	60bb      	str	r3, [r7, #8]
      break;
 8008fac:	e002      	b.n	8008fb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008fb0:	60bb      	str	r3, [r7, #8]
      break;
 8008fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	40023800 	.word	0x40023800
 8008fc4:	00f42400 	.word	0x00f42400
 8008fc8:	017d7840 	.word	0x017d7840

08008fcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fd0:	4b03      	ldr	r3, [pc, #12]	; (8008fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20000040 	.word	0x20000040

08008fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fe8:	f7ff fff0 	bl	8008fcc <HAL_RCC_GetHCLKFreq>
 8008fec:	4601      	mov	r1, r0
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	0a9b      	lsrs	r3, r3, #10
 8008ff4:	f003 0307 	and.w	r3, r3, #7
 8008ff8:	4a03      	ldr	r2, [pc, #12]	; (8009008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ffa:	5cd3      	ldrb	r3, [r2, r3]
 8008ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009000:	4618      	mov	r0, r3
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40023800 	.word	0x40023800
 8009008:	080115ac 	.word	0x080115ac

0800900c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009010:	f7ff ffdc 	bl	8008fcc <HAL_RCC_GetHCLKFreq>
 8009014:	4601      	mov	r1, r0
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	0b5b      	lsrs	r3, r3, #13
 800901c:	f003 0307 	and.w	r3, r3, #7
 8009020:	4a03      	ldr	r2, [pc, #12]	; (8009030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009022:	5cd3      	ldrb	r3, [r2, r3]
 8009024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009028:	4618      	mov	r0, r3
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40023800 	.word	0x40023800
 8009030:	080115ac 	.word	0x080115ac

08009034 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220f      	movs	r2, #15
 8009042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009044:	4b12      	ldr	r3, [pc, #72]	; (8009090 <HAL_RCC_GetClockConfig+0x5c>)
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f003 0203 	and.w	r2, r3, #3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009050:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <HAL_RCC_GetClockConfig+0x5c>)
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <HAL_RCC_GetClockConfig+0x5c>)
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009068:	4b09      	ldr	r3, [pc, #36]	; (8009090 <HAL_RCC_GetClockConfig+0x5c>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	08db      	lsrs	r3, r3, #3
 800906e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009076:	4b07      	ldr	r3, [pc, #28]	; (8009094 <HAL_RCC_GetClockConfig+0x60>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 020f 	and.w	r2, r3, #15
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	601a      	str	r2, [r3, #0]
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40023800 	.word	0x40023800
 8009094:	40023c00 	.word	0x40023c00

08009098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d012      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80090c0:	4b69      	ldr	r3, [pc, #420]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	4a68      	ldr	r2, [pc, #416]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80090ca:	6093      	str	r3, [r2, #8]
 80090cc:	4b66      	ldr	r3, [pc, #408]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d4:	4964      	ldr	r1, [pc, #400]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80090e2:	2301      	movs	r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d017      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090f2:	4b5d      	ldr	r3, [pc, #372]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009100:	4959      	ldr	r1, [pc, #356]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009102:	4313      	orrs	r3, r2
 8009104:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009110:	d101      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800911e:	2301      	movs	r3, #1
 8009120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d017      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800912e:	4b4e      	ldr	r3, [pc, #312]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009134:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	494a      	ldr	r1, [pc, #296]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800913e:	4313      	orrs	r3, r2
 8009140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800914c:	d101      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800914e:	2301      	movs	r3, #1
 8009150:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800915a:	2301      	movs	r3, #1
 800915c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 808b 	beq.w	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800917c:	4b3a      	ldr	r3, [pc, #232]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800917e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009180:	4a39      	ldr	r2, [pc, #228]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009186:	6413      	str	r3, [r2, #64]	; 0x40
 8009188:	4b37      	ldr	r3, [pc, #220]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009190:	60bb      	str	r3, [r7, #8]
 8009192:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009194:	4b35      	ldr	r3, [pc, #212]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a34      	ldr	r2, [pc, #208]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800919a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091a0:	f7fc fc2a 	bl	80059f8 <HAL_GetTick>
 80091a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80091a6:	e008      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091a8:	f7fc fc26 	bl	80059f8 <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b64      	cmp	r3, #100	; 0x64
 80091b4:	d901      	bls.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e355      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80091ba:	4b2c      	ldr	r3, [pc, #176]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f0      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80091c6:	4b28      	ldr	r3, [pc, #160]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d035      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d02e      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091e4:	4b20      	ldr	r3, [pc, #128]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091ee:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f2:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fe:	4a1a      	ldr	r2, [pc, #104]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009206:	4a18      	ldr	r2, [pc, #96]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800920c:	4b16      	ldr	r3, [pc, #88]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800920e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b01      	cmp	r3, #1
 8009216:	d114      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009218:	f7fc fbee 	bl	80059f8 <HAL_GetTick>
 800921c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800921e:	e00a      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009220:	f7fc fbea 	bl	80059f8 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	f241 3288 	movw	r2, #5000	; 0x1388
 800922e:	4293      	cmp	r3, r2
 8009230:	d901      	bls.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e317      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009236:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0ee      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800924e:	d111      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800925e:	400b      	ands	r3, r1
 8009260:	4901      	ldr	r1, [pc, #4]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009262:	4313      	orrs	r3, r2
 8009264:	608b      	str	r3, [r1, #8]
 8009266:	e00b      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009268:	40023800 	.word	0x40023800
 800926c:	40007000 	.word	0x40007000
 8009270:	0ffffcff 	.word	0x0ffffcff
 8009274:	4bb0      	ldr	r3, [pc, #704]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	4aaf      	ldr	r2, [pc, #700]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800927a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800927e:	6093      	str	r3, [r2, #8]
 8009280:	4bad      	ldr	r3, [pc, #692]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928c:	49aa      	ldr	r1, [pc, #680]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800928e:	4313      	orrs	r3, r2
 8009290:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0310 	and.w	r3, r3, #16
 800929a:	2b00      	cmp	r3, #0
 800929c:	d010      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800929e:	4ba6      	ldr	r3, [pc, #664]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a4:	4aa4      	ldr	r2, [pc, #656]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80092ae:	4ba2      	ldr	r3, [pc, #648]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	499f      	ldr	r1, [pc, #636]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00a      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092cc:	4b9a      	ldr	r3, [pc, #616]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092da:	4997      	ldr	r1, [pc, #604]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00a      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092ee:	4b92      	ldr	r3, [pc, #584]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fc:	498e      	ldr	r1, [pc, #568]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00a      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009310:	4b89      	ldr	r3, [pc, #548]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931e:	4986      	ldr	r1, [pc, #536]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009320:	4313      	orrs	r3, r2
 8009322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009332:	4b81      	ldr	r3, [pc, #516]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009338:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009340:	497d      	ldr	r1, [pc, #500]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009354:	4b78      	ldr	r3, [pc, #480]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935a:	f023 0203 	bic.w	r2, r3, #3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	4975      	ldr	r1, [pc, #468]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009364:	4313      	orrs	r3, r2
 8009366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009376:	4b70      	ldr	r3, [pc, #448]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800937c:	f023 020c 	bic.w	r2, r3, #12
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009384:	496c      	ldr	r1, [pc, #432]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009386:	4313      	orrs	r3, r2
 8009388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009398:	4b67      	ldr	r3, [pc, #412]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800939a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a6:	4964      	ldr	r1, [pc, #400]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093ba:	4b5f      	ldr	r3, [pc, #380]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c8:	495b      	ldr	r1, [pc, #364]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093dc:	4b56      	ldr	r3, [pc, #344]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ea:	4953      	ldr	r1, [pc, #332]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80093fe:	4b4e      	ldr	r3, [pc, #312]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940c:	494a      	ldr	r1, [pc, #296]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800940e:	4313      	orrs	r3, r2
 8009410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009420:	4b45      	ldr	r3, [pc, #276]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009426:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800942e:	4942      	ldr	r1, [pc, #264]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009430:	4313      	orrs	r3, r2
 8009432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00a      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009442:	4b3d      	ldr	r3, [pc, #244]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009450:	4939      	ldr	r1, [pc, #228]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009452:	4313      	orrs	r3, r2
 8009454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009464:	4b34      	ldr	r3, [pc, #208]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800946a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009472:	4931      	ldr	r1, [pc, #196]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009474:	4313      	orrs	r3, r2
 8009476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d011      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009486:	4b2c      	ldr	r3, [pc, #176]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009494:	4928      	ldr	r1, [pc, #160]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094a4:	d101      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80094a6:	2301      	movs	r3, #1
 80094a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094c6:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d4:	4918      	ldr	r1, [pc, #96]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80094e8:	4b13      	ldr	r3, [pc, #76]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094f8:	490f      	ldr	r1, [pc, #60]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d005      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800950e:	f040 80d8 	bne.w	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a08      	ldr	r2, [pc, #32]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009518:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800951c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800951e:	f7fc fa6b 	bl	80059f8 <HAL_GetTick>
 8009522:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009524:	e00a      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009526:	f7fc fa67 	bl	80059f8 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b64      	cmp	r3, #100	; 0x64
 8009532:	d903      	bls.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e196      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009538:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800953c:	4b6c      	ldr	r3, [pc, #432]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1ee      	bne.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d021      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	2b00      	cmp	r3, #0
 800955a:	d11d      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800955c:	4b64      	ldr	r3, [pc, #400]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800955e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	f003 0303 	and.w	r3, r3, #3
 8009568:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800956a:	4b61      	ldr	r3, [pc, #388]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800956c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009570:	0e1b      	lsrs	r3, r3, #24
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	019a      	lsls	r2, r3, #6
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	431a      	orrs	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	061b      	lsls	r3, r3, #24
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	071b      	lsls	r3, r3, #28
 8009590:	4957      	ldr	r1, [pc, #348]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x516>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ac:	d00a      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d02e      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095c2:	d129      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80095c4:	4b4a      	ldr	r3, [pc, #296]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ca:	0c1b      	lsrs	r3, r3, #16
 80095cc:	f003 0303 	and.w	r3, r3, #3
 80095d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095d2:	4b47      	ldr	r3, [pc, #284]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d8:	0f1b      	lsrs	r3, r3, #28
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	019a      	lsls	r2, r3, #6
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	061b      	lsls	r3, r3, #24
 80095f2:	431a      	orrs	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	071b      	lsls	r3, r3, #28
 80095f8:	493d      	ldr	r1, [pc, #244]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009600:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009606:	f023 021f 	bic.w	r2, r3, #31
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	3b01      	subs	r3, #1
 8009610:	4937      	ldr	r1, [pc, #220]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d01d      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009624:	4b32      	ldr	r3, [pc, #200]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962a:	0e1b      	lsrs	r3, r3, #24
 800962c:	f003 030f 	and.w	r3, r3, #15
 8009630:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009632:	4b2f      	ldr	r3, [pc, #188]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009638:	0f1b      	lsrs	r3, r3, #28
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	019a      	lsls	r2, r3, #6
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	041b      	lsls	r3, r3, #16
 800964c:	431a      	orrs	r2, r3
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	061b      	lsls	r3, r3, #24
 8009652:	431a      	orrs	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	071b      	lsls	r3, r3, #28
 8009658:	4925      	ldr	r1, [pc, #148]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800965a:	4313      	orrs	r3, r2
 800965c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d011      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	019a      	lsls	r2, r3, #6
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	041b      	lsls	r3, r3, #16
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	061b      	lsls	r3, r3, #24
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	071b      	lsls	r3, r3, #28
 8009688:	4919      	ldr	r1, [pc, #100]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a16      	ldr	r2, [pc, #88]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800969a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800969c:	f7fc f9ac 	bl	80059f8 <HAL_GetTick>
 80096a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80096a2:	e008      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096a4:	f7fc f9a8 	bl	80059f8 <HAL_GetTick>
 80096a8:	4602      	mov	r2, r0
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	2b64      	cmp	r3, #100	; 0x64
 80096b0:	d901      	bls.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e0d7      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80096b6:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f0      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	f040 80cd 	bne.w	8009864 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80096ca:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a08      	ldr	r2, [pc, #32]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096d6:	f7fc f98f 	bl	80059f8 <HAL_GetTick>
 80096da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096dc:	e00a      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80096de:	f7fc f98b 	bl	80059f8 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b64      	cmp	r3, #100	; 0x64
 80096ea:	d903      	bls.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e0ba      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80096f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096f4:	4b5e      	ldr	r3, [pc, #376]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009700:	d0ed      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d009      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800971e:	2b00      	cmp	r3, #0
 8009720:	d02e      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d12a      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800972a:	4b51      	ldr	r3, [pc, #324]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009730:	0c1b      	lsrs	r3, r3, #16
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009738:	4b4d      	ldr	r3, [pc, #308]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973e:	0f1b      	lsrs	r3, r3, #28
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	019a      	lsls	r2, r3, #6
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	041b      	lsls	r3, r3, #16
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	061b      	lsls	r3, r3, #24
 8009758:	431a      	orrs	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	071b      	lsls	r3, r3, #28
 800975e:	4944      	ldr	r1, [pc, #272]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009766:	4b42      	ldr	r3, [pc, #264]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800976c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	3b01      	subs	r3, #1
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	493d      	ldr	r1, [pc, #244]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d022      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009794:	d11d      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009796:	4b36      	ldr	r3, [pc, #216]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800979c:	0e1b      	lsrs	r3, r3, #24
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80097a4:	4b32      	ldr	r3, [pc, #200]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097aa:	0f1b      	lsrs	r3, r3, #28
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	019a      	lsls	r2, r3, #6
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	041b      	lsls	r3, r3, #16
 80097be:	431a      	orrs	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	061b      	lsls	r3, r3, #24
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	071b      	lsls	r3, r3, #28
 80097ca:	4929      	ldr	r1, [pc, #164]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0308 	and.w	r3, r3, #8
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d028      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80097de:	4b24      	ldr	r3, [pc, #144]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e4:	0e1b      	lsrs	r3, r3, #24
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80097ec:	4b20      	ldr	r3, [pc, #128]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f2:	0c1b      	lsrs	r3, r3, #16
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	019a      	lsls	r2, r3, #6
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	431a      	orrs	r2, r3
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	061b      	lsls	r3, r3, #24
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	071b      	lsls	r3, r3, #28
 8009812:	4917      	ldr	r1, [pc, #92]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800981a:	4b15      	ldr	r3, [pc, #84]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800981c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	4911      	ldr	r1, [pc, #68]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009830:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a0e      	ldr	r2, [pc, #56]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800983a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800983c:	f7fc f8dc 	bl	80059f8 <HAL_GetTick>
 8009840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009842:	e008      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009844:	f7fc f8d8 	bl	80059f8 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b64      	cmp	r3, #100	; 0x64
 8009850:	d901      	bls.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e007      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009856:	4b06      	ldr	r3, [pc, #24]	; (8009870 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800985e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009862:	d1ef      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	40023800 	.word	0x40023800

08009874 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e06b      	b.n	800995e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	7f5b      	ldrb	r3, [r3, #29]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7fb fcc0 	bl	800521c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	22ca      	movs	r2, #202	; 0xca
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2253      	movs	r2, #83	; 0x53
 80098b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fb00 	bl	8009eb8 <RTC_EnterInitMode>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d008      	beq.n	80098d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	22ff      	movs	r2, #255	; 0xff
 80098c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2204      	movs	r2, #4
 80098ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e046      	b.n	800995e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6899      	ldr	r1, [r3, #8]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b23      	ldr	r3, [pc, #140]	; (8009968 <HAL_RTC_Init+0xf4>)
 80098dc:	400b      	ands	r3, r1
 80098de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6899      	ldr	r1, [r3, #8]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	68d2      	ldr	r2, [r2, #12]
 8009906:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6919      	ldr	r1, [r3, #16]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	041a      	lsls	r2, r3, #16
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800992a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0208 	bic.w	r2, r2, #8
 800993a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	699a      	ldr	r2, [r3, #24]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	22ff      	movs	r2, #255	; 0xff
 8009954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800995c:	2300      	movs	r3, #0
  }
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	ff8fffbf 	.word	0xff8fffbf

0800996c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800996c:	b590      	push	{r4, r7, lr}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	7f1b      	ldrb	r3, [r3, #28]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_RTC_SetTime+0x1c>
 8009984:	2302      	movs	r3, #2
 8009986:	e0a8      	b.n	8009ada <HAL_RTC_SetTime+0x16e>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2201      	movs	r2, #1
 800998c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2202      	movs	r2, #2
 8009992:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d126      	bne.n	80099e8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 faac 	bl	8009f10 <RTC_ByteToBcd2>
 80099b8:	4603      	mov	r3, r0
 80099ba:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 faa5 	bl	8009f10 <RTC_ByteToBcd2>
 80099c6:	4603      	mov	r3, r0
 80099c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80099ca:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	789b      	ldrb	r3, [r3, #2]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fa9d 	bl	8009f10 <RTC_ByteToBcd2>
 80099d6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80099d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	7b1b      	ldrb	r3, [r3, #12]
 80099e0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80099e2:	4313      	orrs	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e018      	b.n	8009a1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2200      	movs	r2, #0
 80099fa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009a08:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009a0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	7b1b      	ldrb	r3, [r3, #12]
 8009a14:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	22ca      	movs	r2, #202	; 0xca
 8009a20:	625a      	str	r2, [r3, #36]	; 0x24
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2253      	movs	r2, #83	; 0x53
 8009a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fa44 	bl	8009eb8 <RTC_EnterInitMode>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00b      	beq.n	8009a4e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	22ff      	movs	r2, #255	; 0xff
 8009a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2204      	movs	r2, #4
 8009a42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2200      	movs	r2, #0
 8009a48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e045      	b.n	8009ada <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	6979      	ldr	r1, [r7, #20]
 8009a54:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <HAL_RTC_SetTime+0x178>)
 8009a56:	400b      	ands	r3, r1
 8009a58:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689a      	ldr	r2, [r3, #8]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6899      	ldr	r1, [r3, #8]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	691a      	ldr	r2, [r3, #16]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a90:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d111      	bne.n	8009ac4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 f9e1 	bl	8009e68 <HAL_RTC_WaitForSynchro>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	22ff      	movs	r2, #255	; 0xff
 8009ab2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2204      	movs	r2, #4
 8009ab8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e00a      	b.n	8009ada <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	22ff      	movs	r2, #255	; 0xff
 8009aca:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
  }
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	007f7f7f 	.word	0x007f7f7f

08009ae8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	7f1b      	ldrb	r3, [r3, #28]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d101      	bne.n	8009b04 <HAL_RTC_SetDate+0x1c>
 8009b00:	2302      	movs	r3, #2
 8009b02:	e092      	b.n	8009c2a <HAL_RTC_SetDate+0x142>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10e      	bne.n	8009b34 <HAL_RTC_SetDate+0x4c>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	f003 0310 	and.w	r3, r3, #16
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d008      	beq.n	8009b34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	785b      	ldrb	r3, [r3, #1]
 8009b26:	f023 0310 	bic.w	r3, r3, #16
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	330a      	adds	r3, #10
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d11c      	bne.n	8009b74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	78db      	ldrb	r3, [r3, #3]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f9e6 	bl	8009f10 <RTC_ByteToBcd2>
 8009b44:	4603      	mov	r3, r0
 8009b46:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f000 f9df 	bl	8009f10 <RTC_ByteToBcd2>
 8009b52:	4603      	mov	r3, r0
 8009b54:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009b56:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	789b      	ldrb	r3, [r3, #2]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 f9d7 	bl	8009f10 <RTC_ByteToBcd2>
 8009b62:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009b64:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	e00e      	b.n	8009b92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	78db      	ldrb	r3, [r3, #3]
 8009b78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009b80:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009b86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	22ca      	movs	r2, #202	; 0xca
 8009b98:	625a      	str	r2, [r3, #36]	; 0x24
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2253      	movs	r2, #83	; 0x53
 8009ba0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f988 	bl	8009eb8 <RTC_EnterInitMode>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	22ff      	movs	r2, #255	; 0xff
 8009bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2204      	movs	r2, #4
 8009bba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e031      	b.n	8009c2a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	6979      	ldr	r1, [r7, #20]
 8009bcc:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <HAL_RTC_SetDate+0x14c>)
 8009bce:	400b      	ands	r3, r1
 8009bd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009be0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d111      	bne.n	8009c14 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f939 	bl	8009e68 <HAL_RTC_WaitForSynchro>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	22ff      	movs	r2, #255	; 0xff
 8009c02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2204      	movs	r2, #4
 8009c08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e00a      	b.n	8009c2a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	22ff      	movs	r2, #255	; 0xff
 8009c1a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009c28:	2300      	movs	r3, #0
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd90      	pop	{r4, r7, pc}
 8009c32:	bf00      	nop
 8009c34:	00ffff3f 	.word	0x00ffff3f

08009c38 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009c38:	b590      	push	{r4, r7, lr}
 8009c3a:	b089      	sub	sp, #36	; 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	7f1b      	ldrb	r3, [r3, #28]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_RTC_SetAlarm+0x24>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e101      	b.n	8009e60 <HAL_RTC_SetAlarm+0x228>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2202      	movs	r2, #2
 8009c66:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d137      	bne.n	8009cde <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 f942 	bl	8009f10 <RTC_ByteToBcd2>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f93b 	bl	8009f10 <RTC_ByteToBcd2>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009c9e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	789b      	ldrb	r3, [r3, #2]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 f933 	bl	8009f10 <RTC_ByteToBcd2>
 8009caa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009cac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	7b1b      	ldrb	r3, [r3, #12]
 8009cb4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009cb6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f925 	bl	8009f10 <RTC_ByteToBcd2>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009cca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009cd2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	61fb      	str	r3, [r7, #28]
 8009cdc:	e023      	b.n	8009d26 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009cfe:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009d04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	7b1b      	ldrb	r3, [r3, #12]
 8009d0a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009d0c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d14:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009d16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009d1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009d22:	4313      	orrs	r3, r2
 8009d24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	22ca      	movs	r2, #202	; 0xca
 8009d38:	625a      	str	r2, [r3, #36]	; 0x24
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2253      	movs	r2, #83	; 0x53
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4a:	d13f      	bne.n	8009dcc <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689a      	ldr	r2, [r3, #8]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d5a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d6a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d6c:	f7fb fe44 	bl	80059f8 <HAL_GetTick>
 8009d70:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009d72:	e013      	b.n	8009d9c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009d74:	f7fb fe40 	bl	80059f8 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d82:	d90b      	bls.n	8009d9c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	22ff      	movs	r2, #255	; 0xff
 8009d8a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2203      	movs	r2, #3
 8009d90:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e061      	b.n	8009e60 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0e4      	beq.n	8009d74 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dc8:	609a      	str	r2, [r3, #8]
 8009dca:	e03e      	b.n	8009e4a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689a      	ldr	r2, [r3, #8]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009dda:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dea:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009dec:	f7fb fe04 	bl	80059f8 <HAL_GetTick>
 8009df0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009df2:	e013      	b.n	8009e1c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009df4:	f7fb fe00 	bl	80059f8 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e02:	d90b      	bls.n	8009e1c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	22ff      	movs	r2, #255	; 0xff
 8009e0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2203      	movs	r2, #3
 8009e10:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e021      	b.n	8009e60 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0e4      	beq.n	8009df4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689a      	ldr	r2, [r3, #8]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e48:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	22ff      	movs	r2, #255	; 0xff
 8009e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3724      	adds	r7, #36	; 0x24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd90      	pop	{r4, r7, pc}

08009e68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68da      	ldr	r2, [r3, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e84:	f7fb fdb8 	bl	80059f8 <HAL_GetTick>
 8009e88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009e8a:	e009      	b.n	8009ea0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e8c:	f7fb fdb4 	bl	80059f8 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e007      	b.n	8009eb0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0ee      	beq.n	8009e8c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d119      	bne.n	8009f06 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eda:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009edc:	f7fb fd8c 	bl	80059f8 <HAL_GetTick>
 8009ee0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ee2:	e009      	b.n	8009ef8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ee4:	f7fb fd88 	bl	80059f8 <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ef2:	d901      	bls.n	8009ef8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e007      	b.n	8009f08 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0ee      	beq.n	8009ee4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009f1e:	e005      	b.n	8009f2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	3b0a      	subs	r3, #10
 8009f2a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	2b09      	cmp	r3, #9
 8009f30:	d8f6      	bhi.n	8009f20 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	011b      	lsls	r3, r3, #4
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	b2db      	uxtb	r3, r3
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	7f1b      	ldrb	r3, [r3, #28]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d101      	bne.n	8009f68 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e03e      	b.n	8009fe6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2202      	movs	r2, #2
 8009f72:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ff4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	22ca      	movs	r2, #202	; 0xca
 8009f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2253      	movs	r2, #83	; 0x53
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0206 	bic.w	r2, r2, #6
 8009fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	fffff7f7 	.word	0xfffff7f7

08009ff8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e025      	b.n	800a058 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d106      	bne.n	800a026 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7fb fbb1 	bl	8005788 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2202      	movs	r2, #2
 800a02a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3304      	adds	r3, #4
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f002 f93f 	bl	800c2bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	461a      	mov	r2, r3
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	f002 f9a9 	bl	800c3a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d101      	bne.n	800a07c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a078:	2302      	movs	r3, #2
 800a07a:	e018      	b.n	800a0ae <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f002 fa07 	bl	800c4a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d104      	bne.n	800a0a4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2205      	movs	r2, #5
 800a09e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a0a2:	e003      	b.n	800a0ac <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d101      	bne.n	800a0d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e00e      	b.n	800a0ee <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f002 f9ff 	bl	800c4e2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e084      	b.n	800a212 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fb f894 	bl	8005250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a13e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a148:	d902      	bls.n	800a150 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	e002      	b.n	800a156 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a154:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a15e:	d007      	beq.n	800a170 <HAL_SPI_Init+0x7a>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a168:	d002      	beq.n	800a170 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10b      	bne.n	800a190 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a180:	d903      	bls.n	800a18a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	631a      	str	r2, [r3, #48]	; 0x30
 800a188:	e002      	b.n	800a190 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	ea42 0103 	orr.w	r1, r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	0c1b      	lsrs	r3, r3, #16
 800a1d0:	f003 0204 	and.w	r2, r3, #4
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	ea42 0103 	orr.w	r1, r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69da      	ldr	r2, [r3, #28]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e01d      	b.n	800a268 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a232:	b2db      	uxtb	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d106      	bne.n	800a246 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7fb f877 	bl	8005334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2202      	movs	r2, #2
 800a24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3304      	adds	r3, #4
 800a256:	4619      	mov	r1, r3
 800a258:	4610      	mov	r0, r2
 800a25a:	f000 fbc3 	bl	800a9e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0201 	orr.w	r2, r2, #1
 800a286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <HAL_TIM_Base_Start_IT+0x50>)
 800a290:	4013      	ands	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b06      	cmp	r3, #6
 800a298:	d00b      	beq.n	800a2b2 <HAL_TIM_Base_Start_IT+0x42>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a0:	d007      	beq.n	800a2b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f042 0201 	orr.w	r2, r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	00010007 	.word	0x00010007

0800a2c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e01d      	b.n	800a312 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f815 	bl	800a31a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f000 fb6e 	bl	800a9e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b02      	cmp	r3, #2
 800a342:	d122      	bne.n	800a38a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d11b      	bne.n	800a38a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f06f 0202 	mvn.w	r2, #2
 800a35a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	f003 0303 	and.w	r3, r3, #3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fb19 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a376:	e005      	b.n	800a384 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fb0b 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fb1c 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b04      	cmp	r3, #4
 800a396:	d122      	bne.n	800a3de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d11b      	bne.n	800a3de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f06f 0204 	mvn.w	r2, #4
 800a3ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 faef 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a3ca:	e005      	b.n	800a3d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fae1 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 faf2 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d122      	bne.n	800a432 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d11b      	bne.n	800a432 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f06f 0208 	mvn.w	r2, #8
 800a402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2204      	movs	r2, #4
 800a408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d003      	beq.n	800a420 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fac5 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a41e:	e005      	b.n	800a42c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fab7 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fac8 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0310 	and.w	r3, r3, #16
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d122      	bne.n	800a486 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	2b10      	cmp	r3, #16
 800a44c:	d11b      	bne.n	800a486 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f06f 0210 	mvn.w	r2, #16
 800a456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2208      	movs	r2, #8
 800a45c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fa9b 	bl	800a9a8 <HAL_TIM_IC_CaptureCallback>
 800a472:	e005      	b.n	800a480 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa8d 	bl	800a994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fa9e 	bl	800a9bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b01      	cmp	r3, #1
 800a492:	d10e      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d107      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f06f 0201 	mvn.w	r2, #1
 800a4aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7f8 fef1 	bl	8003294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4bc:	2b80      	cmp	r3, #128	; 0x80
 800a4be:	d10e      	bne.n	800a4de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ca:	2b80      	cmp	r3, #128	; 0x80
 800a4cc:	d107      	bne.n	800a4de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 ffb9 	bl	800b450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ec:	d10e      	bne.n	800a50c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f8:	2b80      	cmp	r3, #128	; 0x80
 800a4fa:	d107      	bne.n	800a50c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 ffac 	bl	800b464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	d10e      	bne.n	800a538 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	d107      	bne.n	800a538 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fa4c 	bl	800a9d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b20      	cmp	r3, #32
 800a544:	d10e      	bne.n	800a564 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b20      	cmp	r3, #32
 800a552:	d107      	bne.n	800a564 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f06f 0220 	mvn.w	r2, #32
 800a55c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 ff6c 	bl	800b43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a582:	2302      	movs	r3, #2
 800a584:	e105      	b.n	800a792 <HAL_TIM_PWM_ConfigChannel+0x226>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2202      	movs	r2, #2
 800a592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b14      	cmp	r3, #20
 800a59a:	f200 80f0 	bhi.w	800a77e <HAL_TIM_PWM_ConfigChannel+0x212>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a77f 	.word	0x0800a77f
 800a5ac:	0800a77f 	.word	0x0800a77f
 800a5b0:	0800a77f 	.word	0x0800a77f
 800a5b4:	0800a639 	.word	0x0800a639
 800a5b8:	0800a77f 	.word	0x0800a77f
 800a5bc:	0800a77f 	.word	0x0800a77f
 800a5c0:	0800a77f 	.word	0x0800a77f
 800a5c4:	0800a67b 	.word	0x0800a67b
 800a5c8:	0800a77f 	.word	0x0800a77f
 800a5cc:	0800a77f 	.word	0x0800a77f
 800a5d0:	0800a77f 	.word	0x0800a77f
 800a5d4:	0800a6bb 	.word	0x0800a6bb
 800a5d8:	0800a77f 	.word	0x0800a77f
 800a5dc:	0800a77f 	.word	0x0800a77f
 800a5e0:	0800a77f 	.word	0x0800a77f
 800a5e4:	0800a6fd 	.word	0x0800a6fd
 800a5e8:	0800a77f 	.word	0x0800a77f
 800a5ec:	0800a77f 	.word	0x0800a77f
 800a5f0:	0800a77f 	.word	0x0800a77f
 800a5f4:	0800a73d 	.word	0x0800a73d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68b9      	ldr	r1, [r7, #8]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fa90 	bl	800ab24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	699a      	ldr	r2, [r3, #24]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0208 	orr.w	r2, r2, #8
 800a612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0204 	bic.w	r2, r2, #4
 800a622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6999      	ldr	r1, [r3, #24]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	691a      	ldr	r2, [r3, #16]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	619a      	str	r2, [r3, #24]
      break;
 800a636:	e0a3      	b.n	800a780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 fae2 	bl	800ac08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699a      	ldr	r2, [r3, #24]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6999      	ldr	r1, [r3, #24]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	021a      	lsls	r2, r3, #8
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	430a      	orrs	r2, r1
 800a676:	619a      	str	r2, [r3, #24]
      break;
 800a678:	e082      	b.n	800a780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fb39 	bl	800acf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69da      	ldr	r2, [r3, #28]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0208 	orr.w	r2, r2, #8
 800a694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69da      	ldr	r2, [r3, #28]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0204 	bic.w	r2, r2, #4
 800a6a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69d9      	ldr	r1, [r3, #28]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	691a      	ldr	r2, [r3, #16]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	430a      	orrs	r2, r1
 800a6b6:	61da      	str	r2, [r3, #28]
      break;
 800a6b8:	e062      	b.n	800a780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68b9      	ldr	r1, [r7, #8]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 fb8f 	bl	800ade4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	69da      	ldr	r2, [r3, #28]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69d9      	ldr	r1, [r3, #28]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	021a      	lsls	r2, r3, #8
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	61da      	str	r2, [r3, #28]
      break;
 800a6fa:	e041      	b.n	800a780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68b9      	ldr	r1, [r7, #8]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fbc6 	bl	800ae94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0208 	orr.w	r2, r2, #8
 800a716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0204 	bic.w	r2, r2, #4
 800a726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	691a      	ldr	r2, [r3, #16]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	430a      	orrs	r2, r1
 800a738:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a73a:	e021      	b.n	800a780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68b9      	ldr	r1, [r7, #8]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 fbf8 	bl	800af38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	021a      	lsls	r2, r3, #8
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a77c:	e000      	b.n	800a780 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a77e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop

0800a79c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d101      	bne.n	800a7b4 <HAL_TIM_ConfigClockSource+0x18>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e0a6      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x166>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4b4f      	ldr	r3, [pc, #316]	; (800a90c <HAL_TIM_ConfigClockSource+0x170>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b40      	cmp	r3, #64	; 0x40
 800a7ea:	d067      	beq.n	800a8bc <HAL_TIM_ConfigClockSource+0x120>
 800a7ec:	2b40      	cmp	r3, #64	; 0x40
 800a7ee:	d80b      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x6c>
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d073      	beq.n	800a8dc <HAL_TIM_ConfigClockSource+0x140>
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	d802      	bhi.n	800a7fe <HAL_TIM_ConfigClockSource+0x62>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d06f      	beq.n	800a8dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a7fc:	e078      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7fe:	2b20      	cmp	r3, #32
 800a800:	d06c      	beq.n	800a8dc <HAL_TIM_ConfigClockSource+0x140>
 800a802:	2b30      	cmp	r3, #48	; 0x30
 800a804:	d06a      	beq.n	800a8dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a806:	e073      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a808:	2b70      	cmp	r3, #112	; 0x70
 800a80a:	d00d      	beq.n	800a828 <HAL_TIM_ConfigClockSource+0x8c>
 800a80c:	2b70      	cmp	r3, #112	; 0x70
 800a80e:	d804      	bhi.n	800a81a <HAL_TIM_ConfigClockSource+0x7e>
 800a810:	2b50      	cmp	r3, #80	; 0x50
 800a812:	d033      	beq.n	800a87c <HAL_TIM_ConfigClockSource+0xe0>
 800a814:	2b60      	cmp	r3, #96	; 0x60
 800a816:	d041      	beq.n	800a89c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a818:	e06a      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a81a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a81e:	d066      	beq.n	800a8ee <HAL_TIM_ConfigClockSource+0x152>
 800a820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a824:	d017      	beq.n	800a856 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a826:	e063      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	6899      	ldr	r1, [r3, #8]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	f000 fcd4 	bl	800b1e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a84a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	609a      	str	r2, [r3, #8]
      break;
 800a854:	e04c      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	6899      	ldr	r1, [r3, #8]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f000 fcbd 	bl	800b1e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a878:	609a      	str	r2, [r3, #8]
      break;
 800a87a:	e039      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	6859      	ldr	r1, [r3, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	461a      	mov	r2, r3
 800a88a:	f000 fc31 	bl	800b0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2150      	movs	r1, #80	; 0x50
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fc8a 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a89a:	e029      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6818      	ldr	r0, [r3, #0]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	6859      	ldr	r1, [r3, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f000 fc50 	bl	800b14e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2160      	movs	r1, #96	; 0x60
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fc7a 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a8ba:	e019      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	6859      	ldr	r1, [r3, #4]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f000 fc11 	bl	800b0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2140      	movs	r1, #64	; 0x40
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fc6a 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a8da:	e009      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	f000 fc61 	bl	800b1ae <TIM_ITRx_SetConfig>
      break;
 800a8ec:	e000      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a8ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	fffeff88 	.word	0xfffeff88

0800a910 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a924:	2302      	movs	r3, #2
 800a926:	e031      	b.n	800a98c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fb50 	bl	800afe0 <TIM_SlaveTimer_SetConfig>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d009      	beq.n	800a95a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e018      	b.n	800a98c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a968:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a978:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a40      	ldr	r2, [pc, #256]	; (800aaf8 <TIM_Base_SetConfig+0x114>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d013      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa02:	d00f      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a3d      	ldr	r2, [pc, #244]	; (800aafc <TIM_Base_SetConfig+0x118>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d00b      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a3c      	ldr	r2, [pc, #240]	; (800ab00 <TIM_Base_SetConfig+0x11c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d007      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a3b      	ldr	r2, [pc, #236]	; (800ab04 <TIM_Base_SetConfig+0x120>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_Base_SetConfig+0x40>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a3a      	ldr	r2, [pc, #232]	; (800ab08 <TIM_Base_SetConfig+0x124>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d108      	bne.n	800aa36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a2f      	ldr	r2, [pc, #188]	; (800aaf8 <TIM_Base_SetConfig+0x114>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d02b      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa44:	d027      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2c      	ldr	r2, [pc, #176]	; (800aafc <TIM_Base_SetConfig+0x118>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d023      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a2b      	ldr	r2, [pc, #172]	; (800ab00 <TIM_Base_SetConfig+0x11c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d01f      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a2a      	ldr	r2, [pc, #168]	; (800ab04 <TIM_Base_SetConfig+0x120>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d01b      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a29      	ldr	r2, [pc, #164]	; (800ab08 <TIM_Base_SetConfig+0x124>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d017      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a28      	ldr	r2, [pc, #160]	; (800ab0c <TIM_Base_SetConfig+0x128>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d013      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a27      	ldr	r2, [pc, #156]	; (800ab10 <TIM_Base_SetConfig+0x12c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00f      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a26      	ldr	r2, [pc, #152]	; (800ab14 <TIM_Base_SetConfig+0x130>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d00b      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a25      	ldr	r2, [pc, #148]	; (800ab18 <TIM_Base_SetConfig+0x134>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d007      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a24      	ldr	r2, [pc, #144]	; (800ab1c <TIM_Base_SetConfig+0x138>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d003      	beq.n	800aa96 <TIM_Base_SetConfig+0xb2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a23      	ldr	r2, [pc, #140]	; (800ab20 <TIM_Base_SetConfig+0x13c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d108      	bne.n	800aaa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a0a      	ldr	r2, [pc, #40]	; (800aaf8 <TIM_Base_SetConfig+0x114>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_Base_SetConfig+0xf8>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a0c      	ldr	r2, [pc, #48]	; (800ab08 <TIM_Base_SetConfig+0x124>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d103      	bne.n	800aae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	691a      	ldr	r2, [r3, #16]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	615a      	str	r2, [r3, #20]
}
 800aaea:	bf00      	nop
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40010000 	.word	0x40010000
 800aafc:	40000400 	.word	0x40000400
 800ab00:	40000800 	.word	0x40000800
 800ab04:	40000c00 	.word	0x40000c00
 800ab08:	40010400 	.word	0x40010400
 800ab0c:	40014000 	.word	0x40014000
 800ab10:	40014400 	.word	0x40014400
 800ab14:	40014800 	.word	0x40014800
 800ab18:	40001800 	.word	0x40001800
 800ab1c:	40001c00 	.word	0x40001c00
 800ab20:	40002000 	.word	0x40002000

0800ab24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f023 0201 	bic.w	r2, r3, #1
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4b2b      	ldr	r3, [pc, #172]	; (800abfc <TIM_OC1_SetConfig+0xd8>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 0303 	bic.w	r3, r3, #3
 800ab5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f023 0302 	bic.w	r3, r3, #2
 800ab6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a21      	ldr	r2, [pc, #132]	; (800ac00 <TIM_OC1_SetConfig+0xdc>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_OC1_SetConfig+0x64>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a20      	ldr	r2, [pc, #128]	; (800ac04 <TIM_OC1_SetConfig+0xe0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d10c      	bne.n	800aba2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f023 0308 	bic.w	r3, r3, #8
 800ab8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f023 0304 	bic.w	r3, r3, #4
 800aba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a16      	ldr	r2, [pc, #88]	; (800ac00 <TIM_OC1_SetConfig+0xdc>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d003      	beq.n	800abb2 <TIM_OC1_SetConfig+0x8e>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <TIM_OC1_SetConfig+0xe0>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d111      	bne.n	800abd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	4313      	orrs	r3, r2
 800abca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	621a      	str	r2, [r3, #32]
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	fffeff8f 	.word	0xfffeff8f
 800ac00:	40010000 	.word	0x40010000
 800ac04:	40010400 	.word	0x40010400

0800ac08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0210 	bic.w	r2, r3, #16
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4b2e      	ldr	r3, [pc, #184]	; (800acec <TIM_OC2_SetConfig+0xe4>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f023 0320 	bic.w	r3, r3, #32
 800ac52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a23      	ldr	r2, [pc, #140]	; (800acf0 <TIM_OC2_SetConfig+0xe8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_OC2_SetConfig+0x68>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a22      	ldr	r2, [pc, #136]	; (800acf4 <TIM_OC2_SetConfig+0xec>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d10d      	bne.n	800ac8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	011b      	lsls	r3, r3, #4
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <TIM_OC2_SetConfig+0xe8>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d003      	beq.n	800ac9c <TIM_OC2_SetConfig+0x94>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a17      	ldr	r2, [pc, #92]	; (800acf4 <TIM_OC2_SetConfig+0xec>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d113      	bne.n	800acc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	695b      	ldr	r3, [r3, #20]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	621a      	str	r2, [r3, #32]
}
 800acde:	bf00      	nop
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	feff8fff 	.word	0xfeff8fff
 800acf0:	40010000 	.word	0x40010000
 800acf4:	40010400 	.word	0x40010400

0800acf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4b2d      	ldr	r3, [pc, #180]	; (800add8 <TIM_OC3_SetConfig+0xe0>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a22      	ldr	r2, [pc, #136]	; (800addc <TIM_OC3_SetConfig+0xe4>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d003      	beq.n	800ad5e <TIM_OC3_SetConfig+0x66>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a21      	ldr	r2, [pc, #132]	; (800ade0 <TIM_OC3_SetConfig+0xe8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d10d      	bne.n	800ad7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	021b      	lsls	r3, r3, #8
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a17      	ldr	r2, [pc, #92]	; (800addc <TIM_OC3_SetConfig+0xe4>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d003      	beq.n	800ad8a <TIM_OC3_SetConfig+0x92>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a16      	ldr	r2, [pc, #88]	; (800ade0 <TIM_OC3_SetConfig+0xe8>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d113      	bne.n	800adb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	621a      	str	r2, [r3, #32]
}
 800adcc:	bf00      	nop
 800adce:	371c      	adds	r7, #28
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	fffeff8f 	.word	0xfffeff8f
 800addc:	40010000 	.word	0x40010000
 800ade0:	40010400 	.word	0x40010400

0800ade4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	69db      	ldr	r3, [r3, #28]
 800ae0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4b1e      	ldr	r3, [pc, #120]	; (800ae88 <TIM_OC4_SetConfig+0xa4>)
 800ae10:	4013      	ands	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	031b      	lsls	r3, r3, #12
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a13      	ldr	r2, [pc, #76]	; (800ae8c <TIM_OC4_SetConfig+0xa8>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d003      	beq.n	800ae4c <TIM_OC4_SetConfig+0x68>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a12      	ldr	r2, [pc, #72]	; (800ae90 <TIM_OC4_SetConfig+0xac>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d109      	bne.n	800ae60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	019b      	lsls	r3, r3, #6
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	621a      	str	r2, [r3, #32]
}
 800ae7a:	bf00      	nop
 800ae7c:	371c      	adds	r7, #28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	feff8fff 	.word	0xfeff8fff
 800ae8c:	40010000 	.word	0x40010000
 800ae90:	40010400 	.word	0x40010400

0800ae94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <TIM_OC5_SetConfig+0x98>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aed4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	041b      	lsls	r3, r3, #16
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	4313      	orrs	r3, r2
 800aee0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a12      	ldr	r2, [pc, #72]	; (800af30 <TIM_OC5_SetConfig+0x9c>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d003      	beq.n	800aef2 <TIM_OC5_SetConfig+0x5e>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a11      	ldr	r2, [pc, #68]	; (800af34 <TIM_OC5_SetConfig+0xa0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d109      	bne.n	800af06 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	4313      	orrs	r3, r2
 800af04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	621a      	str	r2, [r3, #32]
}
 800af20:	bf00      	nop
 800af22:	371c      	adds	r7, #28
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	fffeff8f 	.word	0xfffeff8f
 800af30:	40010000 	.word	0x40010000
 800af34:	40010400 	.word	0x40010400

0800af38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4b1c      	ldr	r3, [pc, #112]	; (800afd4 <TIM_OC6_SetConfig+0x9c>)
 800af64:	4013      	ands	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	021b      	lsls	r3, r3, #8
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	4313      	orrs	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	051b      	lsls	r3, r3, #20
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	4313      	orrs	r3, r2
 800af86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a13      	ldr	r2, [pc, #76]	; (800afd8 <TIM_OC6_SetConfig+0xa0>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d003      	beq.n	800af98 <TIM_OC6_SetConfig+0x60>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a12      	ldr	r2, [pc, #72]	; (800afdc <TIM_OC6_SetConfig+0xa4>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d109      	bne.n	800afac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	029b      	lsls	r3, r3, #10
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	621a      	str	r2, [r3, #32]
}
 800afc6:	bf00      	nop
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	feff8fff 	.word	0xfeff8fff
 800afd8:	40010000 	.word	0x40010000
 800afdc:	40010400 	.word	0x40010400

0800afe0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aff8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	4b39      	ldr	r3, [pc, #228]	; (800b0ec <TIM_SlaveTimer_SetConfig+0x10c>)
 800b008:	4013      	ands	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2b30      	cmp	r3, #48	; 0x30
 800b024:	d05c      	beq.n	800b0e0 <TIM_SlaveTimer_SetConfig+0x100>
 800b026:	2b30      	cmp	r3, #48	; 0x30
 800b028:	d806      	bhi.n	800b038 <TIM_SlaveTimer_SetConfig+0x58>
 800b02a:	2b10      	cmp	r3, #16
 800b02c:	d058      	beq.n	800b0e0 <TIM_SlaveTimer_SetConfig+0x100>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d056      	beq.n	800b0e0 <TIM_SlaveTimer_SetConfig+0x100>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d054      	beq.n	800b0e0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800b036:	e054      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b038:	2b50      	cmp	r3, #80	; 0x50
 800b03a:	d03d      	beq.n	800b0b8 <TIM_SlaveTimer_SetConfig+0xd8>
 800b03c:	2b50      	cmp	r3, #80	; 0x50
 800b03e:	d802      	bhi.n	800b046 <TIM_SlaveTimer_SetConfig+0x66>
 800b040:	2b40      	cmp	r3, #64	; 0x40
 800b042:	d010      	beq.n	800b066 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800b044:	e04d      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800b046:	2b60      	cmp	r3, #96	; 0x60
 800b048:	d040      	beq.n	800b0cc <TIM_SlaveTimer_SetConfig+0xec>
 800b04a:	2b70      	cmp	r3, #112	; 0x70
 800b04c:	d000      	beq.n	800b050 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800b04e:	e048      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	68d9      	ldr	r1, [r3, #12]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	f000 f8c0 	bl	800b1e4 <TIM_ETR_SetConfig>
      break;
 800b064:	e03d      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b05      	cmp	r3, #5
 800b06c:	d101      	bne.n	800b072 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e038      	b.n	800b0e4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6a1a      	ldr	r2, [r3, #32]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f022 0201 	bic.w	r2, r2, #1
 800b088:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b098:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	011b      	lsls	r3, r3, #4
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	621a      	str	r2, [r3, #32]
      break;
 800b0b6:	e014      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	6899      	ldr	r1, [r3, #8]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	f000 f813 	bl	800b0f0 <TIM_TI1_ConfigInputStage>
      break;
 800b0ca:	e00a      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	6899      	ldr	r1, [r3, #8]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	f000 f838 	bl	800b14e <TIM_TI2_ConfigInputStage>
      break;
 800b0de:	e000      	b.n	800b0e2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800b0e0:	bf00      	nop
  }
  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	fffefff8 	.word	0xfffefff8

0800b0f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	f023 0201 	bic.w	r2, r3, #1
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b11a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f023 030a 	bic.w	r3, r3, #10
 800b12c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	4313      	orrs	r3, r2
 800b134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	621a      	str	r2, [r3, #32]
}
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b14e:	b480      	push	{r7}
 800b150:	b087      	sub	sp, #28
 800b152:	af00      	add	r7, sp, #0
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	f023 0210 	bic.w	r2, r3, #16
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	031b      	lsls	r3, r3, #12
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b18a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	011b      	lsls	r3, r3, #4
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4313      	orrs	r3, r2
 800b194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f043 0307 	orr.w	r3, r3, #7
 800b1d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	609a      	str	r2, [r3, #8]
}
 800b1d8:	bf00      	nop
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	021a      	lsls	r2, r3, #8
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	431a      	orrs	r2, r3
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	609a      	str	r2, [r3, #8]
}
 800b218:	bf00      	nop
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b234:	2b01      	cmp	r3, #1
 800b236:	d101      	bne.n	800b23c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b238:	2302      	movs	r3, #2
 800b23a:	e06d      	b.n	800b318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2202      	movs	r2, #2
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a30      	ldr	r2, [pc, #192]	; (800b324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d004      	beq.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a2f      	ldr	r2, [pc, #188]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d108      	bne.n	800b282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	4313      	orrs	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a20      	ldr	r2, [pc, #128]	; (800b324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d022      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ae:	d01d      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a1d      	ldr	r2, [pc, #116]	; (800b32c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d018      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d013      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00e      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a15      	ldr	r2, [pc, #84]	; (800b328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d009      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a16      	ldr	r2, [pc, #88]	; (800b338 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d004      	beq.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a15      	ldr	r2, [pc, #84]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d10c      	bne.n	800b306 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	40010000 	.word	0x40010000
 800b328:	40010400 	.word	0x40010400
 800b32c:	40000400 	.word	0x40000400
 800b330:	40000800 	.word	0x40000800
 800b334:	40000c00 	.word	0x40000c00
 800b338:	40014000 	.word	0x40014000
 800b33c:	40001800 	.word	0x40001800

0800b340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b354:	2b01      	cmp	r3, #1
 800b356:	d101      	bne.n	800b35c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b358:	2302      	movs	r3, #2
 800b35a:	e065      	b.n	800b428 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	4313      	orrs	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4313      	orrs	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	041b      	lsls	r3, r3, #16
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a16      	ldr	r2, [pc, #88]	; (800b434 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d004      	beq.n	800b3ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a14      	ldr	r2, [pc, #80]	; (800b438 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d115      	bne.n	800b416 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f4:	051b      	lsls	r3, r3, #20
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	69db      	ldr	r3, [r3, #28]
 800b404:	4313      	orrs	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	4313      	orrs	r3, r2
 800b414:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	40010000 	.word	0x40010000
 800b438:	40010400 	.word	0x40010400

0800b43c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e040      	b.n	800b50c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7fa f816 	bl	80054cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2224      	movs	r2, #36	; 0x24
 800b4a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f022 0201 	bic.w	r2, r2, #1
 800b4b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa14 	bl	800b8e4 <UART_SetConfig>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d101      	bne.n	800b4c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e022      	b.n	800b50c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fcb2 	bl	800be38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689a      	ldr	r2, [r3, #8]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f042 0201 	orr.w	r2, r2, #1
 800b502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fd39 	bl	800bf7c <UART_CheckIdleState>
 800b50a:	4603      	mov	r3, r0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b526:	2b20      	cmp	r3, #32
 800b528:	f040 808a 	bne.w	800b640 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <HAL_UART_Receive_IT+0x24>
 800b532:	88fb      	ldrh	r3, [r7, #6]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e082      	b.n	800b642 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b542:	2b01      	cmp	r3, #1
 800b544:	d101      	bne.n	800b54a <HAL_UART_Receive_IT+0x36>
 800b546:	2302      	movs	r3, #2
 800b548:	e07b      	b.n	800b642 <HAL_UART_Receive_IT+0x12e>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	88fa      	ldrh	r2, [r7, #6]
 800b55c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	88fa      	ldrh	r2, [r7, #6]
 800b564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b576:	d10e      	bne.n	800b596 <HAL_UART_Receive_IT+0x82>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d105      	bne.n	800b58c <HAL_UART_Receive_IT+0x78>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b58a:	e02d      	b.n	800b5e8 <HAL_UART_Receive_IT+0xd4>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	22ff      	movs	r2, #255	; 0xff
 800b590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b594:	e028      	b.n	800b5e8 <HAL_UART_Receive_IT+0xd4>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10d      	bne.n	800b5ba <HAL_UART_Receive_IT+0xa6>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d104      	bne.n	800b5b0 <HAL_UART_Receive_IT+0x9c>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	22ff      	movs	r2, #255	; 0xff
 800b5aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b5ae:	e01b      	b.n	800b5e8 <HAL_UART_Receive_IT+0xd4>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	227f      	movs	r2, #127	; 0x7f
 800b5b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b5b8:	e016      	b.n	800b5e8 <HAL_UART_Receive_IT+0xd4>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c2:	d10d      	bne.n	800b5e0 <HAL_UART_Receive_IT+0xcc>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <HAL_UART_Receive_IT+0xc2>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	227f      	movs	r2, #127	; 0x7f
 800b5d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b5d4:	e008      	b.n	800b5e8 <HAL_UART_Receive_IT+0xd4>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	223f      	movs	r2, #63	; 0x3f
 800b5da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b5de:	e003      	b.n	800b5e8 <HAL_UART_Receive_IT+0xd4>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2222      	movs	r2, #34	; 0x22
 800b5f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0201 	orr.w	r2, r2, #1
 800b602:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b60c:	d107      	bne.n	800b61e <HAL_UART_Receive_IT+0x10a>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d103      	bne.n	800b61e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	4a0d      	ldr	r2, [pc, #52]	; (800b650 <HAL_UART_Receive_IT+0x13c>)
 800b61a:	661a      	str	r2, [r3, #96]	; 0x60
 800b61c:	e002      	b.n	800b624 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	4a0c      	ldr	r2, [pc, #48]	; (800b654 <HAL_UART_Receive_IT+0x140>)
 800b622:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b63a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	e000      	b.n	800b642 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800b640:	2302      	movs	r3, #2
  }
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	0800c215 	.word	0x0800c215
 800b654:	0800c16f 	.word	0x0800c16f

0800b658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b678:	69fa      	ldr	r2, [r7, #28]
 800b67a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b67e:	4013      	ands	r3, r2
 800b680:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d113      	bne.n	800b6b0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00e      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d009      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f000 8100 	beq.w	800b8a6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	4798      	blx	r3
      }
      return;
 800b6ae:	e0fa      	b.n	800b8a6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 80d5 	beq.w	800b862 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f003 0301 	and.w	r3, r3, #1
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d105      	bne.n	800b6ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 80ca 	beq.w	800b862 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00e      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x9e>
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d009      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ee:	f043 0201 	orr.w	r2, r3, #1
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <HAL_UART_IRQHandler+0xc6>
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2202      	movs	r2, #2
 800b710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b716:	f043 0204 	orr.w	r2, r3, #4
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f003 0304 	and.w	r3, r3, #4
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00e      	beq.n	800b746 <HAL_UART_IRQHandler+0xee>
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d009      	beq.n	800b746 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2204      	movs	r2, #4
 800b738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b73e:	f043 0202 	orr.w	r2, r3, #2
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	f003 0308 	and.w	r3, r3, #8
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d013      	beq.n	800b778 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b00      	cmp	r3, #0
 800b758:	d104      	bne.n	800b764 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b760:	2b00      	cmp	r3, #0
 800b762:	d009      	beq.n	800b778 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2208      	movs	r2, #8
 800b76a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b770:	f043 0208 	orr.w	r2, r3, #8
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00f      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x14a>
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b79a:	f043 0220 	orr.w	r2, r3, #32
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d07f      	beq.n	800b8aa <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	f003 0320 	and.w	r3, r3, #32
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00c      	beq.n	800b7ce <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d007      	beq.n	800b7ce <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7d2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7de:	2b40      	cmp	r3, #64	; 0x40
 800b7e0:	d004      	beq.n	800b7ec <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d031      	beq.n	800b850 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fc6f 	bl	800c0d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fc:	2b40      	cmp	r3, #64	; 0x40
 800b7fe:	d123      	bne.n	800b848 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	689a      	ldr	r2, [r3, #8]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b80e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b814:	2b00      	cmp	r3, #0
 800b816:	d013      	beq.n	800b840 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81c:	4a26      	ldr	r2, [pc, #152]	; (800b8b8 <HAL_UART_IRQHandler+0x260>)
 800b81e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b824:	4618      	mov	r0, r3
 800b826:	f7fa ffab 	bl	8006780 <HAL_DMA_Abort_IT>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d016      	beq.n	800b85e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b83a:	4610      	mov	r0, r2
 800b83c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b83e:	e00e      	b.n	800b85e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f845 	bl	800b8d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b846:	e00a      	b.n	800b85e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f841 	bl	800b8d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b84e:	e006      	b.n	800b85e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f83d 	bl	800b8d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b85c:	e025      	b.n	800b8aa <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b85e:	bf00      	nop
    return;
 800b860:	e023      	b.n	800b8aa <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00d      	beq.n	800b888 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b872:	2b00      	cmp	r3, #0
 800b874:	d008      	beq.n	800b888 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d017      	beq.n	800b8ae <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
    }
    return;
 800b886:	e012      	b.n	800b8ae <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00e      	beq.n	800b8b0 <HAL_UART_IRQHandler+0x258>
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d009      	beq.n	800b8b0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 fc4d 	bl	800c13c <UART_EndTransmit_IT>
    return;
 800b8a2:	bf00      	nop
 800b8a4:	e004      	b.n	800b8b0 <HAL_UART_IRQHandler+0x258>
      return;
 800b8a6:	bf00      	nop
 800b8a8:	e002      	b.n	800b8b0 <HAL_UART_IRQHandler+0x258>
    return;
 800b8aa:	bf00      	nop
 800b8ac:	e000      	b.n	800b8b0 <HAL_UART_IRQHandler+0x258>
    return;
 800b8ae:	bf00      	nop
  }

}
 800b8b0:	3720      	adds	r7, #32
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800c111 	.word	0x0800c111

0800b8bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689a      	ldr	r2, [r3, #8]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	431a      	orrs	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	695b      	ldr	r3, [r3, #20]
 800b902:	431a      	orrs	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	69db      	ldr	r3, [r3, #28]
 800b908:	4313      	orrs	r3, r2
 800b90a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	4bb1      	ldr	r3, [pc, #708]	; (800bbd8 <UART_SetConfig+0x2f4>)
 800b914:	4013      	ands	r3, r2
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6812      	ldr	r2, [r2, #0]
 800b91a:	6939      	ldr	r1, [r7, #16]
 800b91c:	430b      	orrs	r3, r1
 800b91e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a1b      	ldr	r3, [r3, #32]
 800b940:	693a      	ldr	r2, [r7, #16]
 800b942:	4313      	orrs	r3, r2
 800b944:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	430a      	orrs	r2, r1
 800b958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a9f      	ldr	r2, [pc, #636]	; (800bbdc <UART_SetConfig+0x2f8>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d121      	bne.n	800b9a8 <UART_SetConfig+0xc4>
 800b964:	4b9e      	ldr	r3, [pc, #632]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96a:	f003 0303 	and.w	r3, r3, #3
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d816      	bhi.n	800b9a0 <UART_SetConfig+0xbc>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <UART_SetConfig+0x94>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b989 	.word	0x0800b989
 800b97c:	0800b995 	.word	0x0800b995
 800b980:	0800b98f 	.word	0x0800b98f
 800b984:	0800b99b 	.word	0x0800b99b
 800b988:	2301      	movs	r3, #1
 800b98a:	77fb      	strb	r3, [r7, #31]
 800b98c:	e151      	b.n	800bc32 <UART_SetConfig+0x34e>
 800b98e:	2302      	movs	r3, #2
 800b990:	77fb      	strb	r3, [r7, #31]
 800b992:	e14e      	b.n	800bc32 <UART_SetConfig+0x34e>
 800b994:	2304      	movs	r3, #4
 800b996:	77fb      	strb	r3, [r7, #31]
 800b998:	e14b      	b.n	800bc32 <UART_SetConfig+0x34e>
 800b99a:	2308      	movs	r3, #8
 800b99c:	77fb      	strb	r3, [r7, #31]
 800b99e:	e148      	b.n	800bc32 <UART_SetConfig+0x34e>
 800b9a0:	2310      	movs	r3, #16
 800b9a2:	77fb      	strb	r3, [r7, #31]
 800b9a4:	bf00      	nop
 800b9a6:	e144      	b.n	800bc32 <UART_SetConfig+0x34e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a8d      	ldr	r2, [pc, #564]	; (800bbe4 <UART_SetConfig+0x300>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d134      	bne.n	800ba1c <UART_SetConfig+0x138>
 800b9b2:	4b8b      	ldr	r3, [pc, #556]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800b9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9b8:	f003 030c 	and.w	r3, r3, #12
 800b9bc:	2b0c      	cmp	r3, #12
 800b9be:	d829      	bhi.n	800ba14 <UART_SetConfig+0x130>
 800b9c0:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <UART_SetConfig+0xe4>)
 800b9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c6:	bf00      	nop
 800b9c8:	0800b9fd 	.word	0x0800b9fd
 800b9cc:	0800ba15 	.word	0x0800ba15
 800b9d0:	0800ba15 	.word	0x0800ba15
 800b9d4:	0800ba15 	.word	0x0800ba15
 800b9d8:	0800ba09 	.word	0x0800ba09
 800b9dc:	0800ba15 	.word	0x0800ba15
 800b9e0:	0800ba15 	.word	0x0800ba15
 800b9e4:	0800ba15 	.word	0x0800ba15
 800b9e8:	0800ba03 	.word	0x0800ba03
 800b9ec:	0800ba15 	.word	0x0800ba15
 800b9f0:	0800ba15 	.word	0x0800ba15
 800b9f4:	0800ba15 	.word	0x0800ba15
 800b9f8:	0800ba0f 	.word	0x0800ba0f
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	77fb      	strb	r3, [r7, #31]
 800ba00:	e117      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba02:	2302      	movs	r3, #2
 800ba04:	77fb      	strb	r3, [r7, #31]
 800ba06:	e114      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba08:	2304      	movs	r3, #4
 800ba0a:	77fb      	strb	r3, [r7, #31]
 800ba0c:	e111      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba0e:	2308      	movs	r3, #8
 800ba10:	77fb      	strb	r3, [r7, #31]
 800ba12:	e10e      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba14:	2310      	movs	r3, #16
 800ba16:	77fb      	strb	r3, [r7, #31]
 800ba18:	bf00      	nop
 800ba1a:	e10a      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a71      	ldr	r2, [pc, #452]	; (800bbe8 <UART_SetConfig+0x304>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d120      	bne.n	800ba68 <UART_SetConfig+0x184>
 800ba26:	4b6e      	ldr	r3, [pc, #440]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800ba28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba30:	2b10      	cmp	r3, #16
 800ba32:	d00f      	beq.n	800ba54 <UART_SetConfig+0x170>
 800ba34:	2b10      	cmp	r3, #16
 800ba36:	d802      	bhi.n	800ba3e <UART_SetConfig+0x15a>
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <UART_SetConfig+0x164>
 800ba3c:	e010      	b.n	800ba60 <UART_SetConfig+0x17c>
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	d005      	beq.n	800ba4e <UART_SetConfig+0x16a>
 800ba42:	2b30      	cmp	r3, #48	; 0x30
 800ba44:	d009      	beq.n	800ba5a <UART_SetConfig+0x176>
 800ba46:	e00b      	b.n	800ba60 <UART_SetConfig+0x17c>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	77fb      	strb	r3, [r7, #31]
 800ba4c:	e0f1      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba4e:	2302      	movs	r3, #2
 800ba50:	77fb      	strb	r3, [r7, #31]
 800ba52:	e0ee      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba54:	2304      	movs	r3, #4
 800ba56:	77fb      	strb	r3, [r7, #31]
 800ba58:	e0eb      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba5a:	2308      	movs	r3, #8
 800ba5c:	77fb      	strb	r3, [r7, #31]
 800ba5e:	e0e8      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba60:	2310      	movs	r3, #16
 800ba62:	77fb      	strb	r3, [r7, #31]
 800ba64:	bf00      	nop
 800ba66:	e0e4      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a5f      	ldr	r2, [pc, #380]	; (800bbec <UART_SetConfig+0x308>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d120      	bne.n	800bab4 <UART_SetConfig+0x1d0>
 800ba72:	4b5b      	ldr	r3, [pc, #364]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800ba74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba7c:	2b40      	cmp	r3, #64	; 0x40
 800ba7e:	d00f      	beq.n	800baa0 <UART_SetConfig+0x1bc>
 800ba80:	2b40      	cmp	r3, #64	; 0x40
 800ba82:	d802      	bhi.n	800ba8a <UART_SetConfig+0x1a6>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <UART_SetConfig+0x1b0>
 800ba88:	e010      	b.n	800baac <UART_SetConfig+0x1c8>
 800ba8a:	2b80      	cmp	r3, #128	; 0x80
 800ba8c:	d005      	beq.n	800ba9a <UART_SetConfig+0x1b6>
 800ba8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ba90:	d009      	beq.n	800baa6 <UART_SetConfig+0x1c2>
 800ba92:	e00b      	b.n	800baac <UART_SetConfig+0x1c8>
 800ba94:	2300      	movs	r3, #0
 800ba96:	77fb      	strb	r3, [r7, #31]
 800ba98:	e0cb      	b.n	800bc32 <UART_SetConfig+0x34e>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	77fb      	strb	r3, [r7, #31]
 800ba9e:	e0c8      	b.n	800bc32 <UART_SetConfig+0x34e>
 800baa0:	2304      	movs	r3, #4
 800baa2:	77fb      	strb	r3, [r7, #31]
 800baa4:	e0c5      	b.n	800bc32 <UART_SetConfig+0x34e>
 800baa6:	2308      	movs	r3, #8
 800baa8:	77fb      	strb	r3, [r7, #31]
 800baaa:	e0c2      	b.n	800bc32 <UART_SetConfig+0x34e>
 800baac:	2310      	movs	r3, #16
 800baae:	77fb      	strb	r3, [r7, #31]
 800bab0:	bf00      	nop
 800bab2:	e0be      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a4d      	ldr	r2, [pc, #308]	; (800bbf0 <UART_SetConfig+0x30c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d124      	bne.n	800bb08 <UART_SetConfig+0x224>
 800babe:	4b48      	ldr	r3, [pc, #288]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800bac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bacc:	d012      	beq.n	800baf4 <UART_SetConfig+0x210>
 800bace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad2:	d802      	bhi.n	800bada <UART_SetConfig+0x1f6>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d007      	beq.n	800bae8 <UART_SetConfig+0x204>
 800bad8:	e012      	b.n	800bb00 <UART_SetConfig+0x21c>
 800bada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bade:	d006      	beq.n	800baee <UART_SetConfig+0x20a>
 800bae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bae4:	d009      	beq.n	800bafa <UART_SetConfig+0x216>
 800bae6:	e00b      	b.n	800bb00 <UART_SetConfig+0x21c>
 800bae8:	2300      	movs	r3, #0
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e0a1      	b.n	800bc32 <UART_SetConfig+0x34e>
 800baee:	2302      	movs	r3, #2
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e09e      	b.n	800bc32 <UART_SetConfig+0x34e>
 800baf4:	2304      	movs	r3, #4
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e09b      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bafa:	2308      	movs	r3, #8
 800bafc:	77fb      	strb	r3, [r7, #31]
 800bafe:	e098      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb00:	2310      	movs	r3, #16
 800bb02:	77fb      	strb	r3, [r7, #31]
 800bb04:	bf00      	nop
 800bb06:	e094      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a39      	ldr	r2, [pc, #228]	; (800bbf4 <UART_SetConfig+0x310>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d124      	bne.n	800bb5c <UART_SetConfig+0x278>
 800bb12:	4b33      	ldr	r3, [pc, #204]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800bb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb20:	d012      	beq.n	800bb48 <UART_SetConfig+0x264>
 800bb22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb26:	d802      	bhi.n	800bb2e <UART_SetConfig+0x24a>
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d007      	beq.n	800bb3c <UART_SetConfig+0x258>
 800bb2c:	e012      	b.n	800bb54 <UART_SetConfig+0x270>
 800bb2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb32:	d006      	beq.n	800bb42 <UART_SetConfig+0x25e>
 800bb34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb38:	d009      	beq.n	800bb4e <UART_SetConfig+0x26a>
 800bb3a:	e00b      	b.n	800bb54 <UART_SetConfig+0x270>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	77fb      	strb	r3, [r7, #31]
 800bb40:	e077      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb42:	2302      	movs	r3, #2
 800bb44:	77fb      	strb	r3, [r7, #31]
 800bb46:	e074      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb48:	2304      	movs	r3, #4
 800bb4a:	77fb      	strb	r3, [r7, #31]
 800bb4c:	e071      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb4e:	2308      	movs	r3, #8
 800bb50:	77fb      	strb	r3, [r7, #31]
 800bb52:	e06e      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb54:	2310      	movs	r3, #16
 800bb56:	77fb      	strb	r3, [r7, #31]
 800bb58:	bf00      	nop
 800bb5a:	e06a      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a25      	ldr	r2, [pc, #148]	; (800bbf8 <UART_SetConfig+0x314>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d124      	bne.n	800bbb0 <UART_SetConfig+0x2cc>
 800bb66:	4b1e      	ldr	r3, [pc, #120]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800bb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bb70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb74:	d012      	beq.n	800bb9c <UART_SetConfig+0x2b8>
 800bb76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7a:	d802      	bhi.n	800bb82 <UART_SetConfig+0x29e>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d007      	beq.n	800bb90 <UART_SetConfig+0x2ac>
 800bb80:	e012      	b.n	800bba8 <UART_SetConfig+0x2c4>
 800bb82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb86:	d006      	beq.n	800bb96 <UART_SetConfig+0x2b2>
 800bb88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb8c:	d009      	beq.n	800bba2 <UART_SetConfig+0x2be>
 800bb8e:	e00b      	b.n	800bba8 <UART_SetConfig+0x2c4>
 800bb90:	2300      	movs	r3, #0
 800bb92:	77fb      	strb	r3, [r7, #31]
 800bb94:	e04d      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb96:	2302      	movs	r3, #2
 800bb98:	77fb      	strb	r3, [r7, #31]
 800bb9a:	e04a      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bb9c:	2304      	movs	r3, #4
 800bb9e:	77fb      	strb	r3, [r7, #31]
 800bba0:	e047      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bba2:	2308      	movs	r3, #8
 800bba4:	77fb      	strb	r3, [r7, #31]
 800bba6:	e044      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bba8:	2310      	movs	r3, #16
 800bbaa:	77fb      	strb	r3, [r7, #31]
 800bbac:	bf00      	nop
 800bbae:	e040      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a11      	ldr	r2, [pc, #68]	; (800bbfc <UART_SetConfig+0x318>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d139      	bne.n	800bc2e <UART_SetConfig+0x34a>
 800bbba:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <UART_SetConfig+0x2fc>)
 800bbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bbc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbc8:	d027      	beq.n	800bc1a <UART_SetConfig+0x336>
 800bbca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbce:	d817      	bhi.n	800bc00 <UART_SetConfig+0x31c>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d01c      	beq.n	800bc0e <UART_SetConfig+0x32a>
 800bbd4:	e027      	b.n	800bc26 <UART_SetConfig+0x342>
 800bbd6:	bf00      	nop
 800bbd8:	efff69f3 	.word	0xefff69f3
 800bbdc:	40011000 	.word	0x40011000
 800bbe0:	40023800 	.word	0x40023800
 800bbe4:	40004400 	.word	0x40004400
 800bbe8:	40004800 	.word	0x40004800
 800bbec:	40004c00 	.word	0x40004c00
 800bbf0:	40005000 	.word	0x40005000
 800bbf4:	40011400 	.word	0x40011400
 800bbf8:	40007800 	.word	0x40007800
 800bbfc:	40007c00 	.word	0x40007c00
 800bc00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc04:	d006      	beq.n	800bc14 <UART_SetConfig+0x330>
 800bc06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bc0a:	d009      	beq.n	800bc20 <UART_SetConfig+0x33c>
 800bc0c:	e00b      	b.n	800bc26 <UART_SetConfig+0x342>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	77fb      	strb	r3, [r7, #31]
 800bc12:	e00e      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bc14:	2302      	movs	r3, #2
 800bc16:	77fb      	strb	r3, [r7, #31]
 800bc18:	e00b      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bc1a:	2304      	movs	r3, #4
 800bc1c:	77fb      	strb	r3, [r7, #31]
 800bc1e:	e008      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bc20:	2308      	movs	r3, #8
 800bc22:	77fb      	strb	r3, [r7, #31]
 800bc24:	e005      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bc26:	2310      	movs	r3, #16
 800bc28:	77fb      	strb	r3, [r7, #31]
 800bc2a:	bf00      	nop
 800bc2c:	e001      	b.n	800bc32 <UART_SetConfig+0x34e>
 800bc2e:	2310      	movs	r3, #16
 800bc30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc3a:	d17f      	bne.n	800bd3c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	2b08      	cmp	r3, #8
 800bc40:	d85c      	bhi.n	800bcfc <UART_SetConfig+0x418>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <UART_SetConfig+0x364>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc6d 	.word	0x0800bc6d
 800bc4c:	0800bc8d 	.word	0x0800bc8d
 800bc50:	0800bcad 	.word	0x0800bcad
 800bc54:	0800bcfd 	.word	0x0800bcfd
 800bc58:	0800bcc5 	.word	0x0800bcc5
 800bc5c:	0800bcfd 	.word	0x0800bcfd
 800bc60:	0800bcfd 	.word	0x0800bcfd
 800bc64:	0800bcfd 	.word	0x0800bcfd
 800bc68:	0800bce5 	.word	0x0800bce5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc6c:	f7fd f9ba 	bl	8008fe4 <HAL_RCC_GetPCLK1Freq>
 800bc70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	005a      	lsls	r2, r3, #1
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	441a      	add	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	61bb      	str	r3, [r7, #24]
        break;
 800bc8a:	e03a      	b.n	800bd02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc8c:	f7fd f9be 	bl	800900c <HAL_RCC_GetPCLK2Freq>
 800bc90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	005a      	lsls	r2, r3, #1
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	085b      	lsrs	r3, r3, #1
 800bc9c:	441a      	add	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	61bb      	str	r3, [r7, #24]
        break;
 800bcaa:	e02a      	b.n	800bd02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	085a      	lsrs	r2, r3, #1
 800bcb2:	4b5f      	ldr	r3, [pc, #380]	; (800be30 <UART_SetConfig+0x54c>)
 800bcb4:	4413      	add	r3, r2
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	6852      	ldr	r2, [r2, #4]
 800bcba:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	61bb      	str	r3, [r7, #24]
        break;
 800bcc2:	e01e      	b.n	800bd02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcc4:	f7fd f8d0 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 800bcc8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	005a      	lsls	r2, r3, #1
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	085b      	lsrs	r3, r3, #1
 800bcd4:	441a      	add	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	61bb      	str	r3, [r7, #24]
        break;
 800bce2:	e00e      	b.n	800bd02 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	085b      	lsrs	r3, r3, #1
 800bcea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	61bb      	str	r3, [r7, #24]
        break;
 800bcfa:	e002      	b.n	800bd02 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	75fb      	strb	r3, [r7, #23]
        break;
 800bd00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b0f      	cmp	r3, #15
 800bd06:	d916      	bls.n	800bd36 <UART_SetConfig+0x452>
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd0e:	d212      	bcs.n	800bd36 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	f023 030f 	bic.w	r3, r3, #15
 800bd18:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	085b      	lsrs	r3, r3, #1
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	897b      	ldrh	r3, [r7, #10]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	897a      	ldrh	r2, [r7, #10]
 800bd32:	60da      	str	r2, [r3, #12]
 800bd34:	e070      	b.n	800be18 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	75fb      	strb	r3, [r7, #23]
 800bd3a:	e06d      	b.n	800be18 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800bd3c:	7ffb      	ldrb	r3, [r7, #31]
 800bd3e:	2b08      	cmp	r3, #8
 800bd40:	d859      	bhi.n	800bdf6 <UART_SetConfig+0x512>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <UART_SetConfig+0x464>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd6d 	.word	0x0800bd6d
 800bd4c:	0800bd8b 	.word	0x0800bd8b
 800bd50:	0800bda9 	.word	0x0800bda9
 800bd54:	0800bdf7 	.word	0x0800bdf7
 800bd58:	0800bdc1 	.word	0x0800bdc1
 800bd5c:	0800bdf7 	.word	0x0800bdf7
 800bd60:	0800bdf7 	.word	0x0800bdf7
 800bd64:	0800bdf7 	.word	0x0800bdf7
 800bd68:	0800bddf 	.word	0x0800bddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd6c:	f7fd f93a 	bl	8008fe4 <HAL_RCC_GetPCLK1Freq>
 800bd70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	085a      	lsrs	r2, r3, #1
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	441a      	add	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	61bb      	str	r3, [r7, #24]
        break;
 800bd88:	e038      	b.n	800bdfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd8a:	f7fd f93f 	bl	800900c <HAL_RCC_GetPCLK2Freq>
 800bd8e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	085a      	lsrs	r2, r3, #1
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	441a      	add	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	61bb      	str	r3, [r7, #24]
        break;
 800bda6:	e029      	b.n	800bdfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	085a      	lsrs	r2, r3, #1
 800bdae:	4b21      	ldr	r3, [pc, #132]	; (800be34 <UART_SetConfig+0x550>)
 800bdb0:	4413      	add	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	6852      	ldr	r2, [r2, #4]
 800bdb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	61bb      	str	r3, [r7, #24]
        break;
 800bdbe:	e01d      	b.n	800bdfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdc0:	f7fd f852 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 800bdc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	085a      	lsrs	r2, r3, #1
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	441a      	add	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	61bb      	str	r3, [r7, #24]
        break;
 800bddc:	e00e      	b.n	800bdfc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	61bb      	str	r3, [r7, #24]
        break;
 800bdf4:	e002      	b.n	800bdfc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	75fb      	strb	r3, [r7, #23]
        break;
 800bdfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	2b0f      	cmp	r3, #15
 800be00:	d908      	bls.n	800be14 <UART_SetConfig+0x530>
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be08:	d204      	bcs.n	800be14 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	60da      	str	r2, [r3, #12]
 800be12:	e001      	b.n	800be18 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3720      	adds	r7, #32
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	01e84800 	.word	0x01e84800
 800be34:	00f42400 	.word	0x00f42400

0800be38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00a      	beq.n	800be62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	f003 0302 	and.w	r3, r3, #2
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00a      	beq.n	800be84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00a      	beq.n	800bea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beaa:	f003 0308 	and.w	r3, r3, #8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	f003 0310 	and.w	r3, r3, #16
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d01a      	beq.n	800bf4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf36:	d10a      	bne.n	800bf4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00a      	beq.n	800bf70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	605a      	str	r2, [r3, #4]
  }
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bf8a:	f7f9 fd35 	bl	80059f8 <HAL_GetTick>
 800bf8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0308 	and.w	r3, r3, #8
 800bf9a:	2b08      	cmp	r3, #8
 800bf9c:	d10e      	bne.n	800bfbc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f814 	bl	800bfda <UART_WaitOnFlagUntilTimeout>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e00a      	b.n	800bfd2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfea:	e05d      	b.n	800c0a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff2:	d059      	beq.n	800c0a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bff4:	f7f9 fd00 	bl	80059f8 <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	429a      	cmp	r2, r3
 800c002:	d302      	bcc.n	800c00a <UART_WaitOnFlagUntilTimeout+0x30>
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d11b      	bne.n	800c042 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c018:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f022 0201 	bic.w	r2, r2, #1
 800c028:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2220      	movs	r2, #32
 800c02e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2220      	movs	r2, #32
 800c034:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e042      	b.n	800c0c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0304 	and.w	r3, r3, #4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d02b      	beq.n	800c0a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	69db      	ldr	r3, [r3, #28]
 800c056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c05a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c05e:	d123      	bne.n	800c0a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c068:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c078:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689a      	ldr	r2, [r3, #8]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f022 0201 	bic.w	r2, r2, #1
 800c088:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2220      	movs	r2, #32
 800c08e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2220      	movs	r2, #32
 800c094:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2220      	movs	r2, #32
 800c09a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e00f      	b.n	800c0c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	69da      	ldr	r2, [r3, #28]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	bf0c      	ite	eq
 800c0b8:	2301      	moveq	r3, #1
 800c0ba:	2300      	movne	r3, #0
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	79fb      	ldrb	r3, [r7, #7]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d092      	beq.n	800bfec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c0e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	689a      	ldr	r2, [r3, #8]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0201 	bic.w	r2, r2, #1
 800c0f6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2220      	movs	r2, #32
 800c0fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f7ff fbce 	bl	800b8d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c134:	bf00      	nop
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c152:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2220      	movs	r2, #32
 800c158:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff fbab 	bl	800b8bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b084      	sub	sp, #16
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c17c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c182:	2b22      	cmp	r3, #34	; 0x22
 800c184:	d13a      	bne.n	800c1fc <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c18e:	89bb      	ldrh	r3, [r7, #12]
 800c190:	b2d9      	uxtb	r1, r3
 800c192:	89fb      	ldrh	r3, [r7, #14]
 800c194:	b2da      	uxtb	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c19a:	400a      	ands	r2, r1
 800c19c:	b2d2      	uxtb	r2, r2
 800c19e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d121      	bne.n	800c20c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c1d6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	689a      	ldr	r2, [r3, #8]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 0201 	bic.w	r2, r2, #1
 800c1e6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2220      	movs	r2, #32
 800c1ec:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7f5 ff25 	bl	8002044 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1fa:	e007      	b.n	800c20c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f042 0208 	orr.w	r2, r2, #8
 800c20a:	619a      	str	r2, [r3, #24]
}
 800c20c:	bf00      	nop
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c222:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c228:	2b22      	cmp	r3, #34	; 0x22
 800c22a:	d13a      	bne.n	800c2a2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c232:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c238:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c23a:	89ba      	ldrh	r2, [r7, #12]
 800c23c:	89fb      	ldrh	r3, [r7, #14]
 800c23e:	4013      	ands	r3, r2
 800c240:	b29a      	uxth	r2, r3
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24a:	1c9a      	adds	r2, r3, #2
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c256:	b29b      	uxth	r3, r3
 800c258:	3b01      	subs	r3, #1
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c268:	b29b      	uxth	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d121      	bne.n	800c2b2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c27c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689a      	ldr	r2, [r3, #8]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f022 0201 	bic.w	r2, r2, #1
 800c28c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2220      	movs	r2, #32
 800c292:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7f5 fed2 	bl	8002044 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c2a0:	e007      	b.n	800c2b2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f042 0208 	orr.w	r2, r2, #8
 800c2b0:	619a      	str	r2, [r3, #24]
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d027      	beq.n	800c326 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4b2f      	ldr	r3, [pc, #188]	; (800c39c <FMC_SDRAM_Init+0xe0>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c2ec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c2f2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c2f8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c2fe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c304:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c30a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c310:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c316:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	e032      	b.n	800c38c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c332:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c33c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c342:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	4313      	orrs	r3, r2
 800c348:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	4b12      	ldr	r3, [pc, #72]	; (800c39c <FMC_SDRAM_Init+0xe0>)
 800c354:	4013      	ands	r3, r2
 800c356:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c360:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c366:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c36c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c372:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c378:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	ffff8000 	.word	0xffff8000

0800c3a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d02e      	beq.n	800c418 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c3d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c3e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c3ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c3f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c3fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	699b      	ldr	r3, [r3, #24]
 800c404:	3b01      	subs	r3, #1
 800c406:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c408:	4313      	orrs	r3, r2
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	697a      	ldr	r2, [r7, #20]
 800c414:	609a      	str	r2, [r3, #8]
 800c416:	e039      	b.n	800c48c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <FMC_SDRAM_Timing_Init+0xfc>)
 800c422:	4013      	ands	r3, r2
 800c424:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	3b01      	subs	r3, #1
 800c434:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c436:	4313      	orrs	r3, r2
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c44a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	3b01      	subs	r3, #1
 800c458:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c45a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	3b01      	subs	r3, #1
 800c462:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c464:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c46e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	3b01      	subs	r3, #1
 800c476:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c478:	4313      	orrs	r3, r2
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	371c      	adds	r7, #28
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	ff0f0fff 	.word	0xff0f0fff

0800c4a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c4b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c4c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	371c      	adds	r7, #28
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	695a      	ldr	r2, [r3, #20]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c51a:	2b84      	cmp	r3, #132	; 0x84
 800c51c:	d005      	beq.n	800c52a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c51e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4413      	add	r3, r2
 800c526:	3303      	adds	r3, #3
 800c528:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c52a:	68fb      	ldr	r3, [r7, #12]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c53c:	f001 f8f4 	bl	800d728 <vTaskStartScheduler>
  
  return osOK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	bd80      	pop	{r7, pc}

0800c546 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c546:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c548:	b089      	sub	sp, #36	; 0x24
 800c54a:	af04      	add	r7, sp, #16
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d020      	beq.n	800c59a <osThreadCreate+0x54>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01c      	beq.n	800c59a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685c      	ldr	r4, [r3, #4]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681d      	ldr	r5, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	691e      	ldr	r6, [r3, #16]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c572:	4618      	mov	r0, r3
 800c574:	f7ff ffc8 	bl	800c508 <makeFreeRtosPriority>
 800c578:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c582:	9202      	str	r2, [sp, #8]
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	9100      	str	r1, [sp, #0]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	4632      	mov	r2, r6
 800c58c:	4629      	mov	r1, r5
 800c58e:	4620      	mov	r0, r4
 800c590:	f000 fe72 	bl	800d278 <xTaskCreateStatic>
 800c594:	4603      	mov	r3, r0
 800c596:	60fb      	str	r3, [r7, #12]
 800c598:	e01c      	b.n	800c5d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685c      	ldr	r4, [r3, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5a6:	b29e      	uxth	r6, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff ffaa 	bl	800c508 <makeFreeRtosPriority>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	9301      	str	r3, [sp, #4]
 800c5bc:	9200      	str	r2, [sp, #0]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	4632      	mov	r2, r6
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f000 feb7 	bl	800d338 <xTaskCreate>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d001      	beq.n	800c5d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e000      	b.n	800c5d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <osDelay+0x16>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	e000      	b.n	800c5f6 <osDelay+0x18>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 f860 	bl	800d6bc <vTaskDelay>
  
  return osOK;
 800c5fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b082      	sub	sp, #8
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d007      	beq.n	800c626 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	4619      	mov	r1, r3
 800c61c:	2001      	movs	r0, #1
 800c61e:	f000 fa60 	bl	800cae2 <xQueueCreateMutexStatic>
 800c622:	4603      	mov	r3, r0
 800c624:	e003      	b.n	800c62e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c626:	2001      	movs	r0, #1
 800c628:	f000 fa43 	bl	800cab2 <xQueueCreateMutex>
 800c62c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c636:	b590      	push	{r4, r7, lr}
 800c638:	b085      	sub	sp, #20
 800c63a:	af02      	add	r7, sp, #8
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d012      	beq.n	800c66e <osMessageCreate+0x38>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00e      	beq.n	800c66e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6859      	ldr	r1, [r3, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68dc      	ldr	r4, [r3, #12]
 800c660:	2300      	movs	r3, #0
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	4623      	mov	r3, r4
 800c666:	f000 f92d 	bl	800c8c4 <xQueueGenericCreateStatic>
 800c66a:	4603      	mov	r3, r0
 800c66c:	e008      	b.n	800c680 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6818      	ldr	r0, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	4619      	mov	r1, r3
 800c67a:	f000 f9a0 	bl	800c9be <xQueueGenericCreate>
 800c67e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	bd90      	pop	{r4, r7, pc}

0800c688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f103 0208 	add.w	r2, r3, #8
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f04f 32ff 	mov.w	r2, #4294967295
 800c6a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f103 0208 	add.w	r2, r3, #8
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f103 0208 	add.w	r2, r3, #8
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6bc:	bf00      	nop
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6d6:	bf00      	nop
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b085      	sub	sp, #20
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	689a      	ldr	r2, [r3, #8]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	601a      	str	r2, [r3, #0]
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c72a:	b480      	push	{r7}
 800c72c:	b085      	sub	sp, #20
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c740:	d103      	bne.n	800c74a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e00c      	b.n	800c764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3308      	adds	r3, #8
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	e002      	b.n	800c758 <vListInsert+0x2e>
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	429a      	cmp	r2, r3
 800c762:	d2f6      	bcs.n	800c752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	1c5a      	adds	r2, r3, #1
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	601a      	str	r2, [r3, #0]
}
 800c790:	bf00      	nop
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	6892      	ldr	r2, [r2, #8]
 800c7b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	6852      	ldr	r2, [r2, #4]
 800c7bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d103      	bne.n	800c7d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	1e5a      	subs	r2, r3, #1
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10b      	bne.n	800c81c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	b672      	cpsid	i
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	b662      	cpsie	i
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	e7fe      	b.n	800c81a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800c81c:	f001 ff0c 	bl	800e638 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c828:	68f9      	ldr	r1, [r7, #12]
 800c82a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c82c:	fb01 f303 	mul.w	r3, r1, r3
 800c830:	441a      	add	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84c:	3b01      	subs	r3, #1
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c852:	fb01 f303 	mul.w	r3, r1, r3
 800c856:	441a      	add	r2, r3
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	22ff      	movs	r2, #255	; 0xff
 800c860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	22ff      	movs	r2, #255	; 0xff
 800c868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d114      	bne.n	800c89c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d01a      	beq.n	800c8b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3310      	adds	r3, #16
 800c87e:	4618      	mov	r0, r3
 800c880:	f001 f9d2 	bl	800dc28 <xTaskRemoveFromEventList>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d012      	beq.n	800c8b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c88a:	4b0d      	ldr	r3, [pc, #52]	; (800c8c0 <xQueueGenericReset+0xd0>)
 800c88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	e009      	b.n	800c8b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3310      	adds	r3, #16
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff fef1 	bl	800c688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3324      	adds	r3, #36	; 0x24
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7ff feec 	bl	800c688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c8b0:	f001 fef4 	bl	800e69c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c8b4:	2301      	movs	r3, #1
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	e000ed04 	.word	0xe000ed04

0800c8c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08e      	sub	sp, #56	; 0x38
 800c8c8:	af02      	add	r7, sp, #8
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
 800c8d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10b      	bne.n	800c8f0 <xQueueGenericCreateStatic+0x2c>
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	b672      	cpsid	i
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	b662      	cpsie	i
 800c8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ee:	e7fe      	b.n	800c8ee <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10b      	bne.n	800c90e <xQueueGenericCreateStatic+0x4a>
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	b672      	cpsid	i
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	b662      	cpsie	i
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
 800c90c:	e7fe      	b.n	800c90c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <xQueueGenericCreateStatic+0x56>
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <xQueueGenericCreateStatic+0x5a>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <xQueueGenericCreateStatic+0x5c>
 800c91e:	2300      	movs	r3, #0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10b      	bne.n	800c93c <xQueueGenericCreateStatic+0x78>
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	b672      	cpsid	i
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	b662      	cpsie	i
 800c938:	623b      	str	r3, [r7, #32]
 800c93a:	e7fe      	b.n	800c93a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <xQueueGenericCreateStatic+0x84>
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <xQueueGenericCreateStatic+0x88>
 800c948:	2301      	movs	r3, #1
 800c94a:	e000      	b.n	800c94e <xQueueGenericCreateStatic+0x8a>
 800c94c:	2300      	movs	r3, #0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10b      	bne.n	800c96a <xQueueGenericCreateStatic+0xa6>
 800c952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c956:	b672      	cpsid	i
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	b662      	cpsie	i
 800c966:	61fb      	str	r3, [r7, #28]
 800c968:	e7fe      	b.n	800c968 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c96a:	2348      	movs	r3, #72	; 0x48
 800c96c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2b48      	cmp	r3, #72	; 0x48
 800c972:	d00b      	beq.n	800c98c <xQueueGenericCreateStatic+0xc8>
 800c974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c978:	b672      	cpsid	i
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	b662      	cpsie	i
 800c988:	61bb      	str	r3, [r7, #24]
 800c98a:	e7fe      	b.n	800c98a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c98c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00d      	beq.n	800c9b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f000 f846 	bl	800ca40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3730      	adds	r7, #48	; 0x30
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b08a      	sub	sp, #40	; 0x28
 800c9c2:	af02      	add	r7, sp, #8
 800c9c4:	60f8      	str	r0, [r7, #12]
 800c9c6:	60b9      	str	r1, [r7, #8]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10b      	bne.n	800c9ea <xQueueGenericCreate+0x2c>
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	b672      	cpsid	i
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	b662      	cpsie	i
 800c9e6:	613b      	str	r3, [r7, #16]
 800c9e8:	e7fe      	b.n	800c9e8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61fb      	str	r3, [r7, #28]
 800c9f4:	e004      	b.n	800ca00 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	fb02 f303 	mul.w	r3, r2, r3
 800c9fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	3348      	adds	r3, #72	; 0x48
 800ca04:	4618      	mov	r0, r3
 800ca06:	f001 ff39 	bl	800e87c <pvPortMalloc>
 800ca0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d011      	beq.n	800ca36 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	3348      	adds	r3, #72	; 0x48
 800ca1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca24:	79fa      	ldrb	r2, [r7, #7]
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	697a      	ldr	r2, [r7, #20]
 800ca2e:	68b9      	ldr	r1, [r7, #8]
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f000 f805 	bl	800ca40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca36:	69bb      	ldr	r3, [r7, #24]
	}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3720      	adds	r7, #32
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d103      	bne.n	800ca5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	69ba      	ldr	r2, [r7, #24]
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	e002      	b.n	800ca62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca6e:	2101      	movs	r1, #1
 800ca70:	69b8      	ldr	r0, [r7, #24]
 800ca72:	f7ff febd 	bl	800c7f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca76:	bf00      	nop
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b082      	sub	sp, #8
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00e      	beq.n	800caaa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2200      	movs	r2, #0
 800caa2:	2100      	movs	r1, #0
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 f837 	bl	800cb18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800caaa:	bf00      	nop
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b086      	sub	sp, #24
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	4603      	mov	r3, r0
 800caba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cabc:	2301      	movs	r3, #1
 800cabe:	617b      	str	r3, [r7, #20]
 800cac0:	2300      	movs	r3, #0
 800cac2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cac4:	79fb      	ldrb	r3, [r7, #7]
 800cac6:	461a      	mov	r2, r3
 800cac8:	6939      	ldr	r1, [r7, #16]
 800caca:	6978      	ldr	r0, [r7, #20]
 800cacc:	f7ff ff77 	bl	800c9be <xQueueGenericCreate>
 800cad0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f7ff ffd3 	bl	800ca7e <prvInitialiseMutex>

		return xNewQueue;
 800cad8:	68fb      	ldr	r3, [r7, #12]
	}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b088      	sub	sp, #32
 800cae6:	af02      	add	r7, sp, #8
 800cae8:	4603      	mov	r3, r0
 800caea:	6039      	str	r1, [r7, #0]
 800caec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800caee:	2301      	movs	r3, #1
 800caf0:	617b      	str	r3, [r7, #20]
 800caf2:	2300      	movs	r3, #0
 800caf4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2200      	movs	r2, #0
 800cafe:	6939      	ldr	r1, [r7, #16]
 800cb00:	6978      	ldr	r0, [r7, #20]
 800cb02:	f7ff fedf 	bl	800c8c4 <xQueueGenericCreateStatic>
 800cb06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f7ff ffb8 	bl	800ca7e <prvInitialiseMutex>

		return xNewQueue;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
	}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3718      	adds	r7, #24
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08e      	sub	sp, #56	; 0x38
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb26:	2300      	movs	r3, #0
 800cb28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10b      	bne.n	800cb4c <xQueueGenericSend+0x34>
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	b672      	cpsid	i
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	b662      	cpsie	i
 800cb48:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb4a:	e7fe      	b.n	800cb4a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d103      	bne.n	800cb5a <xQueueGenericSend+0x42>
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <xQueueGenericSend+0x46>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e000      	b.n	800cb60 <xQueueGenericSend+0x48>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10b      	bne.n	800cb7c <xQueueGenericSend+0x64>
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	b672      	cpsid	i
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	b662      	cpsie	i
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
 800cb7a:	e7fe      	b.n	800cb7a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d103      	bne.n	800cb8a <xQueueGenericSend+0x72>
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d101      	bne.n	800cb8e <xQueueGenericSend+0x76>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e000      	b.n	800cb90 <xQueueGenericSend+0x78>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10b      	bne.n	800cbac <xQueueGenericSend+0x94>
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	b672      	cpsid	i
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	b662      	cpsie	i
 800cba8:	623b      	str	r3, [r7, #32]
 800cbaa:	e7fe      	b.n	800cbaa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbac:	f001 f9fc 	bl	800dfa8 <xTaskGetSchedulerState>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d102      	bne.n	800cbbc <xQueueGenericSend+0xa4>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <xQueueGenericSend+0xa8>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <xQueueGenericSend+0xaa>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10b      	bne.n	800cbde <xQueueGenericSend+0xc6>
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	b672      	cpsid	i
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	b662      	cpsie	i
 800cbda:	61fb      	str	r3, [r7, #28]
 800cbdc:	e7fe      	b.n	800cbdc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbde:	f001 fd2b 	bl	800e638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d302      	bcc.n	800cbf4 <xQueueGenericSend+0xdc>
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d129      	bne.n	800cc48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbfa:	f000 fa53 	bl	800d0a4 <prvCopyDataToQueue>
 800cbfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d010      	beq.n	800cc2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	3324      	adds	r3, #36	; 0x24
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 f80b 	bl	800dc28 <xTaskRemoveFromEventList>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d013      	beq.n	800cc40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc18:	4b3f      	ldr	r3, [pc, #252]	; (800cd18 <xQueueGenericSend+0x200>)
 800cc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	e00a      	b.n	800cc40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d007      	beq.n	800cc40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc30:	4b39      	ldr	r3, [pc, #228]	; (800cd18 <xQueueGenericSend+0x200>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc40:	f001 fd2c 	bl	800e69c <vPortExitCritical>
				return pdPASS;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e063      	b.n	800cd10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d103      	bne.n	800cc56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc4e:	f001 fd25 	bl	800e69c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	e05c      	b.n	800cd10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d106      	bne.n	800cc6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc5c:	f107 0314 	add.w	r3, r7, #20
 800cc60:	4618      	mov	r0, r3
 800cc62:	f001 f845 	bl	800dcf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc66:	2301      	movs	r3, #1
 800cc68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc6a:	f001 fd17 	bl	800e69c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc6e:	f000 fdbd 	bl	800d7ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc72:	f001 fce1 	bl	800e638 <vPortEnterCritical>
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc7c:	b25b      	sxtb	r3, r3
 800cc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc82:	d103      	bne.n	800cc8c <xQueueGenericSend+0x174>
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc92:	b25b      	sxtb	r3, r3
 800cc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc98:	d103      	bne.n	800cca2 <xQueueGenericSend+0x18a>
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cca2:	f001 fcfb 	bl	800e69c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cca6:	1d3a      	adds	r2, r7, #4
 800cca8:	f107 0314 	add.w	r3, r7, #20
 800ccac:	4611      	mov	r1, r2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f001 f834 	bl	800dd1c <xTaskCheckForTimeOut>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d124      	bne.n	800cd04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccbc:	f000 fac4 	bl	800d248 <prvIsQueueFull>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d018      	beq.n	800ccf8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	3310      	adds	r3, #16
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	4611      	mov	r1, r2
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 ff84 	bl	800dbdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccd6:	f000 fa4f 	bl	800d178 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccda:	f000 fd95 	bl	800d808 <xTaskResumeAll>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f47f af7c 	bne.w	800cbde <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cce6:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <xQueueGenericSend+0x200>)
 800cce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	e772      	b.n	800cbde <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ccf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccfa:	f000 fa3d 	bl	800d178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccfe:	f000 fd83 	bl	800d808 <xTaskResumeAll>
 800cd02:	e76c      	b.n	800cbde <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd06:	f000 fa37 	bl	800d178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd0a:	f000 fd7d 	bl	800d808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3738      	adds	r7, #56	; 0x38
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	e000ed04 	.word	0xe000ed04

0800cd1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b08e      	sub	sp, #56	; 0x38
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10b      	bne.n	800cd4c <xQueueGenericSendFromISR+0x30>
 800cd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd38:	b672      	cpsid	i
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	b662      	cpsie	i
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
 800cd4a:	e7fe      	b.n	800cd4a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d103      	bne.n	800cd5a <xQueueGenericSendFromISR+0x3e>
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <xQueueGenericSendFromISR+0x42>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e000      	b.n	800cd60 <xQueueGenericSendFromISR+0x44>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10b      	bne.n	800cd7c <xQueueGenericSendFromISR+0x60>
 800cd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd68:	b672      	cpsid	i
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	b662      	cpsie	i
 800cd78:	623b      	str	r3, [r7, #32]
 800cd7a:	e7fe      	b.n	800cd7a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d103      	bne.n	800cd8a <xQueueGenericSendFromISR+0x6e>
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d101      	bne.n	800cd8e <xQueueGenericSendFromISR+0x72>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <xQueueGenericSendFromISR+0x74>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10b      	bne.n	800cdac <xQueueGenericSendFromISR+0x90>
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	b672      	cpsid	i
 800cd9a:	f383 8811 	msr	BASEPRI, r3
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	f3bf 8f4f 	dsb	sy
 800cda6:	b662      	cpsie	i
 800cda8:	61fb      	str	r3, [r7, #28]
 800cdaa:	e7fe      	b.n	800cdaa <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdac:	f001 fd24 	bl	800e7f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdb0:	f3ef 8211 	mrs	r2, BASEPRI
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	b672      	cpsid	i
 800cdba:	f383 8811 	msr	BASEPRI, r3
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	b662      	cpsie	i
 800cdc8:	61ba      	str	r2, [r7, #24]
 800cdca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdcc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d302      	bcc.n	800cde2 <xQueueGenericSendFromISR+0xc6>
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d12c      	bne.n	800ce3c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cde8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	68b9      	ldr	r1, [r7, #8]
 800cdf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdf2:	f000 f957 	bl	800d0a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfe:	d112      	bne.n	800ce26 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d016      	beq.n	800ce36 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	3324      	adds	r3, #36	; 0x24
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 ff0b 	bl	800dc28 <xTaskRemoveFromEventList>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00e      	beq.n	800ce36 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	e007      	b.n	800ce36 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	b25a      	sxtb	r2, r3
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce36:	2301      	movs	r3, #1
 800ce38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ce3a:	e001      	b.n	800ce40 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3738      	adds	r7, #56	; 0x38
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08e      	sub	sp, #56	; 0x38
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce66:	2300      	movs	r3, #0
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10b      	bne.n	800ce88 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	b672      	cpsid	i
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	b662      	cpsie	i
 800ce84:	623b      	str	r3, [r7, #32]
 800ce86:	e7fe      	b.n	800ce86 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00b      	beq.n	800cea8 <xQueueSemaphoreTake+0x54>
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	b672      	cpsid	i
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	b662      	cpsie	i
 800cea4:	61fb      	str	r3, [r7, #28]
 800cea6:	e7fe      	b.n	800cea6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cea8:	f001 f87e 	bl	800dfa8 <xTaskGetSchedulerState>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d102      	bne.n	800ceb8 <xQueueSemaphoreTake+0x64>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <xQueueSemaphoreTake+0x68>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e000      	b.n	800cebe <xQueueSemaphoreTake+0x6a>
 800cebc:	2300      	movs	r3, #0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10b      	bne.n	800ceda <xQueueSemaphoreTake+0x86>
 800cec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec6:	b672      	cpsid	i
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	b662      	cpsie	i
 800ced6:	61bb      	str	r3, [r7, #24]
 800ced8:	e7fe      	b.n	800ced8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ceda:	f001 fbad 	bl	800e638 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d024      	beq.n	800cf34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ceea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceec:	1e5a      	subs	r2, r3, #1
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d104      	bne.n	800cf04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cefa:	f001 fa17 	bl	800e32c <pvTaskIncrementMutexHeldCount>
 800cefe:	4602      	mov	r2, r0
 800cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00f      	beq.n	800cf2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	3310      	adds	r3, #16
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fe89 	bl	800dc28 <xTaskRemoveFromEventList>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d007      	beq.n	800cf2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf1c:	4b54      	ldr	r3, [pc, #336]	; (800d070 <xQueueSemaphoreTake+0x21c>)
 800cf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf2c:	f001 fbb6 	bl	800e69c <vPortExitCritical>
				return pdPASS;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e098      	b.n	800d066 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d112      	bne.n	800cf60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <xQueueSemaphoreTake+0x104>
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	b672      	cpsid	i
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	b662      	cpsie	i
 800cf54:	617b      	str	r3, [r7, #20]
 800cf56:	e7fe      	b.n	800cf56 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf58:	f001 fba0 	bl	800e69c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e082      	b.n	800d066 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d106      	bne.n	800cf74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf66:	f107 030c 	add.w	r3, r7, #12
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 fec0 	bl	800dcf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf70:	2301      	movs	r3, #1
 800cf72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf74:	f001 fb92 	bl	800e69c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf78:	f000 fc38 	bl	800d7ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf7c:	f001 fb5c 	bl	800e638 <vPortEnterCritical>
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf86:	b25b      	sxtb	r3, r3
 800cf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8c:	d103      	bne.n	800cf96 <xQueueSemaphoreTake+0x142>
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	2200      	movs	r2, #0
 800cf92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf9c:	b25b      	sxtb	r3, r3
 800cf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa2:	d103      	bne.n	800cfac <xQueueSemaphoreTake+0x158>
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfac:	f001 fb76 	bl	800e69c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfb0:	463a      	mov	r2, r7
 800cfb2:	f107 030c 	add.w	r3, r7, #12
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 feaf 	bl	800dd1c <xTaskCheckForTimeOut>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d132      	bne.n	800d02a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc6:	f000 f929 	bl	800d21c <prvIsQueueEmpty>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d026      	beq.n	800d01e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d109      	bne.n	800cfec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cfd8:	f001 fb2e 	bl	800e638 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f000 ffff 	bl	800dfe4 <xTaskPriorityInherit>
 800cfe6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cfe8:	f001 fb58 	bl	800e69c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfee:	3324      	adds	r3, #36	; 0x24
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	4611      	mov	r1, r2
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 fdf1 	bl	800dbdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cffc:	f000 f8bc 	bl	800d178 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d000:	f000 fc02 	bl	800d808 <xTaskResumeAll>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	f47f af67 	bne.w	800ceda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d00c:	4b18      	ldr	r3, [pc, #96]	; (800d070 <xQueueSemaphoreTake+0x21c>)
 800d00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	e75d      	b.n	800ceda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d01e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d020:	f000 f8aa 	bl	800d178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d024:	f000 fbf0 	bl	800d808 <xTaskResumeAll>
 800d028:	e757      	b.n	800ceda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d02a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02c:	f000 f8a4 	bl	800d178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d030:	f000 fbea 	bl	800d808 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d036:	f000 f8f1 	bl	800d21c <prvIsQueueEmpty>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f43f af4c 	beq.w	800ceda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00d      	beq.n	800d064 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d048:	f001 faf6 	bl	800e638 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d04c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d04e:	f000 f811 	bl	800d074 <prvGetDisinheritPriorityAfterTimeout>
 800d052:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 f8ca 	bl	800e1f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d060:	f001 fb1c 	bl	800e69c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d066:	4618      	mov	r0, r3
 800d068:	3738      	adds	r7, #56	; 0x38
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	e000ed04 	.word	0xe000ed04

0800d074 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	d006      	beq.n	800d092 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f1c3 0307 	rsb	r3, r3, #7
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e001      	b.n	800d096 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d092:	2300      	movs	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d096:	68fb      	ldr	r3, [r7, #12]
	}
 800d098:	4618      	mov	r0, r3
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10d      	bne.n	800d0de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d14d      	bne.n	800d166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 f808 	bl	800e0e4 <xTaskPriorityDisinherit>
 800d0d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	609a      	str	r2, [r3, #8]
 800d0dc:	e043      	b.n	800d166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d119      	bne.n	800d118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6858      	ldr	r0, [r3, #4]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	f001 fdd2 	bl	800ec98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fc:	441a      	add	r2, r3
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d32b      	bcc.n	800d166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	605a      	str	r2, [r3, #4]
 800d116:	e026      	b.n	800d166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	68d8      	ldr	r0, [r3, #12]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d120:	461a      	mov	r2, r3
 800d122:	68b9      	ldr	r1, [r7, #8]
 800d124:	f001 fdb8 	bl	800ec98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	68da      	ldr	r2, [r3, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d130:	425b      	negs	r3, r3
 800d132:	441a      	add	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	68da      	ldr	r2, [r3, #12]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	429a      	cmp	r2, r3
 800d142:	d207      	bcs.n	800d154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	689a      	ldr	r2, [r3, #8]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14c:	425b      	negs	r3, r3
 800d14e:	441a      	add	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b02      	cmp	r3, #2
 800d158:	d105      	bne.n	800d166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	3b01      	subs	r3, #1
 800d164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d16e:	697b      	ldr	r3, [r7, #20]
}
 800d170:	4618      	mov	r0, r3
 800d172:	3718      	adds	r7, #24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d180:	f001 fa5a 	bl	800e638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d18a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d18c:	e011      	b.n	800d1b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d192:	2b00      	cmp	r3, #0
 800d194:	d012      	beq.n	800d1bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3324      	adds	r3, #36	; 0x24
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fd44 	bl	800dc28 <xTaskRemoveFromEventList>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d1a6:	f000 fe1d 	bl	800dde4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	dce9      	bgt.n	800d18e <prvUnlockQueue+0x16>
 800d1ba:	e000      	b.n	800d1be <prvUnlockQueue+0x46>
					break;
 800d1bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	22ff      	movs	r2, #255	; 0xff
 800d1c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d1c6:	f001 fa69 	bl	800e69c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1ca:	f001 fa35 	bl	800e638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1d6:	e011      	b.n	800d1fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d012      	beq.n	800d206 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3310      	adds	r3, #16
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 fd1f 	bl	800dc28 <xTaskRemoveFromEventList>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1f0:	f000 fdf8 	bl	800dde4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1f4:	7bbb      	ldrb	r3, [r7, #14]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d200:	2b00      	cmp	r3, #0
 800d202:	dce9      	bgt.n	800d1d8 <prvUnlockQueue+0x60>
 800d204:	e000      	b.n	800d208 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d206:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	22ff      	movs	r2, #255	; 0xff
 800d20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d210:	f001 fa44 	bl	800e69c <vPortExitCritical>
}
 800d214:	bf00      	nop
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d224:	f001 fa08 	bl	800e638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d230:	2301      	movs	r3, #1
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e001      	b.n	800d23a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d236:	2300      	movs	r3, #0
 800d238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d23a:	f001 fa2f 	bl	800e69c <vPortExitCritical>

	return xReturn;
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d250:	f001 f9f2 	bl	800e638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d102      	bne.n	800d266 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	60fb      	str	r3, [r7, #12]
 800d264:	e001      	b.n	800d26a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d26a:	f001 fa17 	bl	800e69c <vPortExitCritical>

	return xReturn;
 800d26e:	68fb      	ldr	r3, [r7, #12]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08e      	sub	sp, #56	; 0x38
 800d27c:	af04      	add	r7, sp, #16
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10b      	bne.n	800d2a4 <xTaskCreateStatic+0x2c>
 800d28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d290:	b672      	cpsid	i
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	b662      	cpsie	i
 800d2a0:	623b      	str	r3, [r7, #32]
 800d2a2:	e7fe      	b.n	800d2a2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <xTaskCreateStatic+0x4a>
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	b672      	cpsid	i
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	b662      	cpsie	i
 800d2be:	61fb      	str	r3, [r7, #28]
 800d2c0:	e7fe      	b.n	800d2c0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d2c2:	2358      	movs	r3, #88	; 0x58
 800d2c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	2b58      	cmp	r3, #88	; 0x58
 800d2ca:	d00b      	beq.n	800d2e4 <xTaskCreateStatic+0x6c>
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	b672      	cpsid	i
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	b662      	cpsie	i
 800d2e0:	61bb      	str	r3, [r7, #24]
 800d2e2:	e7fe      	b.n	800d2e2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d2e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01e      	beq.n	800d32a <xTaskCreateStatic+0xb2>
 800d2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d01b      	beq.n	800d32a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	2202      	movs	r2, #2
 800d300:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d304:	2300      	movs	r3, #0
 800d306:	9303      	str	r3, [sp, #12]
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	9302      	str	r3, [sp, #8]
 800d30c:	f107 0314 	add.w	r3, r7, #20
 800d310:	9301      	str	r3, [sp, #4]
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f850 	bl	800d3c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d324:	f000 f8e0 	bl	800d4e8 <prvAddNewTaskToReadyList>
 800d328:	e001      	b.n	800d32e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d32e:	697b      	ldr	r3, [r7, #20]
	}
 800d330:	4618      	mov	r0, r3
 800d332:	3728      	adds	r7, #40	; 0x28
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b08c      	sub	sp, #48	; 0x30
 800d33c:	af04      	add	r7, sp, #16
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	603b      	str	r3, [r7, #0]
 800d344:	4613      	mov	r3, r2
 800d346:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d348:	88fb      	ldrh	r3, [r7, #6]
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f001 fa95 	bl	800e87c <pvPortMalloc>
 800d352:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00e      	beq.n	800d378 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d35a:	2058      	movs	r0, #88	; 0x58
 800d35c:	f001 fa8e 	bl	800e87c <pvPortMalloc>
 800d360:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	631a      	str	r2, [r3, #48]	; 0x30
 800d36e:	e005      	b.n	800d37c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d370:	6978      	ldr	r0, [r7, #20]
 800d372:	f001 fb4f 	bl	800ea14 <vPortFree>
 800d376:	e001      	b.n	800d37c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d378:	2300      	movs	r3, #0
 800d37a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d017      	beq.n	800d3b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d38a:	88fa      	ldrh	r2, [r7, #6]
 800d38c:	2300      	movs	r3, #0
 800d38e:	9303      	str	r3, [sp, #12]
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	9302      	str	r3, [sp, #8]
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 f80e 	bl	800d3c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3a6:	69f8      	ldr	r0, [r7, #28]
 800d3a8:	f000 f89e 	bl	800d4e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	61bb      	str	r3, [r7, #24]
 800d3b0:	e002      	b.n	800d3b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3b8:	69bb      	ldr	r3, [r7, #24]
	}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b088      	sub	sp, #32
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	60f8      	str	r0, [r7, #12]
 800d3ca:	60b9      	str	r1, [r7, #8]
 800d3cc:	607a      	str	r2, [r7, #4]
 800d3ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	461a      	mov	r2, r3
 800d3da:	21a5      	movs	r1, #165	; 0xa5
 800d3dc:	f001 fc67 	bl	800ecae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3e4:	6879      	ldr	r1, [r7, #4]
 800d3e6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d3ea:	440b      	add	r3, r1
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	f023 0307 	bic.w	r3, r3, #7
 800d3f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	f003 0307 	and.w	r3, r3, #7
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00b      	beq.n	800d41c <prvInitialiseNewTask+0x5a>
 800d404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d408:	b672      	cpsid	i
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	b662      	cpsie	i
 800d418:	617b      	str	r3, [r7, #20]
 800d41a:	e7fe      	b.n	800d41a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d01f      	beq.n	800d462 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d422:	2300      	movs	r3, #0
 800d424:	61fb      	str	r3, [r7, #28]
 800d426:	e012      	b.n	800d44e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	4413      	add	r3, r2
 800d42e:	7819      	ldrb	r1, [r3, #0]
 800d430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	4413      	add	r3, r2
 800d436:	3334      	adds	r3, #52	; 0x34
 800d438:	460a      	mov	r2, r1
 800d43a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	4413      	add	r3, r2
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	3301      	adds	r3, #1
 800d44c:	61fb      	str	r3, [r7, #28]
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	2b0f      	cmp	r3, #15
 800d452:	d9e9      	bls.n	800d428 <prvInitialiseNewTask+0x66>
 800d454:	e000      	b.n	800d458 <prvInitialiseNewTask+0x96>
			{
				break;
 800d456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d460:	e003      	b.n	800d46a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46c:	2b06      	cmp	r3, #6
 800d46e:	d901      	bls.n	800d474 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d470:	2306      	movs	r3, #6
 800d472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d47e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	2200      	movs	r2, #0
 800d484:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	3304      	adds	r3, #4
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7ff f91c 	bl	800c6c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d492:	3318      	adds	r3, #24
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff f917 	bl	800c6c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d49e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a2:	f1c3 0207 	rsb	r2, r3, #7
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	68f9      	ldr	r1, [r7, #12]
 800d4c8:	69b8      	ldr	r0, [r7, #24]
 800d4ca:	f000 ffa9 	bl	800e420 <pxPortInitialiseStack>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4e0:	bf00      	nop
 800d4e2:	3720      	adds	r7, #32
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d4f0:	f001 f8a2 	bl	800e638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d4f4:	4b2a      	ldr	r3, [pc, #168]	; (800d5a0 <prvAddNewTaskToReadyList+0xb8>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	4a29      	ldr	r2, [pc, #164]	; (800d5a0 <prvAddNewTaskToReadyList+0xb8>)
 800d4fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d4fe:	4b29      	ldr	r3, [pc, #164]	; (800d5a4 <prvAddNewTaskToReadyList+0xbc>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d109      	bne.n	800d51a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d506:	4a27      	ldr	r2, [pc, #156]	; (800d5a4 <prvAddNewTaskToReadyList+0xbc>)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d50c:	4b24      	ldr	r3, [pc, #144]	; (800d5a0 <prvAddNewTaskToReadyList+0xb8>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d110      	bne.n	800d536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d514:	f000 fc8c 	bl	800de30 <prvInitialiseTaskLists>
 800d518:	e00d      	b.n	800d536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d51a:	4b23      	ldr	r3, [pc, #140]	; (800d5a8 <prvAddNewTaskToReadyList+0xc0>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d109      	bne.n	800d536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d522:	4b20      	ldr	r3, [pc, #128]	; (800d5a4 <prvAddNewTaskToReadyList+0xbc>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d802      	bhi.n	800d536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d530:	4a1c      	ldr	r2, [pc, #112]	; (800d5a4 <prvAddNewTaskToReadyList+0xbc>)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d536:	4b1d      	ldr	r3, [pc, #116]	; (800d5ac <prvAddNewTaskToReadyList+0xc4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3301      	adds	r3, #1
 800d53c:	4a1b      	ldr	r2, [pc, #108]	; (800d5ac <prvAddNewTaskToReadyList+0xc4>)
 800d53e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d544:	2201      	movs	r2, #1
 800d546:	409a      	lsls	r2, r3
 800d548:	4b19      	ldr	r3, [pc, #100]	; (800d5b0 <prvAddNewTaskToReadyList+0xc8>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	4a18      	ldr	r2, [pc, #96]	; (800d5b0 <prvAddNewTaskToReadyList+0xc8>)
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d556:	4613      	mov	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4a15      	ldr	r2, [pc, #84]	; (800d5b4 <prvAddNewTaskToReadyList+0xcc>)
 800d560:	441a      	add	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3304      	adds	r3, #4
 800d566:	4619      	mov	r1, r3
 800d568:	4610      	mov	r0, r2
 800d56a:	f7ff f8ba 	bl	800c6e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d56e:	f001 f895 	bl	800e69c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d572:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <prvAddNewTaskToReadyList+0xc0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00e      	beq.n	800d598 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d57a:	4b0a      	ldr	r3, [pc, #40]	; (800d5a4 <prvAddNewTaskToReadyList+0xbc>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	429a      	cmp	r2, r3
 800d586:	d207      	bcs.n	800d598 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d588:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <prvAddNewTaskToReadyList+0xd0>)
 800d58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	200006a8 	.word	0x200006a8
 800d5a4:	200005a8 	.word	0x200005a8
 800d5a8:	200006b4 	.word	0x200006b4
 800d5ac:	200006c4 	.word	0x200006c4
 800d5b0:	200006b0 	.word	0x200006b0
 800d5b4:	200005ac 	.word	0x200005ac
 800d5b8:	e000ed04 	.word	0xe000ed04

0800d5bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08a      	sub	sp, #40	; 0x28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10b      	bne.n	800d5e8 <vTaskDelayUntil+0x2c>
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	b672      	cpsid	i
 800d5d6:	f383 8811 	msr	BASEPRI, r3
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	b662      	cpsie	i
 800d5e4:	617b      	str	r3, [r7, #20]
 800d5e6:	e7fe      	b.n	800d5e6 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10b      	bne.n	800d606 <vTaskDelayUntil+0x4a>
 800d5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f2:	b672      	cpsid	i
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	b662      	cpsie	i
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	e7fe      	b.n	800d604 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800d606:	4b2a      	ldr	r3, [pc, #168]	; (800d6b0 <vTaskDelayUntil+0xf4>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00b      	beq.n	800d626 <vTaskDelayUntil+0x6a>
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	b672      	cpsid	i
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	b662      	cpsie	i
 800d622:	60fb      	str	r3, [r7, #12]
 800d624:	e7fe      	b.n	800d624 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800d626:	f000 f8e1 	bl	800d7ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d62a:	4b22      	ldr	r3, [pc, #136]	; (800d6b4 <vTaskDelayUntil+0xf8>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	4413      	add	r3, r2
 800d638:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	6a3a      	ldr	r2, [r7, #32]
 800d640:	429a      	cmp	r2, r3
 800d642:	d20b      	bcs.n	800d65c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	69fa      	ldr	r2, [r7, #28]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d211      	bcs.n	800d672 <vTaskDelayUntil+0xb6>
 800d64e:	69fa      	ldr	r2, [r7, #28]
 800d650:	6a3b      	ldr	r3, [r7, #32]
 800d652:	429a      	cmp	r2, r3
 800d654:	d90d      	bls.n	800d672 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d656:	2301      	movs	r3, #1
 800d658:	627b      	str	r3, [r7, #36]	; 0x24
 800d65a:	e00a      	b.n	800d672 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	69fa      	ldr	r2, [r7, #28]
 800d662:	429a      	cmp	r2, r3
 800d664:	d303      	bcc.n	800d66e <vTaskDelayUntil+0xb2>
 800d666:	69fa      	ldr	r2, [r7, #28]
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d901      	bls.n	800d672 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d66e:	2301      	movs	r3, #1
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	69fa      	ldr	r2, [r7, #28]
 800d676:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d006      	beq.n	800d68c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d67e:	69fa      	ldr	r2, [r7, #28]
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	2100      	movs	r1, #0
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fe64 	bl	800e354 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d68c:	f000 f8bc 	bl	800d808 <xTaskResumeAll>
 800d690:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d107      	bne.n	800d6a8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d698:	4b07      	ldr	r3, [pc, #28]	; (800d6b8 <vTaskDelayUntil+0xfc>)
 800d69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6a8:	bf00      	nop
 800d6aa:	3728      	adds	r7, #40	; 0x28
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	200006d0 	.word	0x200006d0
 800d6b4:	200006ac 	.word	0x200006ac
 800d6b8:	e000ed04 	.word	0xe000ed04

0800d6bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d018      	beq.n	800d700 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d6ce:	4b14      	ldr	r3, [pc, #80]	; (800d720 <vTaskDelay+0x64>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <vTaskDelay+0x32>
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	b672      	cpsid	i
 800d6dc:	f383 8811 	msr	BASEPRI, r3
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	b662      	cpsie	i
 800d6ea:	60bb      	str	r3, [r7, #8]
 800d6ec:	e7fe      	b.n	800d6ec <vTaskDelay+0x30>
			vTaskSuspendAll();
 800d6ee:	f000 f87d 	bl	800d7ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fe2d 	bl	800e354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6fa:	f000 f885 	bl	800d808 <xTaskResumeAll>
 800d6fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d107      	bne.n	800d716 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d706:	4b07      	ldr	r3, [pc, #28]	; (800d724 <vTaskDelay+0x68>)
 800d708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d716:	bf00      	nop
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	200006d0 	.word	0x200006d0
 800d724:	e000ed04 	.word	0xe000ed04

0800d728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08a      	sub	sp, #40	; 0x28
 800d72c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d732:	2300      	movs	r3, #0
 800d734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d736:	463a      	mov	r2, r7
 800d738:	1d39      	adds	r1, r7, #4
 800d73a:	f107 0308 	add.w	r3, r7, #8
 800d73e:	4618      	mov	r0, r3
 800d740:	f7f2 ff50 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68ba      	ldr	r2, [r7, #8]
 800d74a:	9202      	str	r2, [sp, #8]
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	2300      	movs	r3, #0
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	2300      	movs	r3, #0
 800d754:	460a      	mov	r2, r1
 800d756:	491f      	ldr	r1, [pc, #124]	; (800d7d4 <vTaskStartScheduler+0xac>)
 800d758:	481f      	ldr	r0, [pc, #124]	; (800d7d8 <vTaskStartScheduler+0xb0>)
 800d75a:	f7ff fd8d 	bl	800d278 <xTaskCreateStatic>
 800d75e:	4602      	mov	r2, r0
 800d760:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <vTaskStartScheduler+0xb4>)
 800d762:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d764:	4b1d      	ldr	r3, [pc, #116]	; (800d7dc <vTaskStartScheduler+0xb4>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d76c:	2301      	movs	r3, #1
 800d76e:	617b      	str	r3, [r7, #20]
 800d770:	e001      	b.n	800d776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d117      	bne.n	800d7ac <vTaskStartScheduler+0x84>
 800d77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d780:	b672      	cpsid	i
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	b662      	cpsie	i
 800d790:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d792:	4b13      	ldr	r3, [pc, #76]	; (800d7e0 <vTaskStartScheduler+0xb8>)
 800d794:	f04f 32ff 	mov.w	r2, #4294967295
 800d798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d79a:	4b12      	ldr	r3, [pc, #72]	; (800d7e4 <vTaskStartScheduler+0xbc>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7a0:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <vTaskStartScheduler+0xc0>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7a6:	f000 fecb 	bl	800e540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7aa:	e00f      	b.n	800d7cc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b2:	d10b      	bne.n	800d7cc <vTaskStartScheduler+0xa4>
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	b672      	cpsid	i
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	b662      	cpsie	i
 800d7c8:	60fb      	str	r3, [r7, #12]
 800d7ca:	e7fe      	b.n	800d7ca <vTaskStartScheduler+0xa2>
}
 800d7cc:	bf00      	nop
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	0800f668 	.word	0x0800f668
 800d7d8:	0800ddfd 	.word	0x0800ddfd
 800d7dc:	200006cc 	.word	0x200006cc
 800d7e0:	200006c8 	.word	0x200006c8
 800d7e4:	200006b4 	.word	0x200006b4
 800d7e8:	200006ac 	.word	0x200006ac

0800d7ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d7f0:	4b04      	ldr	r3, [pc, #16]	; (800d804 <vTaskSuspendAll+0x18>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	4a03      	ldr	r2, [pc, #12]	; (800d804 <vTaskSuspendAll+0x18>)
 800d7f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d7fa:	bf00      	nop
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr
 800d804:	200006d0 	.word	0x200006d0

0800d808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d812:	2300      	movs	r3, #0
 800d814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d816:	4b42      	ldr	r3, [pc, #264]	; (800d920 <xTaskResumeAll+0x118>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10b      	bne.n	800d836 <xTaskResumeAll+0x2e>
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	b672      	cpsid	i
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	b662      	cpsie	i
 800d832:	603b      	str	r3, [r7, #0]
 800d834:	e7fe      	b.n	800d834 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d836:	f000 feff 	bl	800e638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d83a:	4b39      	ldr	r3, [pc, #228]	; (800d920 <xTaskResumeAll+0x118>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3b01      	subs	r3, #1
 800d840:	4a37      	ldr	r2, [pc, #220]	; (800d920 <xTaskResumeAll+0x118>)
 800d842:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d844:	4b36      	ldr	r3, [pc, #216]	; (800d920 <xTaskResumeAll+0x118>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d161      	bne.n	800d910 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d84c:	4b35      	ldr	r3, [pc, #212]	; (800d924 <xTaskResumeAll+0x11c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d05d      	beq.n	800d910 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d854:	e02e      	b.n	800d8b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d856:	4b34      	ldr	r3, [pc, #208]	; (800d928 <xTaskResumeAll+0x120>)
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3318      	adds	r3, #24
 800d862:	4618      	mov	r0, r3
 800d864:	f7fe ff9a 	bl	800c79c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	3304      	adds	r3, #4
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe ff95 	bl	800c79c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	2201      	movs	r2, #1
 800d878:	409a      	lsls	r2, r3
 800d87a:	4b2c      	ldr	r3, [pc, #176]	; (800d92c <xTaskResumeAll+0x124>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4313      	orrs	r3, r2
 800d880:	4a2a      	ldr	r2, [pc, #168]	; (800d92c <xTaskResumeAll+0x124>)
 800d882:	6013      	str	r3, [r2, #0]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4a27      	ldr	r2, [pc, #156]	; (800d930 <xTaskResumeAll+0x128>)
 800d892:	441a      	add	r2, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	3304      	adds	r3, #4
 800d898:	4619      	mov	r1, r3
 800d89a:	4610      	mov	r0, r2
 800d89c:	f7fe ff21 	bl	800c6e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a4:	4b23      	ldr	r3, [pc, #140]	; (800d934 <xTaskResumeAll+0x12c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d302      	bcc.n	800d8b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d8ae:	4b22      	ldr	r3, [pc, #136]	; (800d938 <xTaskResumeAll+0x130>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8b4:	4b1c      	ldr	r3, [pc, #112]	; (800d928 <xTaskResumeAll+0x120>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1cc      	bne.n	800d856 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8c2:	f000 fb51 	bl	800df68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d8c6:	4b1d      	ldr	r3, [pc, #116]	; (800d93c <xTaskResumeAll+0x134>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d010      	beq.n	800d8f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8d2:	f000 f847 	bl	800d964 <xTaskIncrementTick>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d8dc:	4b16      	ldr	r3, [pc, #88]	; (800d938 <xTaskResumeAll+0x130>)
 800d8de:	2201      	movs	r2, #1
 800d8e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1f1      	bne.n	800d8d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800d8ee:	4b13      	ldr	r3, [pc, #76]	; (800d93c <xTaskResumeAll+0x134>)
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8f4:	4b10      	ldr	r3, [pc, #64]	; (800d938 <xTaskResumeAll+0x130>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d009      	beq.n	800d910 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d900:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <xTaskResumeAll+0x138>)
 800d902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d910:	f000 fec4 	bl	800e69c <vPortExitCritical>

	return xAlreadyYielded;
 800d914:	68bb      	ldr	r3, [r7, #8]
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	200006d0 	.word	0x200006d0
 800d924:	200006a8 	.word	0x200006a8
 800d928:	20000668 	.word	0x20000668
 800d92c:	200006b0 	.word	0x200006b0
 800d930:	200005ac 	.word	0x200005ac
 800d934:	200005a8 	.word	0x200005a8
 800d938:	200006bc 	.word	0x200006bc
 800d93c:	200006b8 	.word	0x200006b8
 800d940:	e000ed04 	.word	0xe000ed04

0800d944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d94a:	4b05      	ldr	r3, [pc, #20]	; (800d960 <xTaskGetTickCount+0x1c>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d950:	687b      	ldr	r3, [r7, #4]
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	200006ac 	.word	0x200006ac

0800d964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d96a:	2300      	movs	r3, #0
 800d96c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d96e:	4b4f      	ldr	r3, [pc, #316]	; (800daac <xTaskIncrementTick+0x148>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	f040 8089 	bne.w	800da8a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d978:	4b4d      	ldr	r3, [pc, #308]	; (800dab0 <xTaskIncrementTick+0x14c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d980:	4a4b      	ldr	r2, [pc, #300]	; (800dab0 <xTaskIncrementTick+0x14c>)
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d121      	bne.n	800d9d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d98c:	4b49      	ldr	r3, [pc, #292]	; (800dab4 <xTaskIncrementTick+0x150>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00b      	beq.n	800d9ae <xTaskIncrementTick+0x4a>
 800d996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99a:	b672      	cpsid	i
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	b662      	cpsie	i
 800d9aa:	603b      	str	r3, [r7, #0]
 800d9ac:	e7fe      	b.n	800d9ac <xTaskIncrementTick+0x48>
 800d9ae:	4b41      	ldr	r3, [pc, #260]	; (800dab4 <xTaskIncrementTick+0x150>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	4b40      	ldr	r3, [pc, #256]	; (800dab8 <xTaskIncrementTick+0x154>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a3e      	ldr	r2, [pc, #248]	; (800dab4 <xTaskIncrementTick+0x150>)
 800d9ba:	6013      	str	r3, [r2, #0]
 800d9bc:	4a3e      	ldr	r2, [pc, #248]	; (800dab8 <xTaskIncrementTick+0x154>)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	4b3e      	ldr	r3, [pc, #248]	; (800dabc <xTaskIncrementTick+0x158>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	4a3c      	ldr	r2, [pc, #240]	; (800dabc <xTaskIncrementTick+0x158>)
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	f000 facc 	bl	800df68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9d0:	4b3b      	ldr	r3, [pc, #236]	; (800dac0 <xTaskIncrementTick+0x15c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d348      	bcc.n	800da6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9da:	4b36      	ldr	r3, [pc, #216]	; (800dab4 <xTaskIncrementTick+0x150>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d104      	bne.n	800d9ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9e4:	4b36      	ldr	r3, [pc, #216]	; (800dac0 <xTaskIncrementTick+0x15c>)
 800d9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ea:	601a      	str	r2, [r3, #0]
					break;
 800d9ec:	e03e      	b.n	800da6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ee:	4b31      	ldr	r3, [pc, #196]	; (800dab4 <xTaskIncrementTick+0x150>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9fe:	693a      	ldr	r2, [r7, #16]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	429a      	cmp	r2, r3
 800da04:	d203      	bcs.n	800da0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da06:	4a2e      	ldr	r2, [pc, #184]	; (800dac0 <xTaskIncrementTick+0x15c>)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da0c:	e02e      	b.n	800da6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	3304      	adds	r3, #4
 800da12:	4618      	mov	r0, r3
 800da14:	f7fe fec2 	bl	800c79c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d004      	beq.n	800da2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	3318      	adds	r3, #24
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe feb9 	bl	800c79c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2e:	2201      	movs	r2, #1
 800da30:	409a      	lsls	r2, r3
 800da32:	4b24      	ldr	r3, [pc, #144]	; (800dac4 <xTaskIncrementTick+0x160>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4313      	orrs	r3, r2
 800da38:	4a22      	ldr	r2, [pc, #136]	; (800dac4 <xTaskIncrementTick+0x160>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4a1f      	ldr	r2, [pc, #124]	; (800dac8 <xTaskIncrementTick+0x164>)
 800da4a:	441a      	add	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	3304      	adds	r3, #4
 800da50:	4619      	mov	r1, r3
 800da52:	4610      	mov	r0, r2
 800da54:	f7fe fe45 	bl	800c6e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5c:	4b1b      	ldr	r3, [pc, #108]	; (800dacc <xTaskIncrementTick+0x168>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da62:	429a      	cmp	r2, r3
 800da64:	d3b9      	bcc.n	800d9da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800da66:	2301      	movs	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da6a:	e7b6      	b.n	800d9da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da6c:	4b17      	ldr	r3, [pc, #92]	; (800dacc <xTaskIncrementTick+0x168>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da72:	4915      	ldr	r1, [pc, #84]	; (800dac8 <xTaskIncrementTick+0x164>)
 800da74:	4613      	mov	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	009b      	lsls	r3, r3, #2
 800da7c:	440b      	add	r3, r1
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d907      	bls.n	800da94 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800da84:	2301      	movs	r3, #1
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	e004      	b.n	800da94 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800da8a:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <xTaskIncrementTick+0x16c>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	3301      	adds	r3, #1
 800da90:	4a0f      	ldr	r2, [pc, #60]	; (800dad0 <xTaskIncrementTick+0x16c>)
 800da92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800da94:	4b0f      	ldr	r3, [pc, #60]	; (800dad4 <xTaskIncrementTick+0x170>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800da9c:	2301      	movs	r3, #1
 800da9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800daa0:	697b      	ldr	r3, [r7, #20]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3718      	adds	r7, #24
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	200006d0 	.word	0x200006d0
 800dab0:	200006ac 	.word	0x200006ac
 800dab4:	20000660 	.word	0x20000660
 800dab8:	20000664 	.word	0x20000664
 800dabc:	200006c0 	.word	0x200006c0
 800dac0:	200006c8 	.word	0x200006c8
 800dac4:	200006b0 	.word	0x200006b0
 800dac8:	200005ac 	.word	0x200005ac
 800dacc:	200005a8 	.word	0x200005a8
 800dad0:	200006b8 	.word	0x200006b8
 800dad4:	200006bc 	.word	0x200006bc

0800dad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b088      	sub	sp, #32
 800dadc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dade:	4b3a      	ldr	r3, [pc, #232]	; (800dbc8 <vTaskSwitchContext+0xf0>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dae6:	4b39      	ldr	r3, [pc, #228]	; (800dbcc <vTaskSwitchContext+0xf4>)
 800dae8:	2201      	movs	r2, #1
 800daea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800daec:	e067      	b.n	800dbbe <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800daee:	4b37      	ldr	r3, [pc, #220]	; (800dbcc <vTaskSwitchContext+0xf4>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800daf4:	4b36      	ldr	r3, [pc, #216]	; (800dbd0 <vTaskSwitchContext+0xf8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafa:	61fb      	str	r3, [r7, #28]
 800dafc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800db00:	61bb      	str	r3, [r7, #24]
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	69ba      	ldr	r2, [r7, #24]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d111      	bne.n	800db30 <vTaskSwitchContext+0x58>
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	3304      	adds	r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	69ba      	ldr	r2, [r7, #24]
 800db14:	429a      	cmp	r2, r3
 800db16:	d10b      	bne.n	800db30 <vTaskSwitchContext+0x58>
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	3308      	adds	r3, #8
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	429a      	cmp	r2, r3
 800db22:	d105      	bne.n	800db30 <vTaskSwitchContext+0x58>
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	330c      	adds	r3, #12
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	69ba      	ldr	r2, [r7, #24]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d008      	beq.n	800db42 <vTaskSwitchContext+0x6a>
 800db30:	4b27      	ldr	r3, [pc, #156]	; (800dbd0 <vTaskSwitchContext+0xf8>)
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	4b26      	ldr	r3, [pc, #152]	; (800dbd0 <vTaskSwitchContext+0xf8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3334      	adds	r3, #52	; 0x34
 800db3a:	4619      	mov	r1, r3
 800db3c:	4610      	mov	r0, r2
 800db3e:	f7f2 fd3e 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db42:	4b24      	ldr	r3, [pc, #144]	; (800dbd4 <vTaskSwitchContext+0xfc>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	fab3 f383 	clz	r3, r3
 800db4e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800db50:	7afb      	ldrb	r3, [r7, #11]
 800db52:	f1c3 031f 	rsb	r3, r3, #31
 800db56:	617b      	str	r3, [r7, #20]
 800db58:	491f      	ldr	r1, [pc, #124]	; (800dbd8 <vTaskSwitchContext+0x100>)
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	4613      	mov	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	440b      	add	r3, r1
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10b      	bne.n	800db84 <vTaskSwitchContext+0xac>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	b672      	cpsid	i
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	b662      	cpsie	i
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	e7fe      	b.n	800db82 <vTaskSwitchContext+0xaa>
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	4613      	mov	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	4413      	add	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4a12      	ldr	r2, [pc, #72]	; (800dbd8 <vTaskSwitchContext+0x100>)
 800db90:	4413      	add	r3, r2
 800db92:	613b      	str	r3, [r7, #16]
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	605a      	str	r2, [r3, #4]
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	3308      	adds	r3, #8
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d104      	bne.n	800dbb4 <vTaskSwitchContext+0xdc>
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	605a      	str	r2, [r3, #4]
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	4a05      	ldr	r2, [pc, #20]	; (800dbd0 <vTaskSwitchContext+0xf8>)
 800dbbc:	6013      	str	r3, [r2, #0]
}
 800dbbe:	bf00      	nop
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	200006d0 	.word	0x200006d0
 800dbcc:	200006bc 	.word	0x200006bc
 800dbd0:	200005a8 	.word	0x200005a8
 800dbd4:	200006b0 	.word	0x200006b0
 800dbd8:	200005ac 	.word	0x200005ac

0800dbdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10b      	bne.n	800dc04 <vTaskPlaceOnEventList+0x28>
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	b672      	cpsid	i
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	b662      	cpsie	i
 800dc00:	60fb      	str	r3, [r7, #12]
 800dc02:	e7fe      	b.n	800dc02 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc04:	4b07      	ldr	r3, [pc, #28]	; (800dc24 <vTaskPlaceOnEventList+0x48>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3318      	adds	r3, #24
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7fe fd8c 	bl	800c72a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc12:	2101      	movs	r1, #1
 800dc14:	6838      	ldr	r0, [r7, #0]
 800dc16:	f000 fb9d 	bl	800e354 <prvAddCurrentTaskToDelayedList>
}
 800dc1a:	bf00      	nop
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	200005a8 	.word	0x200005a8

0800dc28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d10b      	bne.n	800dc56 <xTaskRemoveFromEventList+0x2e>
 800dc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc42:	b672      	cpsid	i
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	b662      	cpsie	i
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e7fe      	b.n	800dc54 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	3318      	adds	r3, #24
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fe fd9e 	bl	800c79c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc60:	4b1d      	ldr	r3, [pc, #116]	; (800dcd8 <xTaskRemoveFromEventList+0xb0>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d11c      	bne.n	800dca2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7fe fd95 	bl	800c79c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc76:	2201      	movs	r2, #1
 800dc78:	409a      	lsls	r2, r3
 800dc7a:	4b18      	ldr	r3, [pc, #96]	; (800dcdc <xTaskRemoveFromEventList+0xb4>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	4a16      	ldr	r2, [pc, #88]	; (800dcdc <xTaskRemoveFromEventList+0xb4>)
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc88:	4613      	mov	r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4a13      	ldr	r2, [pc, #76]	; (800dce0 <xTaskRemoveFromEventList+0xb8>)
 800dc92:	441a      	add	r2, r3
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	f7fe fd21 	bl	800c6e2 <vListInsertEnd>
 800dca0:	e005      	b.n	800dcae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	3318      	adds	r3, #24
 800dca6:	4619      	mov	r1, r3
 800dca8:	480e      	ldr	r0, [pc, #56]	; (800dce4 <xTaskRemoveFromEventList+0xbc>)
 800dcaa:	f7fe fd1a 	bl	800c6e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	; (800dce8 <xTaskRemoveFromEventList+0xc0>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d905      	bls.n	800dcc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dcc0:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <xTaskRemoveFromEventList+0xc4>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	e001      	b.n	800dccc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dccc:	697b      	ldr	r3, [r7, #20]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200006d0 	.word	0x200006d0
 800dcdc:	200006b0 	.word	0x200006b0
 800dce0:	200005ac 	.word	0x200005ac
 800dce4:	20000668 	.word	0x20000668
 800dce8:	200005a8 	.word	0x200005a8
 800dcec:	200006bc 	.word	0x200006bc

0800dcf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcf8:	4b06      	ldr	r3, [pc, #24]	; (800dd14 <vTaskInternalSetTimeOutState+0x24>)
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd00:	4b05      	ldr	r3, [pc, #20]	; (800dd18 <vTaskInternalSetTimeOutState+0x28>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	605a      	str	r2, [r3, #4]
}
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	200006c0 	.word	0x200006c0
 800dd18:	200006ac 	.word	0x200006ac

0800dd1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10b      	bne.n	800dd44 <xTaskCheckForTimeOut+0x28>
 800dd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd30:	b672      	cpsid	i
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	b662      	cpsie	i
 800dd40:	613b      	str	r3, [r7, #16]
 800dd42:	e7fe      	b.n	800dd42 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10b      	bne.n	800dd62 <xTaskCheckForTimeOut+0x46>
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	b672      	cpsid	i
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	b662      	cpsie	i
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e7fe      	b.n	800dd60 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800dd62:	f000 fc69 	bl	800e638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd66:	4b1d      	ldr	r3, [pc, #116]	; (800dddc <xTaskCheckForTimeOut+0xc0>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	69ba      	ldr	r2, [r7, #24]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7e:	d102      	bne.n	800dd86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd80:	2300      	movs	r3, #0
 800dd82:	61fb      	str	r3, [r7, #28]
 800dd84:	e023      	b.n	800ddce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	4b15      	ldr	r3, [pc, #84]	; (800dde0 <xTaskCheckForTimeOut+0xc4>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d007      	beq.n	800dda2 <xTaskCheckForTimeOut+0x86>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	69ba      	ldr	r2, [r7, #24]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d302      	bcc.n	800dda2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	e015      	b.n	800ddce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d20b      	bcs.n	800ddc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	1ad2      	subs	r2, r2, r3
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ff99 	bl	800dcf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	61fb      	str	r3, [r7, #28]
 800ddc2:	e004      	b.n	800ddce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ddce:	f000 fc65 	bl	800e69c <vPortExitCritical>

	return xReturn;
 800ddd2:	69fb      	ldr	r3, [r7, #28]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3720      	adds	r7, #32
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	200006ac 	.word	0x200006ac
 800dde0:	200006c0 	.word	0x200006c0

0800dde4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dde4:	b480      	push	{r7}
 800dde6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dde8:	4b03      	ldr	r3, [pc, #12]	; (800ddf8 <vTaskMissedYield+0x14>)
 800ddea:	2201      	movs	r2, #1
 800ddec:	601a      	str	r2, [r3, #0]
}
 800ddee:	bf00      	nop
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	200006bc 	.word	0x200006bc

0800ddfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de04:	f000 f854 	bl	800deb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de08:	4b07      	ldr	r3, [pc, #28]	; (800de28 <prvIdleTask+0x2c>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d907      	bls.n	800de20 <prvIdleTask+0x24>
			{
				taskYIELD();
 800de10:	4b06      	ldr	r3, [pc, #24]	; (800de2c <prvIdleTask+0x30>)
 800de12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de16:	601a      	str	r2, [r3, #0]
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800de20:	f7f2 fbc6 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800de24:	e7ee      	b.n	800de04 <prvIdleTask+0x8>
 800de26:	bf00      	nop
 800de28:	200005ac 	.word	0x200005ac
 800de2c:	e000ed04 	.word	0xe000ed04

0800de30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de36:	2300      	movs	r3, #0
 800de38:	607b      	str	r3, [r7, #4]
 800de3a:	e00c      	b.n	800de56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4a12      	ldr	r2, [pc, #72]	; (800de90 <prvInitialiseTaskLists+0x60>)
 800de48:	4413      	add	r3, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe fc1c 	bl	800c688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	3301      	adds	r3, #1
 800de54:	607b      	str	r3, [r7, #4]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b06      	cmp	r3, #6
 800de5a:	d9ef      	bls.n	800de3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de5c:	480d      	ldr	r0, [pc, #52]	; (800de94 <prvInitialiseTaskLists+0x64>)
 800de5e:	f7fe fc13 	bl	800c688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de62:	480d      	ldr	r0, [pc, #52]	; (800de98 <prvInitialiseTaskLists+0x68>)
 800de64:	f7fe fc10 	bl	800c688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de68:	480c      	ldr	r0, [pc, #48]	; (800de9c <prvInitialiseTaskLists+0x6c>)
 800de6a:	f7fe fc0d 	bl	800c688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de6e:	480c      	ldr	r0, [pc, #48]	; (800dea0 <prvInitialiseTaskLists+0x70>)
 800de70:	f7fe fc0a 	bl	800c688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de74:	480b      	ldr	r0, [pc, #44]	; (800dea4 <prvInitialiseTaskLists+0x74>)
 800de76:	f7fe fc07 	bl	800c688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de7a:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <prvInitialiseTaskLists+0x78>)
 800de7c:	4a05      	ldr	r2, [pc, #20]	; (800de94 <prvInitialiseTaskLists+0x64>)
 800de7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de80:	4b0a      	ldr	r3, [pc, #40]	; (800deac <prvInitialiseTaskLists+0x7c>)
 800de82:	4a05      	ldr	r2, [pc, #20]	; (800de98 <prvInitialiseTaskLists+0x68>)
 800de84:	601a      	str	r2, [r3, #0]
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	200005ac 	.word	0x200005ac
 800de94:	20000638 	.word	0x20000638
 800de98:	2000064c 	.word	0x2000064c
 800de9c:	20000668 	.word	0x20000668
 800dea0:	2000067c 	.word	0x2000067c
 800dea4:	20000694 	.word	0x20000694
 800dea8:	20000660 	.word	0x20000660
 800deac:	20000664 	.word	0x20000664

0800deb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800deb6:	e019      	b.n	800deec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800deb8:	f000 fbbe 	bl	800e638 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800debc:	4b0f      	ldr	r3, [pc, #60]	; (800defc <prvCheckTasksWaitingTermination+0x4c>)
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3304      	adds	r3, #4
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fe fc67 	bl	800c79c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dece:	4b0c      	ldr	r3, [pc, #48]	; (800df00 <prvCheckTasksWaitingTermination+0x50>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	3b01      	subs	r3, #1
 800ded4:	4a0a      	ldr	r2, [pc, #40]	; (800df00 <prvCheckTasksWaitingTermination+0x50>)
 800ded6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ded8:	4b0a      	ldr	r3, [pc, #40]	; (800df04 <prvCheckTasksWaitingTermination+0x54>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3b01      	subs	r3, #1
 800dede:	4a09      	ldr	r2, [pc, #36]	; (800df04 <prvCheckTasksWaitingTermination+0x54>)
 800dee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dee2:	f000 fbdb 	bl	800e69c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 f80e 	bl	800df08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800deec:	4b05      	ldr	r3, [pc, #20]	; (800df04 <prvCheckTasksWaitingTermination+0x54>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1e1      	bne.n	800deb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800def4:	bf00      	nop
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	2000067c 	.word	0x2000067c
 800df00:	200006a8 	.word	0x200006a8
 800df04:	20000690 	.word	0x20000690

0800df08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df16:	2b00      	cmp	r3, #0
 800df18:	d108      	bne.n	800df2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 fd78 	bl	800ea14 <vPortFree>
				vPortFree( pxTCB );
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fd75 	bl	800ea14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df2a:	e019      	b.n	800df60 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df32:	2b01      	cmp	r3, #1
 800df34:	d103      	bne.n	800df3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fd6c 	bl	800ea14 <vPortFree>
	}
 800df3c:	e010      	b.n	800df60 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800df44:	2b02      	cmp	r3, #2
 800df46:	d00b      	beq.n	800df60 <prvDeleteTCB+0x58>
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	b672      	cpsid	i
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	b662      	cpsie	i
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	e7fe      	b.n	800df5e <prvDeleteTCB+0x56>
	}
 800df60:	bf00      	nop
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df6e:	4b0c      	ldr	r3, [pc, #48]	; (800dfa0 <prvResetNextTaskUnblockTime+0x38>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d104      	bne.n	800df82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <prvResetNextTaskUnblockTime+0x3c>)
 800df7a:	f04f 32ff 	mov.w	r2, #4294967295
 800df7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df80:	e008      	b.n	800df94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df82:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <prvResetNextTaskUnblockTime+0x38>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	4a04      	ldr	r2, [pc, #16]	; (800dfa4 <prvResetNextTaskUnblockTime+0x3c>)
 800df92:	6013      	str	r3, [r2, #0]
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	20000660 	.word	0x20000660
 800dfa4:	200006c8 	.word	0x200006c8

0800dfa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dfae:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <xTaskGetSchedulerState+0x34>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d102      	bne.n	800dfbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	607b      	str	r3, [r7, #4]
 800dfba:	e008      	b.n	800dfce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfbc:	4b08      	ldr	r3, [pc, #32]	; (800dfe0 <xTaskGetSchedulerState+0x38>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	607b      	str	r3, [r7, #4]
 800dfc8:	e001      	b.n	800dfce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfce:	687b      	ldr	r3, [r7, #4]
	}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	200006b4 	.word	0x200006b4
 800dfe0:	200006d0 	.word	0x200006d0

0800dfe4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dff0:	2300      	movs	r3, #0
 800dff2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d069      	beq.n	800e0ce <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffe:	4b36      	ldr	r3, [pc, #216]	; (800e0d8 <xTaskPriorityInherit+0xf4>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	429a      	cmp	r2, r3
 800e006:	d259      	bcs.n	800e0bc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	db06      	blt.n	800e01e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e010:	4b31      	ldr	r3, [pc, #196]	; (800e0d8 <xTaskPriorityInherit+0xf4>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e016:	f1c3 0207 	rsb	r2, r3, #7
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	6959      	ldr	r1, [r3, #20]
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e026:	4613      	mov	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4a2b      	ldr	r2, [pc, #172]	; (800e0dc <xTaskPriorityInherit+0xf8>)
 800e030:	4413      	add	r3, r2
 800e032:	4299      	cmp	r1, r3
 800e034:	d13a      	bne.n	800e0ac <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	3304      	adds	r3, #4
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fbae 	bl	800c79c <uxListRemove>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d115      	bne.n	800e072 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04a:	4924      	ldr	r1, [pc, #144]	; (800e0dc <xTaskPriorityInherit+0xf8>)
 800e04c:	4613      	mov	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	440b      	add	r3, r1
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10a      	bne.n	800e072 <xTaskPriorityInherit+0x8e>
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e060:	2201      	movs	r2, #1
 800e062:	fa02 f303 	lsl.w	r3, r2, r3
 800e066:	43da      	mvns	r2, r3
 800e068:	4b1d      	ldr	r3, [pc, #116]	; (800e0e0 <xTaskPriorityInherit+0xfc>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4013      	ands	r3, r2
 800e06e:	4a1c      	ldr	r2, [pc, #112]	; (800e0e0 <xTaskPriorityInherit+0xfc>)
 800e070:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e072:	4b19      	ldr	r3, [pc, #100]	; (800e0d8 <xTaskPriorityInherit+0xf4>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e080:	2201      	movs	r2, #1
 800e082:	409a      	lsls	r2, r3
 800e084:	4b16      	ldr	r3, [pc, #88]	; (800e0e0 <xTaskPriorityInherit+0xfc>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4313      	orrs	r3, r2
 800e08a:	4a15      	ldr	r2, [pc, #84]	; (800e0e0 <xTaskPriorityInherit+0xfc>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4a10      	ldr	r2, [pc, #64]	; (800e0dc <xTaskPriorityInherit+0xf8>)
 800e09c:	441a      	add	r2, r3
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	f7fe fb1c 	bl	800c6e2 <vListInsertEnd>
 800e0aa:	e004      	b.n	800e0b6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	; (800e0d8 <xTaskPriorityInherit+0xf4>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	e008      	b.n	800e0ce <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0c0:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <xTaskPriorityInherit+0xf4>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d201      	bcs.n	800e0ce <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
	}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	200005a8 	.word	0x200005a8
 800e0dc:	200005ac 	.word	0x200005ac
 800e0e0:	200006b0 	.word	0x200006b0

0800e0e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d070      	beq.n	800e1dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e0fa:	4b3b      	ldr	r3, [pc, #236]	; (800e1e8 <xTaskPriorityDisinherit+0x104>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	429a      	cmp	r2, r3
 800e102:	d00b      	beq.n	800e11c <xTaskPriorityDisinherit+0x38>
 800e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e108:	b672      	cpsid	i
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	b662      	cpsie	i
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	e7fe      	b.n	800e11a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10b      	bne.n	800e13c <xTaskPriorityDisinherit+0x58>
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	b672      	cpsid	i
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	b662      	cpsie	i
 800e138:	60bb      	str	r3, [r7, #8]
 800e13a:	e7fe      	b.n	800e13a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e140:	1e5a      	subs	r2, r3, #1
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14e:	429a      	cmp	r2, r3
 800e150:	d044      	beq.n	800e1dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e156:	2b00      	cmp	r3, #0
 800e158:	d140      	bne.n	800e1dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	3304      	adds	r3, #4
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fe fb1c 	bl	800c79c <uxListRemove>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d115      	bne.n	800e196 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e16e:	491f      	ldr	r1, [pc, #124]	; (800e1ec <xTaskPriorityDisinherit+0x108>)
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	440b      	add	r3, r1
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10a      	bne.n	800e196 <xTaskPriorityDisinherit+0xb2>
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	2201      	movs	r2, #1
 800e186:	fa02 f303 	lsl.w	r3, r2, r3
 800e18a:	43da      	mvns	r2, r3
 800e18c:	4b18      	ldr	r3, [pc, #96]	; (800e1f0 <xTaskPriorityDisinherit+0x10c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4013      	ands	r3, r2
 800e192:	4a17      	ldr	r2, [pc, #92]	; (800e1f0 <xTaskPriorityDisinherit+0x10c>)
 800e194:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a2:	f1c3 0207 	rsb	r2, r3, #7
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	409a      	lsls	r2, r3
 800e1b2:	4b0f      	ldr	r3, [pc, #60]	; (800e1f0 <xTaskPriorityDisinherit+0x10c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	4a0d      	ldr	r2, [pc, #52]	; (800e1f0 <xTaskPriorityDisinherit+0x10c>)
 800e1ba:	6013      	str	r3, [r2, #0]
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4a08      	ldr	r2, [pc, #32]	; (800e1ec <xTaskPriorityDisinherit+0x108>)
 800e1ca:	441a      	add	r2, r3
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7fe fa85 	bl	800c6e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e1dc:	697b      	ldr	r3, [r7, #20]
	}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3718      	adds	r7, #24
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200005a8 	.word	0x200005a8
 800e1ec:	200005ac 	.word	0x200005ac
 800e1f0:	200006b0 	.word	0x200006b0

0800e1f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b088      	sub	sp, #32
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e202:	2301      	movs	r3, #1
 800e204:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f000 8085 	beq.w	800e318 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10b      	bne.n	800e22e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	b672      	cpsid	i
 800e21c:	f383 8811 	msr	BASEPRI, r3
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	f3bf 8f4f 	dsb	sy
 800e228:	b662      	cpsie	i
 800e22a:	60fb      	str	r3, [r7, #12]
 800e22c:	e7fe      	b.n	800e22c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	d902      	bls.n	800e23e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	e002      	b.n	800e244 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e242:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d064      	beq.n	800e318 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	429a      	cmp	r2, r3
 800e256:	d15f      	bne.n	800e318 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e258:	4b31      	ldr	r3, [pc, #196]	; (800e320 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	69ba      	ldr	r2, [r7, #24]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d10b      	bne.n	800e27a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	b672      	cpsid	i
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
 800e274:	b662      	cpsie	i
 800e276:	60bb      	str	r3, [r7, #8]
 800e278:	e7fe      	b.n	800e278 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	69fa      	ldr	r2, [r7, #28]
 800e284:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	db04      	blt.n	800e298 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	f1c3 0207 	rsb	r2, r3, #7
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	6959      	ldr	r1, [r3, #20]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	4613      	mov	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4a1f      	ldr	r2, [pc, #124]	; (800e324 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2a8:	4413      	add	r3, r2
 800e2aa:	4299      	cmp	r1, r3
 800e2ac:	d134      	bne.n	800e318 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fa72 	bl	800c79c <uxListRemove>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d115      	bne.n	800e2ea <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c2:	4918      	ldr	r1, [pc, #96]	; (800e324 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	4413      	add	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	440b      	add	r3, r1
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d8:	2201      	movs	r2, #1
 800e2da:	fa02 f303 	lsl.w	r3, r2, r3
 800e2de:	43da      	mvns	r2, r3
 800e2e0:	4b11      	ldr	r3, [pc, #68]	; (800e328 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	4a10      	ldr	r2, [pc, #64]	; (800e328 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	409a      	lsls	r2, r3
 800e2f2:	4b0d      	ldr	r3, [pc, #52]	; (800e328 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	4a0b      	ldr	r2, [pc, #44]	; (800e328 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2fa:	6013      	str	r3, [r2, #0]
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e300:	4613      	mov	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4a06      	ldr	r2, [pc, #24]	; (800e324 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e30a:	441a      	add	r2, r3
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	3304      	adds	r3, #4
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f7fe f9e5 	bl	800c6e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e318:	bf00      	nop
 800e31a:	3720      	adds	r7, #32
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	200005a8 	.word	0x200005a8
 800e324:	200005ac 	.word	0x200005ac
 800e328:	200006b0 	.word	0x200006b0

0800e32c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e330:	4b07      	ldr	r3, [pc, #28]	; (800e350 <pvTaskIncrementMutexHeldCount+0x24>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e338:	4b05      	ldr	r3, [pc, #20]	; (800e350 <pvTaskIncrementMutexHeldCount+0x24>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e33e:	3201      	adds	r2, #1
 800e340:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e342:	4b03      	ldr	r3, [pc, #12]	; (800e350 <pvTaskIncrementMutexHeldCount+0x24>)
 800e344:	681b      	ldr	r3, [r3, #0]
	}
 800e346:	4618      	mov	r0, r3
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	200005a8 	.word	0x200005a8

0800e354 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e35e:	4b29      	ldr	r3, [pc, #164]	; (800e404 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e364:	4b28      	ldr	r3, [pc, #160]	; (800e408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3304      	adds	r3, #4
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fa16 	bl	800c79c <uxListRemove>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d10b      	bne.n	800e38e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e376:	4b24      	ldr	r3, [pc, #144]	; (800e408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37c:	2201      	movs	r2, #1
 800e37e:	fa02 f303 	lsl.w	r3, r2, r3
 800e382:	43da      	mvns	r2, r3
 800e384:	4b21      	ldr	r3, [pc, #132]	; (800e40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4013      	ands	r3, r2
 800e38a:	4a20      	ldr	r2, [pc, #128]	; (800e40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e38c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e394:	d10a      	bne.n	800e3ac <prvAddCurrentTaskToDelayedList+0x58>
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d007      	beq.n	800e3ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e39c:	4b1a      	ldr	r3, [pc, #104]	; (800e408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	481a      	ldr	r0, [pc, #104]	; (800e410 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e3a6:	f7fe f99c 	bl	800c6e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e3aa:	e026      	b.n	800e3fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3b4:	4b14      	ldr	r3, [pc, #80]	; (800e408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68ba      	ldr	r2, [r7, #8]
 800e3ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d209      	bcs.n	800e3d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3c4:	4b13      	ldr	r3, [pc, #76]	; (800e414 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	4610      	mov	r0, r2
 800e3d2:	f7fe f9aa 	bl	800c72a <vListInsert>
}
 800e3d6:	e010      	b.n	800e3fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3d8:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	4b0a      	ldr	r3, [pc, #40]	; (800e408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	f7fe f9a0 	bl	800c72a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3ea:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d202      	bcs.n	800e3fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e3f4:	4a09      	ldr	r2, [pc, #36]	; (800e41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6013      	str	r3, [r2, #0]
}
 800e3fa:	bf00      	nop
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	200006ac 	.word	0x200006ac
 800e408:	200005a8 	.word	0x200005a8
 800e40c:	200006b0 	.word	0x200006b0
 800e410:	20000694 	.word	0x20000694
 800e414:	20000664 	.word	0x20000664
 800e418:	20000660 	.word	0x20000660
 800e41c:	200006c8 	.word	0x200006c8

0800e420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3b04      	subs	r3, #4
 800e430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3b04      	subs	r3, #4
 800e43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	f023 0201 	bic.w	r2, r3, #1
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	3b04      	subs	r3, #4
 800e44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e450:	4a0c      	ldr	r2, [pc, #48]	; (800e484 <pxPortInitialiseStack+0x64>)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	3b14      	subs	r3, #20
 800e45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	3b04      	subs	r3, #4
 800e466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f06f 0202 	mvn.w	r2, #2
 800e46e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	3b20      	subs	r3, #32
 800e474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e476:	68fb      	ldr	r3, [r7, #12]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	0800e489 	.word	0x0800e489

0800e488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e48e:	2300      	movs	r3, #0
 800e490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e492:	4b13      	ldr	r3, [pc, #76]	; (800e4e0 <prvTaskExitError+0x58>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e49a:	d00b      	beq.n	800e4b4 <prvTaskExitError+0x2c>
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	b672      	cpsid	i
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	b662      	cpsie	i
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	e7fe      	b.n	800e4b2 <prvTaskExitError+0x2a>
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	b672      	cpsid	i
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	b662      	cpsie	i
 800e4c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4ca:	bf00      	nop
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0fc      	beq.n	800e4cc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4d2:	bf00      	nop
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	2000004c 	.word	0x2000004c
	...

0800e4f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e4f0:	4b07      	ldr	r3, [pc, #28]	; (800e510 <pxCurrentTCBConst2>)
 800e4f2:	6819      	ldr	r1, [r3, #0]
 800e4f4:	6808      	ldr	r0, [r1, #0]
 800e4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fa:	f380 8809 	msr	PSP, r0
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f04f 0000 	mov.w	r0, #0
 800e506:	f380 8811 	msr	BASEPRI, r0
 800e50a:	4770      	bx	lr
 800e50c:	f3af 8000 	nop.w

0800e510 <pxCurrentTCBConst2>:
 800e510:	200005a8 	.word	0x200005a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e514:	bf00      	nop
 800e516:	bf00      	nop

0800e518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e518:	4808      	ldr	r0, [pc, #32]	; (800e53c <prvPortStartFirstTask+0x24>)
 800e51a:	6800      	ldr	r0, [r0, #0]
 800e51c:	6800      	ldr	r0, [r0, #0]
 800e51e:	f380 8808 	msr	MSP, r0
 800e522:	f04f 0000 	mov.w	r0, #0
 800e526:	f380 8814 	msr	CONTROL, r0
 800e52a:	b662      	cpsie	i
 800e52c:	b661      	cpsie	f
 800e52e:	f3bf 8f4f 	dsb	sy
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	df00      	svc	0
 800e538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e53a:	bf00      	nop
 800e53c:	e000ed08 	.word	0xe000ed08

0800e540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e546:	4b36      	ldr	r3, [pc, #216]	; (800e620 <xPortStartScheduler+0xe0>)
 800e548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	22ff      	movs	r2, #255	; 0xff
 800e556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	4b2e      	ldr	r3, [pc, #184]	; (800e624 <xPortStartScheduler+0xe4>)
 800e56c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e56e:	4b2e      	ldr	r3, [pc, #184]	; (800e628 <xPortStartScheduler+0xe8>)
 800e570:	2207      	movs	r2, #7
 800e572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e574:	e009      	b.n	800e58a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e576:	4b2c      	ldr	r3, [pc, #176]	; (800e628 <xPortStartScheduler+0xe8>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	3b01      	subs	r3, #1
 800e57c:	4a2a      	ldr	r2, [pc, #168]	; (800e628 <xPortStartScheduler+0xe8>)
 800e57e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e580:	78fb      	ldrb	r3, [r7, #3]
 800e582:	b2db      	uxtb	r3, r3
 800e584:	005b      	lsls	r3, r3, #1
 800e586:	b2db      	uxtb	r3, r3
 800e588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e58a:	78fb      	ldrb	r3, [r7, #3]
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e592:	2b80      	cmp	r3, #128	; 0x80
 800e594:	d0ef      	beq.n	800e576 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e596:	4b24      	ldr	r3, [pc, #144]	; (800e628 <xPortStartScheduler+0xe8>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f1c3 0307 	rsb	r3, r3, #7
 800e59e:	2b04      	cmp	r3, #4
 800e5a0:	d00b      	beq.n	800e5ba <xPortStartScheduler+0x7a>
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	b672      	cpsid	i
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	b662      	cpsie	i
 800e5b6:	60bb      	str	r3, [r7, #8]
 800e5b8:	e7fe      	b.n	800e5b8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e5ba:	4b1b      	ldr	r3, [pc, #108]	; (800e628 <xPortStartScheduler+0xe8>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	021b      	lsls	r3, r3, #8
 800e5c0:	4a19      	ldr	r2, [pc, #100]	; (800e628 <xPortStartScheduler+0xe8>)
 800e5c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5c4:	4b18      	ldr	r3, [pc, #96]	; (800e628 <xPortStartScheduler+0xe8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e5cc:	4a16      	ldr	r2, [pc, #88]	; (800e628 <xPortStartScheduler+0xe8>)
 800e5ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5d8:	4b14      	ldr	r3, [pc, #80]	; (800e62c <xPortStartScheduler+0xec>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a13      	ldr	r2, [pc, #76]	; (800e62c <xPortStartScheduler+0xec>)
 800e5de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e5e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5e4:	4b11      	ldr	r3, [pc, #68]	; (800e62c <xPortStartScheduler+0xec>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a10      	ldr	r2, [pc, #64]	; (800e62c <xPortStartScheduler+0xec>)
 800e5ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e5ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5f0:	f000 f8d4 	bl	800e79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5f4:	4b0e      	ldr	r3, [pc, #56]	; (800e630 <xPortStartScheduler+0xf0>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5fa:	f000 f8f3 	bl	800e7e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5fe:	4b0d      	ldr	r3, [pc, #52]	; (800e634 <xPortStartScheduler+0xf4>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a0c      	ldr	r2, [pc, #48]	; (800e634 <xPortStartScheduler+0xf4>)
 800e604:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e608:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e60a:	f7ff ff85 	bl	800e518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e60e:	f7ff fa63 	bl	800dad8 <vTaskSwitchContext>
	prvTaskExitError();
 800e612:	f7ff ff39 	bl	800e488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	e000e400 	.word	0xe000e400
 800e624:	200006d4 	.word	0x200006d4
 800e628:	200006d8 	.word	0x200006d8
 800e62c:	e000ed20 	.word	0xe000ed20
 800e630:	2000004c 	.word	0x2000004c
 800e634:	e000ef34 	.word	0xe000ef34

0800e638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e638:	b480      	push	{r7}
 800e63a:	b083      	sub	sp, #12
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e642:	b672      	cpsid	i
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	b662      	cpsie	i
 800e652:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e654:	4b0f      	ldr	r3, [pc, #60]	; (800e694 <vPortEnterCritical+0x5c>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3301      	adds	r3, #1
 800e65a:	4a0e      	ldr	r2, [pc, #56]	; (800e694 <vPortEnterCritical+0x5c>)
 800e65c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e65e:	4b0d      	ldr	r3, [pc, #52]	; (800e694 <vPortEnterCritical+0x5c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d110      	bne.n	800e688 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e666:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <vPortEnterCritical+0x60>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <vPortEnterCritical+0x50>
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	b672      	cpsid	i
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	b662      	cpsie	i
 800e684:	603b      	str	r3, [r7, #0]
 800e686:	e7fe      	b.n	800e686 <vPortEnterCritical+0x4e>
	}
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	2000004c 	.word	0x2000004c
 800e698:	e000ed04 	.word	0xe000ed04

0800e69c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e6a2:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <vPortExitCritical+0x50>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10b      	bne.n	800e6c2 <vPortExitCritical+0x26>
 800e6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ae:	b672      	cpsid	i
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	b662      	cpsie	i
 800e6be:	607b      	str	r3, [r7, #4]
 800e6c0:	e7fe      	b.n	800e6c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800e6c2:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <vPortExitCritical+0x50>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	4a08      	ldr	r2, [pc, #32]	; (800e6ec <vPortExitCritical+0x50>)
 800e6ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6cc:	4b07      	ldr	r3, [pc, #28]	; (800e6ec <vPortExitCritical+0x50>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d104      	bne.n	800e6de <vPortExitCritical+0x42>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6de:	bf00      	nop
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	2000004c 	.word	0x2000004c

0800e6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6f0:	f3ef 8009 	mrs	r0, PSP
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	4b15      	ldr	r3, [pc, #84]	; (800e750 <pxCurrentTCBConst>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	f01e 0f10 	tst.w	lr, #16
 800e700:	bf08      	it	eq
 800e702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70a:	6010      	str	r0, [r2, #0]
 800e70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e714:	b672      	cpsid	i
 800e716:	f380 8811 	msr	BASEPRI, r0
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	b662      	cpsie	i
 800e724:	f7ff f9d8 	bl	800dad8 <vTaskSwitchContext>
 800e728:	f04f 0000 	mov.w	r0, #0
 800e72c:	f380 8811 	msr	BASEPRI, r0
 800e730:	bc09      	pop	{r0, r3}
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	f01e 0f10 	tst.w	lr, #16
 800e73e:	bf08      	it	eq
 800e740:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e744:	f380 8809 	msr	PSP, r0
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop

0800e750 <pxCurrentTCBConst>:
 800e750:	200005a8 	.word	0x200005a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop

0800e758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e762:	b672      	cpsid	i
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	b662      	cpsie	i
 800e772:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e774:	f7ff f8f6 	bl	800d964 <xTaskIncrementTick>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e77e:	4b06      	ldr	r3, [pc, #24]	; (800e798 <SysTick_Handler+0x40>)
 800e780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	2300      	movs	r3, #0
 800e788:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e790:	bf00      	nop
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	e000ed04 	.word	0xe000ed04

0800e79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e79c:	b480      	push	{r7}
 800e79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e7a0:	4b0b      	ldr	r3, [pc, #44]	; (800e7d0 <vPortSetupTimerInterrupt+0x34>)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e7a6:	4b0b      	ldr	r3, [pc, #44]	; (800e7d4 <vPortSetupTimerInterrupt+0x38>)
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7ac:	4b0a      	ldr	r3, [pc, #40]	; (800e7d8 <vPortSetupTimerInterrupt+0x3c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a0a      	ldr	r2, [pc, #40]	; (800e7dc <vPortSetupTimerInterrupt+0x40>)
 800e7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7b6:	099b      	lsrs	r3, r3, #6
 800e7b8:	4a09      	ldr	r2, [pc, #36]	; (800e7e0 <vPortSetupTimerInterrupt+0x44>)
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7be:	4b04      	ldr	r3, [pc, #16]	; (800e7d0 <vPortSetupTimerInterrupt+0x34>)
 800e7c0:	2207      	movs	r2, #7
 800e7c2:	601a      	str	r2, [r3, #0]
}
 800e7c4:	bf00      	nop
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	e000e010 	.word	0xe000e010
 800e7d4:	e000e018 	.word	0xe000e018
 800e7d8:	20000040 	.word	0x20000040
 800e7dc:	10624dd3 	.word	0x10624dd3
 800e7e0:	e000e014 	.word	0xe000e014

0800e7e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7f4 <vPortEnableVFP+0x10>
 800e7e8:	6801      	ldr	r1, [r0, #0]
 800e7ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7ee:	6001      	str	r1, [r0, #0]
 800e7f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7f2:	bf00      	nop
 800e7f4:	e000ed88 	.word	0xe000ed88

0800e7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7fe:	f3ef 8305 	mrs	r3, IPSR
 800e802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b0f      	cmp	r3, #15
 800e808:	d915      	bls.n	800e836 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e80a:	4a18      	ldr	r2, [pc, #96]	; (800e86c <vPortValidateInterruptPriority+0x74>)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	4413      	add	r3, r2
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e814:	4b16      	ldr	r3, [pc, #88]	; (800e870 <vPortValidateInterruptPriority+0x78>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	7afa      	ldrb	r2, [r7, #11]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d20b      	bcs.n	800e836 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	b672      	cpsid	i
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	b662      	cpsie	i
 800e832:	607b      	str	r3, [r7, #4]
 800e834:	e7fe      	b.n	800e834 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e836:	4b0f      	ldr	r3, [pc, #60]	; (800e874 <vPortValidateInterruptPriority+0x7c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e83e:	4b0e      	ldr	r3, [pc, #56]	; (800e878 <vPortValidateInterruptPriority+0x80>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	d90b      	bls.n	800e85e <vPortValidateInterruptPriority+0x66>
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	b672      	cpsid	i
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	b662      	cpsie	i
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	e7fe      	b.n	800e85c <vPortValidateInterruptPriority+0x64>
	}
 800e85e:	bf00      	nop
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	e000e3f0 	.word	0xe000e3f0
 800e870:	200006d4 	.word	0x200006d4
 800e874:	e000ed0c 	.word	0xe000ed0c
 800e878:	200006d8 	.word	0x200006d8

0800e87c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08a      	sub	sp, #40	; 0x28
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e884:	2300      	movs	r3, #0
 800e886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e888:	f7fe ffb0 	bl	800d7ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e88c:	4b5c      	ldr	r3, [pc, #368]	; (800ea00 <pvPortMalloc+0x184>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e894:	f000 f91a 	bl	800eacc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e898:	4b5a      	ldr	r3, [pc, #360]	; (800ea04 <pvPortMalloc+0x188>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4013      	ands	r3, r2
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f040 8090 	bne.w	800e9c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d01e      	beq.n	800e8ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e8ac:	2208      	movs	r2, #8
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d015      	beq.n	800e8ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f023 0307 	bic.w	r3, r3, #7
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f003 0307 	and.w	r3, r3, #7
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00b      	beq.n	800e8ea <pvPortMalloc+0x6e>
 800e8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d6:	b672      	cpsid	i
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	b662      	cpsie	i
 800e8e6:	617b      	str	r3, [r7, #20]
 800e8e8:	e7fe      	b.n	800e8e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d06a      	beq.n	800e9c6 <pvPortMalloc+0x14a>
 800e8f0:	4b45      	ldr	r3, [pc, #276]	; (800ea08 <pvPortMalloc+0x18c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d865      	bhi.n	800e9c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8fa:	4b44      	ldr	r3, [pc, #272]	; (800ea0c <pvPortMalloc+0x190>)
 800e8fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8fe:	4b43      	ldr	r3, [pc, #268]	; (800ea0c <pvPortMalloc+0x190>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e904:	e004      	b.n	800e910 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d903      	bls.n	800e922 <pvPortMalloc+0xa6>
 800e91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1f1      	bne.n	800e906 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e922:	4b37      	ldr	r3, [pc, #220]	; (800ea00 <pvPortMalloc+0x184>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e928:	429a      	cmp	r2, r3
 800e92a:	d04c      	beq.n	800e9c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2208      	movs	r2, #8
 800e932:	4413      	add	r3, r2
 800e934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	6a3b      	ldr	r3, [r7, #32]
 800e93c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	1ad2      	subs	r2, r2, r3
 800e946:	2308      	movs	r3, #8
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d920      	bls.n	800e990 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4413      	add	r3, r2
 800e954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	f003 0307 	and.w	r3, r3, #7
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00b      	beq.n	800e978 <pvPortMalloc+0xfc>
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	b672      	cpsid	i
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	b662      	cpsie	i
 800e974:	613b      	str	r3, [r7, #16]
 800e976:	e7fe      	b.n	800e976 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	685a      	ldr	r2, [r3, #4]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	1ad2      	subs	r2, r2, r3
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e98a:	69b8      	ldr	r0, [r7, #24]
 800e98c:	f000 f900 	bl	800eb90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e990:	4b1d      	ldr	r3, [pc, #116]	; (800ea08 <pvPortMalloc+0x18c>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	4a1b      	ldr	r2, [pc, #108]	; (800ea08 <pvPortMalloc+0x18c>)
 800e99c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e99e:	4b1a      	ldr	r3, [pc, #104]	; (800ea08 <pvPortMalloc+0x18c>)
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	4b1b      	ldr	r3, [pc, #108]	; (800ea10 <pvPortMalloc+0x194>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d203      	bcs.n	800e9b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9aa:	4b17      	ldr	r3, [pc, #92]	; (800ea08 <pvPortMalloc+0x18c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a18      	ldr	r2, [pc, #96]	; (800ea10 <pvPortMalloc+0x194>)
 800e9b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <pvPortMalloc+0x188>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	431a      	orrs	r2, r3
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9c6:	f7fe ff1f 	bl	800d808 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e9d0:	f7f1 fe00 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	f003 0307 	and.w	r3, r3, #7
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00b      	beq.n	800e9f6 <pvPortMalloc+0x17a>
 800e9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e2:	b672      	cpsid	i
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	b662      	cpsie	i
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	e7fe      	b.n	800e9f4 <pvPortMalloc+0x178>
	return pvReturn;
 800e9f6:	69fb      	ldr	r3, [r7, #28]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3728      	adds	r7, #40	; 0x28
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	200086e4 	.word	0x200086e4
 800ea04:	200086f0 	.word	0x200086f0
 800ea08:	200086e8 	.word	0x200086e8
 800ea0c:	200086dc 	.word	0x200086dc
 800ea10:	200086ec 	.word	0x200086ec

0800ea14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d04a      	beq.n	800eabc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea26:	2308      	movs	r3, #8
 800ea28:	425b      	negs	r3, r3
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	4b22      	ldr	r3, [pc, #136]	; (800eac4 <vPortFree+0xb0>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10b      	bne.n	800ea5a <vPortFree+0x46>
 800ea42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea46:	b672      	cpsid	i
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	b662      	cpsie	i
 800ea56:	60fb      	str	r3, [r7, #12]
 800ea58:	e7fe      	b.n	800ea58 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00b      	beq.n	800ea7a <vPortFree+0x66>
 800ea62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea66:	b672      	cpsid	i
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	b662      	cpsie	i
 800ea76:	60bb      	str	r3, [r7, #8]
 800ea78:	e7fe      	b.n	800ea78 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	685a      	ldr	r2, [r3, #4]
 800ea7e:	4b11      	ldr	r3, [pc, #68]	; (800eac4 <vPortFree+0xb0>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4013      	ands	r3, r2
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d019      	beq.n	800eabc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d115      	bne.n	800eabc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	4b0b      	ldr	r3, [pc, #44]	; (800eac4 <vPortFree+0xb0>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	43db      	mvns	r3, r3
 800ea9a:	401a      	ands	r2, r3
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaa0:	f7fe fea4 	bl	800d7ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <vPortFree+0xb4>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4413      	add	r3, r2
 800eaae:	4a06      	ldr	r2, [pc, #24]	; (800eac8 <vPortFree+0xb4>)
 800eab0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eab2:	6938      	ldr	r0, [r7, #16]
 800eab4:	f000 f86c 	bl	800eb90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eab8:	f7fe fea6 	bl	800d808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eabc:	bf00      	nop
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	200086f0 	.word	0x200086f0
 800eac8:	200086e8 	.word	0x200086e8

0800eacc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ead2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ead6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ead8:	4b27      	ldr	r3, [pc, #156]	; (800eb78 <prvHeapInit+0xac>)
 800eada:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f003 0307 	and.w	r3, r3, #7
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00c      	beq.n	800eb00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3307      	adds	r3, #7
 800eaea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f023 0307 	bic.w	r3, r3, #7
 800eaf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	4a1f      	ldr	r2, [pc, #124]	; (800eb78 <prvHeapInit+0xac>)
 800eafc:	4413      	add	r3, r2
 800eafe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb04:	4a1d      	ldr	r2, [pc, #116]	; (800eb7c <prvHeapInit+0xb0>)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb0a:	4b1c      	ldr	r3, [pc, #112]	; (800eb7c <prvHeapInit+0xb0>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68ba      	ldr	r2, [r7, #8]
 800eb14:	4413      	add	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb18:	2208      	movs	r2, #8
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	1a9b      	subs	r3, r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f023 0307 	bic.w	r3, r3, #7
 800eb26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	4a15      	ldr	r2, [pc, #84]	; (800eb80 <prvHeapInit+0xb4>)
 800eb2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb2e:	4b14      	ldr	r3, [pc, #80]	; (800eb80 <prvHeapInit+0xb4>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2200      	movs	r2, #0
 800eb34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb36:	4b12      	ldr	r3, [pc, #72]	; (800eb80 <prvHeapInit+0xb4>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	1ad2      	subs	r2, r2, r3
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb4c:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <prvHeapInit+0xb4>)
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	4a0a      	ldr	r2, [pc, #40]	; (800eb84 <prvHeapInit+0xb8>)
 800eb5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	4a09      	ldr	r2, [pc, #36]	; (800eb88 <prvHeapInit+0xbc>)
 800eb62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb64:	4b09      	ldr	r3, [pc, #36]	; (800eb8c <prvHeapInit+0xc0>)
 800eb66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb6a:	601a      	str	r2, [r3, #0]
}
 800eb6c:	bf00      	nop
 800eb6e:	3714      	adds	r7, #20
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	200006dc 	.word	0x200006dc
 800eb7c:	200086dc 	.word	0x200086dc
 800eb80:	200086e4 	.word	0x200086e4
 800eb84:	200086ec 	.word	0x200086ec
 800eb88:	200086e8 	.word	0x200086e8
 800eb8c:	200086f0 	.word	0x200086f0

0800eb90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb98:	4b28      	ldr	r3, [pc, #160]	; (800ec3c <prvInsertBlockIntoFreeList+0xac>)
 800eb9a:	60fb      	str	r3, [r7, #12]
 800eb9c:	e002      	b.n	800eba4 <prvInsertBlockIntoFreeList+0x14>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d8f7      	bhi.n	800eb9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	68ba      	ldr	r2, [r7, #8]
 800ebb8:	4413      	add	r3, r2
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d108      	bne.n	800ebd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	441a      	add	r2, r3
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	441a      	add	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d118      	bne.n	800ec18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	4b15      	ldr	r3, [pc, #84]	; (800ec40 <prvInsertBlockIntoFreeList+0xb0>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d00d      	beq.n	800ec0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	685a      	ldr	r2, [r3, #4]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	441a      	add	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	601a      	str	r2, [r3, #0]
 800ec0c:	e008      	b.n	800ec20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec0e:	4b0c      	ldr	r3, [pc, #48]	; (800ec40 <prvInsertBlockIntoFreeList+0xb0>)
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	e003      	b.n	800ec20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d002      	beq.n	800ec2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec2e:	bf00      	nop
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	200086dc 	.word	0x200086dc
 800ec40:	200086e4 	.word	0x200086e4

0800ec44 <__errno>:
 800ec44:	4b01      	ldr	r3, [pc, #4]	; (800ec4c <__errno+0x8>)
 800ec46:	6818      	ldr	r0, [r3, #0]
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	20000050 	.word	0x20000050

0800ec50 <__libc_init_array>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	4e0d      	ldr	r6, [pc, #52]	; (800ec88 <__libc_init_array+0x38>)
 800ec54:	4c0d      	ldr	r4, [pc, #52]	; (800ec8c <__libc_init_array+0x3c>)
 800ec56:	1ba4      	subs	r4, r4, r6
 800ec58:	10a4      	asrs	r4, r4, #2
 800ec5a:	2500      	movs	r5, #0
 800ec5c:	42a5      	cmp	r5, r4
 800ec5e:	d109      	bne.n	800ec74 <__libc_init_array+0x24>
 800ec60:	4e0b      	ldr	r6, [pc, #44]	; (800ec90 <__libc_init_array+0x40>)
 800ec62:	4c0c      	ldr	r4, [pc, #48]	; (800ec94 <__libc_init_array+0x44>)
 800ec64:	f000 fc28 	bl	800f4b8 <_init>
 800ec68:	1ba4      	subs	r4, r4, r6
 800ec6a:	10a4      	asrs	r4, r4, #2
 800ec6c:	2500      	movs	r5, #0
 800ec6e:	42a5      	cmp	r5, r4
 800ec70:	d105      	bne.n	800ec7e <__libc_init_array+0x2e>
 800ec72:	bd70      	pop	{r4, r5, r6, pc}
 800ec74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec78:	4798      	blx	r3
 800ec7a:	3501      	adds	r5, #1
 800ec7c:	e7ee      	b.n	800ec5c <__libc_init_array+0xc>
 800ec7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec82:	4798      	blx	r3
 800ec84:	3501      	adds	r5, #1
 800ec86:	e7f2      	b.n	800ec6e <__libc_init_array+0x1e>
 800ec88:	080115f8 	.word	0x080115f8
 800ec8c:	080115f8 	.word	0x080115f8
 800ec90:	080115f8 	.word	0x080115f8
 800ec94:	080115fc 	.word	0x080115fc

0800ec98 <memcpy>:
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	1e43      	subs	r3, r0, #1
 800ec9c:	440a      	add	r2, r1
 800ec9e:	4291      	cmp	r1, r2
 800eca0:	d100      	bne.n	800eca4 <memcpy+0xc>
 800eca2:	bd10      	pop	{r4, pc}
 800eca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ecac:	e7f7      	b.n	800ec9e <memcpy+0x6>

0800ecae <memset>:
 800ecae:	4402      	add	r2, r0
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d100      	bne.n	800ecb8 <memset+0xa>
 800ecb6:	4770      	bx	lr
 800ecb8:	f803 1b01 	strb.w	r1, [r3], #1
 800ecbc:	e7f9      	b.n	800ecb2 <memset+0x4>
	...

0800ecc0 <siprintf>:
 800ecc0:	b40e      	push	{r1, r2, r3}
 800ecc2:	b500      	push	{lr}
 800ecc4:	b09c      	sub	sp, #112	; 0x70
 800ecc6:	ab1d      	add	r3, sp, #116	; 0x74
 800ecc8:	9002      	str	r0, [sp, #8]
 800ecca:	9006      	str	r0, [sp, #24]
 800eccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ecd0:	4809      	ldr	r0, [pc, #36]	; (800ecf8 <siprintf+0x38>)
 800ecd2:	9107      	str	r1, [sp, #28]
 800ecd4:	9104      	str	r1, [sp, #16]
 800ecd6:	4909      	ldr	r1, [pc, #36]	; (800ecfc <siprintf+0x3c>)
 800ecd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecdc:	9105      	str	r1, [sp, #20]
 800ecde:	6800      	ldr	r0, [r0, #0]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	a902      	add	r1, sp, #8
 800ece4:	f000 f866 	bl	800edb4 <_svfiprintf_r>
 800ece8:	9b02      	ldr	r3, [sp, #8]
 800ecea:	2200      	movs	r2, #0
 800ecec:	701a      	strb	r2, [r3, #0]
 800ecee:	b01c      	add	sp, #112	; 0x70
 800ecf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf4:	b003      	add	sp, #12
 800ecf6:	4770      	bx	lr
 800ecf8:	20000050 	.word	0x20000050
 800ecfc:	ffff0208 	.word	0xffff0208

0800ed00 <__ssputs_r>:
 800ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed04:	688e      	ldr	r6, [r1, #8]
 800ed06:	429e      	cmp	r6, r3
 800ed08:	4682      	mov	sl, r0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	4690      	mov	r8, r2
 800ed0e:	4699      	mov	r9, r3
 800ed10:	d837      	bhi.n	800ed82 <__ssputs_r+0x82>
 800ed12:	898a      	ldrh	r2, [r1, #12]
 800ed14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed18:	d031      	beq.n	800ed7e <__ssputs_r+0x7e>
 800ed1a:	6825      	ldr	r5, [r4, #0]
 800ed1c:	6909      	ldr	r1, [r1, #16]
 800ed1e:	1a6f      	subs	r7, r5, r1
 800ed20:	6965      	ldr	r5, [r4, #20]
 800ed22:	2302      	movs	r3, #2
 800ed24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed28:	fb95 f5f3 	sdiv	r5, r5, r3
 800ed2c:	f109 0301 	add.w	r3, r9, #1
 800ed30:	443b      	add	r3, r7
 800ed32:	429d      	cmp	r5, r3
 800ed34:	bf38      	it	cc
 800ed36:	461d      	movcc	r5, r3
 800ed38:	0553      	lsls	r3, r2, #21
 800ed3a:	d530      	bpl.n	800ed9e <__ssputs_r+0x9e>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	f000 fb21 	bl	800f384 <_malloc_r>
 800ed42:	4606      	mov	r6, r0
 800ed44:	b950      	cbnz	r0, 800ed5c <__ssputs_r+0x5c>
 800ed46:	230c      	movs	r3, #12
 800ed48:	f8ca 3000 	str.w	r3, [sl]
 800ed4c:	89a3      	ldrh	r3, [r4, #12]
 800ed4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5c:	463a      	mov	r2, r7
 800ed5e:	6921      	ldr	r1, [r4, #16]
 800ed60:	f7ff ff9a 	bl	800ec98 <memcpy>
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed6e:	81a3      	strh	r3, [r4, #12]
 800ed70:	6126      	str	r6, [r4, #16]
 800ed72:	6165      	str	r5, [r4, #20]
 800ed74:	443e      	add	r6, r7
 800ed76:	1bed      	subs	r5, r5, r7
 800ed78:	6026      	str	r6, [r4, #0]
 800ed7a:	60a5      	str	r5, [r4, #8]
 800ed7c:	464e      	mov	r6, r9
 800ed7e:	454e      	cmp	r6, r9
 800ed80:	d900      	bls.n	800ed84 <__ssputs_r+0x84>
 800ed82:	464e      	mov	r6, r9
 800ed84:	4632      	mov	r2, r6
 800ed86:	4641      	mov	r1, r8
 800ed88:	6820      	ldr	r0, [r4, #0]
 800ed8a:	f000 fa93 	bl	800f2b4 <memmove>
 800ed8e:	68a3      	ldr	r3, [r4, #8]
 800ed90:	1b9b      	subs	r3, r3, r6
 800ed92:	60a3      	str	r3, [r4, #8]
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	441e      	add	r6, r3
 800ed98:	6026      	str	r6, [r4, #0]
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	e7dc      	b.n	800ed58 <__ssputs_r+0x58>
 800ed9e:	462a      	mov	r2, r5
 800eda0:	f000 fb4a 	bl	800f438 <_realloc_r>
 800eda4:	4606      	mov	r6, r0
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d1e2      	bne.n	800ed70 <__ssputs_r+0x70>
 800edaa:	6921      	ldr	r1, [r4, #16]
 800edac:	4650      	mov	r0, sl
 800edae:	f000 fa9b 	bl	800f2e8 <_free_r>
 800edb2:	e7c8      	b.n	800ed46 <__ssputs_r+0x46>

0800edb4 <_svfiprintf_r>:
 800edb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb8:	461d      	mov	r5, r3
 800edba:	898b      	ldrh	r3, [r1, #12]
 800edbc:	061f      	lsls	r7, r3, #24
 800edbe:	b09d      	sub	sp, #116	; 0x74
 800edc0:	4680      	mov	r8, r0
 800edc2:	460c      	mov	r4, r1
 800edc4:	4616      	mov	r6, r2
 800edc6:	d50f      	bpl.n	800ede8 <_svfiprintf_r+0x34>
 800edc8:	690b      	ldr	r3, [r1, #16]
 800edca:	b96b      	cbnz	r3, 800ede8 <_svfiprintf_r+0x34>
 800edcc:	2140      	movs	r1, #64	; 0x40
 800edce:	f000 fad9 	bl	800f384 <_malloc_r>
 800edd2:	6020      	str	r0, [r4, #0]
 800edd4:	6120      	str	r0, [r4, #16]
 800edd6:	b928      	cbnz	r0, 800ede4 <_svfiprintf_r+0x30>
 800edd8:	230c      	movs	r3, #12
 800edda:	f8c8 3000 	str.w	r3, [r8]
 800edde:	f04f 30ff 	mov.w	r0, #4294967295
 800ede2:	e0c8      	b.n	800ef76 <_svfiprintf_r+0x1c2>
 800ede4:	2340      	movs	r3, #64	; 0x40
 800ede6:	6163      	str	r3, [r4, #20]
 800ede8:	2300      	movs	r3, #0
 800edea:	9309      	str	r3, [sp, #36]	; 0x24
 800edec:	2320      	movs	r3, #32
 800edee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edf2:	2330      	movs	r3, #48	; 0x30
 800edf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edf8:	9503      	str	r5, [sp, #12]
 800edfa:	f04f 0b01 	mov.w	fp, #1
 800edfe:	4637      	mov	r7, r6
 800ee00:	463d      	mov	r5, r7
 800ee02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee06:	b10b      	cbz	r3, 800ee0c <_svfiprintf_r+0x58>
 800ee08:	2b25      	cmp	r3, #37	; 0x25
 800ee0a:	d13e      	bne.n	800ee8a <_svfiprintf_r+0xd6>
 800ee0c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ee10:	d00b      	beq.n	800ee2a <_svfiprintf_r+0x76>
 800ee12:	4653      	mov	r3, sl
 800ee14:	4632      	mov	r2, r6
 800ee16:	4621      	mov	r1, r4
 800ee18:	4640      	mov	r0, r8
 800ee1a:	f7ff ff71 	bl	800ed00 <__ssputs_r>
 800ee1e:	3001      	adds	r0, #1
 800ee20:	f000 80a4 	beq.w	800ef6c <_svfiprintf_r+0x1b8>
 800ee24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee26:	4453      	add	r3, sl
 800ee28:	9309      	str	r3, [sp, #36]	; 0x24
 800ee2a:	783b      	ldrb	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 809d 	beq.w	800ef6c <_svfiprintf_r+0x1b8>
 800ee32:	2300      	movs	r3, #0
 800ee34:	f04f 32ff 	mov.w	r2, #4294967295
 800ee38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee3c:	9304      	str	r3, [sp, #16]
 800ee3e:	9307      	str	r3, [sp, #28]
 800ee40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee44:	931a      	str	r3, [sp, #104]	; 0x68
 800ee46:	462f      	mov	r7, r5
 800ee48:	2205      	movs	r2, #5
 800ee4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ee4e:	4850      	ldr	r0, [pc, #320]	; (800ef90 <_svfiprintf_r+0x1dc>)
 800ee50:	f7f1 f9de 	bl	8000210 <memchr>
 800ee54:	9b04      	ldr	r3, [sp, #16]
 800ee56:	b9d0      	cbnz	r0, 800ee8e <_svfiprintf_r+0xda>
 800ee58:	06d9      	lsls	r1, r3, #27
 800ee5a:	bf44      	itt	mi
 800ee5c:	2220      	movmi	r2, #32
 800ee5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee62:	071a      	lsls	r2, r3, #28
 800ee64:	bf44      	itt	mi
 800ee66:	222b      	movmi	r2, #43	; 0x2b
 800ee68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee6c:	782a      	ldrb	r2, [r5, #0]
 800ee6e:	2a2a      	cmp	r2, #42	; 0x2a
 800ee70:	d015      	beq.n	800ee9e <_svfiprintf_r+0xea>
 800ee72:	9a07      	ldr	r2, [sp, #28]
 800ee74:	462f      	mov	r7, r5
 800ee76:	2000      	movs	r0, #0
 800ee78:	250a      	movs	r5, #10
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee80:	3b30      	subs	r3, #48	; 0x30
 800ee82:	2b09      	cmp	r3, #9
 800ee84:	d94d      	bls.n	800ef22 <_svfiprintf_r+0x16e>
 800ee86:	b1b8      	cbz	r0, 800eeb8 <_svfiprintf_r+0x104>
 800ee88:	e00f      	b.n	800eeaa <_svfiprintf_r+0xf6>
 800ee8a:	462f      	mov	r7, r5
 800ee8c:	e7b8      	b.n	800ee00 <_svfiprintf_r+0x4c>
 800ee8e:	4a40      	ldr	r2, [pc, #256]	; (800ef90 <_svfiprintf_r+0x1dc>)
 800ee90:	1a80      	subs	r0, r0, r2
 800ee92:	fa0b f000 	lsl.w	r0, fp, r0
 800ee96:	4318      	orrs	r0, r3
 800ee98:	9004      	str	r0, [sp, #16]
 800ee9a:	463d      	mov	r5, r7
 800ee9c:	e7d3      	b.n	800ee46 <_svfiprintf_r+0x92>
 800ee9e:	9a03      	ldr	r2, [sp, #12]
 800eea0:	1d11      	adds	r1, r2, #4
 800eea2:	6812      	ldr	r2, [r2, #0]
 800eea4:	9103      	str	r1, [sp, #12]
 800eea6:	2a00      	cmp	r2, #0
 800eea8:	db01      	blt.n	800eeae <_svfiprintf_r+0xfa>
 800eeaa:	9207      	str	r2, [sp, #28]
 800eeac:	e004      	b.n	800eeb8 <_svfiprintf_r+0x104>
 800eeae:	4252      	negs	r2, r2
 800eeb0:	f043 0302 	orr.w	r3, r3, #2
 800eeb4:	9207      	str	r2, [sp, #28]
 800eeb6:	9304      	str	r3, [sp, #16]
 800eeb8:	783b      	ldrb	r3, [r7, #0]
 800eeba:	2b2e      	cmp	r3, #46	; 0x2e
 800eebc:	d10c      	bne.n	800eed8 <_svfiprintf_r+0x124>
 800eebe:	787b      	ldrb	r3, [r7, #1]
 800eec0:	2b2a      	cmp	r3, #42	; 0x2a
 800eec2:	d133      	bne.n	800ef2c <_svfiprintf_r+0x178>
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	1d1a      	adds	r2, r3, #4
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	9203      	str	r2, [sp, #12]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	bfb8      	it	lt
 800eed0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eed4:	3702      	adds	r7, #2
 800eed6:	9305      	str	r3, [sp, #20]
 800eed8:	4d2e      	ldr	r5, [pc, #184]	; (800ef94 <_svfiprintf_r+0x1e0>)
 800eeda:	7839      	ldrb	r1, [r7, #0]
 800eedc:	2203      	movs	r2, #3
 800eede:	4628      	mov	r0, r5
 800eee0:	f7f1 f996 	bl	8000210 <memchr>
 800eee4:	b138      	cbz	r0, 800eef6 <_svfiprintf_r+0x142>
 800eee6:	2340      	movs	r3, #64	; 0x40
 800eee8:	1b40      	subs	r0, r0, r5
 800eeea:	fa03 f000 	lsl.w	r0, r3, r0
 800eeee:	9b04      	ldr	r3, [sp, #16]
 800eef0:	4303      	orrs	r3, r0
 800eef2:	3701      	adds	r7, #1
 800eef4:	9304      	str	r3, [sp, #16]
 800eef6:	7839      	ldrb	r1, [r7, #0]
 800eef8:	4827      	ldr	r0, [pc, #156]	; (800ef98 <_svfiprintf_r+0x1e4>)
 800eefa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eefe:	2206      	movs	r2, #6
 800ef00:	1c7e      	adds	r6, r7, #1
 800ef02:	f7f1 f985 	bl	8000210 <memchr>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d038      	beq.n	800ef7c <_svfiprintf_r+0x1c8>
 800ef0a:	4b24      	ldr	r3, [pc, #144]	; (800ef9c <_svfiprintf_r+0x1e8>)
 800ef0c:	bb13      	cbnz	r3, 800ef54 <_svfiprintf_r+0x1a0>
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	3307      	adds	r3, #7
 800ef12:	f023 0307 	bic.w	r3, r3, #7
 800ef16:	3308      	adds	r3, #8
 800ef18:	9303      	str	r3, [sp, #12]
 800ef1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef1c:	444b      	add	r3, r9
 800ef1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef20:	e76d      	b.n	800edfe <_svfiprintf_r+0x4a>
 800ef22:	fb05 3202 	mla	r2, r5, r2, r3
 800ef26:	2001      	movs	r0, #1
 800ef28:	460f      	mov	r7, r1
 800ef2a:	e7a6      	b.n	800ee7a <_svfiprintf_r+0xc6>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	3701      	adds	r7, #1
 800ef30:	9305      	str	r3, [sp, #20]
 800ef32:	4619      	mov	r1, r3
 800ef34:	250a      	movs	r5, #10
 800ef36:	4638      	mov	r0, r7
 800ef38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef3c:	3a30      	subs	r2, #48	; 0x30
 800ef3e:	2a09      	cmp	r2, #9
 800ef40:	d903      	bls.n	800ef4a <_svfiprintf_r+0x196>
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0c8      	beq.n	800eed8 <_svfiprintf_r+0x124>
 800ef46:	9105      	str	r1, [sp, #20]
 800ef48:	e7c6      	b.n	800eed8 <_svfiprintf_r+0x124>
 800ef4a:	fb05 2101 	mla	r1, r5, r1, r2
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4607      	mov	r7, r0
 800ef52:	e7f0      	b.n	800ef36 <_svfiprintf_r+0x182>
 800ef54:	ab03      	add	r3, sp, #12
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	4622      	mov	r2, r4
 800ef5a:	4b11      	ldr	r3, [pc, #68]	; (800efa0 <_svfiprintf_r+0x1ec>)
 800ef5c:	a904      	add	r1, sp, #16
 800ef5e:	4640      	mov	r0, r8
 800ef60:	f3af 8000 	nop.w
 800ef64:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef68:	4681      	mov	r9, r0
 800ef6a:	d1d6      	bne.n	800ef1a <_svfiprintf_r+0x166>
 800ef6c:	89a3      	ldrh	r3, [r4, #12]
 800ef6e:	065b      	lsls	r3, r3, #25
 800ef70:	f53f af35 	bmi.w	800edde <_svfiprintf_r+0x2a>
 800ef74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef76:	b01d      	add	sp, #116	; 0x74
 800ef78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7c:	ab03      	add	r3, sp, #12
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	4622      	mov	r2, r4
 800ef82:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <_svfiprintf_r+0x1ec>)
 800ef84:	a904      	add	r1, sp, #16
 800ef86:	4640      	mov	r0, r8
 800ef88:	f000 f882 	bl	800f090 <_printf_i>
 800ef8c:	e7ea      	b.n	800ef64 <_svfiprintf_r+0x1b0>
 800ef8e:	bf00      	nop
 800ef90:	080115bc 	.word	0x080115bc
 800ef94:	080115c2 	.word	0x080115c2
 800ef98:	080115c6 	.word	0x080115c6
 800ef9c:	00000000 	.word	0x00000000
 800efa0:	0800ed01 	.word	0x0800ed01

0800efa4 <_printf_common>:
 800efa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa8:	4691      	mov	r9, r2
 800efaa:	461f      	mov	r7, r3
 800efac:	688a      	ldr	r2, [r1, #8]
 800efae:	690b      	ldr	r3, [r1, #16]
 800efb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efb4:	4293      	cmp	r3, r2
 800efb6:	bfb8      	it	lt
 800efb8:	4613      	movlt	r3, r2
 800efba:	f8c9 3000 	str.w	r3, [r9]
 800efbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efc2:	4606      	mov	r6, r0
 800efc4:	460c      	mov	r4, r1
 800efc6:	b112      	cbz	r2, 800efce <_printf_common+0x2a>
 800efc8:	3301      	adds	r3, #1
 800efca:	f8c9 3000 	str.w	r3, [r9]
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	0699      	lsls	r1, r3, #26
 800efd2:	bf42      	ittt	mi
 800efd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800efd8:	3302      	addmi	r3, #2
 800efda:	f8c9 3000 	strmi.w	r3, [r9]
 800efde:	6825      	ldr	r5, [r4, #0]
 800efe0:	f015 0506 	ands.w	r5, r5, #6
 800efe4:	d107      	bne.n	800eff6 <_printf_common+0x52>
 800efe6:	f104 0a19 	add.w	sl, r4, #25
 800efea:	68e3      	ldr	r3, [r4, #12]
 800efec:	f8d9 2000 	ldr.w	r2, [r9]
 800eff0:	1a9b      	subs	r3, r3, r2
 800eff2:	42ab      	cmp	r3, r5
 800eff4:	dc28      	bgt.n	800f048 <_printf_common+0xa4>
 800eff6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800effa:	6822      	ldr	r2, [r4, #0]
 800effc:	3300      	adds	r3, #0
 800effe:	bf18      	it	ne
 800f000:	2301      	movne	r3, #1
 800f002:	0692      	lsls	r2, r2, #26
 800f004:	d42d      	bmi.n	800f062 <_printf_common+0xbe>
 800f006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f00a:	4639      	mov	r1, r7
 800f00c:	4630      	mov	r0, r6
 800f00e:	47c0      	blx	r8
 800f010:	3001      	adds	r0, #1
 800f012:	d020      	beq.n	800f056 <_printf_common+0xb2>
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	68e5      	ldr	r5, [r4, #12]
 800f018:	f8d9 2000 	ldr.w	r2, [r9]
 800f01c:	f003 0306 	and.w	r3, r3, #6
 800f020:	2b04      	cmp	r3, #4
 800f022:	bf08      	it	eq
 800f024:	1aad      	subeq	r5, r5, r2
 800f026:	68a3      	ldr	r3, [r4, #8]
 800f028:	6922      	ldr	r2, [r4, #16]
 800f02a:	bf0c      	ite	eq
 800f02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f030:	2500      	movne	r5, #0
 800f032:	4293      	cmp	r3, r2
 800f034:	bfc4      	itt	gt
 800f036:	1a9b      	subgt	r3, r3, r2
 800f038:	18ed      	addgt	r5, r5, r3
 800f03a:	f04f 0900 	mov.w	r9, #0
 800f03e:	341a      	adds	r4, #26
 800f040:	454d      	cmp	r5, r9
 800f042:	d11a      	bne.n	800f07a <_printf_common+0xd6>
 800f044:	2000      	movs	r0, #0
 800f046:	e008      	b.n	800f05a <_printf_common+0xb6>
 800f048:	2301      	movs	r3, #1
 800f04a:	4652      	mov	r2, sl
 800f04c:	4639      	mov	r1, r7
 800f04e:	4630      	mov	r0, r6
 800f050:	47c0      	blx	r8
 800f052:	3001      	adds	r0, #1
 800f054:	d103      	bne.n	800f05e <_printf_common+0xba>
 800f056:	f04f 30ff 	mov.w	r0, #4294967295
 800f05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f05e:	3501      	adds	r5, #1
 800f060:	e7c3      	b.n	800efea <_printf_common+0x46>
 800f062:	18e1      	adds	r1, r4, r3
 800f064:	1c5a      	adds	r2, r3, #1
 800f066:	2030      	movs	r0, #48	; 0x30
 800f068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f06c:	4422      	add	r2, r4
 800f06e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f076:	3302      	adds	r3, #2
 800f078:	e7c5      	b.n	800f006 <_printf_common+0x62>
 800f07a:	2301      	movs	r3, #1
 800f07c:	4622      	mov	r2, r4
 800f07e:	4639      	mov	r1, r7
 800f080:	4630      	mov	r0, r6
 800f082:	47c0      	blx	r8
 800f084:	3001      	adds	r0, #1
 800f086:	d0e6      	beq.n	800f056 <_printf_common+0xb2>
 800f088:	f109 0901 	add.w	r9, r9, #1
 800f08c:	e7d8      	b.n	800f040 <_printf_common+0x9c>
	...

0800f090 <_printf_i>:
 800f090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f094:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f098:	460c      	mov	r4, r1
 800f09a:	7e09      	ldrb	r1, [r1, #24]
 800f09c:	b085      	sub	sp, #20
 800f09e:	296e      	cmp	r1, #110	; 0x6e
 800f0a0:	4617      	mov	r7, r2
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	4698      	mov	r8, r3
 800f0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0a8:	f000 80b3 	beq.w	800f212 <_printf_i+0x182>
 800f0ac:	d822      	bhi.n	800f0f4 <_printf_i+0x64>
 800f0ae:	2963      	cmp	r1, #99	; 0x63
 800f0b0:	d036      	beq.n	800f120 <_printf_i+0x90>
 800f0b2:	d80a      	bhi.n	800f0ca <_printf_i+0x3a>
 800f0b4:	2900      	cmp	r1, #0
 800f0b6:	f000 80b9 	beq.w	800f22c <_printf_i+0x19c>
 800f0ba:	2958      	cmp	r1, #88	; 0x58
 800f0bc:	f000 8083 	beq.w	800f1c6 <_printf_i+0x136>
 800f0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f0c8:	e032      	b.n	800f130 <_printf_i+0xa0>
 800f0ca:	2964      	cmp	r1, #100	; 0x64
 800f0cc:	d001      	beq.n	800f0d2 <_printf_i+0x42>
 800f0ce:	2969      	cmp	r1, #105	; 0x69
 800f0d0:	d1f6      	bne.n	800f0c0 <_printf_i+0x30>
 800f0d2:	6820      	ldr	r0, [r4, #0]
 800f0d4:	6813      	ldr	r3, [r2, #0]
 800f0d6:	0605      	lsls	r5, r0, #24
 800f0d8:	f103 0104 	add.w	r1, r3, #4
 800f0dc:	d52a      	bpl.n	800f134 <_printf_i+0xa4>
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6011      	str	r1, [r2, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	da03      	bge.n	800f0ee <_printf_i+0x5e>
 800f0e6:	222d      	movs	r2, #45	; 0x2d
 800f0e8:	425b      	negs	r3, r3
 800f0ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f0ee:	486f      	ldr	r0, [pc, #444]	; (800f2ac <_printf_i+0x21c>)
 800f0f0:	220a      	movs	r2, #10
 800f0f2:	e039      	b.n	800f168 <_printf_i+0xd8>
 800f0f4:	2973      	cmp	r1, #115	; 0x73
 800f0f6:	f000 809d 	beq.w	800f234 <_printf_i+0x1a4>
 800f0fa:	d808      	bhi.n	800f10e <_printf_i+0x7e>
 800f0fc:	296f      	cmp	r1, #111	; 0x6f
 800f0fe:	d020      	beq.n	800f142 <_printf_i+0xb2>
 800f100:	2970      	cmp	r1, #112	; 0x70
 800f102:	d1dd      	bne.n	800f0c0 <_printf_i+0x30>
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	f043 0320 	orr.w	r3, r3, #32
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	e003      	b.n	800f116 <_printf_i+0x86>
 800f10e:	2975      	cmp	r1, #117	; 0x75
 800f110:	d017      	beq.n	800f142 <_printf_i+0xb2>
 800f112:	2978      	cmp	r1, #120	; 0x78
 800f114:	d1d4      	bne.n	800f0c0 <_printf_i+0x30>
 800f116:	2378      	movs	r3, #120	; 0x78
 800f118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f11c:	4864      	ldr	r0, [pc, #400]	; (800f2b0 <_printf_i+0x220>)
 800f11e:	e055      	b.n	800f1cc <_printf_i+0x13c>
 800f120:	6813      	ldr	r3, [r2, #0]
 800f122:	1d19      	adds	r1, r3, #4
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	6011      	str	r1, [r2, #0]
 800f128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f130:	2301      	movs	r3, #1
 800f132:	e08c      	b.n	800f24e <_printf_i+0x1be>
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	6011      	str	r1, [r2, #0]
 800f138:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f13c:	bf18      	it	ne
 800f13e:	b21b      	sxthne	r3, r3
 800f140:	e7cf      	b.n	800f0e2 <_printf_i+0x52>
 800f142:	6813      	ldr	r3, [r2, #0]
 800f144:	6825      	ldr	r5, [r4, #0]
 800f146:	1d18      	adds	r0, r3, #4
 800f148:	6010      	str	r0, [r2, #0]
 800f14a:	0628      	lsls	r0, r5, #24
 800f14c:	d501      	bpl.n	800f152 <_printf_i+0xc2>
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	e002      	b.n	800f158 <_printf_i+0xc8>
 800f152:	0668      	lsls	r0, r5, #25
 800f154:	d5fb      	bpl.n	800f14e <_printf_i+0xbe>
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	4854      	ldr	r0, [pc, #336]	; (800f2ac <_printf_i+0x21c>)
 800f15a:	296f      	cmp	r1, #111	; 0x6f
 800f15c:	bf14      	ite	ne
 800f15e:	220a      	movne	r2, #10
 800f160:	2208      	moveq	r2, #8
 800f162:	2100      	movs	r1, #0
 800f164:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f168:	6865      	ldr	r5, [r4, #4]
 800f16a:	60a5      	str	r5, [r4, #8]
 800f16c:	2d00      	cmp	r5, #0
 800f16e:	f2c0 8095 	blt.w	800f29c <_printf_i+0x20c>
 800f172:	6821      	ldr	r1, [r4, #0]
 800f174:	f021 0104 	bic.w	r1, r1, #4
 800f178:	6021      	str	r1, [r4, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d13d      	bne.n	800f1fa <_printf_i+0x16a>
 800f17e:	2d00      	cmp	r5, #0
 800f180:	f040 808e 	bne.w	800f2a0 <_printf_i+0x210>
 800f184:	4665      	mov	r5, ip
 800f186:	2a08      	cmp	r2, #8
 800f188:	d10b      	bne.n	800f1a2 <_printf_i+0x112>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	07db      	lsls	r3, r3, #31
 800f18e:	d508      	bpl.n	800f1a2 <_printf_i+0x112>
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	6862      	ldr	r2, [r4, #4]
 800f194:	429a      	cmp	r2, r3
 800f196:	bfde      	ittt	le
 800f198:	2330      	movle	r3, #48	; 0x30
 800f19a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f19e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1a2:	ebac 0305 	sub.w	r3, ip, r5
 800f1a6:	6123      	str	r3, [r4, #16]
 800f1a8:	f8cd 8000 	str.w	r8, [sp]
 800f1ac:	463b      	mov	r3, r7
 800f1ae:	aa03      	add	r2, sp, #12
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7ff fef6 	bl	800efa4 <_printf_common>
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d14d      	bne.n	800f258 <_printf_i+0x1c8>
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c0:	b005      	add	sp, #20
 800f1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1c6:	4839      	ldr	r0, [pc, #228]	; (800f2ac <_printf_i+0x21c>)
 800f1c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f1cc:	6813      	ldr	r3, [r2, #0]
 800f1ce:	6821      	ldr	r1, [r4, #0]
 800f1d0:	1d1d      	adds	r5, r3, #4
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	6015      	str	r5, [r2, #0]
 800f1d6:	060a      	lsls	r2, r1, #24
 800f1d8:	d50b      	bpl.n	800f1f2 <_printf_i+0x162>
 800f1da:	07ca      	lsls	r2, r1, #31
 800f1dc:	bf44      	itt	mi
 800f1de:	f041 0120 	orrmi.w	r1, r1, #32
 800f1e2:	6021      	strmi	r1, [r4, #0]
 800f1e4:	b91b      	cbnz	r3, 800f1ee <_printf_i+0x15e>
 800f1e6:	6822      	ldr	r2, [r4, #0]
 800f1e8:	f022 0220 	bic.w	r2, r2, #32
 800f1ec:	6022      	str	r2, [r4, #0]
 800f1ee:	2210      	movs	r2, #16
 800f1f0:	e7b7      	b.n	800f162 <_printf_i+0xd2>
 800f1f2:	064d      	lsls	r5, r1, #25
 800f1f4:	bf48      	it	mi
 800f1f6:	b29b      	uxthmi	r3, r3
 800f1f8:	e7ef      	b.n	800f1da <_printf_i+0x14a>
 800f1fa:	4665      	mov	r5, ip
 800f1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f200:	fb02 3311 	mls	r3, r2, r1, r3
 800f204:	5cc3      	ldrb	r3, [r0, r3]
 800f206:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f20a:	460b      	mov	r3, r1
 800f20c:	2900      	cmp	r1, #0
 800f20e:	d1f5      	bne.n	800f1fc <_printf_i+0x16c>
 800f210:	e7b9      	b.n	800f186 <_printf_i+0xf6>
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	6825      	ldr	r5, [r4, #0]
 800f216:	6961      	ldr	r1, [r4, #20]
 800f218:	1d18      	adds	r0, r3, #4
 800f21a:	6010      	str	r0, [r2, #0]
 800f21c:	0628      	lsls	r0, r5, #24
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	d501      	bpl.n	800f226 <_printf_i+0x196>
 800f222:	6019      	str	r1, [r3, #0]
 800f224:	e002      	b.n	800f22c <_printf_i+0x19c>
 800f226:	066a      	lsls	r2, r5, #25
 800f228:	d5fb      	bpl.n	800f222 <_printf_i+0x192>
 800f22a:	8019      	strh	r1, [r3, #0]
 800f22c:	2300      	movs	r3, #0
 800f22e:	6123      	str	r3, [r4, #16]
 800f230:	4665      	mov	r5, ip
 800f232:	e7b9      	b.n	800f1a8 <_printf_i+0x118>
 800f234:	6813      	ldr	r3, [r2, #0]
 800f236:	1d19      	adds	r1, r3, #4
 800f238:	6011      	str	r1, [r2, #0]
 800f23a:	681d      	ldr	r5, [r3, #0]
 800f23c:	6862      	ldr	r2, [r4, #4]
 800f23e:	2100      	movs	r1, #0
 800f240:	4628      	mov	r0, r5
 800f242:	f7f0 ffe5 	bl	8000210 <memchr>
 800f246:	b108      	cbz	r0, 800f24c <_printf_i+0x1bc>
 800f248:	1b40      	subs	r0, r0, r5
 800f24a:	6060      	str	r0, [r4, #4]
 800f24c:	6863      	ldr	r3, [r4, #4]
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	2300      	movs	r3, #0
 800f252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f256:	e7a7      	b.n	800f1a8 <_printf_i+0x118>
 800f258:	6923      	ldr	r3, [r4, #16]
 800f25a:	462a      	mov	r2, r5
 800f25c:	4639      	mov	r1, r7
 800f25e:	4630      	mov	r0, r6
 800f260:	47c0      	blx	r8
 800f262:	3001      	adds	r0, #1
 800f264:	d0aa      	beq.n	800f1bc <_printf_i+0x12c>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	079b      	lsls	r3, r3, #30
 800f26a:	d413      	bmi.n	800f294 <_printf_i+0x204>
 800f26c:	68e0      	ldr	r0, [r4, #12]
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	4298      	cmp	r0, r3
 800f272:	bfb8      	it	lt
 800f274:	4618      	movlt	r0, r3
 800f276:	e7a3      	b.n	800f1c0 <_printf_i+0x130>
 800f278:	2301      	movs	r3, #1
 800f27a:	464a      	mov	r2, r9
 800f27c:	4639      	mov	r1, r7
 800f27e:	4630      	mov	r0, r6
 800f280:	47c0      	blx	r8
 800f282:	3001      	adds	r0, #1
 800f284:	d09a      	beq.n	800f1bc <_printf_i+0x12c>
 800f286:	3501      	adds	r5, #1
 800f288:	68e3      	ldr	r3, [r4, #12]
 800f28a:	9a03      	ldr	r2, [sp, #12]
 800f28c:	1a9b      	subs	r3, r3, r2
 800f28e:	42ab      	cmp	r3, r5
 800f290:	dcf2      	bgt.n	800f278 <_printf_i+0x1e8>
 800f292:	e7eb      	b.n	800f26c <_printf_i+0x1dc>
 800f294:	2500      	movs	r5, #0
 800f296:	f104 0919 	add.w	r9, r4, #25
 800f29a:	e7f5      	b.n	800f288 <_printf_i+0x1f8>
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1ac      	bne.n	800f1fa <_printf_i+0x16a>
 800f2a0:	7803      	ldrb	r3, [r0, #0]
 800f2a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2aa:	e76c      	b.n	800f186 <_printf_i+0xf6>
 800f2ac:	080115cd 	.word	0x080115cd
 800f2b0:	080115de 	.word	0x080115de

0800f2b4 <memmove>:
 800f2b4:	4288      	cmp	r0, r1
 800f2b6:	b510      	push	{r4, lr}
 800f2b8:	eb01 0302 	add.w	r3, r1, r2
 800f2bc:	d807      	bhi.n	800f2ce <memmove+0x1a>
 800f2be:	1e42      	subs	r2, r0, #1
 800f2c0:	4299      	cmp	r1, r3
 800f2c2:	d00a      	beq.n	800f2da <memmove+0x26>
 800f2c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f2cc:	e7f8      	b.n	800f2c0 <memmove+0xc>
 800f2ce:	4283      	cmp	r3, r0
 800f2d0:	d9f5      	bls.n	800f2be <memmove+0xa>
 800f2d2:	1881      	adds	r1, r0, r2
 800f2d4:	1ad2      	subs	r2, r2, r3
 800f2d6:	42d3      	cmn	r3, r2
 800f2d8:	d100      	bne.n	800f2dc <memmove+0x28>
 800f2da:	bd10      	pop	{r4, pc}
 800f2dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f2e4:	e7f7      	b.n	800f2d6 <memmove+0x22>
	...

0800f2e8 <_free_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4605      	mov	r5, r0
 800f2ec:	2900      	cmp	r1, #0
 800f2ee:	d045      	beq.n	800f37c <_free_r+0x94>
 800f2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2f4:	1f0c      	subs	r4, r1, #4
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bfb8      	it	lt
 800f2fa:	18e4      	addlt	r4, r4, r3
 800f2fc:	f000 f8d2 	bl	800f4a4 <__malloc_lock>
 800f300:	4a1f      	ldr	r2, [pc, #124]	; (800f380 <_free_r+0x98>)
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	4610      	mov	r0, r2
 800f306:	b933      	cbnz	r3, 800f316 <_free_r+0x2e>
 800f308:	6063      	str	r3, [r4, #4]
 800f30a:	6014      	str	r4, [r2, #0]
 800f30c:	4628      	mov	r0, r5
 800f30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f312:	f000 b8c8 	b.w	800f4a6 <__malloc_unlock>
 800f316:	42a3      	cmp	r3, r4
 800f318:	d90c      	bls.n	800f334 <_free_r+0x4c>
 800f31a:	6821      	ldr	r1, [r4, #0]
 800f31c:	1862      	adds	r2, r4, r1
 800f31e:	4293      	cmp	r3, r2
 800f320:	bf04      	itt	eq
 800f322:	681a      	ldreq	r2, [r3, #0]
 800f324:	685b      	ldreq	r3, [r3, #4]
 800f326:	6063      	str	r3, [r4, #4]
 800f328:	bf04      	itt	eq
 800f32a:	1852      	addeq	r2, r2, r1
 800f32c:	6022      	streq	r2, [r4, #0]
 800f32e:	6004      	str	r4, [r0, #0]
 800f330:	e7ec      	b.n	800f30c <_free_r+0x24>
 800f332:	4613      	mov	r3, r2
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	b10a      	cbz	r2, 800f33c <_free_r+0x54>
 800f338:	42a2      	cmp	r2, r4
 800f33a:	d9fa      	bls.n	800f332 <_free_r+0x4a>
 800f33c:	6819      	ldr	r1, [r3, #0]
 800f33e:	1858      	adds	r0, r3, r1
 800f340:	42a0      	cmp	r0, r4
 800f342:	d10b      	bne.n	800f35c <_free_r+0x74>
 800f344:	6820      	ldr	r0, [r4, #0]
 800f346:	4401      	add	r1, r0
 800f348:	1858      	adds	r0, r3, r1
 800f34a:	4282      	cmp	r2, r0
 800f34c:	6019      	str	r1, [r3, #0]
 800f34e:	d1dd      	bne.n	800f30c <_free_r+0x24>
 800f350:	6810      	ldr	r0, [r2, #0]
 800f352:	6852      	ldr	r2, [r2, #4]
 800f354:	605a      	str	r2, [r3, #4]
 800f356:	4401      	add	r1, r0
 800f358:	6019      	str	r1, [r3, #0]
 800f35a:	e7d7      	b.n	800f30c <_free_r+0x24>
 800f35c:	d902      	bls.n	800f364 <_free_r+0x7c>
 800f35e:	230c      	movs	r3, #12
 800f360:	602b      	str	r3, [r5, #0]
 800f362:	e7d3      	b.n	800f30c <_free_r+0x24>
 800f364:	6820      	ldr	r0, [r4, #0]
 800f366:	1821      	adds	r1, r4, r0
 800f368:	428a      	cmp	r2, r1
 800f36a:	bf04      	itt	eq
 800f36c:	6811      	ldreq	r1, [r2, #0]
 800f36e:	6852      	ldreq	r2, [r2, #4]
 800f370:	6062      	str	r2, [r4, #4]
 800f372:	bf04      	itt	eq
 800f374:	1809      	addeq	r1, r1, r0
 800f376:	6021      	streq	r1, [r4, #0]
 800f378:	605c      	str	r4, [r3, #4]
 800f37a:	e7c7      	b.n	800f30c <_free_r+0x24>
 800f37c:	bd38      	pop	{r3, r4, r5, pc}
 800f37e:	bf00      	nop
 800f380:	200086f4 	.word	0x200086f4

0800f384 <_malloc_r>:
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	1ccd      	adds	r5, r1, #3
 800f388:	f025 0503 	bic.w	r5, r5, #3
 800f38c:	3508      	adds	r5, #8
 800f38e:	2d0c      	cmp	r5, #12
 800f390:	bf38      	it	cc
 800f392:	250c      	movcc	r5, #12
 800f394:	2d00      	cmp	r5, #0
 800f396:	4606      	mov	r6, r0
 800f398:	db01      	blt.n	800f39e <_malloc_r+0x1a>
 800f39a:	42a9      	cmp	r1, r5
 800f39c:	d903      	bls.n	800f3a6 <_malloc_r+0x22>
 800f39e:	230c      	movs	r3, #12
 800f3a0:	6033      	str	r3, [r6, #0]
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
 800f3a6:	f000 f87d 	bl	800f4a4 <__malloc_lock>
 800f3aa:	4a21      	ldr	r2, [pc, #132]	; (800f430 <_malloc_r+0xac>)
 800f3ac:	6814      	ldr	r4, [r2, #0]
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	b991      	cbnz	r1, 800f3d8 <_malloc_r+0x54>
 800f3b2:	4c20      	ldr	r4, [pc, #128]	; (800f434 <_malloc_r+0xb0>)
 800f3b4:	6823      	ldr	r3, [r4, #0]
 800f3b6:	b91b      	cbnz	r3, 800f3c0 <_malloc_r+0x3c>
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f863 	bl	800f484 <_sbrk_r>
 800f3be:	6020      	str	r0, [r4, #0]
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f000 f85e 	bl	800f484 <_sbrk_r>
 800f3c8:	1c43      	adds	r3, r0, #1
 800f3ca:	d124      	bne.n	800f416 <_malloc_r+0x92>
 800f3cc:	230c      	movs	r3, #12
 800f3ce:	6033      	str	r3, [r6, #0]
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f000 f868 	bl	800f4a6 <__malloc_unlock>
 800f3d6:	e7e4      	b.n	800f3a2 <_malloc_r+0x1e>
 800f3d8:	680b      	ldr	r3, [r1, #0]
 800f3da:	1b5b      	subs	r3, r3, r5
 800f3dc:	d418      	bmi.n	800f410 <_malloc_r+0x8c>
 800f3de:	2b0b      	cmp	r3, #11
 800f3e0:	d90f      	bls.n	800f402 <_malloc_r+0x7e>
 800f3e2:	600b      	str	r3, [r1, #0]
 800f3e4:	50cd      	str	r5, [r1, r3]
 800f3e6:	18cc      	adds	r4, r1, r3
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f000 f85c 	bl	800f4a6 <__malloc_unlock>
 800f3ee:	f104 000b 	add.w	r0, r4, #11
 800f3f2:	1d23      	adds	r3, r4, #4
 800f3f4:	f020 0007 	bic.w	r0, r0, #7
 800f3f8:	1ac3      	subs	r3, r0, r3
 800f3fa:	d0d3      	beq.n	800f3a4 <_malloc_r+0x20>
 800f3fc:	425a      	negs	r2, r3
 800f3fe:	50e2      	str	r2, [r4, r3]
 800f400:	e7d0      	b.n	800f3a4 <_malloc_r+0x20>
 800f402:	428c      	cmp	r4, r1
 800f404:	684b      	ldr	r3, [r1, #4]
 800f406:	bf16      	itet	ne
 800f408:	6063      	strne	r3, [r4, #4]
 800f40a:	6013      	streq	r3, [r2, #0]
 800f40c:	460c      	movne	r4, r1
 800f40e:	e7eb      	b.n	800f3e8 <_malloc_r+0x64>
 800f410:	460c      	mov	r4, r1
 800f412:	6849      	ldr	r1, [r1, #4]
 800f414:	e7cc      	b.n	800f3b0 <_malloc_r+0x2c>
 800f416:	1cc4      	adds	r4, r0, #3
 800f418:	f024 0403 	bic.w	r4, r4, #3
 800f41c:	42a0      	cmp	r0, r4
 800f41e:	d005      	beq.n	800f42c <_malloc_r+0xa8>
 800f420:	1a21      	subs	r1, r4, r0
 800f422:	4630      	mov	r0, r6
 800f424:	f000 f82e 	bl	800f484 <_sbrk_r>
 800f428:	3001      	adds	r0, #1
 800f42a:	d0cf      	beq.n	800f3cc <_malloc_r+0x48>
 800f42c:	6025      	str	r5, [r4, #0]
 800f42e:	e7db      	b.n	800f3e8 <_malloc_r+0x64>
 800f430:	200086f4 	.word	0x200086f4
 800f434:	200086f8 	.word	0x200086f8

0800f438 <_realloc_r>:
 800f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43a:	4607      	mov	r7, r0
 800f43c:	4614      	mov	r4, r2
 800f43e:	460e      	mov	r6, r1
 800f440:	b921      	cbnz	r1, 800f44c <_realloc_r+0x14>
 800f442:	4611      	mov	r1, r2
 800f444:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f448:	f7ff bf9c 	b.w	800f384 <_malloc_r>
 800f44c:	b922      	cbnz	r2, 800f458 <_realloc_r+0x20>
 800f44e:	f7ff ff4b 	bl	800f2e8 <_free_r>
 800f452:	4625      	mov	r5, r4
 800f454:	4628      	mov	r0, r5
 800f456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f458:	f000 f826 	bl	800f4a8 <_malloc_usable_size_r>
 800f45c:	42a0      	cmp	r0, r4
 800f45e:	d20f      	bcs.n	800f480 <_realloc_r+0x48>
 800f460:	4621      	mov	r1, r4
 800f462:	4638      	mov	r0, r7
 800f464:	f7ff ff8e 	bl	800f384 <_malloc_r>
 800f468:	4605      	mov	r5, r0
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d0f2      	beq.n	800f454 <_realloc_r+0x1c>
 800f46e:	4631      	mov	r1, r6
 800f470:	4622      	mov	r2, r4
 800f472:	f7ff fc11 	bl	800ec98 <memcpy>
 800f476:	4631      	mov	r1, r6
 800f478:	4638      	mov	r0, r7
 800f47a:	f7ff ff35 	bl	800f2e8 <_free_r>
 800f47e:	e7e9      	b.n	800f454 <_realloc_r+0x1c>
 800f480:	4635      	mov	r5, r6
 800f482:	e7e7      	b.n	800f454 <_realloc_r+0x1c>

0800f484 <_sbrk_r>:
 800f484:	b538      	push	{r3, r4, r5, lr}
 800f486:	4c06      	ldr	r4, [pc, #24]	; (800f4a0 <_sbrk_r+0x1c>)
 800f488:	2300      	movs	r3, #0
 800f48a:	4605      	mov	r5, r0
 800f48c:	4608      	mov	r0, r1
 800f48e:	6023      	str	r3, [r4, #0]
 800f490:	f7f6 fa1c 	bl	80058cc <_sbrk>
 800f494:	1c43      	adds	r3, r0, #1
 800f496:	d102      	bne.n	800f49e <_sbrk_r+0x1a>
 800f498:	6823      	ldr	r3, [r4, #0]
 800f49a:	b103      	cbz	r3, 800f49e <_sbrk_r+0x1a>
 800f49c:	602b      	str	r3, [r5, #0]
 800f49e:	bd38      	pop	{r3, r4, r5, pc}
 800f4a0:	20008de0 	.word	0x20008de0

0800f4a4 <__malloc_lock>:
 800f4a4:	4770      	bx	lr

0800f4a6 <__malloc_unlock>:
 800f4a6:	4770      	bx	lr

0800f4a8 <_malloc_usable_size_r>:
 800f4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4ac:	1f18      	subs	r0, r3, #4
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bfbc      	itt	lt
 800f4b2:	580b      	ldrlt	r3, [r1, r0]
 800f4b4:	18c0      	addlt	r0, r0, r3
 800f4b6:	4770      	bx	lr

0800f4b8 <_init>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	bf00      	nop
 800f4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4be:	bc08      	pop	{r3}
 800f4c0:	469e      	mov	lr, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <_fini>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	bf00      	nop
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr
